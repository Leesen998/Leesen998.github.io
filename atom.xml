<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QJun</title>
  
  <subtitle>QJun&#39;s Homepage</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leesen998.github.io/"/>
  <updated>2018-10-23T07:40:31.112Z</updated>
  <id>https://leesen998.github.io/</id>
  
  <author>
    <name>QJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello</title>
    <link href="https://leesen998.github.io/2017/10/03/hello-world/"/>
    <id>https://leesen998.github.io/2017/10/03/hello-world/</id>
    <published>2017-10-03T02:41:53.000Z</published>
    <updated>2018-10-23T07:40:31.112Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1700x900" alt="" style="width:100%"><br>只是单纯地发个图片<br><a id="more"></a></p><pre><code>hexo deploy11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111hexo deploy</code></pre><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1700x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;只是单纯地发个图片&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="first test" scheme="https://leesen998.github.io/categories/first-test/"/>
    
    
      <category term="test" scheme="https://leesen998.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础17(List接口,Set接口,哈希表)</title>
    <link href="https://leesen998.github.io/2016/10/28/day19%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/28/day19笔记/</id>
    <published>2016-10-28T01:48:29.000Z</published>
    <updated>2018-11-28T01:40:02.457Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368661/samples/java%20files/photo-1541904563-aa0331e9f99a.jpg" alt="" style="width:100%"></p><p>1、List接口<br>2、ArrayList集合、LinkedList集合<br>3、LinkedHashSet集合<br>4、Set接口<br>5、哈希表<br>6、判断集合唯一性原理</p><a id="more"></a><h3 id="01List接口的特点"><a href="#01List接口的特点" class="headerlink" title="01List接口的特点"></a>01List接口的特点</h3><pre><code>A:List接口的特点: a:它是一个元素存取有序的集合。      例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。 b:它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。    c:集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。   d:List接口的常用子类有：    ArrayList集合    LinkedList集合</code></pre><h3 id="02List接口的特有方法"><a href="#02List接口的特有方法" class="headerlink" title="02List接口的特有方法"></a>02List接口的特有方法</h3><pre><code>  A:List接口的特有方法(带索引的方法) a:增加元素方法 add(Object e)：向集合末尾处，添加指定的元素  add(int index, Object e)   向集合指定索引处，添加指定的元素，原有元素依次后移   /*     *  add(int index, E)     *  将元素插入到列表的指定索引上     *  带有索引的操作,防止越界问题     *  java.lang.IndexOutOfBoundsException     *     ArrayIndexOutOfBoundsException     *     StringIndexOutOfBoundsException     */    public static void function(){      List&lt;String&gt; list = new ArrayList&lt;String&gt;();      list.add(&quot;abc1&quot;);      list.add(&quot;abc2&quot;);      list.add(&quot;abc3&quot;);      list.add(&quot;abc4&quot;);      System.out.println(list);      list.add(1, &quot;itcast&quot;);      System.out.println(list);    } b:删除元素删除 remove(Object e)：将指定元素对象，从集合中删除，返回值为被删除的元素 remove(int index)：将指定索引处的元素，从集合中删除，返回值为被删除的元素   /*     *  E remove(int index)     *  移除指定索引上的元素     *  返回被删除之前的元素     */    public static void function_1(){      List&lt;Double&gt; list = new ArrayList&lt;Double&gt;();      list.add(1.1);      list.add(1.2);      list.add(1.3);      list.add(1.4);      Double d = list.remove(0);      System.out.println(d);      System.out.println(list);    } c:替换元素方法 set(int index, Object e)：将指定索引处的元素，替换成指定的元素，返回值为替换前的元素    /*     *  E set(int index, E)     *  修改指定索引上的元素     *  返回被修改之前的元素     */    public static void function_2(){      List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();      list.add(1);      list.add(2);      list.add(3);      list.add(4);      Integer i = list.set(0, 5);      System.out.println(i);      System.out.println(list);    }  d:查询元素方法 get(int index)：获取指定索引处的元素，并返回该元素</code></pre><h3 id="03迭代器的并发修改异常"><a href="#03迭代器的并发修改异常" class="headerlink" title="03迭代器的并发修改异常"></a>03迭代器的并发修改异常</h3><pre><code>A:迭代器的并发修改异常 /*  *  迭代器的并发修改异常 java.util.ConcurrentModificationException  *  就是在遍历的过程中,使用了集合方法修改了集合的长度,不允许的  */ public class ListDemo1 {  public static void main(String[] args) {    List&lt;String&gt; list = new ArrayList&lt;String&gt;();    list.add(&quot;abc1&quot;);    list.add(&quot;abc2&quot;);    list.add(&quot;abc3&quot;);    list.add(&quot;abc4&quot;);    //对集合使用迭代器进行获取,获取时候判断集合中是否存在 &quot;abc3&quot;对象    //如果有,添加一个元素 &quot;ABC3&quot;    Iterator&lt;String&gt; it = list.iterator();    while(it.hasNext()){      String s = it.next();      //对获取出的元素s,进行判断,是不是有&quot;abc3&quot;      if(s.equals(&quot;abc3&quot;)){        list.add(&quot;ABC3&quot;);      }      System.out.println(s);    }  } } 运行上述代码发生了错误 java.util.ConcurrentModificationException这是什么原因呢？   在迭代过程中，使用了集合的方法对元素进行操作。   导致迭代器并不知道集合中的变化，容易引发数据的不确定性。 并发修改异常解决办法：    在迭代时，不要使用集合的方法操作元素。    或者通过ListIterator迭代器操作元素是可以的，ListIterator的出现，解决了使用Iterator迭代过程中可能会发生的错误情况。</code></pre><h3 id="04数据的存储结构"><a href="#04数据的存储结构" class="headerlink" title="04数据的存储结构"></a>04数据的存储结构</h3><pre><code>A:数据的存储结构 a:栈结构:后进先出/先进后出(手枪弹夹) FILO (first in last out) b:队列结构:先进先出/后进后出(银行排队) FIFO(first in first out) c:数组结构:           查询快:通过索引快速找到元素           增删慢:每次增删都需要开辟新的数组,将老数组中的元素拷贝到新数组中                  开辟新数组耗费资源 d:链表结构           查询慢:每次都需要从链头或者链尾找起           增删快:只需要修改元素记录的下个元素的地址值即可不需要移动大量元素</code></pre><h3 id="05ArrayList集合的自身特点"><a href="#05ArrayList集合的自身特点" class="headerlink" title="05ArrayList集合的自身特点"></a>05ArrayList集合的自身特点</h3><p>   A:ArrayList集合的自身特点<br>     底层采用的是数组结构<br>     ArrayList al=new ArrayList();//创建了一个长度为0的Object类型数组<br>     al.add(“abc”);//底层会创建一个长度为10的Object数组 Object[] obj=new Object[10]<br>                   //obj[0]=”abc”<br>                  //如果添加的元素的超过10个,底层会开辟一个1.5*10的长度的新数组<br>                  //把原数组中的元素拷贝到新数组,再把最后一个元素添加到新数组中<br>   原数组:<br>     a b c d e f g h k l<br>   添加m:<br>     a b c d e f g h k l m null null null null</p><h3 id="06LinkedList集合的自身特点"><a href="#06LinkedList集合的自身特点" class="headerlink" title="06LinkedList集合的自身特点"></a>06LinkedList集合的自身特点</h3><p>  A:LinkedList集合的自身特点<br>     底层采用链表结构,每次查询都要从链头或链尾找起,查询相对数组较慢<br>     但是删除直接修改元素记录的地址值即可,不要大量移动元素</p><pre><code>LinkedList的索引决定是从链头开始找还是从链尾开始找如果该元素小于元素长度一半,从链头开始找起,如果大于元素长度的一半,则从链尾找起</code></pre><h3 id="07LinkedList特有方法"><a href="#07LinkedList特有方法" class="headerlink" title="07LinkedList特有方法"></a>07LinkedList特有方法</h3><p>   <em>A:LinkedList特有方法:获取,添加,删除<br>       /</em></p><pre><code> *  LinkedList 链表集合的特有功能 *    自身特点: 链表底层实现,查询慢,增删快 *   *  子类的特有功能,不能多态调用 */public class LinkedListDemo {  public static void main(String[] args) {    function_3();  }  /*   *  E removeFirst() 移除并返回链表的开头   *  E removeLast() 移除并返回链表的结尾   */  public static void function_3(){    LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();    link.add(&quot;1&quot;);    link.add(&quot;2&quot;);    link.add(&quot;3&quot;);    link.add(&quot;4&quot;);    String first = link.removeFirst();    String last = link.removeLast();    System.out.println(first);    System.out.println(last);    System.out.println(link);  }  /*   * E getFirst() 获取链表的开头   * E getLast() 获取链表的结尾   */  public static void function_2(){    LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();    link.add(&quot;1&quot;);    link.add(&quot;2&quot;);    link.add(&quot;3&quot;);    link.add(&quot;4&quot;);    if(!link.isEmpty()){      String first = link.getFirst();      String last = link.getLast();      System.out.println(first);      System.out.println(last);    }  }  public static void function_1(){    LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();    link.addLast(&quot;a&quot;);    link.addLast(&quot;b&quot;);    link.addLast(&quot;c&quot;);    link.addLast(&quot;d&quot;);    link.addFirst(&quot;1&quot;);    link.addFirst(&quot;2&quot;);    link.addFirst(&quot;3&quot;);    System.out.println(link);  }  /*   *  addFirst(E) 添加到链表的开头   *  addLast(E) 添加到链表的结尾   */  public static void function(){    LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();    link.addLast(&quot;heima&quot;);    link.add(&quot;abc&quot;);    link.add(&quot;bcd&quot;);    link.addFirst(&quot;itcast&quot;);    System.out.println(link);  }}</code></pre><h3 id="08Vector类的特点"><a href="#08Vector类的特点" class="headerlink" title="08Vector类的特点"></a>08Vector类的特点</h3><p>   *A:Vector类的特点<br>       Vector集合数据存储的结构是数组结构，为JDK中最早提供的集合,它是线程同步的<br>       Vector中提供了一个独特的取出方式，就是枚举Enumeration，它其实就是早期的迭代器。<br>       此接口Enumeration的功能与 Iterator 接口的功能是类似的。<br>       Vector集合已被ArrayList替代。枚举Enumeration已被迭代器Iterator替代。</p><h3 id="09Set接口的特点"><a href="#09Set接口的特点" class="headerlink" title="09Set接口的特点"></a>09Set接口的特点</h3><p>   A:Set接口的特点<br>     a:它是个不包含重复元素的集合。<br>     b:Set集合取出元素的方式可以采用：迭代器、增强for。<br>     c:Set集合有多个子类，这里我们介绍其中的HashSet、LinkedHashSet这两个集合。</p><h3 id="10Set集合存储和迭代"><a href="#10Set集合存储和迭代" class="headerlink" title="10Set集合存储和迭代"></a>10Set集合存储和迭代</h3><p>   A:Set集合存储和迭代<br>      /*</p><pre><code> *  Set接口,特点不重复元素,没索引 *   *  Set接口的实现类,HashSet (哈希表) *  特点: 无序集合,存储和取出的顺序不同,没有索引,不存储重复元素 *  代码的编写上,和ArrayList完全一致 */public class HashSetDemo {  public static void main(String[] args) {    Set&lt;String&gt; set = new HashSet&lt;String&gt;();    set.add(&quot;cn&quot;);    set.add(&quot;heima&quot;);    set.add(&quot;java&quot;);    set.add(&quot;java&quot;);    set.add(&quot;itcast&quot;);    Iterator&lt;String&gt; it = set.iterator();    while(it.hasNext()){      System.out.println(it.next());    }    System.out.println(&quot;==============&quot;);    for(String s : set){      System.out.println(s);    }  }}</code></pre><h3 id="11哈希表的数据结构"><a href="#11哈希表的数据结构" class="headerlink" title="11哈希表的数据结构"></a>11哈希表的数据结构</h3><pre><code>A:哈希表的数据结构:(参见图解)    加载因子:表中填入的记录数/哈希表的长度    例如:    加载因子是0.75 代表:      数组中的16个位置,其中存入16*0.75=12个元素    如果在存入第十三个(&gt;12)元素,导致存储链子过长,会降低哈希表的性能,那么此时会扩充哈希表(在哈希),底层会开辟一个长度为原长度2倍的数组,把老元素拷贝到新数组中,再把新元素添加数组中    当存入元素数量&gt;哈希表长度*加载因子,就要扩容,因此加载因子决定扩容时机</code></pre><h3 id="12字符串对象的哈希值"><a href="#12字符串对象的哈希值" class="headerlink" title="12字符串对象的哈希值"></a>12字符串对象的哈希值</h3><pre><code>A:字符串对象的哈希值/* *  对象的哈希值,普通的十进制整数 *  父类Object,方法 public int hashCode() 计算结果int整数 */public class HashDemo {  public static void main(String[] args) {    Person p = new Person();    int i = p.hashCode();    System.out.println(i);    String s1 = new String(&quot;abc&quot;);    String s2 = new String(&quot;abc&quot;);    System.out.println(s1.hashCode());    System.out.println(s2.hashCode());    /*System.out.println(&quot;重地&quot;.hashCode());    System.out.println(&quot;通话&quot;.hashCode());*/  }}//String类重写hashCode()方法//字符串都会存储在底层的value数组中{&apos;a&apos;,&apos;b&apos;,&apos;c&apos;}public int hashCode() {        int h = hash;//hash初值为0        if (h == 0 &amp;&amp; value.length &gt; 0) {            char val[] = value;            for (int i = 0; i &lt; value.length; i++) {                h = 31 * h + val[i];            }            hash = h;        }        return h;    }</code></pre><h3 id="13哈希表的存储过程"><a href="#13哈希表的存储过程" class="headerlink" title="13哈希表的存储过程"></a>13哈希表的存储过程</h3><p>   A:哈希表的存储过程<br>     public static void main(String[] args) {<br>        HashSet<string> set = new HashSet<string>();<br>        set.add(new String(“abc”));<br>        set.add(new String(“abc”));<br>        set.add(new String(“bbc”));<br>        set.add(new String(“bbc”));<br>        System.out.println(set);<br>    }</string></string></p><p>  存取原理:<br>    每存入一个新的元素都要走以下三步:</p><pre><code>1.首先调用本类的hashCode()方法算出哈希值2.在容器中找是否与新元素哈希值相同的老元素,  如果没有直接存入  如果有转到第三步3.新元素会与该索引位置下的老元素利用equals方法一一对比  一旦新元素.equals(老元素)返回true,停止对比,说明重复,不再存入  如果与该索引位置下的老元素都通过equals方法对比返回false,说明没有重复,存入</code></pre><h3 id="14哈希表的存储自定义对象"><a href="#14哈希表的存储自定义对象" class="headerlink" title="14哈希表的存储自定义对象"></a>14哈希表的存储自定义对象</h3><p>   A:哈希表的存储自定义对象<br>     /*</p><pre><code>  *  HashSet集合的自身特点:  *    底层数据结构,哈希表  *    存储,取出都比较快  *    线程不安全,运行速度快  */ public class HashSetDemo1 {  public static void main(String[] args) {    //将Person对象中的姓名,年龄,相同数据,看作同一个对象    //判断对象是否重复,依赖对象自己的方法 hashCode,equals    HashSet&lt;Person&gt; setPerson = new HashSet&lt;Person&gt;();    setPerson.add(new Person(&quot;a&quot;,11));    setPerson.add(new Person(&quot;b&quot;,10));    setPerson.add(new Person(&quot;b&quot;,10));    setPerson.add(new Person(&quot;c&quot;,25));    setPerson.add(new Person(&quot;d&quot;,19));    setPerson.add(new Person(&quot;e&quot;,17));//每个对象的地址值都不同,调用Obejct类的hashCode方法返回不同哈希值,直接存入    System.out.println(setPerson);  } }public class Person {  private String name;  private int age;  public String getName() {    return name;  }  public void setName(String name) {    this.name = name;  }  public int getAge() {    return age;  }  public void setAge(int age) {    this.age = age;  }  public Person(String name, int age) {    super();    this.name = name;    this.age = age;  }  public Person(){}  public String toString(){    return name+&quot;..&quot;+age;  } }</code></pre><h3 id="15自定义对象重写hashCode和equals"><a href="#15自定义对象重写hashCode和equals" class="headerlink" title="15自定义对象重写hashCode和equals"></a>15自定义对象重写hashCode和equals</h3><pre><code>A:自定义对象重写hashCode和equals /*     *  HashSet集合的自身特点:     *    底层数据结构,哈希表     *    存储,取出都比较快     *    线程不安全,运行速度快     */    public class HashSetDemo1 {     public static void main(String[] args) {       //将Person对象中的姓名,年龄,相同数据,看作同一个对象       //判断对象是否重复,依赖对象自己的方法 hashCode,equals       HashSet&lt;Person&gt; setPerson = new HashSet&lt;Person&gt;();       setPerson.add(new Person(&quot;a&quot;,11));       setPerson.add(new Person(&quot;b&quot;,10));       setPerson.add(new Person(&quot;b&quot;,10));       setPerson.add(new Person(&quot;c&quot;,25));       setPerson.add(new Person(&quot;d&quot;,19));       setPerson.add(new Person(&quot;e&quot;,17));       System.out.println(setPerson);     }    }   public class Person {     private String name;     private int age;     /*      *  没有做重写父类,每次运行结果都是不同整数      *  如果子类重写父类的方法,哈希值,自定义的      *  存储到HashSet集合的依据      *         *  尽可能让不同的属性值产生不同的哈希值,这样就不用再调用equals方法去比较属性      *      */     public int hashCode(){       return name.hashCode()+age*55;     }     //方法equals重写父类,保证和父类相同     //public boolean equals(Object obj){}     public boolean equals(Object obj){       if(this == obj)         return true;       if(obj == null)         return false;       if(obj instanceof Person){         Person p = (Person)obj;         return name.equals(p.name) &amp;&amp; age==p.age;       }       return false;     }     public String getName() {       return name;     }     public void setName(String name) {       this.name = name;     }     public int getAge() {       return age;     }     public void setAge(int age) {       this.age = age;     }     public Person(String name, int age) {       super();       this.name = name;       this.age = age;     }     public Person(){}     public String toString(){       return name+&quot;..&quot;+age;     }    }</code></pre><h3 id="16LinkedHashSet集合"><a href="#16LinkedHashSet集合" class="headerlink" title="16LinkedHashSet集合"></a>16LinkedHashSet集合</h3><p>  A:LinkedHashSet集合<br>    /*</p><pre><code> *   LinkedHashSet 基于链表的哈希表实现 *   继承自HashSet *    *   LinkedHashSet 自身特性,具有顺序,存储和取出的顺序相同的 *   线程不安全的集合,运行速度块 */public class LinkedHashSetDemo {  public static void main(String[] args) {    LinkedHashSet&lt;Integer&gt; link = new LinkedHashSet&lt;Integer&gt;();    link.add(123);    link.add(44);    link.add(33);    link.add(33);    link.add(66);    link.add(11);    System.out.println(link);  }}</code></pre><h3 id="17ArrayList-HashSet判断对象是否重复的原因"><a href="#17ArrayList-HashSet判断对象是否重复的原因" class="headerlink" title="17ArrayList,HashSet判断对象是否重复的原因"></a>17ArrayList,HashSet判断对象是否重复的原因</h3><p>  A:ArrayList,HashSet判断对象是否重复的原因<br>     a:ArrayList的contains方法原理:底层依赖于equals方法<br>       ArrayList的contains方法会使用调用方法时，<br>         传入的元素的equals方法依次与集合中的旧元素所比较，<br>         从而根据返回的布尔值判断是否有重复元素。<br>         此时，当ArrayList存放自定义类型时，由于自定义类型在未重写equals方法前，<br>         判断是否重复的依据是地址值，所以如果想根据内容判断是否为重复元素，需要重写元素的equals方法。</p><pre><code>b:HashSet的add()方法和contains方法()底层都依赖 hashCode()方法与equals方法() Set集合不能存放重复元素，其添加方法在添加时会判断是否有重复元素，有重复不添加，没重复则添加。 HashSet集合由于是无序的，其判断唯一的依据是元素类型的hashCode与equals方法的返回结果。规则如下： 先判断新元素与集合内已经有的旧元素的HashCode值  如果不同，说明是不同元素，添加到集合。  如果相同，再判断equals比较结果。返回true则相同元素；返回false则不同元素，添加到集合。 所以，使用HashSet存储自定义类型，如果没有重写该类的hashCode与equals方法，则判断重复时，使用的是地址值，如果想通过内容比较元素是否相同，需要重写该元素类的hashcode与equals方法。</code></pre><h3 id="18hashCode和equals方法的面试题"><a href="#18hashCode和equals方法的面试题" class="headerlink" title="18hashCode和equals方法的面试题"></a>18hashCode和equals方法的面试题</h3><p> A:hashCode和equals的面试题<br> /*</p><ul><li>两个对象  Person  p1 p2</li><li>问题: 如果两个对象的哈希值相同 p1.hashCode()==p2.hashCode()</li><li>两个对象的equals一定返回true吗  p1.equals(p2) 一定是true吗</li><li>正确答案:不一定</li><li></li><li>如果两个对象的equals方法返回true,p1.equals(p2)==true</li><li>两个对象的哈希值一定相同吗</li><li><p>正确答案: 一定<br>*/<br>在 Java 应用程序执行期间，<br>1.如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。<br>2.如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。 </p><p>两个对象不同(对象属性值不同) equals返回false=====&gt;两个对象调用hashCode()方法哈希值相同</p><p>两个对象调用hashCode()方法哈希值不同=====&gt;equals返回true</p></li></ul><pre><code>两个对象不同(对象属性值不同) equals返回false=====&gt;两个对象调用hashCode()方法哈希值不同两个对象调用hashCode()方法哈希值相同=====&gt;equals返回true</code></pre><p>   所以说两个对象哈希值无论相同还是不同,equals都可能返回true</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368661/samples/java%20files/photo-1541904563-aa0331e9f99a.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、List接口&lt;br&gt;2、ArrayList集合、LinkedList集合&lt;br&gt;3、LinkedHashSet集合&lt;br&gt;4、Set接口&lt;br&gt;5、哈希表&lt;br&gt;6、判断集合唯一性原理&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础16(集合Collecton,Iterator迭代器,增强for循环,泛型)</title>
    <link href="https://leesen998.github.io/2016/10/26/day18%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/26/day18笔记/</id>
    <published>2016-10-26T01:48:29.000Z</published>
    <updated>2018-11-30T10:22:26.949Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368660/samples/java%20files/photo-1542697149-cca3623abd0a.jpg" alt="" style="width:100%"></p><p>1、集合<br>2、Iterator迭代器<br>3、增强for循环<br>4、泛型</p><a id="more"></a><h3 id="01集合使用的回顾"><a href="#01集合使用的回顾" class="headerlink" title="01集合使用的回顾"></a>01集合使用的回顾</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*A:集合使用的回顾</span><br><span class="line">  *a.ArrayList集合存储<span class="number">5</span>个<span class="keyword">int</span>类型元素</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">          list.add(<span class="number">111</span>);</span><br><span class="line">          list.add(<span class="number">222</span>);</span><br><span class="line">          list.add(<span class="number">333</span>);</span><br><span class="line">          list.add(<span class="number">444</span>);</span><br><span class="line">          list.add(<span class="number">555</span>);</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">                 System.out.println(list.get(i));</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    *b.ArrayList集合存储<span class="number">5</span>个Person类型元素</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(“小强”));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(“老王”));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(“小虎”));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(“小泽”));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(“小红”));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">          Person p = list.get(i);</span><br><span class="line">                System.out.println(p);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="02集合的学习目标"><a href="#02集合的学习目标" class="headerlink" title="02集合的学习目标"></a>02集合的学习目标</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集合，集合是java中提供的一种容器，可以用来存储多个数据。</span><br><span class="line"> 在前面的学习中，我们知道数据多了，可以使用数组存放或者使用ArrayList集合进行存放数据。那么，集合和数组既然都是容器，它们有啥区别呢？</span><br><span class="line">   数组的长度是固定的。集合的长度是可变的。</span><br><span class="line">   集合中存储的元素必须是引用类型数据</span><br></pre></td></tr></table></figure><h3 id="03集合继承关系图"><a href="#03集合继承关系图" class="headerlink" title="03集合继承关系图"></a>03集合继承关系图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   A:集合继承关系图</span><br><span class="line">    a:ArrayList的继承关系:</span><br><span class="line">    查看ArrayList类发现它继承了抽象类AbstractList同时实现接口List，而List接口又继承了Collection接口。Collection接口为最顶层集合接口了。</span><br><span class="line">    源代码：</span><br><span class="line">     <span class="class"><span class="keyword">interface</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span> <span class="keyword">implements</span> <span class="title">List</span></span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">   b:集合继承体系</span><br><span class="line">    这说明我们在使用ArrayList类时，该类已经把所有抽象方法进行了重写。那么，实现Collection接口的所有子类都会进行方法重写。</span><br><span class="line">      Collecton接口常用的子接口有：List接口、Set接口</span><br><span class="line">      List接口常用的子类有：ArrayList类、LinkedList类</span><br><span class="line">      Set接口常用的子类有：HashSet类、LinkedHashSet类</span><br><span class="line">    </span><br><span class="line">                             Collection 接口     </span><br><span class="line">                                  |</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">    |                                                              |</span><br><span class="line">   List接口                                                       Set接口</span><br><span class="line">    |                                                              |</span><br><span class="line"> ----------------                                             -------------</span><br><span class="line"> |              |                                             |            |</span><br><span class="line">ArrayList类    LinkedList类                                 HashSet类     LinkedHashSet类</span><br></pre></td></tr></table></figure><h3 id="04集合Collection的方法"><a href="#04集合Collection的方法" class="headerlink" title="04集合Collection的方法"></a>04集合Collection的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">A:集合Collection的方法</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  Collection接口中的方法</span></span><br><span class="line"><span class="comment">     *  是集合中所有实现类必须拥有的方法</span></span><br><span class="line"><span class="comment">     *  使用Collection接口的实现类,程序的演示</span></span><br><span class="line"><span class="comment">     *  ArrayList implements List</span></span><br><span class="line"><span class="comment">     *  List extends Collection</span></span><br><span class="line"><span class="comment">     *  方法的执行,都是实现的重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       function_2();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">/*  Collection接口方法</span></span><br><span class="line"><span class="comment">      *  Object[] toArray() 集合中的元素,转成一个数组中的元素, 集合转成数组</span></span><br><span class="line"><span class="comment">      *  返回是一个存储对象的数组, 数组存储的数据类型是Object</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       coll.add(<span class="string">"abc"</span>);</span><br><span class="line">       coll.add(<span class="string">"itcast"</span>);</span><br><span class="line">       coll.add(<span class="string">"itheima"</span>);</span><br><span class="line">       coll.add(<span class="string">"money"</span>);</span><br><span class="line">       coll.add(<span class="string">"123"</span>);</span><br><span class="line">       </span><br><span class="line">       Object[] objs = coll.toArray();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; objs.length ; i++)&#123;</span><br><span class="line">         System.out.println(objs[i]);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 学习Java中三种长度表现形式</span></span><br><span class="line"><span class="comment">      *   数组.length 属性  返回值 int</span></span><br><span class="line"><span class="comment">      *   字符串.length() 方法,返回值int</span></span><br><span class="line"><span class="comment">      *   集合.size()方法, 返回值int</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * Collection接口方法</span></span><br><span class="line"><span class="comment">      * boolean contains(Object o) 判断对象是否存在于集合中,对象存在返回true</span></span><br><span class="line"><span class="comment">      * 方法参数是Object类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       coll.add(<span class="string">"abc"</span>);</span><br><span class="line">       coll.add(<span class="string">"itcast"</span>);</span><br><span class="line">       coll.add(<span class="string">"itheima"</span>);</span><br><span class="line">       coll.add(<span class="string">"money"</span>);</span><br><span class="line">       coll.add(<span class="string">"123"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">boolean</span> b = coll.contains(<span class="string">"itcast"</span>);</span><br><span class="line">       System.out.println(b);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * Collection接口的方法</span></span><br><span class="line"><span class="comment">      * void clear() 清空集合中的所有元素</span></span><br><span class="line"><span class="comment">      * 集合容器本身依然存在</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//接口多态的方式调用</span></span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       coll.add(<span class="string">"abc"</span>);</span><br><span class="line">       coll.add(<span class="string">"bcd"</span>);</span><br><span class="line">       System.out.println(coll);</span><br><span class="line">       </span><br><span class="line">       coll.clear();</span><br><span class="line">       </span><br><span class="line">       System.out.println(coll);</span><br><span class="line">       </span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="05集合Collection的remove方法"><a href="#05集合Collection的remove方法" class="headerlink" title="05集合Collection的remove方法"></a>05集合Collection的remove方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A:<span class="number">05</span>集合Collection的remove方法</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Collection接口方法</span></span><br><span class="line"><span class="comment">  * boolean remove(Object o)移除集合中指定的元素</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">   coll.add(<span class="string">"abc"</span>);</span><br><span class="line">   coll.add(<span class="string">"money"</span>);</span><br><span class="line">   coll.add(<span class="string">"itcast"</span>);</span><br><span class="line">   coll.add(<span class="string">"itheima"</span>);</span><br><span class="line">   coll.add(<span class="string">"money"</span>);</span><br><span class="line">   coll.add(<span class="string">"123"</span>);  </span><br><span class="line">   System.out.println(coll);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">boolean</span> b = coll.remove(<span class="string">"money"</span>);</span><br><span class="line">   System.out.println(b);</span><br><span class="line">   System.out.println(coll);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="06迭代器的概述"><a href="#06迭代器的概述" class="headerlink" title="06迭代器的概述"></a>06迭代器的概述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A:迭代器概述:</span><br><span class="line"> a:java中提供了很多个集合，它们在存储元素时，采用的存储方式不同。</span><br><span class="line">  我们要取出这些集合中的元素，可通过一种通用的获取方式来完成。</span><br><span class="line"> </span><br><span class="line"> b:Collection集合元素的通用获取方式：在取元素之前先要判断集合中有没有元素，</span><br><span class="line">如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</span><br><span class="line"> </span><br><span class="line"> c:每种集合的底层的数据结构不同,例如ArrayList是数组,LinkedList底层是链表,但是无论使用那种集合,我们都会有判断是否有元素</span><br><span class="line">   以及取出里面的元素的动作,那么Java为我们提供一个迭代器定义了统一的判断元素和取元素的方法 zzzzzzz</span><br></pre></td></tr></table></figure><h3 id="07迭代器的实现原理"><a href="#07迭代器的实现原理" class="headerlink" title="07迭代器的实现原理"></a>07迭代器的实现原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> *A:迭代器的实现原理</span><br><span class="line"><span class="string">" /*</span></span><br><span class="line"><span class="string">   *  集合中的迭代器:</span></span><br><span class="line"><span class="string">   *    获取集合中元素方式</span></span><br><span class="line"><span class="string">   *  接口 Iterator : 两个抽象方法</span></span><br><span class="line"><span class="string">   *     boolean hasNext() 判断集合中还有没有可以被取出的元素,如果有返回true</span></span><br><span class="line"><span class="string">   *     next() 取出集合中的下一个元素</span></span><br><span class="line"><span class="string">   *     </span></span><br><span class="line"><span class="string">   *  Iterator接口,找实现类.</span></span><br><span class="line"><span class="string">   *    Collection接口定义方法 </span></span><br><span class="line"><span class="string">   *       Iterator  iterator()</span></span><br><span class="line"><span class="string">   *    ArrayList 重写方法 iterator(),返回了Iterator接口的实现类的对象</span></span><br><span class="line"><span class="string">   *    使用ArrayList集合的对象</span></span><br><span class="line"><span class="string">   *     Iterator it =array.iterator(),运行结果就是Iterator接口的实现类的对象</span></span><br><span class="line"><span class="string">   *     it是接口的实现类对象,调用方法 hasNext 和 next 集合元素迭代</span></span><br><span class="line"><span class="string">   */"</span></span><br></pre></td></tr></table></figure><h3 id="08迭代器的代码实现"><a href="#08迭代器的代码实现" class="headerlink" title="08迭代器的代码实现"></a>08迭代器的代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">*A:迭代器的代码实现</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       coll.add(<span class="string">"abc1"</span>);</span><br><span class="line">       coll.add(<span class="string">"abc2"</span>);</span><br><span class="line">       coll.add(<span class="string">"abc3"</span>);</span><br><span class="line">       coll.add(<span class="string">"abc4"</span>);</span><br><span class="line">       <span class="comment">//迭代器,对集合ArrayList中的元素进行取出</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//调用集合的方法iterator()获取出,Iterator接口的实现类的对象</span></span><br><span class="line">       Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">       <span class="comment">//接口实现类对象,调用方法hasNext()判断集合中是否有元素</span></span><br><span class="line">       <span class="comment">//boolean b = it.hasNext();</span></span><br><span class="line">       <span class="comment">//System.out.println(b);</span></span><br><span class="line">       <span class="comment">//接口的实现类对象,调用方法next()取出集合中的元素</span></span><br><span class="line">       <span class="comment">//String s = it.next();</span></span><br><span class="line">       <span class="comment">//System.out.println(s);</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//迭代是反复内容,使用循环实现,循环的条件,集合中没元素, hasNext()返回了false</span></span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">         String s = it.next();</span><br><span class="line">         System.out.println(s);</span><br><span class="line">       &#125;                 </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="09迭代器的执行过程"><a href="#09迭代器的执行过程" class="headerlink" title="09迭代器的执行过程"></a>09迭代器的执行过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">A:迭代器的执行过程</span><br><span class="line">  a:迭代器的原理:</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">         System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cursor记录的索引值不等于集合的长度返回true,否则返回false</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">return</span> cursor != size; <span class="comment">//cursor初值为0</span></span><br><span class="line">                        </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//next()方法作用:</span></span><br><span class="line">     <span class="comment">//①返回cursor指向的当前元素 </span></span><br><span class="line">     <span class="comment">//②cursor++</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;            </span><br><span class="line">              <span class="keyword">int</span> i = cursor; </span><br><span class="line">              cursor = i + <span class="number">1</span>;  </span><br><span class="line">              <span class="keyword">return</span>  elementData[lastRet = i]; </span><br><span class="line">          </span><br><span class="line">          &#125;</span><br><span class="line">  b:<span class="keyword">for</span>循环迭代写法:</span><br><span class="line">     <span class="keyword">for</span> (Iterator&lt;String&gt; it2 = coll.iterator(); it2.hasNext();  ) &#123;</span><br><span class="line">      System.out.println(it2.next());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="10集合迭代中的转型"><a href="#10集合迭代中的转型" class="headerlink" title="10集合迭代中的转型"></a>10集合迭代中的转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">A:集合迭代中的转型</span><br><span class="line">  a:在使用集合时，我们需要注意以下几点：</span><br><span class="line">    集合中存储其实都是对象的地址。</span><br><span class="line">    集合中可以存储基本数值吗？jdk1.5版本以后可以存储了。</span><br><span class="line">      因为出现了基本类型包装类，它提供了自动装箱操作（基本类型对象），这样，集合中的元素就是基本数值的包装类对象。</span><br><span class="line"> </span><br><span class="line"> b:存储时提升了Object。取出时要使用元素的特有内容，必须向下转型。</span><br><span class="line">  Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  coll.add(<span class="string">"abc"</span>);</span><br><span class="line">  coll.add(<span class="string">"aabbcc"</span>);</span><br><span class="line">  coll.add(<span class="string">"shitcast"</span>);</span><br><span class="line">  Iterator it = coll.iterator();</span><br><span class="line">  <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">   <span class="comment">//由于元素被存放进集合后全部被提升为Object类型</span></span><br><span class="line">  <span class="comment">//当需要使用子类对象特有方法时，需要向下转型</span></span><br><span class="line">   String str = (String) it.next();</span><br><span class="line">   System.out.println(str.length());</span><br><span class="line">  &#125;</span><br><span class="line">  注意：如果集合中存放的是多个对象，这时进行向下转型会发生类型转换异常。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> c:Iterator接口也可以使用&lt;&gt;来控制迭代元素的类型的。代码演示如下：</span><br><span class="line">  Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">  coll.add(<span class="string">"abc"</span>);</span><br><span class="line">  coll.add(<span class="string">"aabbcc"</span>);</span><br><span class="line">  coll.add(<span class="string">"shitcast"</span>);</span><br><span class="line">  Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">  <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">   String str =  it.next(); </span><br><span class="line">  <span class="comment">//当使用Iterator&lt;String&gt;控制元素类型后，就不需要强转了。获取到的元素直接就是String类型</span></span><br><span class="line">   System.out.println(str.length());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="11增强for循环遍历数组"><a href="#11增强for循环遍历数组" class="headerlink" title="11增强for循环遍历数组"></a>11增强for循环遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">*A:增强<span class="keyword">for</span>循环遍历数组</span><br><span class="line">  a:格式:</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *  JDK1.5新特性,增强for循环</span></span><br><span class="line"><span class="comment">   *  JDK1.5版本后,出现新的接口 java.lang.Iterable</span></span><br><span class="line"><span class="comment">   *    Collection开是继承Iterable</span></span><br><span class="line"><span class="comment">   *    Iterable作用,实现增强for循环</span></span><br><span class="line"><span class="comment">   *    </span></span><br><span class="line"><span class="comment">   *    格式:</span></span><br><span class="line"><span class="comment">   *      for( 数据类型  变量名 : 数组或者集合 )&#123;</span></span><br><span class="line"><span class="comment">   *         sop(变量);</span></span><br><span class="line"><span class="comment">   *      &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//for对于对象数组遍历的时候,能否调用对象的方法呢</span></span><br><span class="line">     String[] str = &#123;<span class="string">"abc"</span>,<span class="string">"itcast"</span>,<span class="string">"cn"</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span>(String s : str)&#123;</span><br><span class="line">       System.out.println(s.length());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  实现for循环,遍历数组</span></span><br><span class="line"><span class="comment">    *  好处: 代码少了,方便对容器遍历</span></span><br><span class="line"><span class="comment">    *  弊端: 没有索引,不能操作容器里面的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">       System.out.println(i+<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="12增强for循环遍历集合"><a href="#12增强for循环遍历集合" class="headerlink" title="12增强for循环遍历集合"></a>12增强for循环遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A:增强<span class="keyword">for</span>循环遍历集合  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *  增强for循环遍历集合</span></span><br><span class="line"><span class="comment">   *  存储自定义Person类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Person&gt; array = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    array.add(<span class="keyword">new</span> Person(<span class="string">"a"</span>,<span class="number">20</span>));</span><br><span class="line">    array.add(<span class="keyword">new</span> Person(<span class="string">"b"</span>,<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">for</span>(Person p : array)&#123;</span><br><span class="line">      System.out.println(p);<span class="comment">// System.out.println(p.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="13泛型的引入"><a href="#13泛型的引入" class="headerlink" title="13泛型的引入"></a>13泛型的引入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">A:泛型的引入</span><br><span class="line"> 在前面学习集合时，我们都知道集合中是可以存放任意对象的，</span><br><span class="line"> 只要把对象存储集合后，那么这时他们都会被提升成Object类型。</span><br><span class="line"> 当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。比如下面程序：</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">     list.add(<span class="string">"abc"</span>);</span><br><span class="line">     list.add(<span class="string">"itcast"</span>);</span><br><span class="line">     list.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">                 <span class="comment">//相当于:Object obj=new Integer(5);</span></span><br><span class="line">     </span><br><span class="line">     Iterator it = list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">       <span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">       String str = (String) it.next();<span class="comment">//String str=(String)obj;</span></span><br><span class="line">                                       <span class="comment">//编译时期仅检查语法错误,String是Object的儿子可以向下转型</span></span><br><span class="line">                                       <span class="comment">//运行时期String str=(String)(new Integer(5))</span></span><br><span class="line">                                       <span class="comment">//String与Integer没有父子关系所以转换失败</span></span><br><span class="line">                                       <span class="comment">//程序在运行时发生了问题java.lang.ClassCastException</span></span><br><span class="line">       System.out.println(str.length());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="14泛型的定义和使用"><a href="#14泛型的定义和使用" class="headerlink" title="14泛型的定义和使用"></a>14泛型的定义和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">A:泛型的定义和使用</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * JDK1.5 出现新的安全机制,保证程序的安全性</span></span><br><span class="line"><span class="comment">   *   泛型: 指明了集合中存储数据的类型  &lt;数据类型&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      function();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      coll.add(<span class="string">"abc"</span>);</span><br><span class="line">      coll.add(<span class="string">"rtyg"</span>);</span><br><span class="line">      coll.add(<span class="string">"43rt5yhju"</span>);</span><br><span class="line">  <span class="comment">//    coll.add(1);</span></span><br><span class="line">      </span><br><span class="line">      Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">      <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        String s = it.next();</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="15Java中的伪泛型"><a href="#15Java中的伪泛型" class="headerlink" title="15Java中的伪泛型"></a>15Java中的伪泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A:Java中的伪泛型：</span><br><span class="line">  泛型只在编译时存在,编译后就被擦除,在编译之前我们就可以限制集合的类型,起到作用</span><br><span class="line">   例如:ArrayList&lt;String&gt; al=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">   编译后:ArrayList al=<span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure><h3 id="16泛型类"><a href="#16泛型类" class="headerlink" title="16泛型类"></a>16泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">A:泛型类:</span><br><span class="line">  a:定义格式：</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br><span class="line">    </span><br><span class="line">    例如，API中的ArrayList集合：</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  b:使用格式：</span><br><span class="line">    创建对象时，确定泛型的类型</span><br><span class="line">   </span><br><span class="line">    例如，ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    此时，变量E的值就是String类型</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    例如，ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    此时，变量E的值就是Integer类型</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt;</span>&#123; </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Integer e)</span></span>&#123; &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="17泛型的方法"><a href="#17泛型的方法" class="headerlink" title="17泛型的方法"></a>17泛型的方法</h3><p>  A:泛型的方法<br>    a:定义格式：修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数){  }<br>    b:泛型方法的使用:<br>     1:例如，API中的ArrayList集合中的方法：<br>      public <t> T[] toArray(T[] a){  }<br>      //该方法，用来把集合元素存储到指定数据类型的数组中，返回已存储集合元素的数组</t></p><pre><code>  使用格式：调用方法时，确定泛型的类型例如:      ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();      String[] arr = new String[100];      String[] result = list.toArray(arr);   此时，变量T的值就是String类型。变量T，可以与定义集合的泛型不同   public &lt;String&gt; String[] toArray(String[] a){  }   例如:      ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();      Integer[] arr = new Integer[100];      Integer [] result = list.toArray(arr);  此时，变量T的值就是Integer类型。变量T，可以与定义集合的泛型不同  public &lt;Integer&gt; Integer[] toArray(Integer[] a){  } </code></pre><h3 id="18泛型的接口"><a href="#18泛型的接口" class="headerlink" title="18泛型的接口"></a>18泛型的接口</h3><p>   A:泛型的接口:<br>     /*</p><pre><code> *  带有泛型的接口 *   *  public interface List &lt;E&gt;{ *    abstract boolean add(E e); *  } *  *  实现类,先实现接口,不理会泛型 *  public class ArrayList&lt;E&gt; implements List&lt;E&gt;{ *  } *  调用者 : new ArrayList&lt;String&gt;() 后期创建集合对象的时候,指定数据类型 *   *   *  实现类,实现接口的同时,也指定了数据类型 *  public class XXX implements List&lt;String&gt;{ *  } *  new XXX() */public class GenericDemo2 {}</code></pre><h3 id="19泛型的好处"><a href="#19泛型的好处" class="headerlink" title="19泛型的好处"></a>19泛型的好处</h3><p>  A:泛型的好处<br>    a:将运行时期的ClassCastException，转移到了编译时期变成了编译失败。<br>    b:避免了类型强转的麻烦。<br>    演示下列代码：<br>    public class GenericDemo {<br>      public static void main(String[] args) {<br>        List<string> list = new ArrayList<string>();<br>        list.add(“abc”);<br>        list.add(“itcast”);<br>        //list.add(5);//当集合明确类型后，存放类型不一致就会编译报错<br>                     //集合已经明确具体存放的元素类型，那么在使用迭代器的时候，迭代器也同样会知道具体遍历元素类型</string></string></p><pre><code>    Iterator&lt;String&gt; it = list.iterator();    while(it.hasNext()){       String str = it.next();       System.out.println(str.length()); //当使用Iterator&lt;String&gt;                                              //控制元素类型后，就不需要强转了。获取到的元素直接就是String类型    }  }}</code></pre><h3 id="20泛型的通配符"><a href="#20泛型的通配符" class="headerlink" title="20泛型的通配符"></a>20泛型的通配符</h3><p>   A:泛型的通配符<br>   /*</p><pre><code>*  泛型的通配符*/</code></pre><p>   public class GenericDemo {<br>    public static void main(String[] args) {<br>      ArrayList<string> array = new ArrayList<string>();</string></string></p><pre><code>  HashSet&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();  array.add(&quot;123&quot;);  array.add(&quot;456&quot;);  set.add(789);  set.add(890);  iterator(array);  iterator(set);}/* *  定义方法,可以同时迭代2个集合 *  参数: 怎么实现 , 不能写ArrayList,也不能写HashSet *  参数: 或者共同实现的接口 *  泛型的通配,匹配所有的数据类型  ? */public static void iterator(Collection&lt;?&gt; coll){  Iterator&lt;?&gt; it = coll.iterator();  while(it.hasNext()){    //it.next()获取的对象,什么类型    System.out.println(it.next());  }}</code></pre><p>   }</p><h3 id="21泛型的限定"><a href="#21泛型的限定" class="headerlink" title="21泛型的限定"></a>21泛型的限定</h3><p> A:泛型的限定<br>   /*</p><pre><code>*  将的酒店员工,厨师,服务员,经理,分别存储到3个集合中*  定义方法,可以同时遍历3集合,遍历三个集合的同时,可以调用工作方法*/</code></pre><p>   import java.util.ArrayList;<br>   import java.util.Iterator;<br>   public class GenericTest {<br>    public static void main(String[] args) {<br>      //创建3个集合对象<br>      ArrayList<chushi> cs = new ArrayList<chushi>();<br>      ArrayList<fuwuyuan> fwy = new ArrayList<fuwuyuan>();<br>      ArrayList<jingli> jl = new ArrayList<jingli>();</jingli></jingli></fuwuyuan></fuwuyuan></chushi></chushi></p><pre><code>//每个集合存储自己的元素cs.add(new ChuShi(&quot;张三&quot;, &quot;后厨001&quot;));cs.add(new ChuShi(&quot;李四&quot;, &quot;后厨002&quot;));fwy.add(new FuWuYuan(&quot;翠花&quot;, &quot;服务部001&quot;));fwy.add(new FuWuYuan(&quot;酸菜&quot;, &quot;服务部002&quot;));jl.add(new JingLi(&quot;小名&quot;, &quot;董事会001&quot;, 123456789.32));jl.add(new JingLi(&quot;小强&quot;, &quot;董事会002&quot;, 123456789.33));</code></pre><p>   //   ArrayList<string> arrayString = new ArrayList<string>();<br>      iterator(jl);<br>      iterator(fwy);<br>      iterator(cs);</string></string></p><pre><code>}/* * 定义方法,可以同时遍历3集合,遍历三个集合的同时,可以调用工作方法 work * ? 通配符,迭代器it.next()方法取出来的是Object类型,怎么调用work方法 * 强制转换:  it.next()=Object o ==&gt; Employee * 方法参数: 控制,可以传递Employee对象,也可以传递Employee的子类的对象 * 泛型的限定  本案例,父类固定Employee,但是子类可以无限? *   ? extends Employee 限制的是父类, 上限限定, 可以传递Employee,传递他的子类对象 *   ? super   Employee 限制的是子类, 下限限定, 可以传递Employee,传递他的父类对象 */public static void iterator(ArrayList&lt;? extends Employee&gt; array){   Iterator&lt;? extends Employee&gt; it = array.iterator();   while(it.hasNext()){     //获取出的next() 数据类型,是什么Employee     Employee e = it.next();     e.work();   }}</code></pre><p>   }</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368660/samples/java%20files/photo-1542697149-cca3623abd0a.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、集合&lt;br&gt;2、Iterator迭代器&lt;br&gt;3、增强for循环&lt;br&gt;4、泛型&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础15(包装类,System类,Math类,Arrays类)</title>
    <link href="https://leesen998.github.io/2016/10/25/day17%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/25/day17笔记/</id>
    <published>2016-10-25T01:48:29.000Z</published>
    <updated>2018-11-30T13:11:47.397Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368661/samples/java%20files/photo-1542827634-7aa7281fb965.jpg"></p><p>1、基本类型包装类<br>2、System类<br>3、Math类<br>4、Arrays类<br>5、大数据运算</p><a id="more"></a><h3 id="01基本数据类型对象包装类概述"><a href="#01基本数据类型对象包装类概述" class="headerlink" title="01基本数据类型对象包装类概述"></a>01基本数据类型对象包装类概述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*A:基本数据类型对象包装类概述</span><br><span class="line">  *a.基本类型包装类的产生</span><br><span class="line">         在实际程序使用中，程序界面上用户输入的数据都是以字符串类型进行存储的。而程序开发中，我们需要把字符串数据，根据需求转换成指定的基本数据类型，如年龄需要转换成<span class="keyword">int</span>类型，考试成绩需要转换成<span class="keyword">double</span>类型等</span><br><span class="line">     *b.八种基本类型对应的包装类</span><br><span class="line">         <span class="keyword">char</span>    Character</span><br><span class="line">         <span class="keyword">int</span>     Integer</span><br><span class="line">         <span class="keyword">byte</span>    Byte</span><br><span class="line">         <span class="keyword">short</span>   Short</span><br><span class="line">         <span class="keyword">long</span>    Long</span><br><span class="line">         <span class="keyword">float</span>   Float</span><br><span class="line">         <span class="keyword">double</span>  Double</span><br><span class="line">         <span class="keyword">boolean</span> Boolean</span><br></pre></td></tr></table></figure><h3 id="02Integer类parseInt方法"><a href="#02Integer类parseInt方法" class="headerlink" title="02Integer类parseInt方法"></a>02Integer类parseInt方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  *A:Integer类parseInt方法:</span><br><span class="line">   *a:parseInt()</span><br><span class="line">    <span class="keyword">int</span> i = Integer.parseInt(<span class="string">"12"</span>);</span><br><span class="line">    System.out.println(i/<span class="number">2</span>);<span class="comment">//6</span></span><br><span class="line"> </span><br><span class="line">*b:parseInt(String s, <span class="keyword">int</span> radix)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Integer类静态方法parseInt(String s, int radix)</span></span><br><span class="line"><span class="comment">  * radix基数,进制</span></span><br><span class="line"><span class="comment">  * "110",2 含义 前面的数字是二进制的,但是方法parseInt运行结果都是十进制</span></span><br><span class="line"><span class="comment">  *  指定进制的字符串转换为十进制的整数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i = Integer.parseInt(<span class="string">"110"</span>, <span class="number">2</span>);</span><br><span class="line"> System.out.println(i);</span><br><span class="line"><span class="keyword">int</span> a = Integer.parseInt(<span class="string">"f"</span>,<span class="number">16</span>);</span><br><span class="line">      System.out.println(a);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="03Integer类int转成字符串"><a href="#03Integer类int转成字符串" class="headerlink" title="03Integer类int转成字符串"></a>03Integer类int转成字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*A:Integer类<span class="keyword">int</span>转成字符串:</span><br><span class="line">     *a:使用+与字符串拼接</span><br><span class="line">          <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">        String s = i+<span class="string">""</span>;</span><br><span class="line">        System.out.println(s+<span class="number">1</span>);<span class="comment">//"31"</span></span><br><span class="line">    </span><br><span class="line">     *b:toString(<span class="keyword">int</span> ,<span class="keyword">int</span> 进制),任意进制整数转成任意进制的字符串 (了解)</span><br><span class="line">        String s1 = Integer.toString(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(s1);</span><br></pre></td></tr></table></figure><h3 id="04Integer类构造方法"><a href="#04Integer类构造方法" class="headerlink" title="04Integer类构造方法"></a>04Integer类构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*A:Integer类构造方法</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  Integer类构造方法</span></span><br><span class="line"><span class="comment">    *   Integer (String s)</span></span><br><span class="line"><span class="comment">    *   将数字格式的字符串,传递到Integer类的构造方法中</span></span><br><span class="line"><span class="comment">    *   创建Integer对象,包装的是一个字符串</span></span><br><span class="line"><span class="comment">    *   将构造方法中的字符串,转成基本数据类型,调用方法,非静态的, intValue()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Integer in = <span class="keyword">new</span> Integer(<span class="string">"100"</span>);</span><br><span class="line">   <span class="keyword">int</span> i = in.intValue();</span><br><span class="line">   System.out.println(--i);<span class="comment">//99</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="05Integer类其他方法"><a href="#05Integer类其他方法" class="headerlink" title="05Integer类其他方法"></a>05Integer类其他方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*A:Integer类其他方法</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">* Integer类的3个静态方法</span></span><br><span class="line"><span class="comment">* 做进制的转换</span></span><br><span class="line"><span class="comment">* 十进制转成二进制  toBinarString(int)</span></span><br><span class="line"><span class="comment">* 十进制转成八进制  toOctalString(int)</span></span><br><span class="line"><span class="comment">* 十进制转成十六进制 toHexString(int)</span></span><br><span class="line"><span class="comment">* 三个方法,返回值都是以String形式出现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    a:十进制转二,八,十六进制</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(Integer.toBinaryString(<span class="number">99</span>));</span><br><span class="line">      System.out.println(Integer.toOctalString(<span class="number">99</span>));</span><br><span class="line">      System.out.println(Integer.toHexString(<span class="number">999</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    b:获取<span class="keyword">int</span>的最大值和最小值</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   Integer类的静态成员变量</span></span><br><span class="line"><span class="comment">     *   MAX_VALUE</span></span><br><span class="line"><span class="comment">     *   MIN_VALUE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Integer.MAX_VALUE);</span><br><span class="line">    System.out.println(Integer.MIN_VALUE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="06自动装箱和自动拆箱"><a href="#06自动装箱和自动拆箱" class="headerlink" title="06自动装箱和自动拆箱"></a>06自动装箱和自动拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> *A:自动装箱与自动拆箱:</span><br><span class="line">   <span class="comment">//JDK1.5新特性</span></span><br><span class="line"><span class="comment">//自动装箱,拆箱的 好处: 基本类型和引用类直接运算</span></span><br><span class="line">   <span class="comment">//自动装箱:使用Integer.valueOf(整数值)返回一个封装了该整数值的Integer对象</span></span><br><span class="line">   <span class="comment">//自动拆箱:使用Integer对象.intValue()返回Integer对象中封装的整数值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//引用类型 , 引用变量一定指向对象</span></span><br><span class="line"><span class="comment">//自动装箱, 基本数据类型1, 直接变成了对象</span></span><br><span class="line"></span><br><span class="line">Integer in = <span class="number">1</span>; <span class="comment">// Integer in = new Integer(1)</span></span><br><span class="line"><span class="comment">//in 是引用类型,不能和基本类型运算, 自动拆箱,引用类型in,转换基本类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//in+1  ==&gt; in.inValue()+1 = 2    </span></span><br><span class="line"><span class="comment">//in = 2    自动装箱</span></span><br><span class="line">in = in + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(in);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07自动装箱和自动拆箱练习题"><a href="#07自动装箱和自动拆箱练习题" class="headerlink" title="07自动装箱和自动拆箱练习题"></a>07自动装箱和自动拆箱练习题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*A:自动装箱与自动拆箱:</span><br><span class="line">  Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(i==j);<span class="comment">// false 对象地址</span></span><br><span class="line">System.out.println(i.equals(j));<span class="comment">// true  继承Object重写equals,比较的对象数据</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">500</span>;<span class="comment">//Integer integer=Integer.valueOf(500)</span></span><br><span class="line">                <span class="comment">//integer=new Integer(500);</span></span><br><span class="line">Integer b = <span class="number">500</span>;</span><br><span class="line">System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"数据在byte(-128~127)范围内,JVM不会从新new对象"</span></span><br><span class="line">Integer aa = <span class="number">127</span>; <span class="comment">// Integer aa = new Integer(127)</span></span><br><span class="line">Integer bb = <span class="number">127</span>; <span class="comment">// Integer bb = aa;</span></span><br><span class="line">System.out.println(aa==bb); <span class="comment">//true</span></span><br><span class="line">System.out.println(aa.equals(bb));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="08System类方法currentTimeMillis"><a href="#08System类方法currentTimeMillis" class="headerlink" title="08System类方法currentTimeMillis"></a>08System类方法currentTimeMillis</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在API中System类介绍的比较简单，我们给出定义，System中代表程序所在系统，</span><br><span class="line">提供了对应的一些系统属性信息，和系统操作。</span><br><span class="line">System类<span class="string">"不能手动创建对象"</span>，因为<span class="string">"构造方法"</span>被<span class="keyword">private</span>修饰，</span><br><span class="line"><span class="string">"阻止外界创建对象"</span>。</span><br><span class="line">System类中的<span class="string">"都是"</span><span class="keyword">static</span>方法，<span class="string">"类名访问即可"</span>。</span><br><span class="line">在JDK中，有许多这样的类。</span><br><span class="line"></span><br><span class="line">*A:System类方法currentTimeMillis():用于计算程序的执行时间</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *  获取系统当前毫秒值</span></span><br><span class="line"><span class="comment">   *  static long currentTimeMillis()</span></span><br><span class="line"><span class="comment">   *  对程序执行时间测试</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();<span class="comment">//当前时间x-1970年1月1日零时零分零秒</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> end = System.currentTimeMillis();<span class="comment">//当前时间y-1970年1月1日零时零分零秒</span></span><br><span class="line">  System.out.println(end - start);<span class="comment">//当前时间y-当前时间x </span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="09System类方法exit"><a href="#09System类方法exit" class="headerlink" title="09System类方法exit"></a>09System类方法exit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> *A:System类方法exit()方法</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  退出虚拟机,所有程序全停止</span></span><br><span class="line"><span class="comment"> *  static void exit(0)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);<span class="comment">//该方法会在以后的finally代码块中使用(讲到再说)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10System类方法gc"><a href="#10System类方法gc" class="headerlink" title="10System类方法gc"></a>10System类方法gc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">A:System类方法gc</span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"垃圾收取了"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">      <span class="string">"*</span></span><br><span class="line"><span class="string">   *  JVM在内存中,收取对象的垃圾</span></span><br><span class="line"><span class="string">   *  当没有更多引用指向该对象时,会自动调用垃圾回收机制回收堆中的对象</span></span><br><span class="line"><span class="string">   *  同时调用回收对象所属类的 【finalize方法()</span></span><br><span class="line"><span class="string">   *  static void gc()</span></span><br><span class="line"><span class="string">   *"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">new</span> Person();</span><br><span class="line">  System.gc();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="11System类方法getProperties"><a href="#11System类方法getProperties" class="headerlink" title="11System类方法getProperties"></a>11System类方法getProperties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A:System类方法getProperties(了解)</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  获取当前操作系统的属性:例如操作系统名称,</span></span><br><span class="line"><span class="comment">  *  static Properties getProperties() </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println( System.getProperties() );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="12System类方法arraycopy"><a href="#12System类方法arraycopy" class="headerlink" title="12System类方法arraycopy"></a>12System类方法arraycopy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">" /*</span></span><br><span class="line"><span class="string">   * System类方法,复制数组,这是一个本地方法</span></span><br><span class="line"><span class="string">   * arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</span></span><br><span class="line"><span class="string">   * Object src, 要复制的源数组</span></span><br><span class="line"><span class="string">   * int srcPos, 数组源的起始索引</span></span><br><span class="line"><span class="string">   * Object dest,复制后的目标数组</span></span><br><span class="line"><span class="string">   * int destPos,目标数组起始索引 </span></span><br><span class="line"><span class="string">   * int length, 复制几个</span></span><br><span class="line"><span class="string">   */"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span></span><br><span class="line"><span class="string">从 src 引用的【源数组】到 dest 引用的【目标数组】，数组组件的一个【子序列】被复制下来。</span></span><br><span class="line"><span class="string">被复制的组件的编号等于 length 参数。</span></span><br><span class="line"><span class="string">【源数组】中位置在【 srcPos 】到【 srcPos+length-1 】之间的组件</span></span><br><span class="line"><span class="string">被分别复制到【目标数组】中的【 destPos 】到【 destPos+length-1 】位置。"</span></span><br><span class="line"></span><br><span class="line"> A:System类方法arraycopy：</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * System类方法,复制数组</span></span><br><span class="line"><span class="comment">   * arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</span></span><br><span class="line"><span class="comment">   * Object src, 要复制的源数组</span></span><br><span class="line"><span class="comment">   * int srcPos, 数组源的起始索引</span></span><br><span class="line"><span class="comment">   * Object dest,复制后的目标数组</span></span><br><span class="line"><span class="comment">   * int destPos,目标数组起始索引 </span></span><br><span class="line"><span class="comment">   * int length, 复制几个</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] src = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span>[] desc = &#123;<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  System.arraycopy(src, <span class="number">1</span>, desc, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//将src数组的1位置开始(包含1位置)的两个元素,拷贝到desc的1,2位置上</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; desc.length ; i++)&#123;</span><br><span class="line">  System.out.println(desc[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="13Math类的方法-1"><a href="#13Math类的方法-1" class="headerlink" title="13Math类的方法_1"></a>13Math类的方法_1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">A:Math类中的方法</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static double sqrt(double d)</span></span><br><span class="line"><span class="comment"> * 返回参数的平方根</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.sqrt(-<span class="number">2</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*0</span></span><br><span class="line"><span class="comment"> * static double pow(double a, double b)</span></span><br><span class="line"><span class="comment"> * a的b次方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.pow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static double floor(double d)</span></span><br><span class="line"><span class="comment"> * 返回小于或者等于参数d的最大整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.floor(<span class="number">1.5</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  static double ceil(double d)</span></span><br><span class="line"><span class="comment"> *  返回大于或者等于参数d的最小整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.ceil(<span class="number">5.1</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  static int abs(int i)</span></span><br><span class="line"><span class="comment"> *  获取参数的绝对值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = Math.abs(<span class="number">0</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="14Math类的方法-2"><a href="#14Math类的方法-2" class="headerlink" title="14Math类的方法_2"></a>14Math类的方法_2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A:Math类的方法_2</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  static double round(doubl d)</span></span><br><span class="line"><span class="comment">  *  获取参数的四舍五入,取整数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_6</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">double</span> d = Math.round(<span class="number">5.4195</span>);</span><br><span class="line"> System.out.println(d);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  static double random() 返回随机数 0.0-1.0之间</span></span><br><span class="line"><span class="comment">  *  来源,也是Random类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_5</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ;i++)&#123;</span><br><span class="line"> <span class="keyword">double</span> d = Math.random();</span><br><span class="line"> System.out.println(d);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="15Arrays工具类"><a href="#15Arrays工具类" class="headerlink" title="15Arrays工具类"></a>15Arrays工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">A:Arrays工具类:</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  function_2();</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">56</span>,<span class="number">65</span>,<span class="number">11</span>,<span class="number">98</span>,<span class="number">57</span>,<span class="number">43</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">100</span>,<span class="number">200</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span>[] newArray = test(arr);</span><br><span class="line">  System.out.println(Arrays.toString(newArray));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">"/*</span></span><br><span class="line"><span class="string">   *  定义方法,接收输入,存储的是10个人考试成绩</span></span><br><span class="line"><span class="string">   *  将最后三个人的成绩,存储到新的数组中,返回新的数组</span></span><br><span class="line"><span class="string">   */"</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] test(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">  <span class="comment">//对数组排序</span></span><br><span class="line">  Arrays.sort(arr);</span><br><span class="line">  <span class="comment">//将最后三个成绩存储到新的数组中</span></span><br><span class="line">  <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">  <span class="comment">//成绩数组的最后三个元素,复制到新数组中</span></span><br><span class="line">  <span class="comment">//System.arraycopy(arr, 0, result, 0, 3);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; <span class="number">3</span> ;i++)&#123;</span><br><span class="line">  result[i] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">"/*</span></span><br><span class="line"><span class="string">   *  static String toString(数组)</span></span><br><span class="line"><span class="string">   *  将数组变成字符串</span></span><br><span class="line"><span class="string">   */"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  String s = Arrays.toString(arr);</span><br><span class="line">  System.out.println(s);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">"/*</span></span><br><span class="line"><span class="string">   *  static int binarySearch(数组, 被查找的元素)</span></span><br><span class="line"><span class="string">   *  数组的二分搜索法</span></span><br><span class="line"><span class="string">   *  返回元素在数组中出现的索引</span></span><br><span class="line"><span class="string">   *  元素不存在, 返回的是  (-插入点-1)</span></span><br><span class="line"><span class="string">   */"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">18</span>&#125;;</span><br><span class="line">      <span class="keyword">int</span> index =  Arrays.binarySearch(arr, <span class="number">10</span>);</span><br><span class="line">      System.out.println(index);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">"/*</span></span><br><span class="line"><span class="string">   *  static void sort(数组)</span></span><br><span class="line"><span class="string">   *  对数组升序排列</span></span><br><span class="line"><span class="string">   */"</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  Arrays.sort(arr);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  System.out.println(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="16数组复制练习"><a href="#16数组复制练习" class="headerlink" title="16数组复制练习"></a>16数组复制练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*A:数组复制练习:</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">56</span>,<span class="number">65</span>,<span class="number">11</span>,<span class="number">98</span>,<span class="number">57</span>,<span class="number">43</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">100</span>,<span class="number">200</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span>[] newArray = test(arr);</span><br><span class="line">  System.out.println(Arrays.toString(newArray));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *  定义方法,接收输入,存储的是10个人考试成绩</span></span><br><span class="line"><span class="comment">   *  将最后三个人的成绩,存储到新的数组中,返回新的数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] test(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">  <span class="comment">//对数组排序</span></span><br><span class="line">  Arrays.sort(arr);</span><br><span class="line">  <span class="comment">//将最后三个成绩存储到新的数组中</span></span><br><span class="line">  <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">  <span class="comment">//成绩数组的最后三个元素,复制到新数组中</span></span><br><span class="line">      <span class="comment">//System.arraycopy(arr, 0, result, 0, 3);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; <span class="number">3</span> ;i++)&#123;</span><br><span class="line">  result[i] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="17BigInteger类概述和构造方法"><a href="#17BigInteger类概述和构造方法" class="headerlink" title="17BigInteger类概述和构造方法"></a>17BigInteger类概述和构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A:BigInteger类概述和构造方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">function();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BigInteger类的构造方法</span></span><br><span class="line"><span class="comment"> * 传递字符串,要求数字格式,没有长度限制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"8465846668464684562385634168451684568645684564564"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="string">"5861694569514568465846668464684562385634168451684568645684564564"</span>);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18BigInteger类四则运算"><a href="#18BigInteger类四则运算" class="headerlink" title="18BigInteger类四则运算"></a>18BigInteger类四则运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">A:BigInteger类四则运算</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  function_1();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BigInteger对象的四则运算</span></span><br><span class="line"><span class="comment"> * 调用方法计算,计算结果也只能是BigInteger对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line"> BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="string">"5665464516451051581613661405146"</span>);</span><br><span class="line"> BigInteger b2 = <span class="keyword">new</span> BigInteger(<span class="string">"965855861461465516451051581613661405146"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//计算 b1+b2对象的和,调用方法 add</span></span><br><span class="line"> BigInteger bigAdd = b1.add(b2);<span class="comment">//965855867126930032902103163227322810292</span></span><br><span class="line"> System.out.println(bigAdd);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//计算b1-b2对象的差,调用方法subtract</span></span><br><span class="line"> BigInteger bigSub = b1.subtract(b2);</span><br><span class="line"> System.out.println(bigSub);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//计算b1*b2对象的乘积,调用方法multiply</span></span><br><span class="line"> BigInteger bigMul = b1.multiply(b2);</span><br><span class="line"> System.out.println(bigMul);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//计算b2/b1对象商,调用方法divied</span></span><br><span class="line"> BigInteger bigDiv = b2.divide(b1);</span><br><span class="line"> System.out.println(bigDiv);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="19员工案例的子类的编写"><a href="#19员工案例的子类的编写" class="headerlink" title="19员工案例的子类的编写"></a>19员工案例的子类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A:BigDecimal类概述 </span><br><span class="line">   </span><br><span class="line">  <span class="string">" /*</span></span><br><span class="line"><span class="string">    * 计算结果,未知</span></span><br><span class="line"><span class="string">    * 原因: 计算机二进制中,表示浮点数不精确造成</span></span><br><span class="line"><span class="string">    * 超级大型的浮点数据,提供高精度的浮点运算, BigDecimal</span></span><br><span class="line"><span class="string">   System.out.println(0.09 + 0.01);//0.09999999999999999</span></span><br><span class="line"><span class="string">   System.out.println(1.0 - 0.32);//0.6799999999999999</span></span><br><span class="line"><span class="string">   System.out.println(1.015 * 100);//101.49999999999999</span></span><br><span class="line"><span class="string">   System.out.println(1.301 / 100);//0.013009999999999999 </span></span><br><span class="line"><span class="string">   */"</span></span><br></pre></td></tr></table></figure><h3 id="20BigDecimal类实现加法减法乘法"><a href="#20BigDecimal类实现加法减法乘法" class="headerlink" title="20BigDecimal类实现加法减法乘法"></a>20BigDecimal类实现加法减法乘法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">A:BigDecimal类实现加法减法乘法</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  BigDecimal实现三则运算</span></span><br><span class="line"><span class="comment">  *  + - *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"> BigDecimal b1 =  <span class="keyword">new</span> BigDecimal(<span class="string">"0.09"</span>);</span><br><span class="line"> BigDecimal b2 =  <span class="keyword">new</span> BigDecimal(<span class="string">"0.01"</span>);</span><br><span class="line"> <span class="comment">//计算b1+b2的和,调用方法add</span></span><br><span class="line"> BigDecimal bigAdd = b1.add(b2);</span><br><span class="line"> System.out.println(bigAdd);</span><br><span class="line"> </span><br><span class="line"> BigDecimal b3 = <span class="keyword">new</span> BigDecimal(<span class="string">"1"</span>);</span><br><span class="line"> BigDecimal b4 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.32"</span>);</span><br><span class="line"> <span class="comment">//计算b3-b2的差,调用方法subtract</span></span><br><span class="line"> BigDecimal bigSub = b3.subtract(b4);</span><br><span class="line"> System.out.println(bigSub);</span><br><span class="line"> </span><br><span class="line"> BigDecimal b5 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.015"</span>);</span><br><span class="line"> BigDecimal b6 = <span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>);</span><br><span class="line"> <span class="comment">//计算b5*b6的成绩,调用方法 multiply</span></span><br><span class="line"> BigDecimal bigMul = b5.multiply(b6);</span><br><span class="line"> System.out.println(bigMul);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="21BigDecimal类实现除法"><a href="#21BigDecimal类实现除法" class="headerlink" title="21BigDecimal类实现除法"></a>21BigDecimal类实现除法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A:BigDecimal类实现除法</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BigDecimal实现除法运算</span></span><br><span class="line"><span class="comment"> * divide(BigDecimal divisor, int scale, int roundingMode) </span></span><br><span class="line"><span class="comment"> * int scale : 保留几位小数</span></span><br><span class="line"><span class="comment"> * int roundingMode : 保留模式</span></span><br><span class="line"><span class="comment"> * 保留模式 阅读API文档</span></span><br><span class="line"><span class="comment"> *   static int ROUND_UP  向上+1</span></span><br><span class="line"><span class="comment"> *   static int ROUND_DOWN 直接舍去</span></span><br><span class="line"><span class="comment"> *   static int ROUND_HALF_UP  &gt;= 0.5 向上+1</span></span><br><span class="line"><span class="comment"> *   static int ROUND_HALF_DOWN   &gt; 0.5 向上+1 ,否则直接舍去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0301"</span>);</span><br><span class="line">BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>);</span><br><span class="line"><span class="comment">//计算b1/b2的商,调用方法divied</span></span><br><span class="line">BigDecimal bigDiv = b1.divide(b2,<span class="number">2</span>,BigDecimal.ROUND_HALF_UP);<span class="comment">//0.01301</span></span><br><span class="line">System.out.println(bigDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22小结"><a href="#22小结" class="headerlink" title="22小结"></a>22小结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> 基本类型包装类</span><br><span class="line"> <span class="number">8</span>种基本类型对应的包装类</span><br><span class="line">基本类型包装类</span><br><span class="line"><span class="keyword">byte</span>Byte</span><br><span class="line"><span class="keyword">short</span>Short</span><br><span class="line"><span class="keyword">int</span> <span class="string">"Integer  "</span></span><br><span class="line"><span class="keyword">long</span>Long</span><br><span class="line"><span class="keyword">float</span>Float</span><br><span class="line"><span class="keyword">double</span>Double</span><br><span class="line"><span class="keyword">char</span><span class="string">"Character   "</span></span><br><span class="line"><span class="keyword">boolean</span>Boolean</span><br><span class="line"> 自动装箱、自动拆箱</span><br><span class="line"> 自动装箱：基本数值转成对象（<span class="keyword">int</span> &gt;&gt; Integer）</span><br><span class="line"> 自动拆箱：对象转成基本数值（Integer &gt;&gt; <span class="keyword">int</span>）</span><br><span class="line"> 常用方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String str)</span>:把字符串转成基本类型<span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> x)</span>:把基本类型<span class="keyword">int</span>转成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> x)</span>:把基本类型i字符串转成Integer对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span>:以 <span class="keyword">int</span>类型返回该包装类对象的值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> System类: 系统属性信息工具类</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span>：获取当前系统时间与1970年01月01日00:00点之间的毫秒差值</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span>：用来结束正在运行的Java程序。参数传入一个数字即可。通常传入0记为正常状态，其他为异常状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span>：用来运行JVM中的垃圾回收器，完成内存中垃圾的清除。</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProperties</span><span class="params">()</span>：用来获取指系统属性信息</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> Arrays类：数组操作工具类</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> sort方法，用来对指定数组中的元素进行排序（元素值从小到大进行排序）</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> String toString方法，用来返回指定数组元素内容的字符串形式</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> binarySearch方法，在指定数组中，查找给定元素值出现的位置。若没有查询到，返回位置为-插入点-1。要求该数组必须是个有序的数组</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> Math类：数学运算工具类</span></span><br><span class="line"><span class="function"> abs方法,结果都为正数</span></span><br><span class="line"><span class="function"> ceil方法，结果为比参数值大的最小整数的<span class="keyword">double</span>值</span></span><br><span class="line"><span class="function"> floor方法，结果为比参数值小的最大整数的<span class="keyword">double</span>值</span></span><br><span class="line"><span class="function"> max方法，返回两个参数值中较大的值</span></span><br><span class="line"><span class="function"> min方法，返回两个参数值中较小的值</span></span><br><span class="line"><span class="function"> pow方法，返回第一个参数的第二个参数次幂的值</span></span><br><span class="line"><span class="function"> round方法，返回参数值四舍五入的结果</span></span><br><span class="line"><span class="function"> random方法，产生一个大于等于0.0且小于1.0的<span class="keyword">double</span>小数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1543368661/samples/java%20files/photo-1542827634-7aa7281fb965.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、基本类型包装类&lt;br&gt;2、System类&lt;br&gt;3、Math类&lt;br&gt;4、Arrays类&lt;br&gt;5、大数据运算&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础14(正则表达式,Date类,Calendar类)</title>
    <link href="https://leesen998.github.io/2016/10/20/day16%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/20/day16笔记/</id>
    <published>2016-10-20T01:28:29.000Z</published>
    <updated>2018-11-28T14:14:03.820Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1542717026/samples/java%20files/photo-1542003075323-2baa863b682b.jpg" alt="" style="width:100%"></p><p>1、正则表达式的定义及使用<br>2、Date类的用法<br>3、Calendar类的用法</p><a id="more"></a><h3 id="01正则表达式的概念和作用"><a href="#01正则表达式的概念和作用" class="headerlink" title="01正则表达式的概念和作用"></a>01正则表达式的概念和作用</h3><pre><code>* A: 正则表达式的概念和作用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* a: 正则表达式的概述</span><br><span class="line">* <span class="string">"正则表达式也是一个【字符串】，用来定义匹配规则，在Pattern类中有简单的规则定义"</span>。</span><br><span class="line">  <span class="string">"可以结合【字符串类】的【方法】使用"</span>。</span><br><span class="line">* 简单记：正则表达式是具有特殊含义的字符串。</span><br><span class="line">* b: 正则表达式的作用</span><br><span class="line">* 比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的</span><br></pre></td></tr></table></figure><h3 id="02正则表达式语法规则"><a href="#02正则表达式语法规则" class="headerlink" title="02正则表达式语法规则"></a>02正则表达式语法规则</h3><pre><code>* A: 正则表达式语法规则</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* a: 字符</span><br><span class="line">* x  代表的是字符x</span><br><span class="line">* \\ 代表的是反斜线字符<span class="string">'\'</span></span><br><span class="line"><span class="string">* \t 代表的是制表符</span></span><br><span class="line"><span class="string">* \n 代表的是换行符</span></span><br><span class="line"><span class="string">* \r 代表的是回车符</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">* b: 字符类</span></span><br><span class="line"><span class="string">* [abc]    a、b 或 c（简单类）</span></span><br><span class="line"><span class="string">* [^abc]   任何字符，【除了】 a、b 或 c（否定）</span></span><br><span class="line"><span class="string">* [a-zA-Z] a到 z 或 A到 Z，【两头】的字母【包括在内（范围）】 </span></span><br><span class="line"><span class="string">* [0-9]    0到9的字符都包括</span></span><br><span class="line"><span class="string">* [a-zA-Z_0-9] 代表的【字母】或者【数字】或者【下划线(即单词字符)】</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">* c: 预定义字符类</span></span><br><span class="line"><span class="string">* .    : .  【任何字符】。</span></span><br><span class="line"><span class="string">* \d  ： [\\d]  数字：[0-9]   ,相反地，[\\D]: 匹配字符不是数字</span></span><br><span class="line"><span class="string">* \w  ： [\\w]  单词字符：[a-zA-Z_0-9]如"com.itheima.tests"/finish</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">* d: 边界匹配器</span></span><br><span class="line"><span class="string">* ^  代表的是行的开头</span></span><br><span class="line"><span class="string">* $  代表的是行的结尾</span></span><br><span class="line"><span class="string">* \b 代表的是单词边界</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">* e: 数量词</span></span><br><span class="line"><span class="string">* X?     X，一次或一次也没有</span></span><br><span class="line"><span class="string">* X*     X，零次或多次</span></span><br><span class="line"><span class="string">* X+     X，一次或多次</span></span><br><span class="line"><span class="string">* X&#123;n&#125;   X，恰好 n 次 </span></span><br><span class="line"><span class="string">* X&#123;n,&#125;  X，至少 n 次 </span></span><br><span class="line"><span class="string">* X&#123;n,m&#125; X，至少 n 次，但是不超过 m 次</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="string">举例：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请写出满足如下匹配规则的字符串:</span></span><br><span class="line"><span class="string">规则："[0-9]&#123;6,12&#125;"</span></span><br><span class="line"><span class="string">该规则需要匹配的内容是：长度为6位到12位的数字。</span></span><br><span class="line"><span class="string">如：使用数据"123456789"进行匹配结果为true；</span></span><br><span class="line"><span class="string">使用数据"12345"进行匹配结果为false。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规则："1[34578][0-9]&#123;9&#125;"</span></span><br><span class="line"><span class="string">该规则需要匹配的内容是：11位的手机号码，第1位为1，第2位为3、4、5、7、8中的一个，后面9位为0到9之间的任意数字。</span></span><br><span class="line"><span class="string">如：使用数据"12345678901"进行匹配结果为false；</span></span><br><span class="line"><span class="string">使用数据"13312345678"进行匹配结果为true。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规则："a*b"</span></span><br><span class="line"><span class="string">该规则需要匹配的内容是：在多个a或零个a后面有个b；b必须为最后一个字符。</span></span><br><span class="line"><span class="string">如：使用数据"aaaaab"进行匹配结果为true；</span></span><br><span class="line"><span class="string">使用数据"abc"进行匹配结果为false。</span></span><br></pre></td></tr></table></figure><h3 id="03正则表达式练习和相关的String类方法"><a href="#03正则表达式练习和相关的String类方法" class="headerlink" title="03正则表达式练习和相关的String类方法"></a>03正则表达式练习和相关的String类方法</h3><pre><code>* A: 正则表达式练习和相关的String类方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* a: <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String 正则的规则)</span> ：告知此字符串是否匹配给定的正则表达式。 </span></span><br><span class="line"><span class="function">* "abc".<span class="title">matches</span><span class="params">(<span class="string">"[a]"</span>)</span> ：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="function">* 匹配成功返回<span class="keyword">true</span></span></span><br><span class="line"><span class="function">* b: String[] <span class="title">split</span><span class="params">(String 正则的规则)</span></span></span><br><span class="line"><span class="function">* "abc".<span class="title">split</span><span class="params">(<span class="string">"a"</span>)</span>  </span></span><br><span class="line"><span class="function">* 使用规则将字符串进行切割</span></span><br><span class="line"><span class="function">* String [] rr </span>=  <span class="string">"abc"</span>.split(<span class="string">""</span>); <span class="comment">// 按每个字符切割，得到:[a,b,c]</span></span><br><span class="line">* 返回：String [] 字符串数组，它是根据给定正则表达式的匹配拆分此字符串确定的 </span><br><span class="line"></span><br><span class="line">* c: <span class="function">String <span class="title">replaceAll</span><span class="params">( String 正则规则,String 字符串)</span>：</span></span><br><span class="line"><span class="function">* 使用给定的字符串替换此字符串所有匹配给定的正则表达式的子字符串。 </span></span><br><span class="line"><span class="function">* "abc0123".<span class="title">repalceAll</span><span class="params">(<span class="string">"[\\d]"</span>,<span class="string">"#"</span>)</span></span></span><br><span class="line"><span class="function">* 按照正则的规则,替换字符串</span></span><br></pre></td></tr></table></figure><h3 id="04正则表达式匹配练习"><a href="#04正则表达式匹配练习" class="headerlink" title="04正则表达式匹配练习"></a>04正则表达式匹配练习</h3><pre><code>* A: 正则表达式匹配练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">checkTel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  检查手机号码是否合法</span></span><br><span class="line"><span class="comment"> *  1开头 可以是34578  0-9 位数固定11位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkTel</span><span class="params">()</span></span>&#123;</span><br><span class="line">String telNumber = <span class="string">"1335128005"</span>;</span><br><span class="line"><span class="comment">//String类的方法matches</span></span><br><span class="line"><span class="keyword">boolean</span> b = telNumber.matches(<span class="string">"1[34857][\\d]&#123;9&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  检查QQ号码是否合法</span></span><br><span class="line"><span class="comment"> *  0不能开头,全数字, 位数5,10位</span></span><br><span class="line"><span class="comment"> *  123456 </span></span><br><span class="line"><span class="comment"> *  \\d  \\D匹配不是数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkQQ</span><span class="params">()</span></span>&#123;</span><br><span class="line">String QQ = <span class="string">"123456"</span>;</span><br><span class="line"><span class="comment">//检查QQ号码和规则是否匹配,String类的方法matches</span></span><br><span class="line"><span class="keyword">boolean</span> b = QQ.matches(<span class="string">"[1-9][\\d]&#123;4,9&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05正则表达式切割练习"><a href="#05正则表达式切割练习" class="headerlink" title="05正则表达式切割练习"></a>05正则表达式切割练习</h3><pre><code>* A: 正则表达式切割练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">split_1();</span><br><span class="line">split_2();</span><br><span class="line">split_3();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String类方法split对字符串进行切割</span></span><br><span class="line"><span class="comment"> * 192.168.105.27 按照 点切割字符串</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * "\\."使用转义字符，因为"."表示【任何字符】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">String ip = <span class="string">"192.168.105.27"</span>;</span><br><span class="line">String[] strArr = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">System.out.println(<span class="string">"数组的长度"</span>+strArr.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; strArr.length ; i++)&#123;</span><br><span class="line">System.out.println(strArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String类方法split对字符串进行切割</span></span><br><span class="line"><span class="comment"> * 18 22 40 65 按照空格切割字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"18    22     40          65"</span>;</span><br><span class="line">String[] strArr = str.split(<span class="string">" +"</span>);</span><br><span class="line">System.out.println(<span class="string">"数组的长度"</span>+strArr.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; strArr.length ; i++)&#123;</span><br><span class="line">System.out.println(strArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  String类方法split对字符串进行切割</span></span><br><span class="line"><span class="comment"> *  12-25-36-98  按照-对字符串进行切割</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"12-25-36-98"</span>;</span><br><span class="line"><span class="comment">//按照-对字符串进行切割,String类方法split</span></span><br><span class="line">String[] strArr = str.split(<span class="string">"-"</span>);</span><br><span class="line">System.out.println(<span class="string">"数组的长度"</span>+strArr.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; strArr.length ; i++)&#123;</span><br><span class="line">System.out.println(strArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06正则表达式替换练习"><a href="#06正则表达式替换练习" class="headerlink" title="06正则表达式替换练习"></a>06正则表达式替换练习</h3><pre><code>* A: 正则表达式替换练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">replaceAll_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * "Hello12345World6789012"将所有数字替换掉</span></span><br><span class="line"><span class="comment"> * String类方法replaceAll(正则规则,替换后的新字符串)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replaceAll_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"Hello12345World6789012"</span>;</span><br><span class="line">str = str.replaceAll(<span class="string">"[\\d]+"</span>, <span class="string">"#"</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07正则表达式邮箱地址验证"><a href="#07正则表达式邮箱地址验证" class="headerlink" title="07正则表达式邮箱地址验证"></a>07正则表达式邮箱地址验证</h3><pre><code>* A: 正则表达式邮箱地址验证</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">匹配正确的数字</span><br><span class="line">匹配规则：</span><br><span class="line">匹配正整数：<span class="string">"\\d+"</span></span><br><span class="line">匹配正小数：<span class="string">"\\d+\\.\\d+"</span> </span><br><span class="line">匹配负整数：<span class="string">"-\\d+"</span></span><br><span class="line">匹配负小数：<span class="string">"-\\d+\\.\\d+"</span></span><br><span class="line">匹配保留两位小数的正数：<span class="string">"\\d+\\.\\d&#123;2&#125;"</span></span><br><span class="line">匹配保留<span class="number">1</span>-<span class="number">3</span>位小数的正数：<span class="string">"\\d+\\.\\d&#123;1,3&#125;"</span></span><br><span class="line">匹配合法的邮箱</span><br><span class="line">匹配规则：</span><br><span class="line"><span class="string">"[a-zA-Z_0-9]+@[a-zA-Z_0-9]+(\\.[a-zA-Z_0-9]+)+"</span></span><br><span class="line"><span class="string">"\\w+@\\w+(\\.\\w+)+"</span></span><br><span class="line">注意；用() 表示多个相同的匹配规则</span><br><span class="line"></span><br><span class="line">获取IP地址(<span class="number">192.168</span>.1.100)中的每段数字</span><br><span class="line">匹配规则：</span><br><span class="line"><span class="string">"\\."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* a: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">checkMail();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  检查邮件地址是否合法</span></span><br><span class="line"><span class="comment"> *  规则:</span></span><br><span class="line"><span class="comment"> *   1234567@qq.com</span></span><br><span class="line"><span class="comment"> *   mym_ail@sina.com</span></span><br><span class="line"><span class="comment"> *   nimail@163.com</span></span><br><span class="line"><span class="comment"> *   wodemail@yahoo.com.cn    </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   @: 前  数字字母_ 个数不能少于1个</span></span><br><span class="line"><span class="comment"> *   @: 后  数字字母     个数不能少于1个</span></span><br><span class="line"><span class="comment"> *   .: 后面 字母 </span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">String email =<span class="string">"abc123@sina.com"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = email.matches(<span class="string">"[a-zA-Z0-9_]+@[0-9a-z]+(\\.[a-z]+)+"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08毫秒值概念"><a href="#08毫秒值概念" class="headerlink" title="08毫秒值概念"></a>08毫秒值概念</h3><pre><code>* A: 毫秒值概念</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* a: 时间和日期类</span><br><span class="line">* java.util.Date</span><br><span class="line">* b: 毫秒概念</span><br><span class="line">* <span class="number">1000</span>毫秒=<span class="number">1</span>秒</span><br><span class="line">* c: 毫秒的<span class="number">0</span>点</span><br><span class="line"> * System.currentTimeMillis() 返回值<span class="keyword">long</span>类型参数</span><br><span class="line"> * 获取当前日期的毫秒值   <span class="number">3742769374405</span>    </span><br><span class="line"> * 时间原点; 公元<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日,午夜<span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span> 英国格林威治  毫秒值就是<span class="number">0</span></span><br><span class="line"> * 时间<span class="number">2088</span>年<span class="number">8</span>月<span class="number">8</span>日    </span><br><span class="line"> * 时间和日期的计算，必须依赖毫秒值</span><br></pre></td></tr></table></figure><h3 id="09Date类的构造方法"><a href="#09Date类的构造方法" class="headerlink" title="09Date类的构造方法"></a>09Date类的构造方法</h3><pre><code>* A: Date类的构造方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: 空参构造</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* b: 带参构造</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> times)</span></span></span><br></pre></td></tr></table></figure><h3 id="10Date类的get和set方法"><a href="#10Date类的get和set方法" class="headerlink" title="10Date类的get和set方法"></a>10Date类的get和set方法</h3><pre><code>* A：Date类的get和set方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* 将当前的日期对象，转为对应的毫秒值</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> times)</span></span>;</span><br><span class="line">* 根据给定的毫秒值，生成对应的日期对象</span><br></pre></td></tr></table></figure><h3 id="11日期格式化SimpleDateFormat"><a href="#11日期格式化SimpleDateFormat" class="headerlink" title="11日期格式化SimpleDateFormat"></a>11日期格式化SimpleDateFormat</h3><pre><code>* A: 日期格式化SimpleDateFormat</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* a: 对日期进行格式化(自定义)</span><br><span class="line">* 对日期格式化的类 java.text.DateFormat 抽象类, 普通方法,也有抽象的方法</span><br><span class="line">* 实际使用是子类 java.text.SimpleDateFormat 可以使用父类普通方法,重写了抽象方法</span><br><span class="line">* b: 对日期进行格式化的步骤</span><br><span class="line">* <span class="number">1</span>: 创建SimpleDateFormat对象</span><br><span class="line">* 在类构造方法中,写入字符串的日期格式 (自己定义)</span><br><span class="line">* <span class="number">2</span>: SimpleDateFormat调用方法format对日期进行格式化</span><br><span class="line">* <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(Date date)</span> 传递日期对象,返回字符串</span></span><br><span class="line"><span class="function">* 日期模式:</span></span><br><span class="line"><span class="function">* yyyy    年份</span></span><br><span class="line"><span class="function">* MM      月份</span></span><br><span class="line"><span class="function">* dd      月中的天数</span></span><br><span class="line"><span class="function">* HH       0-23小时</span></span><br><span class="line"><span class="function">* mm      小时中的分钟</span></span><br><span class="line"><span class="function">* ss      秒</span></span><br><span class="line"><span class="function">* yyyy年MM月dd日 HH点mm分钟ss秒  汉字修改,: -  字母表示的每个字段不可以随便写</span></span><br></pre></td></tr></table></figure><h3 id="12字符串转成日期对象"><a href="#12字符串转成日期对象" class="headerlink" title="12字符串转成日期对象"></a>12字符串转成日期对象</h3><pre><code>* A: 字符串转成日期对象</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用步骤</span><br><span class="line">* <span class="number">1</span>: 创建SimpleDateFormat的对象</span><br><span class="line">* 构造方法中,指定日期模式</span><br><span class="line">* <span class="number">2</span>: 子类对象,调用方法 parse 传递String,返回Date</span><br><span class="line">* 注意: 时间和日期的模式yyyy-MM-dd, 必须和字符串中的时间日期匹配</span><br><span class="line">*西方星期的开始为周日，中国为周一。</span><br><span class="line">在Calendar类中，<span class="string">"月份的表示是以0-11代表1-12月"</span>。</span><br><span class="line">日期是有大小关系的，时间靠后，时间越大。</span><br></pre></td></tr></table></figure><h3 id="13Calendar类-1"><a href="#13Calendar类-1" class="headerlink" title="13Calendar类_1"></a>13Calendar类_1</h3><pre><code>* A: Calendar类_1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* a: 日历类(抽象类)</span><br><span class="line">* java.util.Calendar</span><br><span class="line">* b: 创建对象</span><br><span class="line">* <span class="string">"Calendar类写了【静态方法】 getInstance() 【直接】返回了【子类的对象】"</span></span><br><span class="line">* <span class="string">"【不需要】直接new子类的对象,通过【静态方法】直接获取"</span></span><br></pre></td></tr></table></figure><h3 id="14Calendar类-2"><a href="#14Calendar类-2" class="headerlink" title="14Calendar类_2"></a>14Calendar类_2</h3><pre><code>* A: Calendar类_2</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* a: 成员方法</span><br><span class="line">* getTime() 把日历对象,转成Date日期对象</span><br><span class="line">* get(日历字段) 获取指定日历字段的值</span><br><span class="line">* b: 代码演示</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 获取年份</span></span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获取月份</span></span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获取天数</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>);</span><br></pre></td></tr></table></figure><h3 id="15Calendar类-3"><a href="#15Calendar类-3" class="headerlink" title="15Calendar类_3"></a>15Calendar类_3</h3><pre><code>* A: Calendar类_3</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">* a: 成员方法</span><br><span class="line">* set(<span class="keyword">int</span> field,<span class="keyword">int</span> value)  设置指定的时间</span><br><span class="line">* b: 代码演示</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calendar类的set方法 设置日历 set(int field,int value) field 设置的是哪个日历字段 value</span></span><br><span class="line"><span class="comment"> * 设置后的具体数值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * set(int year,int month,int day) 传递3个整数的年,月,日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 设置,月份,设置到10月分</span></span><br><span class="line"><span class="comment">// c.set(Calendar.MONTH, 9);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置年,月,日</span></span><br><span class="line">c.set(<span class="number">2099</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取年份</span></span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获取月份</span></span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获取天数</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16Calendar类-4"><a href="#16Calendar类-4" class="headerlink" title="16Calendar类_4"></a>16Calendar类_4</h3><pre><code>* A: Calendar类_4</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* a: 成员方法</span><br><span class="line">* add(<span class="keyword">int</span> field, <span class="keyword">int</span> value) 进行整数的偏移</span><br><span class="line">* <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span> 获取指定字段的值</span></span><br><span class="line"><span class="function">* b: 案例演示</span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment"> * Calendar类方法add 日历的偏移量,</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 可以指定一个日历中的字段,</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 进行整数的偏移 add(int field, int value)</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 让日历中的天数,向后偏移280天</span></span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, -<span class="number">280</span>);</span><br><span class="line"><span class="comment">// 获取年份</span></span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获取月份</span></span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获取天数</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17日期练习-活了多少天"><a href="#17日期练习-活了多少天" class="headerlink" title="17日期练习_活了多少天"></a>17日期练习_活了多少天</h3><pre><code>* A: 日期练习_活了多少天</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  计算活了多少天</span></span><br><span class="line"><span class="comment"> *   生日  今天的日期</span></span><br><span class="line"><span class="comment"> *   两个日期变成毫秒值,减法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入出生日期 格式 YYYY-MM-dd"</span>);</span><br><span class="line"><span class="comment">//获取出生日期,键盘输入</span></span><br><span class="line">String birthdayString = <span class="keyword">new</span> Scanner(System.in).next();</span><br><span class="line"><span class="comment">//将字符串日期,转成Date对象</span></span><br><span class="line"><span class="comment">//创建SimpleDateFormat对象,写日期模式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">//调用方法parse,字符串转成日期对象</span></span><br><span class="line">Date birthdayDate = sdf.parse(birthdayString);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取今天的日期对象</span></span><br><span class="line">Date todayDate = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将两个日期转成毫秒值,Date类的方法getTime</span></span><br><span class="line"><span class="keyword">long</span> birthdaySecond = birthdayDate.getTime();</span><br><span class="line"><span class="keyword">long</span> todaySecond = todayDate.getTime();</span><br><span class="line"><span class="keyword">long</span> secone = todaySecond-birthdaySecond;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(secone &lt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"还没出生呢"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(secone/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18日期练习-闰年计算"><a href="#18日期练习-闰年计算" class="headerlink" title="18日期练习_闰年计算"></a>18日期练习_闰年计算</h3><pre><code>* A: 日期练习_闰年计算</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  闰年计算</span></span><br><span class="line"><span class="comment"> *  2000 3000</span></span><br><span class="line"><span class="comment"> *  高级的算法: 日历设置到指定年份的3月1日,add向前偏移1天,获取天数,29闰年</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//将日历,设置到指定年的3月1日</span></span><br><span class="line">c.set(<span class="number">2088</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//日历add方法,向前偏移1天</span></span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//get方法获取天数</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19总结"><a href="#19总结" class="headerlink" title="19总结"></a>19总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> 正则表达式：用来定义匹配规则，匹配一系列符合某个句法规则的字符串。</span><br><span class="line">正则表达式的匹配规则</span><br><span class="line">请参见<span class="number">1.2</span> 正则表达式的匹配规则</span><br><span class="line">正则表达式的常用方法：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> <span class="comment">//判断字符串是否匹配给定的规则</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span> <span class="comment">//根据给定正则表达式的匹配规则，拆分此字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex,String replacement)</span><span class="comment">//将符合规则的字符串内容，全部替换为新字符串</span></span></span><br><span class="line"><span class="function">————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="function"> Date: 日期/时间类</span></span><br><span class="line"><span class="function">构造方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span><span class="comment">// 系统当前日期时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span> 得到一个1970年1月1日 0点这个时间基础上，加上参数date 毫秒值对应的日期时间</span></span><br><span class="line"><span class="function">方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> 获取日期所对应的毫秒值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> times)</span></span>;</span><br><span class="line">* 根据给定的毫秒值，生成对应的日期对象</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> DateFormat:是日期/时间格式化子类的抽象类, 使用其子类SimpleDateFormat 实例化</span><br><span class="line">构造方法：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span> 默认的格式化操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span> 按照指定的格式，进行日期格式化</span></span><br><span class="line"><span class="function">日期和时间模式</span></span><br><span class="line"><span class="function">y  年  </span></span><br><span class="line"><span class="function">M  年中的月份  </span></span><br><span class="line"><span class="function">d  月份中的天数 </span></span><br><span class="line"><span class="function">H  一天中的小时数（0-23） </span></span><br><span class="line"><span class="function">m  小时中的分钟数 </span></span><br><span class="line"><span class="function">s  分钟中的秒数 </span></span><br><span class="line"><span class="function">S  毫秒数 </span></span><br><span class="line"><span class="function">方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span> 把日期 格式化成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span> 把日期字符串 转换成 日期对象</span></span><br><span class="line"><span class="function">————————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="function"> Calendar:日历类，可获取日期中指定字段的值</span></span><br><span class="line"><span class="function">方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> <span class="comment">//获取日期对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span><span class="comment">//获取时间字段值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> amount)</span><span class="comment">//指定字段增加某值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span><span class="comment">//设置指定字段的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span><span class="comment">//获取该日历对象转成的日期对象</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1542717026/samples/java%20files/photo-1542003075323-2baa863b682b.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、正则表达式的定义及使用&lt;br&gt;2、Date类的用法&lt;br&gt;3、Calendar类的用法&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础13(Object,String,StringBuilder)</title>
    <link href="https://leesen998.github.io/2016/10/18/day15%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/18/day15笔记/</id>
    <published>2016-10-18T05:21:53.000Z</published>
    <updated>2018-11-20T12:19:44.240Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1542291563/samples/java%20files/photo-1541631706300-676537664e86.jpg" alt="" style="width:100%"></p><p>1、Object<br>2、String<br>3、StringBuilder</p><a id="more"></a><h3 id="01API概念"><a href="#01API概念" class="headerlink" title="01API概念"></a>01API概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* A:API(Application Programming Interface) </span><br><span class="line">* 应用程序编程接口</span><br><span class="line">* B:Java API</span><br><span class="line">* 就是Java提供给我们使用的类，这些类将底层的实现封装了起来，</span><br><span class="line">* 我们不需要关心这些类是如何实现的，只需要学习这些类如何使用。</span><br><span class="line">* C: 演示查看Object类中的相关方法</span><br></pre></td></tr></table></figure><h3 id="02Object类概述"><a href="#02Object类概述" class="headerlink" title="02Object类概述"></a>02Object类概述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* A:Object类概述</span><br><span class="line">* <span class="string">"类层次结构的【根类】</span></span><br><span class="line"><span class="string">* 【所有类】都【直接】或者【间接】的【继承】自该类</span></span><br><span class="line"><span class="string">* Object中描述的【所有方法】【子类】【都可以使用】</span></span><br><span class="line"><span class="string">* 所有类在创建对象的时候，最终找的父类就是Object"</span>。</span><br><span class="line">* B:构造方法</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">Object</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* 回想面向对象中为什么说：</span></span><br><span class="line"><span class="function">* 子类的构造方法默认访问的是父类的无参构造方法</span></span><br></pre></td></tr></table></figure><h3 id="03equals方法比较内存地址"><a href="#03equals方法比较内存地址" class="headerlink" title="03equals方法比较内存地址"></a>03equals方法比较内存地址</h3><pre><code>* A:equals方法比较内存地址</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">* a: Object类中的equals方法</span><br><span class="line">* 用于比较两个对象是否相同，Object类中就是使用两个对象的内存地址在比较。</span><br><span class="line">* Object类中的equals方法内部使用的就是==比较运算符。</span><br><span class="line"></span><br><span class="line">* b: 案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将父类的equals方法写过来,重写父类的方法</span></span><br><span class="line"><span class="comment"> * 但是,不改变父类方法的源代码, 方法equals 比较两个对象的内存地址</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span> == obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEquals</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Person类继承Object类,继承下来了父类的方法equals</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//Person对象p1,调用父类的方法equals,进行对象的比较</span></span><br><span class="line"><span class="keyword">boolean</span> b = p1.equals(p1);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1542597521/samples/java%20files/equals%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80.jpg" alt="方法调用的内存图"></p><h3 id="04重写equals方法"><a href="#04重写equals方法" class="headerlink" title="04重写equals方法"></a>04重写equals方法</h3><pre><code>* A: 重写equals方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">* a: 开发中要比较两个对象是否相同，经常会根据对象中的属性值进行比较</span><br><span class="line">* b: 在开发经常需要子类重写equals方法根据对象的属性值进行比较。</span><br><span class="line">* c: ==号和equals方法的区别</span><br><span class="line">* <span class="string">"==是一个比较运算符号,既可以比较基本数据类型,也可以比较引用数据类型,</span></span><br><span class="line"><span class="string">* 基本数据类型比较的是值,引用数据类型比较的是地址值"</span></span><br><span class="line"></span><br><span class="line">* <span class="string">"equals方法是一个方法,【只能】【比较】【引用数据类型】,所有的对象都会继承Object类中的方法,</span></span><br><span class="line"><span class="string">如果【没有】重写Object类中的equals方法,</span></span><br><span class="line"><span class="string">equals方法和==号比较引用数据类型无区别,重写后的equals方法比较的是对象中的属性"</span></span><br><span class="line">* d: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写父类的方法toString()</span></span><br><span class="line"><span class="comment"> * 没有必要让调用者看到内存地址</span></span><br><span class="line"><span class="comment"> * 要求: 方法中,返回类中所有成员变量的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将父类的equals方法写过来,重写父类的方法</span></span><br><span class="line"><span class="comment"> * 但是,不改变父类方法的源代码, 方法equals 比较两个对象的内存地址</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 两个对象,比较地址,没有意义</span></span><br><span class="line"><span class="comment"> * 比较两个对象的成员变量,age</span></span><br><span class="line"><span class="comment"> * 两个对象变量age相同,返回true,不同返回false</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 重写父类的equals,自己定义自己对象的比较方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">this</span> == obj)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对参数obj,非null判断</span></span><br><span class="line"><span class="keyword">if</span>( obj == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( obj <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line"><span class="comment">// 参数obj接受到是Person对象,才能转型</span></span><br><span class="line"><span class="string">"由于多态【编译】看父类，【父类】Object 没有成员变量age, </span></span><br><span class="line"><span class="string">必须【向下转型】为 Person 类型，才能调用成员变量 age"</span></span><br><span class="line"><span class="comment">// 对obj参数进行类型的向下转型,obj转成Person类型</span></span><br><span class="line">Person p = (Person)obj;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age ==  p.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEquals</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Person类继承Object类,继承下来了父类的方法equals</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//Person对象p1,调用父类的方法equals,进行对象的比较</span></span><br><span class="line"><span class="keyword">boolean</span> b = p1.equals(p1);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05重写toString方法"><a href="#05重写toString方法" class="headerlink" title="05重写toString方法"></a>05重写toString方法</h3><pre><code>* A: 重写toString方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* a: 为什么要重写toString方法</span><br><span class="line">* <span class="string">"toString方法返回该对象的【字符串】表示"</span>，</span><br><span class="line">* 其实该字符串内容就是<span class="string">"【对象的类型】+ @ + 【内存地址值】"</span>。</span><br><span class="line">* 由于toString方法返回的结果是内存地址，</span><br><span class="line">* 而在<span class="string">"开发"</span>中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要<span class="string">"重写"</span>它。</span><br><span class="line">* <span class="string">"Object类中的toString的核心代码"</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">getClass().getName() + @ + Integer.toHexString(hashCode())</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">* 由于默认情况下的数据对我们来说没有意义，一般建议重写该方法。</span><br><span class="line">* b: 案例核心代码(重写Person类中的toString方法)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写父类的方法toString()</span></span><br><span class="line"><span class="comment"> * 没有必要让调用者看到内存地址</span></span><br><span class="line"><span class="comment"> * 要求: 方法中,返回类中所有成员变量的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Eclipse中自动生成的toString</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestToString</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用Person类的方法toString()</span></span><br><span class="line"><span class="comment">//输出语句中,写的是一个对象,默认调用对象的toString方法</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line">String s = p.toString();</span><br><span class="line">System.out.println(p);</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * System.out.println(p);</span></span><br><span class="line"><span class="comment"> * System.out.println(p.toString());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Random r = new Random();</span></span><br><span class="line"><span class="comment">System.out.println(r.toString());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">System.out.println(sc.toString());*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06String类的概念和不变性"><a href="#06String类的概念和不变性" class="headerlink" title="06String类的概念和不变性"></a>06String类的概念和不变性</h3><pre><code>* A: String类的概念和不变性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">* a:String类</span><br><span class="line">* API中的String类的描述，发现String 类代表字符串</span><br><span class="line">* Java 程序中的所有字符串字面值（如 <span class="string">"abc"</span> ）都作为此类的实例实现。</span><br><span class="line">* ———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* <span class="string">"【字符串】是【常量】,在创建之后不能更改"</span></span><br><span class="line">* ———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* <span class="string">"其实就是说一旦这个字符串确定了，那么就会【在内存区域中】就【生成】了【这个字符串】。"</span></span><br><span class="line">* ———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">*<span class="string">" 【字符串】【本身】【不能改变】，但str变量中记录的【地址值】是【可以改变】的。"</span></span><br><span class="line">* ———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* 源码分析,String类底层采用的是<span class="string">"【字符数组】"</span>:</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]</span><br><span class="line"><span class="keyword">private</span> 修饰说明<span class="string">"value只能在【String类内部】使用,而且又没有提供get方法,</span></span><br><span class="line"><span class="string">所以【外部无法获取value数组】,就无法改变数组中元素的值"</span></span><br><span class="line"><span class="keyword">final</span>修饰说明<span class="string">"value是常量,【一旦创建】,就【不能被改变】,</span></span><br><span class="line"><span class="string">value一旦被初始化成某个数组,将永远指向这个数组,不可能再指向其它的数组了"</span></span><br><span class="line"></span><br><span class="line">* b: 案例代码</span><br><span class="line"><span class="string">"/*</span></span><br><span class="line"><span class="string"> *   String类特点:</span></span><br><span class="line"><span class="string"> *     一切都是对象,字符串事物 "</span><span class="string">" 也是对象</span></span><br><span class="line"><span class="string"> *     类是描述事物,String类,描述字符串对象的类</span></span><br><span class="line"><span class="string"> *     所有的 "</span><span class="string">" 都是String类的对象</span></span><br><span class="line"><span class="string"> *     </span></span><br><span class="line"><span class="string"> *     字符串是一个常量,一旦创建,不能改变</span></span><br><span class="line"><span class="string"> *     字符串本质是 【字符数组】</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//引用变量str指向内存变化</span></span><br><span class="line"><span class="comment">//定义好的字符串对象,不变</span></span><br><span class="line">String str = <span class="string">"itcast"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">str = <span class="string">"itheima"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1542597521/samples/java%20files/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%8D%E5%8F%98%E6%80%A7.jpg" alt="方法调用的内存图"></p><h3 id="07String类创建方式和比较"><a href="#07String类创建方式和比较" class="headerlink" title="07String类创建方式和比较"></a>07String类创建方式和比较</h3><pre><code>* A: String类创建方式和比较</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">* a: <span class="string">"创建对象的【数量】比较"</span></span><br><span class="line"> * String s3 = <span class="string">"abc"</span>;</span><br><span class="line"> * <span class="string">"在内存中【只有一个对象】。这个对象在【字符串常量池】中"</span></span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> * String s4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line"> * <span class="string">"在内存中有【两个对象】。一个new的对象在【堆】中，另一个是字符串本身对象，在【字符串常量池】中"</span></span><br><span class="line"></span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="string">"String重写了equals方法，</span></span><br><span class="line"><span class="string">建立了字符串自己的判断相同的依据（通过【字符串对象】中的【字符】进行判断）"</span>，</span><br><span class="line"><span class="string">"即【字符】相同"</span> ，返回<span class="keyword">true</span>；否则，返回<span class="keyword">false</span>。</span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="string">"引用数据类型,比较对象的地址"</span></span><br><span class="line"><span class="string">"如果String缓冲池内【存在】与其【指定值】【【相同】】的String对象，</span></span><br><span class="line"><span class="string">那么此时虚拟机将【不】为此创建【新】的String对象】，而直接返回【已存在】的String对象的【引用】。"</span></span><br><span class="line">String s1 = <span class="string">"java"</span>;</span><br><span class="line">String s2 = <span class="string">"java"</span>;</span><br><span class="line">System.out.println(s1==s2);    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="string">"如果String缓冲池内【【不存在】】与其指定值相同的String对象，</span></span><br><span class="line"><span class="string">那么此时虚拟机将为此【【创建新】】的String对象，并存放在String缓冲池内。"</span></span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">* b: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字符串定义方式2个, 直接=  使用String类的构造方法</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String str2 = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(str1);</span><br><span class="line">System.out.println(str2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//str1==str2</span></span><br><span class="line"><span class="string">"引用数据类型,比较对象的地址"</span></span><br><span class="line">System.out.println(str1==str2);<span class="comment">//引用数据类型,比较对象的地址 false</span></span><br><span class="line"><span class="comment">//str1.equals(str2)</span></span><br><span class="line"><span class="string">"因为String重写了equals方法，</span></span><br><span class="line"><span class="string">建立了字符串自己的判断相同的依据（通过【字符串对象】中的【字符】进行判断）"</span></span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////</span></span><br><span class="line">String s1 = <span class="string">"java"</span>;</span><br><span class="line">String s2 = <span class="string">"java"</span>;</span><br><span class="line"><span class="string">"引用数据类型,比较对象的地址"</span></span><br><span class="line"><span class="string">"如果String缓冲池内存在与其【指定值】【相同】的String对象，</span></span><br><span class="line"><span class="string">那么此时虚拟机将【不】为此创建【新】的String对象】，</span></span><br><span class="line"><span class="string">而直接返回【已存在】的String对象的【引用】。"</span></span><br><span class="line">System.out.println(s1==s2);            <span class="comment">//true</span></span><br><span class="line">System.out.println(s1.equals(s2));    <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1542599022/samples/java%20files/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83.jpg" alt="方法调用的内存图"></p><h3 id="08String类构造方法"><a href="#08String类构造方法" class="headerlink" title="08String类构造方法"></a>08String类构造方法</h3><pre><code>* A: String类构造方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* a: 常见构造方法</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span>:空构造</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span>:把字节数组转成字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes,<span class="keyword">int</span> index,<span class="keyword">int</span> length)</span>:把字节数组的一部分转成字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span>:把字符串常量值转成字符串</span></span><br><span class="line"><span class="function">* b: 案例代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class StringDemo3 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">function_1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义方法,String类的构造方法</span></span><br><span class="line"><span class="comment"> *  String(byte[] bytes)  传递字节数组</span></span><br><span class="line"><span class="comment"> *  字节数组转成字符串</span></span><br><span class="line"><span class="comment"> *  通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</span></span><br><span class="line"><span class="comment"> *  平台 : 机器操作系统</span></span><br><span class="line"><span class="comment"> *  默认字符集: 操作系统中的默认编码表, 默认编码表GBK</span></span><br><span class="line"><span class="comment"> *  将字节数组中的每个字节,查询了编码表,得到的结果</span></span><br><span class="line"><span class="comment"> *  字节是负数,汉字的字节编码就是负数, 默认编码表 ,一个汉字采用2个字节表示</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  String(byte[] bytes, int offset, int length) 传递字节数组</span></span><br><span class="line"><span class="comment"> *  字节数组的一部分转成字符串</span></span><br><span class="line"><span class="comment"> *  offset 数组的起始的索引</span></span><br><span class="line"><span class="comment"> *  length 个数,转几个   , 不是结束的索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//调用String类的构造方法,传递字节数组</span></span><br><span class="line">String s = <span class="keyword">new</span> String(bytes);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bytes1 =&#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line"><span class="comment">//调用String构造方法,传递数组,传递2个int值</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(bytes1,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09String类构造方法-2"><a href="#09String类构造方法-2" class="headerlink" title="09String类构造方法_2"></a>09String类构造方法_2</h3><pre><code>* A: String类构造方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">* a: 常见构造方法</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value)</span>:把字符数组转成字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value,<span class="keyword">int</span> index,<span class="keyword">int</span> count)</span>:把字符数组的一部分转成字符串</span></span><br><span class="line"><span class="function">* B: 案例代码</span></span><br><span class="line"><span class="function"> <span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">  *  String类构造方法</span></span></span><br><span class="line"><span class="function"><span class="comment">  *  String类的构造方法,重载形式</span></span></span><br><span class="line"><span class="function"><span class="comment">  * </span></span></span><br><span class="line"><span class="function"><span class="comment">  */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class StringDemo3 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">function_1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String(char[] value) 传递字符数组</span></span><br><span class="line"><span class="comment"> * 将字符数组,转成字符串, 字符数组的参数,不查询编码表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * String(char[] value, int offset, int count) 传递字符数组</span></span><br><span class="line"><span class="comment"> * 将字符数组的一部分转成字符串</span></span><br><span class="line"><span class="comment"> * offset  数组开始索引</span></span><br><span class="line"><span class="comment"> * count   个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] ch = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</span><br><span class="line"><span class="comment">//调用String构造方法,传递字符数组</span></span><br><span class="line">String s = <span class="keyword">new</span> String(ch);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="keyword">new</span> String(ch,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10String类的其他方法"><a href="#10String类的其他方法" class="headerlink" title="10String类的其他方法"></a>10String类的其他方法</h3><pre><code>* A：String类的其他方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">* a: 方法介绍</span><br><span class="line">* <span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>:返回指定索引处的 <span class="keyword">char</span> 值。索引范围为从 0 到 <span class="title">length</span><span class="params">()</span> - 1。</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>: 返回字符串的长度</span></span><br><span class="line"><span class="function">* String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex,<span class="keyword">int</span> endIndex)</span>: 获取字符串的一部分</span></span><br><span class="line"><span class="function">* String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span>: 获取字符串的一部分</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span>: 判断一个字符串是不是另一个字符串的前缀,开头</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String prefix)</span>: 判断一个字符串是不是另一个字符串的后缀,结尾</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">contains</span> <span class="params">(String s)</span>: 判断一个字符串中,是否包含另一个字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span> ch)</span>:  查找一个字符,在字符串中第一次出现的索引,被查找的字符不存在,返回-1</span></span><br><span class="line"><span class="function">* <span class="keyword">byte</span>[] <span class="title">getBytes</span><span class="params">()</span>: 将字符串转成字节数组,此功能和String构造方法相反,<span class="keyword">byte</span>数组相关的功能,查询编码表</span></span><br><span class="line"><span class="function">* <span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span>: 将字符串转成字符数组,功能和构造方法相反</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>: 方法传递字符串,判断字符串中的字符是否完全相同,如果完全相同返回<span class="keyword">true</span></span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String s)</span>: 传递字符串,判断字符串中的字符是否相同,忽略大小写</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* b: 案例代码</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class StringDemo4 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">function_9();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  boolean equals(Object obj)</span></span><br><span class="line"><span class="comment"> *  方法传递字符串,判断字符串中的字符是否完全相同,如果完全相同返回true</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  boolean equalsIgnoreCase(String s)</span></span><br><span class="line"><span class="comment"> *  传递字符串,判断字符串中的字符是否相同,忽略大小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_9</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str1 = <span class="string">"Abc"</span>;</span><br><span class="line">String str2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//分别调用equals和equalsIgnoreCase</span></span><br><span class="line"><span class="keyword">boolean</span> b1 = str1.equals(str2);</span><br><span class="line"><span class="keyword">boolean</span> b2 = str1.equalsIgnoreCase(str2);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">System.out.println(b2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * char[] toCharArray() 将字符串转成字符数组</span></span><br><span class="line"><span class="comment"> * 功能和构造方法相反</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_8</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"itcast"</span>;</span><br><span class="line"><span class="comment">//调用String类的方法toCharArray()</span></span><br><span class="line"><span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; ch.length ; i++)&#123;</span><br><span class="line">System.out.println(ch[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  byte[] getBytes() 将字符串转成字节数组</span></span><br><span class="line"><span class="comment"> *  此功能和String构造方法相反</span></span><br><span class="line"><span class="comment"> *  byte数组相关的功能,查询编码表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_7</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//调用String类方法getBytes字符串转成字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; bytes.length ; i++)&#123;</span><br><span class="line">System.out.println(bytes[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  int indexOf(char ch)</span></span><br><span class="line"><span class="comment"> *  查找一个字符,在字符串中第一次出现的索引</span></span><br><span class="line"><span class="comment"> *  被查找的字符不存在,返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_6</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"itcast.cn"</span>;</span><br><span class="line"><span class="comment">//调用String类的方法indexOf</span></span><br><span class="line"><span class="keyword">int</span> index = str.indexOf(<span class="string">'x'</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  boolean contains (String s)</span></span><br><span class="line"><span class="comment"> *  判断一个字符串中,是否包含另一个字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_5</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"itcast.cn"</span>;</span><br><span class="line"><span class="comment">//调用String类的方法contains</span></span><br><span class="line"><span class="keyword">boolean</span> b =str.contains(<span class="string">"ac"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean endsWith(String prefix)</span></span><br><span class="line"><span class="comment"> * 判断一个字符串是不是另一个字符串的后缀,结尾</span></span><br><span class="line"><span class="comment"> * Demo.java</span></span><br><span class="line"><span class="comment"> *     .java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"Demo.java"</span>;</span><br><span class="line"><span class="comment">//调用String类方法endsWith</span></span><br><span class="line"><span class="keyword">boolean</span> b = str.endsWith(<span class="string">".java"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean startsWith(String prefix)  </span></span><br><span class="line"><span class="comment"> * 判断一个字符串是不是另一个字符串的前缀,开头</span></span><br><span class="line"><span class="comment"> * howareyou</span></span><br><span class="line"><span class="comment"> * hOw</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String str = <span class="string">"howareyou"</span>;</span><br><span class="line">  <span class="comment">//调用String类的方法startsWith</span></span><br><span class="line">  <span class="keyword">boolean</span> b = str.startsWith(<span class="string">"hOw"</span>);</span><br><span class="line">  System.out.println(b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  String substring(int beginIndex,int endIndex) 获取字符串的一部分</span></span><br><span class="line"><span class="comment"> *  返回新的字符串</span></span><br><span class="line"><span class="comment"> *  包含头,不包含尾巴</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  String substring(int beginIndex)获取字符串的一部分</span></span><br><span class="line"><span class="comment"> *  包含头,后面的字符全要</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"howareyou"</span>;</span><br><span class="line"><span class="comment">//调用String类方法substring获取字符串一部分</span></span><br><span class="line">str= str.substring(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">String str2 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">str2 = str2.substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(str2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  int length() 返回字符串的长度</span></span><br><span class="line"><span class="comment"> *  包含多少个字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = <span class="string">"cfxdf#$REFewfrt54GT"</span>;</span><br><span class="line"><span class="comment">//调用String类方法length,获取字符串长度</span></span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br><span class="line">System.out.println(length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11String类练习"><a href="#11String类练习" class="headerlink" title="11String类练习"></a>11String类练习</h3><pre><code>* A: 获取指定字符串中，大写字母、小写字母、数字的个数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* a: 题目分析</span><br><span class="line">* 为了统计大写字母、小写字母、数字的个数。创建<span class="number">3</span>个计数的变量。</span><br><span class="line">* 为了获取到字符串中的每个字符，进行字符串的遍历，得到每个字符。</span><br><span class="line">* 对得到的字符进行判断，如果该字符为大写字母，则大写字母个数+<span class="number">1</span>；</span><br><span class="line">* 如果该字符为小写字母，则小写字母个数+<span class="number">1</span>；如果该字符为数字，则数字个数+<span class="number">1</span>。</span><br><span class="line">* 显示大写字母、小写字母、数字的个数</span><br><span class="line"></span><br><span class="line">* b: 解题步骤</span><br><span class="line">* 略</span><br><span class="line">* 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">getCount(<span class="string">"A%A3eBr1FFy"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取指定字符串中，大写字母、小写字母、数字的个数。</span></span><br><span class="line"><span class="comment"> * 思想:</span></span><br><span class="line"><span class="comment"> *   1. 计数器,就是int变量,满足一个条件 ++</span></span><br><span class="line"><span class="comment"> *   2. 遍历字符串, 长度方法length() + charAt() 遍历</span></span><br><span class="line"><span class="comment"> *   3. 字符判断是大写,是小写,还是数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCount</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义三个变量,计数</span></span><br><span class="line"><span class="keyword">int</span> upper = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lower = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//对字符串遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str.length() ; i++)&#123;</span><br><span class="line"><span class="comment">//String方法charAt,索引,获取字符</span></span><br><span class="line"><span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line"><span class="comment">//利用编码表 65('A')-90('Z')  97('a')-122('z')  48('0')-57('9')</span></span><br><span class="line"><span class="keyword">if</span>(c &gt;=<span class="string">'A'</span> &amp;&amp; c &lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">upper++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">lower++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">digit++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(upper);</span><br><span class="line">System.out.println(lower);</span><br><span class="line">System.out.println(digit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12String类练习-2"><a href="#12String类练习-2" class="headerlink" title="12String类练习_2"></a>12String类练习_2</h3><pre><code>* A: 将字符串中，第一个字母转换成大写，其他字母转换成小写，并打印改变后的字符串。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* a: 题目分析</span><br><span class="line">*  <span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>: 返回要转换为大写的 String。</span></span><br><span class="line"><span class="function">*  String <span class="title">toLowerCase</span><span class="params">()</span>: 返回要转换为小写的 String。</span></span><br><span class="line"><span class="function">* 把字符串分为两个部分，第一部分为字符串中第一个字母，第二部分为剩下的字符串。</span></span><br><span class="line"><span class="function">* 把第一部分字符串转换成大写字母，把第二部分字符串转换成小写字母</span></span><br><span class="line"><span class="function">* 把两部分字符串连接在一起，得到一个完整的字符串</span></span><br><span class="line"><span class="function">* b: 解题步骤</span></span><br><span class="line"><span class="function">* 略</span></span><br><span class="line"><span class="function">* C: 案例代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class StringTest </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(toConvert(<span class="string">"aBc5%4dEF"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  将字符串的首字母转成大写,其他内容转成小写</span></span><br><span class="line"><span class="comment"> *  思想:</span></span><br><span class="line"><span class="comment"> *    获取首字母, charAt(0)  substring(0,1)</span></span><br><span class="line"><span class="comment"> *    转成大写 toUpperCase()</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *    获取剩余字符串, substring(1)  toLowerCase()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toConvert</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义变量,保存首字母,和剩余字符</span></span><br><span class="line">String first = str.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">String after = str.substring(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//调用String类方法,大写,小写转换</span></span><br><span class="line">first = first.toUpperCase();</span><br><span class="line">after = after.toLowerCase();</span><br><span class="line"><span class="keyword">return</span> first+after;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13String类练习-3"><a href="#13String类练习-3" class="headerlink" title="13String类练习_3"></a>13String类练习_3</h3><pre><code>* A: 查询大字符串中，出现指定小字符串的次数* 如&quot;hellojava,nihaojava,javazhenbang&quot;中查询出现&quot;java&quot;的次数。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">*利用：</span><br><span class="line">* <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>:返回指定子字符串在此字符串中第一次出现处的索引。</span></span><br><span class="line"><span class="function">* String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> :返回一个新的字符串，它是此字符串的一个子字符串。</span></span><br><span class="line"><span class="function">* a: 题目分析</span></span><br><span class="line"><span class="function">* 在大串中，查找小串出现的位置，出现了就次数+1</span></span><br><span class="line"><span class="function">* 在上次小串出现位置的后面继续查找，需要更改大串的内容为上次未查询到的字符串。</span></span><br><span class="line"><span class="function">* 回到第一步，继续查找小串出现的位置，直到大串中查询不到小串为止</span></span><br><span class="line"><span class="function">* b: 解题步骤</span></span><br><span class="line"><span class="function">* 略</span></span><br><span class="line"><span class="function">* C: 案例代码</span></span><br><span class="line"><span class="function"><span class="keyword">package</span> cn.itcast.demo02</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(getStringCount(<span class="string">"hellojava,nijavahaojava,javazhenbang"</span>, <span class="string">"java"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  获取一个字符串中,另一个字符串出现的次数</span></span><br><span class="line"><span class="comment"> *  思想:</span></span><br><span class="line"><span class="comment"> *    1. indexOf到字符串中到第一次出现的索引</span></span><br><span class="line"><span class="comment"> *    2. 找到的索引+被找字符串长度,截取字符串</span></span><br><span class="line"><span class="comment"> *    3. 计数器++</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStringCount</span><span class="params">(String str, String key)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义计数器</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义变量,保存indexOf查找后的索引的结果</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="string">"开始循环找,条件,indexOf==-1 字符串没有了"</span></span><br><span class="line"><span class="keyword">while</span>(( index = str.indexOf(key) )!= -<span class="number">1</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//获取到的索引,和字符串长度求和,截取字符串</span></span><br><span class="line">str = str.substring(index+key.length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14StringBuffer特点可变字符数组"><a href="#14StringBuffer特点可变字符数组" class="headerlink" title="14StringBuffer特点可变字符数组"></a>14StringBuffer特点可变字符数组</h3><pre><code>* A:StringBuffer类概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*<span class="string">"StringBuffe：可变字符数组"</span></span><br><span class="line">* 通过JDK提供的API，查看StringBuffer类的说明</span><br><span class="line">* <span class="string">"【线程安全】的【可变字符序列】 "</span></span><br><span class="line">* <span class="string">"底层采用【字符数组】实现,初始容量为【16】"</span></span><br><span class="line">* B:StringBuffer和String的区别</span><br><span class="line">* <span class="string">"String是一个【不可变】的字符序列"</span></span><br><span class="line">* <span class="string">"StringBuffer是一个【可变】的字符序列"</span></span><br></pre></td></tr></table></figure><h3 id="15StringBuffer类的方法"><a href="#15StringBuffer类的方法" class="headerlink" title="15StringBuffer类的方法"></a>15StringBuffer类的方法</h3><pre><code>* A: StringBuffer类的方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">* a: 方法介绍</span><br><span class="line">* <span class="function">StringBuffer <span class="title">append</span><span class="params">()</span>, 将任意类型的数据,添加缓冲区</span></span><br><span class="line"><span class="function">*  append 返回值,写return <span class="keyword">this</span></span></span><br><span class="line"><span class="function">*  调用者是谁,返回值就是谁</span></span><br><span class="line"><span class="function">* <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>: 删除缓冲区中字符</span></span><br><span class="line"><span class="function">*  开始索引包含,结尾索引不包含</span></span><br><span class="line"><span class="function">* <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, 任意类型)</span>: 将任意类型数据,插入到缓冲区的指定索引上</span></span><br><span class="line"><span class="function">* <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end, String str)</span>: 将指定的索引范围内的所有字符,替换成新的字符串</span></span><br><span class="line"><span class="function">* <span class="title">reverse</span><span class="params">()</span>: 将缓冲区中的字符反转</span></span><br><span class="line"><span class="function">* String <span class="title">toString</span><span class="params">()</span>: 继承Object,重写<span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">*   将缓冲区中的所有字符,变成字符串</span></span><br><span class="line"><span class="function">* b: 案例代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class StringBufferDemo </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">function_5();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  StringBuffer类的方法</span></span><br><span class="line"><span class="comment"> *   String toString() 继承Object,重写toString()</span></span><br><span class="line"><span class="comment"> *   将缓冲区中的所有字符,变成字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_5</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"abcdef"</span>);</span><br><span class="line">buffer.append(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将可变的字符串缓冲区对象,变成了不可变String对象</span></span><br><span class="line">String s = buffer.toString();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  StringBuffer类的方法</span></span><br><span class="line"><span class="comment"> *    reverse() 将缓冲区中的字符反转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"abcdef"</span>);</span><br><span class="line"></span><br><span class="line">buffer.reverse();</span><br><span class="line"></span><br><span class="line">System.out.println(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  StringBuffer类方法</span></span><br><span class="line"><span class="comment"> *    replace(int start,int end, String str)</span></span><br><span class="line"><span class="comment"> *    将指定的索引范围内的所有字符,替换成新的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"abcdef"</span>);</span><br><span class="line"></span><br><span class="line">buffer.replace(<span class="number">1</span>, <span class="number">4</span>, <span class="string">"Q"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  StringBuffer类方法 insert</span></span><br><span class="line"><span class="comment"> *    insert(int index, 任意类型)</span></span><br><span class="line"><span class="comment"> *  将任意类型数据,插入到缓冲区的指定索引上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span>&#123;</span><br><span class="line"> StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"> buffer.append(<span class="string">"abcdef"</span>); </span><br><span class="line"> </span><br><span class="line"> buffer.insert(<span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line"> System.out.println(buffer);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * StringBuffer类方法</span></span><br><span class="line"><span class="comment"> *   delete(int start,int end) 删除缓冲区中字符</span></span><br><span class="line"><span class="comment"> *   开始索引包含,结尾索引不包含</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"abcdef"</span>);</span><br><span class="line"></span><br><span class="line">buffer.delete(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  StringBuffer类方法</span></span><br><span class="line"><span class="comment"> *   StringBuffer append, 将任意类型的数据,添加缓冲区</span></span><br><span class="line"><span class="comment"> *   append 返回值,写return this</span></span><br><span class="line"><span class="comment"> *   调用者是谁,返回值就是谁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">//调用StringBuffer方法append向缓冲区追加内容</span></span><br><span class="line">buffer.append(<span class="number">6</span>).append(<span class="keyword">false</span>).append(<span class="string">'a'</span>).append(<span class="number">1.5</span>);</span><br><span class="line">System.out.println(buffer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16StringBuilder类"><a href="#16StringBuilder类" class="headerlink" title="16StringBuilder类"></a>16StringBuilder类</h3><pre><code>* A:StringBuilder的概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 通过查看API了解一下StringBuilder类</span><br><span class="line">* B:面试题</span><br><span class="line">* <span class="string">"String,StringBuffer,StringBuilder的区别"</span></span><br><span class="line">——————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* StringBuffer和StringBuilder的区别</span><br><span class="line">*  <span class="string">"【StringBuffer】是jdk1.0版本的,是【线程安全】的,【效率低】 "</span></span><br><span class="line">*  <span class="string">"【StringBuilder】是jdk1.5版本的,【不保证同步】，是【线程不安全】的,【效率高】 "</span></span><br><span class="line">——————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* String和StringBuffer,StringBuilder的区别</span><br><span class="line">*  <span class="string">"【String】是一个【不可变】的【字符序列】 "</span></span><br><span class="line">*  <span class="string">"StringBuffer,StringBuilder是【可变】的【字符序列】 "</span></span><br></pre></td></tr></table></figure><h3 id="17StringBuffer类案例拼接数组"><a href="#17StringBuffer类案例拼接数组" class="headerlink" title="17StringBuffer类案例拼接数组"></a>17StringBuffer类案例拼接数组</h3><pre><code>* A: StringBuffer类案例拼接数组</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* a: 题目分析</span><br><span class="line">* 定义StringBuffer对象</span><br><span class="line">* 遍历数组,按照格式要求拼接处新的字符串,追加到StringBuffer容器中</span><br><span class="line">* 将StringBuffer中的内容以String的形式返回</span><br><span class="line">* b: 解题步骤</span><br><span class="line">* 略</span><br><span class="line">* C: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">76</span>&#125;;</span><br><span class="line">System.out.println(toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">* int[] arr = &#123;34,12,89,68&#125;;将一个int[]中元素转成字符串 </span></span><br><span class="line"><span class="comment">* 格式 [34,12,89,68]</span></span><br><span class="line"><span class="comment">* String s = "["</span></span><br><span class="line"><span class="comment">* 数组遍历</span></span><br><span class="line"><span class="comment">*   s+= arr[i];</span></span><br><span class="line"><span class="comment">*  s+"]"</span></span><br><span class="line"><span class="comment">*  StringBuffer实现,节约内存空间, String + 在缓冲区中,append方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建字符串缓冲区</span></span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"["</span>);</span><br><span class="line"><span class="comment">//数组遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length;i++)&#123;</span><br><span class="line"><span class="comment">//判断是不是数组的最后一个元素</span></span><br><span class="line"><span class="keyword">if</span>(i == arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">buffer.append(arr[i]).append(<span class="string">"]"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">buffer.append(arr[i]).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buffer.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18总结"><a href="#18总结" class="headerlink" title="18总结"></a>18总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> Object: 它是所有类的超类，祖宗类。java中所有的类都直接或间接的继承这个类</span><br><span class="line"> 方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> 返回当前对象中的内容, 对于Object类默认操作来说，返回的对象的类型+@+内存地址值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> 比较两个对象内容是否相同，对于Object类默认操作来说,比较的是地址值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> String: 字符串类，字符串是常量；它们的值在创建之后不能更改</span></span><br><span class="line"><span class="function"> 方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> 判断两个字符串中的内容是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>  判断两个字符串中的内容是否相同, 忽略大小写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span> 判断该字符串中 是否包含给定的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span> 判断该字符串 是否以给定的字符串开头</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span> 判断该字符串 是否以给定的字符串结尾</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> 判断该字符串的内容是否为空的字符串  ""</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> 获取该字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> 获取该字符串中指定位置上的字符 </span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> 从指定位置开始，到末尾结束，截取该字符串，返回新字符串</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> 从指定位置开始，到指定位置结束，截取该字符串，返回新字符串 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch )</span> 获取给定的字符，在该字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span> 获取给定的字符串，在该字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch,<span class="keyword">int</span> fromIndex)</span> 从指定位置开始，获取给定的字符，在该字符</span></span><br><span class="line"><span class="function"><span class="keyword">byte</span>[] <span class="title">getBytes</span><span class="params">()</span> 把该字符串 转换成 字节数组</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span> 把该字符串 转换成 字符数组</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> old,<span class="keyword">char</span> new)</span> 在该字符串中，将给定的旧字符，用新字符替换</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(String old,String new)</span> 在该字符串中， 将给定的旧字符串，用新字符串替换</span></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span> 去除字符串两端空格，中间的不会去除，返回一个新字符串</span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span> 把该字符串转换成 小写字符串 </span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span> 把该字符串转换成 大写字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str,<span class="keyword">int</span> fromIndex)</span> 从指定位置开始，获取给定的字符串，在该字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">——————————————————————————————————————————————————————————————————————————————————————</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> StringBuffer/StringBuilder:</span></span><br><span class="line"><span class="function"> 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> 在原有字符串缓冲区内容基础上，在末尾追加新数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset,String str)</span> 在原有字符串缓冲区内容基础上，在指定位置插入新数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> 在原有字符串缓冲区内容基础上，删除指定位置上的字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> 在原有字符串缓冲区内容基础上，删除指定范围内的多个字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end,String str)</span>在原有字符串缓冲区内容基础上，</span></span><br><span class="line"><span class="function">   将指定范围内的多个字符 用给定的字符串替换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span> 将字符串缓冲区的内容 反转  "abc"----"cba"</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> 从指定位置开始，到末尾结束，截取该字符串缓冲区，返回新字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>  从指定位置开始，到指定位置结束，截取该字符串缓冲区，返回新字符串</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1542291563/samples/java%20files/photo-1541631706300-676537664e86.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、Object&lt;br&gt;2、String&lt;br&gt;3、StringBuilder&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础12(修饰符,“变参”方法,Comparable、Comparator接口,lambda表达式)</title>
    <link href="https://leesen998.github.io/2016/10/16/day14%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/16/day14笔记/</id>
    <published>2016-10-16T10:21:53.000Z</published>
    <updated>2018-11-28T01:46:19.899Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541857446/samples/java%20files/photo-1541086263351-627c0c6999aa.jpg" alt="" style="width:100%"></p><p>1、不同修饰符混合使用细节<br>2、辨析何时定义变量为成员变量<br>3、类、抽象类、接口作为方法参数<br>4、类、抽象类、接口作为方法返回值<br>5、参数数量可变的方法（“变参”方法）<br>6、Comparable 接口 &amp;&amp; Comparator 接口<br>7、lambda表达式</p><a id="more"></a><h3 id="不同修饰符使用细节"><a href="#不同修饰符使用细节" class="headerlink" title="不同修饰符使用细节"></a>不同修饰符使用细节</h3><p>A: 常用来修饰类、方法、变量的修饰符如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> 权限修饰符，【公共访问】, <span class="string">"类,方法,成员变量"</span></span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"> <span class="keyword">protected</span> 权限修饰符，【受保护访问】, <span class="string">"方法,成员变量"</span>，<span class="string">"注意【不能】修饰类"</span></span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"> 【默认什么也不写】 也是一种权限修饰符，【默认访问】, <span class="string">"类,方法,成员变量"</span></span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"> <span class="keyword">private</span> 权限修饰符，【私有访问】, <span class="string">"方法,成员变量"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="keyword">static</span> 静态修饰符  <span class="string">"方法,成员变量,静态内部类"</span></span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"> <span class="keyword">final</span> 最终修饰符   <span class="string">"类,方法,成员变量,局部变量"</span></span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"> <span class="keyword">abstract</span> 抽象修饰符  <span class="string">"类 ,方法"</span></span><br></pre></td></tr></table></figure></p><p>B: <strong>不能</strong>同时使用的修饰符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">同时，<span class="keyword">abstract</span> 与 <span class="keyword">private</span> <span class="string">"不能"</span>同时使用；(私有<span class="keyword">abstract</span>不能继承，无意义)</span><br><span class="line">同时，<span class="keyword">abstract</span> 与 <span class="keyword">static</span> <span class="string">"不能"</span>同时使用；(<span class="keyword">abstract</span>没有方法体，静态通过类名调用，无意义)</span><br><span class="line">同时，<span class="keyword">abstract</span> 与 <span class="keyword">final</span> <span class="string">"不能"</span>同时使用。(<span class="keyword">abstract</span>没有方法体，<span class="keyword">final</span>不能重写，无意义)</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">小结：</span><br><span class="line"><span class="number">1</span>.抽象方法只能定义在抽象类中，抽象方法和抽象类必须由<span class="keyword">abstract</span>修饰，<span class="keyword">abstract</span>关键字只能描述类和方法，不能描述变量。</span><br><span class="line">抽象方法只定义方法声明，不定义方法实现。抽象类不可以被实例化（创建对象），</span><br><span class="line">只有通过子类继承抽象类并覆盖抽象类中的所有抽象方法后，该子类才可以被实例化，否则该子类还是一个抽象类。</span><br><span class="line">抽象类中有构造函数用于给子类对象进行初始化，同时<span class="string">"抽象类中【可以】含有非抽象方法"</span>。</span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">abstract</span>关键字<span class="string">"不可以"</span>与<span class="keyword">final</span>，<span class="keyword">private</span>,<span class="keyword">static</span>关键字共存，因为被<span class="keyword">final</span>修饰的方法不可以被重写，</span><br><span class="line">意味着子类不可以重写该方法，如果<span class="keyword">abstract</span>和<span class="keyword">final</span>共同修饰父类中的方法，子类要实现抽象方法（<span class="keyword">abstract</span>的作用），</span><br><span class="line">而<span class="keyword">final</span>又不让该方法重写，这相互矛盾。如果<span class="keyword">private</span>和<span class="keyword">abstract</span>共同修饰父类中的方法，<span class="keyword">private</span>修饰则该方法不可以被子类访问，</span><br><span class="line">但是<span class="keyword">abstract</span>修饰需要子类去实现，两者产生矛盾。如果<span class="keyword">static</span>和<span class="keyword">abstract</span>共同修饰父类中的方法，</span><br><span class="line"><span class="keyword">static</span>表示是<span class="string">"静态的方法，随着类的加载而加载，则该方法不需要在子类中去实现"</span>，这与<span class="keyword">abstract</span>关键字矛盾。</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="number">2</span>.<span class="keyword">static</span>用于修饰成员变量和成员函数，想要<span class="string">"实现对象中的【共性数据】的【对象共享】"</span>，可以将这个数据进行静态修饰，</span><br><span class="line"><span class="string">"被静态修饰的成员可以直接被类名调用，静态随着类的加载而加载，而且优先于对象存在"</span>。</span><br><span class="line"><span class="string">"静态方法只能访问静态成员（静态方法和静态变量），不可以【直接】用【成员名】访问非静态成员，需要new（创建对象）访问。</span></span><br><span class="line"><span class="string">这是因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员"</span>。</span><br><span class="line">静态方法中<span class="string">"不能"</span>使用<span class="keyword">this</span>和<span class="keyword">super</span>关键字，</span><br><span class="line">因为<span class="keyword">this</span>代表本类对象，<span class="keyword">super</span>代表父类对象，而静态时，有可能没有对象存在，所以<span class="keyword">this</span>和<span class="keyword">super</span>无法使用。</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="number">3</span>.<span class="keyword">final</span>关键字可以修饰类，方法，变量（成员变量内，局部变量，静态变量），</span><br><span class="line">被<span class="keyword">final</span>修饰的类是一个最终类，不可以被继承，</span><br><span class="line">被<span class="keyword">final</span>修饰的方法是一个最终方法，不可以被覆盖，但是可以被继承。</span><br><span class="line">被<span class="keyword">final</span>修饰的变量只能是一个常量，只能赋值一次。内部类被定义在类中的局部位置上时，只能访问局部被<span class="keyword">final</span>修饰的局部变量。</span><br></pre></td></tr></table></figure></p><p>    C: 修饰<strong>类</strong>能够使用的修饰符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修饰类【只能】使用<span class="keyword">public</span>、默认的、<span class="keyword">final</span>、<span class="keyword">abstract</span>关键字</span><br><span class="line">静态内部类：<span class="keyword">static</span></span><br><span class="line">使用最多的是 <span class="keyword">public</span>关键字</span><br><span class="line"></span><br><span class="line">a:代码案例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;&#125; <span class="comment">//最常用的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>D:修饰<strong>成员变量</strong>能够使用的修饰符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> : 公共的</span><br><span class="line"><span class="keyword">protected</span> : 受保护的</span><br><span class="line">: 默认的</span><br><span class="line"><span class="keyword">private</span> ：私有的</span><br><span class="line"></span><br><span class="line"><span class="string">"【权限修饰符都可以】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">final</span> : 最终的</span><br><span class="line"><span class="keyword">static</span> : 静态的</span><br><span class="line">使用最多的是 <span class="keyword">private</span></span><br><span class="line"></span><br><span class="line">修饰【成员变量】,【除了】 <span class="keyword">abstract</span> 都可以</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">a: 代码案例</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> count2 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> count3 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count4 = <span class="number">100</span>; <span class="comment">//最常用的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> count5 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count6 = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>    E:修饰<strong>构造方法</strong>能够使用的修饰符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> : 公共的</span><br><span class="line"><span class="keyword">protected</span> : 受保护的</span><br><span class="line">: 默认的</span><br><span class="line"><span class="keyword">private</span> ：私有的</span><br><span class="line"></span><br><span class="line"><span class="string">"【权限修饰符都可以】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">使用最多的是 <span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">a:代码案例</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//最常用的方式</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">Demo()&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>    F:修饰<strong>成员方法</strong>能够使用的修饰符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> : 公共的</span><br><span class="line"><span class="keyword">protected</span> : 受保护的</span><br><span class="line">: 默认的</span><br><span class="line"><span class="keyword">private</span> ：私有的</span><br><span class="line"></span><br><span class="line"><span class="string">"【权限修饰符都可以】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> : 最终的</span><br><span class="line"><span class="keyword">static</span> : 静态的</span><br><span class="line"><span class="keyword">abstract</span> : 抽象的</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">使用最多的是 <span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">a:代码案例</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//最常用的方式</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method6</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//最常用的方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method7</span><span class="params">()</span></span>;<span class="comment">//最常用的方式</span></span><br></pre></td></tr></table></figure></p><h3 id="局部变量和成员变量解析"><a href="#局部变量和成员变量解析" class="headerlink" title="局部变量和成员变量解析"></a>局部变量和成员变量解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> 定义长方形类，包含求周长与求面积的方法</span><br><span class="line"> 定义数学工具类，包含求两个数和的二倍与求两个数积的方法</span><br><span class="line">【思考】：这两个类的计算方法均需要两个数参与计算，请问两个数定义在【成员位置】还是【形参位置】更好，为什么？</span><br><span class="line"><span class="string">"如果变量是【该类的一部分】时，定义成【成员变量】。 "</span></span><br><span class="line"><span class="string">"如果变量【不应该是类的一部分】，而仅仅是【功能】当中需要【参与计算的数】，则定义为【形参变量】。"</span></span><br><span class="line"></span><br><span class="line">* A：程序编译</span><br><span class="line"></span><br><span class="line"> 数学工具类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTool</span> </span>&#123;</span><br><span class="line"><span class="comment">//求两个数的和的二倍</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sum2times</span><span class="params">(<span class="keyword">int</span> number,<span class="keyword">int</span> number2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (number+number2)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两个数的积</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">int</span> number,<span class="keyword">int</span> number2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> number*number2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> 长方形类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CFX</span> </span>&#123;</span><br><span class="line"><span class="comment">//因为长与宽，在现实事物中属于事物的一部分，所以定义成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> chang;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> kuan;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CFX</span><span class="params">(<span class="keyword">int</span> chang, <span class="keyword">int</span> kuan)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.chang = chang;</span><br><span class="line"><span class="keyword">this</span>.kuan = kuan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求长与宽的周长</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">zhouChang</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (chang+kuan)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求长与宽的面积</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mianJi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> chang*kuan;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChang</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> chang;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChang</span><span class="params">(<span class="keyword">int</span> chang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.chang = chang;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKuan</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> kuan;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKuan</span><span class="params">(<span class="keyword">int</span> kuan)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.kuan = kuan;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类作为方法的参数与返回值"><a href="#类作为方法的参数与返回值" class="headerlink" title="类作为方法的参数与返回值"></a>类作为方法的参数与返回值</h3><pre><code>* A： 类作为方法参数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">在编写程序中，会经常碰到调用的方法要接收的是一个类类型的情况，那么这时，要向方法中传入该类的对象。</span><br><span class="line"></span><br><span class="line">如下代码演示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Person对象</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//调用method方法</span></span><br><span class="line">method(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来接收一个Person对象，在方法中调用Person对象的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">p.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> B：类作为方法返回值</span><br><span class="line">写程序调用方法时，我们以后会经常碰到<span class="string">"【返回】一个【类】类型的【返回值】"</span>，</span><br><span class="line">那么这时，该方法要<span class="string">"返回"</span>（<span class="keyword">return</span>）一个<span class="string">"【该类的对象】"</span>。如下代码演示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用method方法，获取返回的Person对象</span></span><br><span class="line">Person p = method();</span><br><span class="line"><span class="comment">//调用p对象中的show方法</span></span><br><span class="line">p.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来获取一个Person对象，在方法中完成Person对象的创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//返回的是 【类的对象】</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类作为方法参数与返回值"><a href="#抽象类作为方法参数与返回值" class="headerlink" title="抽象类作为方法参数与返回值"></a>抽象类作为方法参数与返回值</h3><pre><code>* A: 抽象类作为方法参数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">今后开发中，【抽象类】作为【方法参数】的情况也很多见。</span><br><span class="line"><span class="string">"当遇到【方法参数】为【抽象类】类型时，要传入一个【实现】【抽象类】【所有抽象方法】的【子类对象】"</span>。</span><br><span class="line"><span class="string">"抽象类【没有对象】，只能通过【多态】的方式，传递【抽象类】的【子类】的【对象】"</span></span><br><span class="line"></span><br><span class="line">如下代码演示：</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"重写了show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过多态的方式，创建一个Person类型的变量，而这个对象实际是Student</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//调用method方法</span></span><br><span class="line">method(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来接收一个Person类型对象，在方法中调用Person对象的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Person p)</span></span>&#123;<span class="comment">//抽象类作为参数</span></span><br><span class="line"><span class="comment">//抽象类【没有对象】，只能通过【多态】的方式，传递【抽象类】的【子类】的【对象】</span></span><br><span class="line"><span class="comment">//通过p变量调用show方法,这时实际调用的是Student对象中的show方法</span></span><br><span class="line"></span><br><span class="line">p.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* B: 抽象类作为方法返回值</span><br><span class="line"><span class="string">"【抽象类】作为【方法返回值】的情况，这时需要【返回】一个实现抽象类【所有抽象方法】的【子类对象】。"</span></span><br><span class="line"><span class="string">"抽象类【没有对象】，只能通过【多态】的方式，返回的是【抽象类】的【子类】的【对象】"</span></span><br><span class="line"></span><br><span class="line">如下代码演示：</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"重写了show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用method方法，获取返回的Person对象</span></span><br><span class="line">Person p = method();</span><br><span class="line"><span class="comment">//通过p变量调用show方法,这时实际调用的是Student对象中的show方法</span></span><br><span class="line">p.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来获取一个Person对象，在方法中完成Person对象的创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//抽象类【没有对象】，只能通过【多态】的方式，返回的是【抽象类】的【子类】的【对象】</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口作为方法参数与返回值"><a href="#接口作为方法参数与返回值" class="headerlink" title="接口作为方法参数与返回值"></a>接口作为方法参数与返回值</h3><pre><code>* A: 接口作为方法参数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">【接口】作为【方法参数】的情况是很常见的，经常会碰到。</span><br><span class="line">当遇到方法参数为【接口类型】时，那么该方法要传入一个<span class="string">"【接口实现类】【对象】"</span>。</span><br><span class="line"></span><br><span class="line"><span class="string">"【接口】【没有对象】，只能通过【多态】的方式，【传入】的是【接口】的【实现类】的【对象】"</span></span><br><span class="line">如下代码演示。</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Smoke</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Smoke</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"no smoking"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过多态的方式，创建一个Smoke类型的变量，而这个对象实际是Student</span></span><br><span class="line">Smoke s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//调用method方法</span></span><br><span class="line">method(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来接收一个Smoke类型对象，在方法中调用Smoke对象的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Smoke sm)</span></span>&#123;<span class="comment">//接口作为参数</span></span><br><span class="line"><span class="comment">//通过sm变量调用smoking方法，这时实际调用的是Student对象中的smoking方法</span></span><br><span class="line">sm.smoking();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">* B: 接口作为方法返回值</span><br><span class="line">接口作为方法返回值的情况，在后面的学习中会碰到。</span><br><span class="line">当遇到方法返回值是接口类型时，那么该方法需要返回一个<span class="string">"【接口实现类对象】"</span>。</span><br><span class="line"><span class="string">"【接口】【没有对象】，只能通过【多态】的方式，【返回】的是【接口】的【实现类】的【对象】"</span></span><br><span class="line"></span><br><span class="line">如下代码演示。</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Smoke</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Smoke</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"no smoking"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用method方法，获取返回的会吸烟的对象</span></span><br><span class="line">Smoke s = method();</span><br><span class="line"><span class="comment">//通过s变量调用smoking方法,这时实际调用的是Student对象中的smoking方法</span></span><br><span class="line">s.smoking();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法method，用来获取一个具备吸烟功能的对象，并在方法中完成吸烟者的创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Smoke <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">Smoke sm = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">return</span> sm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星级酒店案例"><a href="#星级酒店案例" class="headerlink" title="星级酒店案例"></a>星级酒店案例</h3><pre><code>* A:     根据“某五星级酒店，资金雄厚……都有自己的工作要做。”分析出，该题            目中包含酒店，可以把它封装成类，多名员工）。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 员工 </span>&#123;</span><br><span class="line">     属性：姓名</span><br><span class="line">属性：工号</span><br><span class="line">方法：工作</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 厨师 <span class="keyword">extends</span> 员工</span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 服务员 <span class="keyword">extends</span> 员工</span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 经理 <span class="keyword">extends</span> 员工 </span>&#123;</span><br><span class="line">     属性：奖金</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">员工的类型有经理、厨师、服务员，它们有共同的属性（姓名、工号、），经理额外属性（奖金）。</span><br><span class="line"></span><br><span class="line">根据“向酒店中，增加多名员工（其中包含<span class="number">1</span>名经理，<span class="number">1</span>名厨师、<span class="number">2</span>名服务员）”。分析出，要创建一个酒店对象，并添加<span class="number">4</span>名员工到酒店对象的员工集合中。</span><br><span class="line">酒店员工集合添加新员工： 经理对象</span><br><span class="line">酒店员工集合添加新员工： 厨师对象</span><br><span class="line">酒店员工集合添加新员工： 服务员对象</span><br><span class="line">酒店员工集合添加新员工： 服务员对象</span><br><span class="line"></span><br><span class="line">根据“获取酒店幸运员工”。分析出，从酒店员工集合随机得到一名员工对象。</span><br><span class="line"><span class="number">1</span>. 从酒店员工集合长度范围内，随机产生一个随机数</span><br><span class="line"><span class="number">2</span>. 使用该随机数作为集合的索引，返回该索引处对应的员工对象</span><br><span class="line"></span><br><span class="line">根据“酒店开设VIP服务，酒店的厨师与服务员可以提供VIP服务。（厨师做菜加量、服务员给顾客倒酒）”。分析出，这是要增加一个VIP的接口，接口中提供个VIP服务的方法。让厨师与服务员实现该接口。</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">VIP</span>服务</span>&#123;</span><br><span class="line">     抽象方法：服务</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 厨师 <span class="keyword">extends</span> 员工 <span class="keyword">implements</span> <span class="title">VIP</span>服务</span>&#123; 重写服务方法 &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 服务员 <span class="keyword">extends</span> 员工 <span class="keyword">implements</span> <span class="title">VIP</span>服务</span>&#123; 重写服务方法 &#125;</span><br></pre></td></tr></table></figure><pre><code>B:    VIP服务public interface VIP { public abstract void server(); //服务}</code></pre><p>    员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 员工：</span></span><br><span class="line"><span class="comment">姓名 String</span></span><br><span class="line"><span class="comment">工号 String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">YuanGong</span> </span>&#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="keyword">private</span> String xingMing;</span><br><span class="line"><span class="keyword">private</span> String gongHao;</span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">YuanGong</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">YuanGong</span><span class="params">(String xingMing, String gongHao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.xingMing = xingMing;</span><br><span class="line"><span class="keyword">this</span>.gongHao = gongHao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters与setters</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getXingMing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> xingMing;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXingMing</span><span class="params">(String xingMing)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.xingMing = xingMing;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGongHao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gongHao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGongHao</span><span class="params">(String gongHao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gongHao = gongHao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    服务员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义员工的子类 服务员类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FuWuYuan</span> <span class="keyword">extends</span> <span class="title">YuanGong</span> <span class="keyword">implements</span> <span class="title">VIP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FuWuYuan</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FuWuYuan</span><span class="params">(String xingMing, String gongHao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(xingMing, gongHao);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"亲，全身心为您服务，记得给好评哦"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"给顾客倒酒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    经理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 经理在员工的基础上，添加了奖金成员</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JingLi</span> <span class="keyword">extends</span> <span class="title">YuanGong</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> jiangJin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JingLi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JingLi</span><span class="params">(String xingMing, String gongHao, <span class="keyword">double</span> jiangJin)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(xingMing, gongHao);</span><br><span class="line"><span class="keyword">this</span>.jiangJin = jiangJin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getJiangJin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jiangJin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJiangJin</span><span class="params">(<span class="keyword">double</span> jiangJin)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jiangJin = jiangJin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"哪个员工让顾客不满意，我扣谁钱"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    厨师</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义员工的子类 厨师类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChuShi</span> <span class="keyword">extends</span> <span class="title">YuanGong</span> <span class="keyword">implements</span> <span class="title">VIP</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChuShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChuShi</span><span class="params">(String xingMing, String gongHao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(xingMing, gongHao);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我做饭，放心吃吧，包您满意"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"做菜加量加料"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数数量可变的方法（“变参”方法）"><a href="#参数数量可变的方法（“变参”方法）" class="headerlink" title="参数数量可变的方法（“变参”方法）"></a>参数数量可变的方法（“变参”方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">现在的版本提供了可以用可变的参数数量调用的方法（有时称为“ 变参” 方法。)</span><br><span class="line">printf方法是这样定义的：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStream</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String fmt , Object ... args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> format(fmt, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">这里的省略号 . . . 是 Java 代码的一部分，它表明这个方法可以接收任意数量的对象（除 format参数之外。)</span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">实际上，printf 方法接收<span class="string">"两个参数"</span>， 一个是<span class="string">"格式字符串"</span>， 另一个是 <span class="string">"Object [] 数组"</span>， </span><br><span class="line"><span class="string">"Object [] 数组"</span> 保存着所有的参数</span><br><span class="line">（<span class="string">"如果调用者提供的是【整型数组或者其他基本类型】的值， 【自动装箱】功能将【把它们】【转换成对象】 )。</span></span><br><span class="line"><span class="string">现在将扫描format 字符串， 并将第 i 个格式说明符与 args[i] 的值匹配起来"</span></span><br><span class="line">=&gt;&gt; <span class="string">"Object… 参数类型与 Object[ ] 完全一样"</span></span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">编译器需要对 printf 的每次调用进行转换， 以便将参数绑定到数组上， 并在必要的时候</span><br><span class="line">进行自动装箱：</span><br><span class="line">System.out.printf(<span class="string">"%d %s"</span>, <span class="keyword">new</span> Object [] &#123; <span class="keyword">new</span> Integer(n), <span class="string">"widgets"</span> &#125; );</span><br><span class="line"><span class="string">"用户自己也可以定义可变参数的方法， 并将参数指定为【任意类型】， 【甚至】是【基本类型】"</span></span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">func(<span class="string">"How "</span>,<span class="string">"are "</span>,<span class="string">"you"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(String ... args)</span></span>&#123;<span class="comment">//等效于 args -&gt; new String []&#123;"How ","are ","you"&#125;;</span></span><br><span class="line">        <span class="keyword">for</span>(String value : args)&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">编译器将 <span class="keyword">new</span> String []&#123;<span class="string">"How "</span>,<span class="string">"are "</span>,<span class="string">"you"</span>&#125; 传递给 args</span><br><span class="line">甚至可以将 main 方法声明为下列形式：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span></span><br></pre></td></tr></table></figure><h3 id="Comparable-接口-amp-amp-Comparator-接口"><a href="#Comparable-接口-amp-amp-Comparator-接口" class="headerlink" title="Comparable 接口 &amp;&amp; Comparator 接口"></a>Comparable 接口 &amp;&amp; Comparator 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 总结</span><br><span class="line">``` java</span><br><span class="line">不同修饰符的使用</span><br><span class="line">类，最常使用<span class="keyword">public</span>修饰</span><br><span class="line">成员变量，最常使用<span class="keyword">private</span>修饰</span><br><span class="line">成员方法，最常使用<span class="keyword">public</span>修饰</span><br><span class="line">自定义数据类型的使用</span><br><span class="line"><span class="string">"【类】作为【方法参数】时，说明要向方法中传入【该类的对象】"</span></span><br><span class="line"><span class="string">"【类】作为【方法返回值】时，说明该方法要返回一个【该类的对象】。"</span></span><br><span class="line"><span class="string">"【抽象类】作为【方法参数】时，说明要传入一个实现【抽象类】【所有抽象方法】的【子类对象】。"</span></span><br><span class="line"><span class="string">"【抽象类】作为【方法返回值】时，说明需要返回一个实现【抽象类】【所有抽象方法】的【子类对象】。"</span></span><br><span class="line"><span class="string">"【接口】作为【方法参数】时，说明该方法要传入一个【接口】【实现类对象】。"</span></span><br><span class="line"><span class="string">"【接口】作为【方法返回值】时，说明该方法需要返回一个【接口】【实现类对象】。"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541857446/samples/java%20files/photo-1541086263351-627c0c6999aa.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、不同修饰符混合使用细节&lt;br&gt;2、辨析何时定义变量为成员变量&lt;br&gt;3、类、抽象类、接口作为方法参数&lt;br&gt;4、类、抽象类、接口作为方法返回值&lt;br&gt;5、参数数量可变的方法（“变参”方法）&lt;br&gt;6、Comparable 接口 &amp;amp;&amp;amp; Comparator 接口&lt;br&gt;7、lambda表达式&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础11(final、static，内部类，包，代码块)</title>
    <link href="https://leesen998.github.io/2016/10/15/day13%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/15/day13笔记/</id>
    <published>2016-10-15T04:21:55.000Z</published>
    <updated>2018-11-24T02:50:36.019Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541640107/samples/test/photo-1538831539254-abe4ffd1a812.jpg" alt="" style="width:100%"></p><p>1、final 关键字<br>2、static 关键字<br>3、匿名对象<br>4、内部类<br>5、包的声明与访问<br>6、访问修饰符<br>7、代码块</p><a id="more"></a><h3 id="01final关键字概念"><a href="#01final关键字概念" class="headerlink" title="01final关键字概念"></a>01final关键字概念</h3><pre><code>* A: 概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">继承的出现提高了代码的复用性，并方便开发。但随之也有问题，有些类在描述完之后，不想被继承，</span><br><span class="line">或者有些类中的部分方法功能是固定的，不想让子类重写。可是当子类继承了这些特殊类之后，</span><br><span class="line">就可以对其中的方法进行重写，那怎么解决呢？</span><br><span class="line">要解决上述的这些问题，需要使用到一个关键字<span class="keyword">final</span>，<span class="keyword">final</span>的意思为最终，不可变。</span><br><span class="line"><span class="keyword">final</span>是个修饰符，它可以用来修饰类，类的成员，以及局部变量。</span><br></pre></td></tr></table></figure><h3 id="02final修饰类义"><a href="#02final修饰类义" class="headerlink" title="02final修饰类义"></a>02final修饰类义</h3><pre><code>* A: final 修饰类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰类<span class="string">"【不可以】【被继承】，但是【可以继承】其他类"</span>。</span><br><span class="line">* B: 案例</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yy</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> <span class="keyword">extends</span> <span class="title">Yy</span></span>&#123;&#125; <span class="comment">//可以继承Yy类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;&#125; <span class="comment">//不能继承Fu类</span></span><br></pre></td></tr></table></figure><h3 id="03final修饰方法"><a href="#03final修饰方法" class="headerlink" title="03final修饰方法"></a>03final修饰方法</h3><pre><code>* A: final修饰方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰的方法<span class="string">"不可以被覆盖"</span>,<span class="string">"但如果父类中【没有】被final修饰方法，子类【覆盖】"</span>后可以加<span class="keyword">final</span>。</span><br><span class="line">* B: 案例</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">// final修饰的方法，不可以被覆盖，但可以继承使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">//重写method2方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04final修饰局部变量"><a href="#04final修饰局部变量" class="headerlink" title="04final修饰局部变量"></a>04final修饰局部变量</h3><pre><code>* A:修饰基本数据类型变量</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰的变量称为常量，这些变量只能赋值一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B:案例<span class="number">1</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">20</span>;</span><br><span class="line">i = <span class="number">30</span>; <span class="comment">//赋值报错，final修饰的变量只能赋值一次</span></span><br><span class="line"></span><br><span class="line">* C: 修饰引用数据类型</span><br><span class="line"><span class="string">"【引用类型】的变量值为【对象地址值】，地址值【不能更改】，</span></span><br><span class="line"><span class="string">但是【地址内的对象属性值可以修改】"</span></span><br><span class="line"></span><br><span class="line">* D: 修饰引用数据类型</span><br><span class="line"><span class="keyword">final</span> Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p = p2; <span class="comment">//final修饰的变量p，所记录的地址值不能改变</span></span><br><span class="line">p.name = <span class="string">"小明"</span>;<span class="comment">//可以更改p对象中name属性值</span></span><br><span class="line">p不能为别的对象，而p对象中的name或age属性值可更改。</span><br></pre></td></tr></table></figure><h3 id="05final修饰成员变量"><a href="#05final修饰成员变量" class="headerlink" title="05final修饰成员变量"></a>05final修饰成员变量</h3><pre><code>* A: 修饰成员变量</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">"修饰成员变量，需要在【创建对象】前赋值，否则报错。</span></span><br><span class="line"><span class="string">(当没有显式赋值时，如有多个构造方法，则均需要为其赋值。)"</span></span><br><span class="line"></span><br><span class="line">* B: 案例</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//直接赋值</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final修饰的成员变量，需要在创建对象前赋值，否则报错。</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> n; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//可以在创建对象时所调用的构造方法中，为变量n赋值</span></span><br><span class="line">n = <span class="number">2016</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06static的概念"><a href="#06static的概念" class="headerlink" title="06static的概念"></a>06static的概念</h3><pre><code>* A：概念</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当在定义类的时候，类中都会有相应的属性和方法。而属性和方法都是通过创建本类对象调用的。</span><br><span class="line"><span class="string">"当在调用对象的某个方法时，但是这个方法【没有】访问到对象的【特有数据】时，方法创建这个对象有些多余。"</span></span><br><span class="line">可是不创建对象，方法又调用不了，这时就会想，那么我们能不能不创建对象，就可以调用方法呢？</span><br><span class="line"><span class="string">"可以的，我们可以通过static关键字来实现。static它是静态修饰符，一般用来修饰类中的成员。"</span></span><br></pre></td></tr></table></figure><h3 id="07static修饰的对象特有数据"><a href="#07static修饰的对象特有数据" class="headerlink" title="07static修饰的对象特有数据"></a>07static修饰的对象特有数据</h3><pre><code>* A：特点1:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">被 <span class="keyword">static</span> <span class="string">"修饰的成员变量"</span> <span class="string">"【属于类】"</span>，<span class="string">"【不属于】这个类的某个对象"</span>。</span><br><span class="line">（也就是说，多个对象在访问或修改<span class="keyword">static</span>修饰的成员变量时，其中一个对象将<span class="keyword">static</span>成员变量值进行了修改，</span><br><span class="line">其他对象中的<span class="keyword">static</span>成员变量值跟着改变，即<span class="string">"多个对象共享同一个"</span> <span class="keyword">static</span> 成员变量）</span><br><span class="line"><span class="string">" 被静态修饰的成员，可以被 【类名】 【直接调用】"</span></span><br><span class="line"><span class="string">"对象的【特有数据】： （非静态修饰）=&gt; 【调用者只能是New 对象】</span></span><br><span class="line"><span class="string">对象的【共享数据】： （静态修饰） =&gt; 【调用者是类名，也可以是New 对象(不建议这样用)】"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 代码演示</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Demo d1 = <span class="keyword">new</span> Demo();</span><br><span class="line">Demo d2 = <span class="keyword">new</span> Demo();</span><br><span class="line">d1.num = <span class="number">200</span>;</span><br><span class="line">System.out.println(d1.num); <span class="comment">//结果为200</span></span><br><span class="line">System.out.println(d2.num); <span class="comment">//结果为200</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08static的内存图"><a href="#08static的内存图" class="headerlink" title="08static的内存图"></a>08static的内存图</h3><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541993751/samples/java%20files/%E9%9D%99%E6%80%81%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="09static注意事项-【静态不能直接调用非静态】"><a href="#09static注意事项-【静态不能直接调用非静态】" class="headerlink" title="09static注意事项_【静态不能直接调用非静态】"></a>09static注意事项_【静态不能直接调用非静态】</h3><pre><code>* A: 注意事项    </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">被<span class="keyword">static</span>修饰的成员可以并且<span class="string">"建议通过类名直接访问"</span>。</span><br><span class="line"></span><br><span class="line">* B: 访问静态成员的格式：</span><br><span class="line"><span class="string">"类名.静态成员变量名</span></span><br><span class="line"><span class="string">类名.静态成员方法名(参数)</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">对象名.静态成员变量名     ------不建议使用该方式，会出现警告</span><br><span class="line">对象名.静态成员方法名(参数) ------不建议使用该方式，会出现警告</span><br><span class="line"></span><br><span class="line">* C: 代码演示</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Demo.num);</span><br><span class="line">Demo.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">*<span class="string">"【静态内容】是优先于【对象】存在，【只能访问静态】"</span>，<span class="string">"不能"</span>使用<span class="keyword">this</span>/<span class="keyword">super</span>。</span><br><span class="line"><span class="string">"静态修饰的内容存于静态区"</span>。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//this.num; 不能使用this/super。</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">*<span class="string">"同一个类中，静态成员【只能】访问静态成员"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//静态成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(num); 静态方法中，只能访问静态成员变量或静态成员方法</span></span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">*<span class="string">"【非静态内容】 【只能】 通过 创建【本类对象】，</span></span><br><span class="line"><span class="string">再通过【 对象.成员变量 】 OR 【 对象.成员方法(参数) 】的方式调用"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是非静态方法 function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(num); </span></span><br><span class="line">        <span class="comment">// 静态方法中，只能访问静态成员变量或静态成员方法</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//【非静态内容】 【只能】 通过 创建【本类对象】，</span></span><br><span class="line"><span class="comment">// 再通过【 对象.成员变量 】 OR 【 对象.成员方法(参数) 】的方式调用</span></span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        System.out.println(d.num);</span><br><span class="line">d.function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">*<span class="string">"main方法为静态方法仅仅为程序执行入口，它【不属于任何一个对象】，可以定义在任意类中。"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">举例：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTTss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test tt = <span class="keyword">null</span>;</span><br><span class="line">        tt.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">能编译通过，并能正常运行，打印：hello。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">Test类中的方法 hello() 是静态<span class="keyword">static</span> 的，因此，<span class="string">"hello()方法归类所有，与对象无关。</span></span><br><span class="line"><span class="string">当实例化Test类的时候，【静态成员】会被【优先加载】而且【只加载一次】，</span></span><br><span class="line"><span class="string">所以【不受】【实例化对象】 new Test();影响"</span>，</span><br><span class="line"><span class="string">"只要是用到了Test类，都会加载静态 hello()方法。"</span></span><br><span class="line">此外，在【其他类】的【静态方法】中也能调用<span class="keyword">public</span>的静态hello()方法。</span><br><span class="line">—————————————————————————————————————————————————————————</span><br><span class="line">总结：</span><br><span class="line"><span class="string">"静态方法【不受】实例化对象的影响"</span>，即使Test tt = <span class="keyword">null</span>;</span><br><span class="line">这是只要调用了Test类，就会加载静态方法，tt中包含了Test类的初始化数据。</span><br><span class="line">此外，如果hello()是【非静态的方法】，那就会报NullPointerException异常。</span><br></pre></td></tr></table></figure><h3 id="10static静态的使用场景"><a href="#10static静态的使用场景" class="headerlink" title="10static静态的使用场景"></a>10static静态的使用场景</h3><pre><code>* A: 使用场景</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>可以修饰<span class="string">"【成员变量】"</span>和<span class="string">"【成员方法】"</span>。</span><br><span class="line">什么时候使用<span class="keyword">static</span>修饰<span class="string">"成员变量"</span>？</span><br><span class="line">  加<span class="keyword">static</span>修饰成员的时候，<span class="string">"这个成员会被类的所有对象所共享。一般我们把【共性数据】定义为静态的变量。"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">什么时候使用<span class="keyword">static</span>修饰<span class="string">"成员方法"</span>？</span><br><span class="line">  <span class="string">"静态的方法【只能】访问静态的成员"</span>，<span class="string">" 如果静态方法中引用到了静态的其他成员，那么这个方法需要声明为静态的方法。"</span></span><br><span class="line">  <span class="string">"方法中【没有】调用【非静态成员变量】，则将方法定义为【静态】"</span></span><br></pre></td></tr></table></figure><h3 id="11对象中的静态调用"><a href="#11对象中的静态调用" class="headerlink" title="11对象中的静态调用"></a>11对象中的静态调用</h3><pre><code>* A: 对象的静态调用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"在多态中，无论是【静态成员变量】 还是【非静态成员变量】，【都看父类】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="string">" 在多态中，【非静态成员方法】【编译】【看父类】，【运行】【看子类】，【父类没有】则编译失败。"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="string">" 但多态中的【静态成员方法】,【编译看父类】,【运行仍然看父类】。因为【静态和对象没有关系】，属于【静态绑定】。"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">即：<span class="string">"【只有】【非静态成员方法】 运行看 【子类】,其他看父类"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* B: 举例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.show();   <span class="comment">//父类的引用和父类的方法绑定,和对象无关,不会在运行时动态的执行子类特有的方法。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12定义静态常量"><a href="#12定义静态常量" class="headerlink" title="12定义静态常量"></a>12定义静态常量</h3><pre><code>* A: 静态常量</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">开发中，我们想在类中定义一个静态常量，通常使用<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>修饰的变量来完成定义。</span><br><span class="line"><span class="string">"此时变量名用【全部大写】，多个单词使用下划线连接。"</span></span><br><span class="line">* B: 定义格式：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 变量名 = 值;</span><br><span class="line"></span><br><span class="line">* C: 如下演示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPANY_NAME = <span class="string">"传智播客"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一个静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"当我们想使用类的静态成员时，【不需要创建对象】，【直接使用类名】来访问即可。"</span></span><br><span class="line">System.out.println(Company.COMPANY_NAME); <span class="comment">//打印传智播客</span></span><br><span class="line">Company.method(); <span class="comment">// 调用一个静态方法</span></span><br><span class="line"></span><br><span class="line">* D: 注意：</span><br><span class="line"><span class="string">"接口中的每个【成员变量】都默认使用"</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>修饰。</span><br><span class="line"><span class="string">"所有【接口】中的【成员变量】【必须是静态常量】，由于【接口】【没有】【构造方法】，</span></span><br><span class="line"><span class="string">    所以【必须显示赋值】。可以【直接】用【接口名】访问"</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">" 访问接口中的静态变量 "</span>:</span><br><span class="line">Inter.COUNT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13匿名对象"><a href="#13匿名对象" class="headerlink" title="13匿名对象"></a>13匿名对象</h3><pre><code>* A:匿名对象的概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">* 匿名对象是指创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。</span><br><span class="line">* B:案例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建一个普通对象</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="string">"创建一个匿名对象"</span></span><br><span class="line"><span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">* C: 匿名对象的特点</span><br><span class="line">a:<span class="string">"创建匿名对象【直接使用】，【没有变量名】"</span>。</span><br><span class="line"><span class="keyword">new</span> Person().eat()  <span class="comment">//"eat方法被一个没有名字的Person对象调用了"。</span></span><br><span class="line"></span><br><span class="line">b:<span class="string">"【匿名对象】在【没有指定】其【引用变量】时，【只能】【使用一次】，第二次使用则【重新】创建了【新的匿名对象】"</span>。</span><br><span class="line"><span class="keyword">new</span> Person().eat(); 创建一个匿名对象，调用eat方法</span><br><span class="line"><span class="keyword">new</span> Person().eat(); 想再次调用eat方法，重新创建了一个匿名对象</span><br><span class="line"></span><br><span class="line">c:<span class="string">"【匿名对象】可以作为【方法接收的参数】、【方法返回值】使用"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//普通方式</span></span><br><span class="line"><span class="comment">//Person p = new Person();</span></span><br><span class="line"><span class="comment">//return p;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象作为方法返回值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Person(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Person p)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用getPerson方法，得到一个Person对象</span></span><br><span class="line">Person person = Demo.getPerson();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用method方法</span></span><br><span class="line">Demo.method(person);</span><br><span class="line"><span class="comment">//匿名对象作为方法接收的参数</span></span><br><span class="line">Demo.method(<span class="keyword">new</span> Person());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14内部类"><a href="#14内部类" class="headerlink" title="14内部类"></a>14内部类</h3><pre><code>* A: 内部类的概述    &quot; 将类写在其他类的【内部】，可以写在其他类的【成员位置】和【局部位置】，这时写在其他类内部的类就称为【内部类】。    其他类也称为外部类 &quot;。* B: 什么时候使用内部类    在描述事物时，若一个事物内部还包含其他可能包含的事物，比如在描述汽车时，汽车中还包含这发动机，    这时发动机就可以使用内部类来描述。    class 汽车 { //外部类        class 发动机 { //内部类        }    }* C: 内部类的分类    内部类分为【成员内部类】与【局部内部类】。————————————————————————————————————————————————————————————————————————————————————————    我们【定义】【内部类】时，就是一个【正常定义类】的过程，    【同样】【包含】各种【修饰符】、【继承】与【实现关系】等。————————————————————————————————————————————————————————————————————————————————————————    在【内部类】中可以【直接】访问【外部类】的【所有成员】。</code></pre><h3 id="15成员内部类的调用格式"><a href="#15成员内部类的调用格式" class="headerlink" title="15成员内部类的调用格式"></a>15成员内部类的调用格式</h3><pre><code>* A: 格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"【成员内部类】，定义在【外部类】中的【成员位置】。与类中的成员变量【相似】，可通过【外部类】【对象】进行访问"</span></span><br><span class="line">* B: 定义格式</span><br><span class="line"><span class="class"><span class="keyword">class</span> 外部类 </span>&#123; </span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 内部类 </span>&#123;</span><br><span class="line"><span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C: 访问方式</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">外部类名.内部类名 变量名 = <span class="keyword">new</span> 外部类名().new 内部类名();</span><br><span class="line"></span><br><span class="line">Outer.<span class="keyword">this</span>.成员  &gt;&gt;&gt; <span class="string">"表示内部类对外部类的成员引用"</span></span><br><span class="line"><span class="keyword">this</span>.成员   &gt;&gt;&gt; <span class="string">"表示内部类对自己成员的调用"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">注：其他类调用内部类的成员：</span><br><span class="line">（<span class="number">1</span>）<span class="string">"【非静态成员内部类】"</span>：</span><br><span class="line"><span class="string">"——————————————————————————————————————————————————————————"</span></span><br><span class="line">外部类名.内部类名 变量名 = <span class="keyword">new</span> 外部类名().new 内部类名();</span><br><span class="line"><span class="string">"——————————————————————————————————————————————————————————"</span></span><br><span class="line"><span class="string">"【非静态内部类】【不能】 定义【 静态方法】"</span></span><br><span class="line"><span class="string">"需要在外部类中创建 内部类对象 ==&gt;&gt;&gt;调用方法： 【内部类对象名.成员变量】 OR 【 内部类对象名.成员方法() 】"</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）<span class="string">"【静态成员内部类】"</span>：</span><br><span class="line"><span class="string">"——————————————————————————————————————————————————————————"</span></span><br><span class="line">外部类名.内部类名 变量名 = <span class="keyword">new</span> 外部类名.内部类名();</span><br><span class="line">【调用非静态方法】： 变量名.静态方法名() OR <span class="keyword">new</span> 外部类名.内部类名().静态方法名()</span><br><span class="line"></span><br><span class="line"><span class="string">"——————————————————————————————————————————————————————————"</span></span><br><span class="line">【调用静态方法】：</span><br><span class="line"><span class="string">"在外部类中 直接 采用【 内部类名.成员 】调用 </span></span><br><span class="line"><span class="string">在其他类中：访问方式无需创建对象，利用 【 外部类名.内部类名.内部类静态方法 】访问内部类【静态方法】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* D: 成员内部类代码演示</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;<span class="comment">//外部类，身体</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> life= <span class="keyword">true</span>; <span class="comment">//生命状态</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">//内部类，心脏</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"心脏噗通噗通的跳"</span>)</span><br><span class="line">System.out.println(<span class="string">"生命状态"</span> + life); <span class="comment">//访问外部类成员变量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">访问内部类</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建内部类对象</span></span><br><span class="line">Body.Heart bh = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line"><span class="comment">//调用内部类中的方法</span></span><br><span class="line">bh.jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16成员内部类的同名变量调用"><a href="#16成员内部类的同名变量调用" class="headerlink" title="16成员内部类的同名变量调用"></a>16成员内部类的同名变量调用</h3><pre><code>* A: 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num  = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num  = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//18,就近原则</span></span><br><span class="line">System.out.println(<span class="string">"成员内部类 Inner 的方法 func &gt;&gt; num: "</span>+ num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//视为 访问 内部类对象（this）的成员变量，用this</span></span><br><span class="line">        System.out.println(<span class="string">"成员内部类 Inner 的方法 func &gt;&gt; this.num: "</span>+ <span class="keyword">this</span>.num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//视为 访问 外部类对象(Outer.this)的成员变量，用Outer.this</span></span><br><span class="line">        System.out.println(<span class="string">"成员内部类 Inner 的方法 func &gt;&gt; Outer.this.num: "</span>+ Outer.<span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-局部内部类"><a href="#17-局部内部类" class="headerlink" title="17 局部内部类"></a>17 局部内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* A <span class="string">"局部内部类"</span>，定义在<span class="string">"【外部类方法】"</span>中的<span class="string">"局部位置"</span>。<span class="string">"与访问方法中的【局部变量】【相似】，</span></span><br><span class="line"><span class="string">* 可通过【调用方法】【进行访问】"</span>.</span><br><span class="line">* 局部类 <span class="string">"【不能】"</span> 用 <span class="keyword">public</span>或 <span class="keyword">private</span> <span class="string">"修饰符进行声明，它的作用域被限定在所声明的【局部类的块】中。"</span></span><br><span class="line">* B 定义格式</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 【外部类】 </span>&#123; </span><br><span class="line">修饰符 返回值类型 【方法名(参数)】 &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 【内部类】 </span>&#123;</span><br><span class="line"><span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C 访问方式</span><br><span class="line"><span class="string">"在【外部类方法】中，创建【内部类】【对象】，进行访问"</span></span><br><span class="line"></span><br><span class="line">* D 局部内部类代码演示</span><br><span class="line">定义类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Party</span> </span>&#123;<span class="comment">//外部类，聚会</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">puffBall</span><span class="params">()</span></span>&#123;<span class="comment">// 吹气球方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;<span class="comment">// 内部类，气球</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">puff</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"气球膨胀了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建内部类对象，调用puff方法</span></span><br><span class="line"><span class="keyword">new</span> Ball().puff();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">访问内部类</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建外部类对象</span></span><br><span class="line">Party p = <span class="keyword">new</span> Party();</span><br><span class="line"><span class="comment">//调用外部类中的puffBall方法</span></span><br><span class="line">p.puffBall();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">举例：</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num =<span class="number">380</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> TYU =<span class="number">56</span>;</span><br><span class="line">        System.out.println(<span class="string">"外部类 Outer 的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outer_func</span><span class="params">( String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">200</span>; <span class="comment">// num是局部变量</span></span><br><span class="line">        <span class="keyword">int</span> yu=<span class="number">90</span>;</span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num =<span class="number">567</span>;</span><br><span class="line">            <span class="comment">//如何调用 局部内部类 中的 方法？</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inner_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="number">45456</span>;</span><br><span class="line">                <span class="comment">// s = "dvd";</span></span><br><span class="line">                <span class="comment">// yu =56;</span></span><br><span class="line">                <span class="comment">// yu++; //ERROR</span></span><br><span class="line">                arr[<span class="number">0</span>]++;</span><br><span class="line">                arr[<span class="number">0</span>]++;<span class="comment">//通过引用数据类型，实现【局部内部类】中的 计数器</span></span><br><span class="line">                <span class="keyword">this</span>.num++;<span class="comment">// 该this指向【局部内部类 Inner 】【对象】的【成员属性】：567+1=568</span></span><br><span class="line">                System.out.println(<span class="string">"局部内部类 Inner 的方法: "</span> +  <span class="keyword">this</span>.num+ <span class="string">"  "</span>+ yu + s);</span><br><span class="line">                System.out.println(<span class="string">"局部内部类 Inner 的方法:调用局部变量 "</span> +  arr[<span class="number">0</span>]);</span><br><span class="line">                Outer.<span class="keyword">this</span>.method();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inner_return</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.num;<span class="comment">//568</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要在【外部类】的【方法】中，创建【内部类】【对象】，进行访问</span></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.inner_func();</span><br><span class="line">        System.out.println(<span class="string">"this.num  "</span>+ <span class="keyword">this</span>.num);<span class="comment">// 该this指向 【外部类 Outer】【对象】的【成员属性】:380</span></span><br><span class="line">        <span class="keyword">return</span> in.inner_return() + <span class="keyword">this</span>.num + num;<span class="comment">// num是局部变量：200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18匿名内部类"><a href="#18匿名内部类" class="headerlink" title="18匿名内部类"></a>18匿名内部类</h3><pre><code>* A: 概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 内部类是为了应对更为复杂的类间关系。查看源代码中会涉及到，而在日常业务中很难遇到，这里不做赘述。</span><br><span class="line"> 最常用到的内部类就是匿名内部类，它是局部内部类的一种。</span><br><span class="line"> 定义的【匿名内部类】有两个含义：</span><br><span class="line"> <span class="string">"临时定义某一指定类型的子类"</span></span><br><span class="line"> <span class="string">"定义后【即刻】创建刚刚定义的这个【子类】的【对象】"</span></span><br><span class="line"></span><br><span class="line">* B: 本质</span><br><span class="line"> <span class="string">"【匿名内部类】的【本质】是一个实现了【接口】或继承了某个【父类】的【子类匿名对象】"</span>.</span><br><span class="line"></span><br><span class="line">* C: 案例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Smoking</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*【回顾之前采用的方式】</span></span><br><span class="line"><span class="comment"> *  实现类,实现接口 重写接口抽象方法,创建实现类对象</span></span><br><span class="line"><span class="comment"> *  class XXX implements Smoking&#123;</span></span><br><span class="line"><span class="comment"> *      public void smoking()&#123;</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  XXX x = new XXX();</span></span><br><span class="line"><span class="comment"> *  x.smoking(); </span></span><br><span class="line"><span class="comment"> *  Smoking s = new XXX();</span></span><br><span class="line"><span class="comment"> *  s.smoking();</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  匿名内部类,简化问题:  定义实现类,重写方法,建立实现类对象,合为一步完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">测试类:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="string">"//使用匿名内部类</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string"> *  定义实现类,重写方法,创建实现类对象,一步搞定</span></span><br><span class="line"><span class="string"> *  格式:"</span></span><br><span class="line">——————————————————————————————————————————————————————</span><br><span class="line">     <span class="keyword">new</span> 接口或者父类()&#123;</span><br><span class="line">        重写抽象方法</span><br><span class="line">     &#125;;</span><br><span class="line">——————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"*    从 new开始,到分号结束</span></span><br><span class="line"><span class="string"> *    创建了接口的实现类的对象</span></span><br><span class="line"><span class="string"> */"</span></span><br><span class="line"><span class="keyword">new</span> Smoking()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoking</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"人在吸烟"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.smoking();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19匿名内部类-2"><a href="#19匿名内部类-2" class="headerlink" title="19匿名内部类_2"></a>19匿名内部类_2</h3><pre><code>* A: 匿名内部类案例演示</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试代码</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *    new Animal()&#123;</span></span><br><span class="line"><span class="comment">public void eat()&#123;</span></span><br><span class="line"><span class="comment">System.out.println("在吃饭");</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">public void sleep()&#123;</span></span><br><span class="line"><span class="comment">System.out.println("在睡觉");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="string">"以上代码,就是Animal的子类的对象</span></span><br><span class="line"><span class="string">利用多态性, 父类引用 = 子类的对象"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal a= <span class="keyword">new</span> Animal()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在吃饭"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> a.eat();</span><br><span class="line"> a.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20包的概念"><a href="#20包的概念" class="headerlink" title="20包的概念"></a>20包的概念</h3><pre><code>* A: 概念</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">java的包，其实就是我们电脑系统中的文件夹，包里存放的是<span class="string">"类文件（.java 或者 .class 文件）"</span>。</span><br><span class="line">当类文件很多的时候，通常我们会采用多个包进行存放管理他们，这种方式称为<span class="string">"分包管理"</span>。</span><br><span class="line">在项目中，我们将相同功能的类放到一个包中，方便管理。并且日常项目的分工也是<span class="string">"以包作为边界"</span>。</span><br><span class="line"><span class="string">"类中声明的包必须与实际class文件所在的文件夹情况【相一致】，即类声明在a包下，</span></span><br><span class="line"><span class="string">则生成的.class文件必须在a文件夹下，否则，程序运行时会找不到类"</span>。</span><br><span class="line"><span class="string">"————————————————————————————————————————————————————————————————————————————————————————"</span></span><br><span class="line"></span><br><span class="line">* B 声明格式</span><br><span class="line">通常使用公司网址反写，<span class="string">"可以有【多层包】，包名采用【全部小写字母】，【多层包】之间用【”.”】连接"</span></span><br><span class="line">类中包的声明格式： </span><br><span class="line">——————————————————————————————</span><br><span class="line"><span class="keyword">package</span> 包名.包名.包名…;</span><br><span class="line">——————————————————————————————</span><br><span class="line">如：网址itheima.com那么网址反写就为com.itheima</span><br><span class="line"> itcast.cn  那么网址反写就为 cn.itcast</span><br><span class="line"><span class="string">"注意：声明包的语句，必须写在程序【有效代码】的【第一行】（注释不算）"</span></span><br><span class="line">代码演示：</span><br><span class="line"><span class="keyword">package</span> cn.itcast; <span class="comment">//包的声明，必须在有效代码的第一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;&#125;</span><br><span class="line"><span class="string">"————————————————————————————————————————————————————————————————————————————————————————"</span></span><br><span class="line"></span><br><span class="line">* C: 包的访问</span><br><span class="line">在访问类时，为了能够找到该类，<span class="string">"必须使用含有包名的【类全名】（包名.类名）"</span>。</span><br><span class="line">即：<span class="string">"包名.包名….类名"</span></span><br><span class="line">如：  java.util.Scanner</span><br><span class="line">java.util.Random</span><br><span class="line">cn.itcast.Demo</span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">带有包的类，创建对象格式：包名.类名 变量名 = <span class="keyword">new</span> 包名.类名();</span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">如： cn.itcast.Demo d = <span class="keyword">new</span> cn.itcast.Demo();</span><br><span class="line">前提：包的访问与访问权限密切相关，这里以一般情况来说，即类用<span class="keyword">public</span>修饰的情况。</span><br><span class="line"></span><br><span class="line"><span class="string">"————————————————————————————————————————————————————————————————————————————————————————"</span></span><br><span class="line"></span><br><span class="line">*D:类的简化访问</span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">当我们要使用一个类时，这个类与当前程序在<span class="string">"同一个包中（即同一个文件夹中）"</span>，</span><br><span class="line">或者<span class="string">"这个类是【java.lang】包中的类"</span>时通常<span class="string">"【可以省略】掉【包名】"</span>，直接使用该类。</span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">如：cn.itcast包中有两个类，PersonTest类，与Person类。</span><br><span class="line">我们在PersonTest类中，访问Person类时，由于是同一个包下，访问时可以省略包名，即直接通过类名访问 Person。</span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">类名 变量名 = <span class="keyword">new</span>类名();</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">当我们要使用的类，与当前程序<span class="string">"【不在】同一个包中（即【不同】文件夹中）"</span>，</span><br><span class="line">要访问的类<span class="string">"必须"</span>用<span class="keyword">public</span><span class="string">"修饰才可访问"</span>。</span><br><span class="line"><span class="keyword">package</span> cn.itcst02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="22导入包"><a href="#22导入包" class="headerlink" title="22导入包"></a>22导入包</h3><pre><code>* A:导入包</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">我们每次使用类时，都需要写很长的包名。很麻烦，我们可以通过<span class="keyword">import</span>导包的方式来简化。</span><br><span class="line">可以通过导包的方式使用该类，可以避免使用全类名编写（即，包类.类名）。</span><br><span class="line">导包的格式：</span><br><span class="line"><span class="keyword">import</span> 包名.类名;</span><br><span class="line"></span><br><span class="line">当程序导入指定的包后，使用类时，就可以简化了。演示如下</span><br><span class="line"><span class="comment">//导入包前的方式</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">java.util.Random r1 = <span class="keyword">new</span> java.util.Random();</span><br><span class="line">java.util.Random r2 = <span class="keyword">new</span> java.util.Random();</span><br><span class="line">java.util.Scanner sc1 = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">java.util.Scanner sc2 = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入包后的方式</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Random r1 = <span class="keyword">new</span> Random();</span><br><span class="line">Random r2 = <span class="keyword">new</span> Random();</span><br><span class="line">Scanner sc1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">import</span>导包代码书写的位置：在声明包<span class="keyword">package</span>后，定义所有类<span class="class"><span class="keyword">class</span>前，使用导包<span class="title">import</span>包名.包名.类名</span>;</span><br></pre></td></tr></table></figure><h3 id="23权限修饰符"><a href="#23权限修饰符" class="headerlink" title="23权限修饰符"></a>23权限修饰符</h3><pre><code>* A 权限修饰符有哪些</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> 在Java中提供了四种访问权限，使用不同的访问权限时，被修饰的内容会有不同的访问权限，</span><br><span class="line"> 以下表来说明不同权限的访问能力：</span><br><span class="line">            </span><br><span class="line">          <span class="keyword">public</span>  <span class="keyword">protected</span>     <span class="keyword">default</span><span class="keyword">private</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"同一【类】中"</span>              √               √         √           √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"同一包中(子类与无关类)"</span>      √               √         √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"不同包的子类"</span>              √               √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"不同包中的无关类"</span>      √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">* B: 小结</span><br><span class="line">归纳一下：在日常开发过程中，编写的类、方法、成员变量的访问</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">private</span>:要想<span class="string">"【仅能在本类中】"</span>访问使用<span class="keyword">private</span>修饰；</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">default</span>:要想<span class="string">"【本包】"</span>中的类都可以访问<span class="string">"【不加修饰符】"</span>即可；</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">protected</span>:要想<span class="string">"【本包】中的类与【其他包中的【子类】】"</span>可以访问使用<span class="keyword">protected</span>修饰</span><br><span class="line">注意： </span><br><span class="line"><span class="keyword">protected</span> 修饰符   在<span class="string">"【跨包】调用成员"</span>时：</span><br><span class="line"> <span class="string">"【只能】在 【子类的内部】【进行调用】：&#123; 直接用 【成员名】 OR 【super.成员名】 调用&#125;</span></span><br><span class="line"><span class="string">并且【不能】在【子类中】 通过 【创建对象】 【进行调用】"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">public</span>:要想<span class="string">"【所有包】中的【所有类】"</span>都可以访问使用<span class="keyword">public</span>修饰。</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">注意：如果类用<span class="keyword">public</span>修饰，<span class="string">"则【类名】必须与【文件名】相同"</span>。<span class="string">"一个文件中【只能】有一个"</span> <span class="keyword">public</span>修饰的类。</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br></pre></td></tr></table></figure><h3 id="24代码块"><a href="#24代码块" class="headerlink" title="24代码块"></a>24代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">* A: 概述:</span><br><span class="line">程序中用<span class="string">"【大括号括起来】"</span>的代码叫<span class="string">"代码块"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"> * B: 分类</span><br><span class="line"><span class="string">"局部代码块"</span>  <span class="string">"构造代码块"</span>  <span class="string">"静态代码块"</span>  <span class="string">"同步代码块"</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"> * C <span class="string">"局部代码块"</span>:</span><br><span class="line"><span class="string">"【局部代码块】是定义在【方法】或【语句】中"</span></span><br><span class="line">特点：</span><br><span class="line"><span class="string">"以”&#123;&#125;”划定的代码区域，此时只需要关注【作用域】的不同即可"</span></span><br><span class="line"><span class="string">"【方法】和【类】都是以【代码块】的方式【划定边界】的"</span></span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//局部代码块</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"> System.out.println(<span class="string">"局部代码块"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部变量作用域</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">99</span>;</span><br><span class="line">System.out.println(<span class="string">"代码块之外"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  结果：</span><br><span class="line">普通代码块<span class="number">1</span></span><br><span class="line">代码块之外<span class="number">99</span></span><br><span class="line">  <span class="string">"【局部代码块】作用:可以【限定变量】的【声明周期】"</span>.</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">* D: <span class="string">"构造代码块"</span></span><br><span class="line"><span class="string">"【构造代码块】是定义在【类】中【成员位置】的代码块"</span></span><br><span class="line">特点：</span><br><span class="line"><span class="string">"【优先于】【构造方法】执行，构造代码块用于执行【所有对象】【均需要】的【初始化动作】"</span></span><br><span class="line"><span class="string">"每【创建一个】对象均会【执行一次】构造代码块"</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//构造代码块</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"构造代码块执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person()&#123;</span><br><span class="line">System.out.println(<span class="string">"Person无参数的构造函数执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age)&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">System.out.println(<span class="string">"Person（age）参数的构造函数执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">23</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">构造代码块执行了</span><br><span class="line">Person无参数的构造函数执行</span><br><span class="line">构造代码块执行了</span><br><span class="line">Person（age）参数的构造函数执行</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">* E: <span class="string">"静态代码块"</span></span><br><span class="line"><span class="string">"【静态代码块】是定义在【成员位置】"</span>，使用<span class="keyword">static</span> <span class="string">"修饰的代码块"</span>。</span><br><span class="line">特点：</span><br><span class="line"><span class="string">"它【优先于】【主方法】执行、【优先于】【构造代码块】执行，</span></span><br><span class="line"><span class="string">当以任意形式【第一次使用到该类】时执行"</span>。</span><br><span class="line"><span class="string">"【该类】【不管创建多少对象】，【静态代码块】【只执行一次】"</span>。</span><br><span class="line"><span class="string">"可用于给【静态变量赋值】，用来给【类进行初始化】"</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="comment">//静态代码块</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"静态代码块执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* F: <span class="string">"同步代码块"</span>(多线程学习)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Class Person 构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Class Person 构造代码块 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Class Person 【静态】代码块 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"    Student 构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"    Student 【静态】代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"    Student 构造代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">"————————————————————————————"</span>);</span><br><span class="line">        <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">Class Person 【静态】代码块 </span><br><span class="line">    Student 【静态】代码块</span><br><span class="line">Class Person 构造代码块 </span><br><span class="line">Class Person 构造方法</span><br><span class="line">    Student 构造代码块</span><br><span class="line">    Student 构造方法</span><br><span class="line">————————————————————————————</span><br><span class="line">Class Person 构造代码块 </span><br><span class="line">Class Person 构造方法</span><br><span class="line">    Student 构造代码块</span><br><span class="line">    Student 构造方法</span><br><span class="line">———————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">结论：</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">【静态代码块】【只执行一次】</span></span><br><span class="line"><span class="string">执行顺序：</span></span><br><span class="line"><span class="string">* 静态代码块 &gt; 构造代码块（初始化块） &gt; 构造方法（构造器）</span></span><br><span class="line"><span class="string">* 父类 &gt; 子类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">结合下来的顺序：</span></span><br><span class="line"><span class="string">  【父类】静态代码块</span></span><br><span class="line"><span class="string">  【子类】静态代码块</span></span><br><span class="line"><span class="string">  父类构造代码块</span></span><br><span class="line"><span class="string">  父类构造方法</span></span><br><span class="line"><span class="string">  子类构造代码块</span></span><br><span class="line"><span class="string">  子类构造方法</span></span><br><span class="line"><span class="string">"</span></span><br></pre></td></tr></table></figure><h3 id="25总结"><a href="#25总结" class="headerlink" title="25总结"></a>25总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>：关键字，最终的意思</span><br><span class="line"><span class="keyword">final</span>修饰的类：最终的类，不能被继承</span><br><span class="line"><span class="keyword">final</span>修饰的变量： 相当于是一个常量, 在编译生产.class文件后，该变量变为常量值</span><br><span class="line"><span class="keyword">final</span>修饰的方法： 最终的方法，子类不能重写，可以继承过来使用</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> : 关键字， 静态的意思</span><br><span class="line">可以用来修饰类中的成员(成员变量，成员方法)</span><br><span class="line">注意： 也可以用来修饰成员内部类</span><br><span class="line">特点：</span><br><span class="line">被静态所修饰的成员，会被所有的对象所共享</span><br><span class="line">被静态所修饰的成员，可以通过类名直接调用，方便</span><br><span class="line">Person.country = <span class="string">"中国"</span>;</span><br><span class="line">Person.method();</span><br><span class="line">注意事项：</span><br><span class="line">静态的成员，随着类的加载而加载，优先于对象存在</span><br><span class="line">在静态方法中，没有<span class="keyword">this</span>关键字</span><br><span class="line">静态方法中，只能调用静态的成员(静态成员变量，静态成员方法</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">匿名对象：一个没有名字的对象</span><br><span class="line">特点：</span><br><span class="line">创建匿名对象直接使用，没有变量名</span><br><span class="line">匿名对象在没有指定其引用变量时，只能使用一次</span><br><span class="line">匿名对象可以作为方法接收的参数、方法返回值使用</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">内部类：在一个类中，定义了一个新类，这个新的类就是内部类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;<span class="comment">// 内部类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">特点： </span><br><span class="line">内部类可以直接访问外部类的成员，包含私有的成员</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">包的声明与访问</span><br><span class="line">类中包的声明格式： </span><br><span class="line"><span class="keyword">package</span> 包名.包名.包名…;</span><br><span class="line">带有包的类，创建对象格式：包名.类名 变量名 = <span class="keyword">new</span>包名.类名();</span><br><span class="line">cn.itcast.Demo d = <span class="keyword">new</span> cn.itcast.Demo();</span><br><span class="line">导包的格式：</span><br><span class="line"><span class="keyword">import</span> 包名.类名;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">权限修饰符</span><br><span class="line"><span class="keyword">public</span> : 公共的</span><br><span class="line"><span class="keyword">protected</span>: 受保护的</span><br><span class="line"><span class="keyword">default</span>: 默认的（可省略）</span><br><span class="line"><span class="keyword">private</span> : 私有的</span><br><span class="line"></span><br><span class="line">          <span class="keyword">public</span>  <span class="keyword">protected</span>     <span class="keyword">default</span><span class="keyword">private</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"同一【类】中"</span>              √               √         √           √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"同一包中(子类与无关类)"</span>      √               √         √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"不同包的子类"</span>              √               √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"> <span class="string">"不同包中的无关类"</span>      √</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码块：</span><br><span class="line">局部代码块：定义在方法中的，用来限制变量的作用范围</span><br><span class="line">构造代码块：定义在类中方法外，用来给对象中的成员初始化赋值</span><br><span class="line">静态代码块：定义在类中方法外，用来给类的静态成员初始化赋值</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541640107/samples/test/photo-1538831539254-abe4ffd1a812.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、final 关键字&lt;br&gt;2、static 关键字&lt;br&gt;3、匿名对象&lt;br&gt;4、内部类&lt;br&gt;5、包的声明与访问&lt;br&gt;6、访问修饰符&lt;br&gt;7、代码块&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础10(构造方法，this，super)</title>
    <link href="https://leesen998.github.io/2016/10/13/day12%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/13/day12笔记/</id>
    <published>2016-10-13T04:21:55.000Z</published>
    <updated>2018-11-23T07:41:25.554Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541640116/samples/test/photo-1539447322629-4100721554cd.jpg" alt="" style="width:100%"></p><p>1、构造方法<br>2、this关键字<br>3、super关键字<br>4、综合案例</p><a id="more"></a><h3 id="01构造方法引入"><a href="#01构造方法引入" class="headerlink" title="01构造方法引入"></a>01构造方法引入</h3><pre><code>* A:构造方法的引入        在开发中经常需要在创建对象的同时明确对象的属性值，比如员工入职公司就要明确他的姓名、年龄等属性信息。        那么，创建对象就要明确属性值，那怎么解决呢？也就是在创建对象的时候就要做的事情，当使用new关键字创建对象时，怎么给对象的属性初始化值呢？        这就要学习Java另外一门小技术，构造方法。* B: 那什么是构造方法呢？         从字面上理解即为构建创造时用的方法，即就是对象创建时要执行的方法。既然是对象创建时要执行的方法，那么只要在new对象时，        知道其执行的构造方法是什么，就可以在执行这个方法的时候给对象进行属性赋值。</code></pre><h3 id="02构造方法作用"><a href="#02构造方法作用" class="headerlink" title="02构造方法作用"></a>02构造方法作用</h3><pre><code>* A: 构造方法的作用:        在new的同时给成员变量赋值,给对象属性进行初始化。* B: 举例:        Perons p = new Person(&quot;张三&quot;,23); 在new 的时候给p对象的name属性和age属性进行赋值,使这个对象的属性有值。</code></pre><h3 id="03构造方法的定义和运行特点"><a href="#03构造方法的定义和运行特点" class="headerlink" title="03构造方法的定义和运行特点"></a>03构造方法的定义和运行特点</h3><pre><code>* A: 构造方法定义        构造方法的格式：        修饰符 构造方法名(参数列表)        {        }* B: 构造方法的体现：        构造方法没有返回值类型。也不需要写返回值。因为它是为构建对象的，对象创建完，方法就执行结束。        构造方法名称必须和类型保持一致。        构造方法没有具体的返回值。        构造方法的代码体现：* C: 构造方法举例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// Person的成员属性age和name</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person的构造方法，拥有参数列表</span></span><br><span class="line">Person(<span class="keyword">int</span> a, String nm) &#123;</span><br><span class="line"><span class="comment">// 接受到创建对象时传递进来的值，将值赋给成员属性</span></span><br><span class="line">age = a;</span><br><span class="line">name = nm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* D: 构造方法运行特点:</span><br><span class="line">在<span class="keyword">new</span> 对象的时候自动调用执行。</span><br></pre></td></tr></table></figure><h3 id="04默认添加的构造方法"><a href="#04默认添加的构造方法" class="headerlink" title="04默认添加的构造方法"></a>04默认添加的构造方法</h3><pre><code>* A: 每一class类都必须有一个构造方法，构造方法不写也有。     编译的时候，javac，系统会自动检查类中是否有构造方法，如果没有编译器就会自动添加一个构造方法     比如Person类， 编译器添加一个无参构造 public Person(){}</code></pre><h3 id="05构造方法的调用赋值"><a href="#05构造方法的调用赋值" class="headerlink" title="05构造方法的调用赋值"></a>05构造方法的调用赋值</h3><pre><code>* A: 理解构造方法的格式和基本功能之后，现在就要研究构造方法是怎么执行的呢？在创建对象的时候是如何初始化的呢？     构造方法是专门用来创建对象的，也就是在new对象时要调用构造方法。现在来看看如何调用构造方法。* B: 案例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// Person的成员属性age和name</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person的构造方法，拥有参数列表</span></span><br><span class="line">Person(<span class="keyword">int</span> a, String nm) &#123;</span><br><span class="line"><span class="comment">// 接受到创建对象时传递进来的值，将值赋给成员属性</span></span><br><span class="line">age = a;</span><br><span class="line">name = nm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + name + <span class="string">",age="</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建Person对象，并明确对象的年龄和姓名</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">"张三"</span>);</span><br><span class="line">p2.speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上述代码演示了创建对象时构造方法的调用。即在创建对象时，会调用与参数列表对应的构造方法</span><br></pre></td></tr></table></figure><h3 id="06构造方法的内存"><a href="#06构造方法的内存" class="headerlink" title="06构造方法的内存"></a>06构造方法的内存</h3><pre><code>A:内存加载的过程    有一个Person类, 创建Person 对象new Person()    1、首先会将main方法压入栈中，执行main方法中的 new Person(23,&quot;张三&quot;);     2、在堆内存中分配一片区域，用来存放创建的Person对象，这片内存区域会有属于自己的内存地址（0x88）。然后给成员变量进行默认初始化（name=null，age=0）。    3、执行构造方法中的代码（age = a ; name = nm;）,将变量a对应的23赋值给age，将变量nm对应的”张三赋值给name，这段代码执行结束后，成员变量age和name的值已经改变。执行结束之后构造方法弹栈，Person对象创建完成。将Person对象的内存地址0x88赋值给p2。</code></pre><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541838353/samples/java%20files/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="07构造方法的重载"><a href="#07构造方法的重载" class="headerlink" title="07构造方法的重载"></a>07构造方法的重载</h3><pre><code>* A：当在描述事物时，要不要在类中写构造方法呢？这时要根据描述事物的特点来确定，当描述的事物在创建其对象时就要明确属性的值，这时就需要在定义类的时候书写带参数的构造方法。*    若创建对象时不需要明确具体的数据，这时可以不用书写构造方法（不书写也有默认的构造方法）。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">构造方法的细节：</span><br><span class="line"><span class="number">1</span>、一个类中可以有多个构造方法，多个构造方法是以重载的形式存在的</span><br><span class="line"><span class="number">2</span>、构造方法是可以被<span class="keyword">private</span>修饰的，作用：其他程序无法创建该类的对象。</span><br><span class="line">* B: 举例</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有无参数的构造方法，即外界不能通过new Person();语句创建本类对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个构造方法是以重载的形式存在</span></span><br><span class="line">Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(String nm, <span class="keyword">int</span> a) &#123;</span><br><span class="line">name = nm;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08构造方法和一般方法区别"><a href="#08构造方法和一般方法区别" class="headerlink" title="08构造方法和一般方法区别"></a>08构造方法和一般方法区别</h3><pre><code>* A: 目前为止，学习两种方法，分别为构造方法和一般方法，那么他们之间有什么异同呢？</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.格式不同</span><br><span class="line"> 构造方法 : 修饰符  类名(参数类型 参数 ...)&#123;</span><br><span class="line">初始化成员变量</span><br><span class="line">&#125;</span><br><span class="line">一般方法: 需要有返回值类型</span><br><span class="line"><span class="number">2</span>.作用不同</span><br><span class="line">构造方法一般用来给成员变量初始化;</span><br><span class="line">一般方法根据需求而定;</span><br><span class="line"><span class="number">3</span>.调用方式不同</span><br><span class="line">构造方法创建对象时调用, 或者<span class="keyword">this</span>() <span class="keyword">super</span>() 语句调用</span><br><span class="line">普通方法需要对象调用或者静态方法直接调用静态方法.</span><br><span class="line"><span class="number">4</span>.执行不同</span><br><span class="line">构造方法在对象创建时就执行了，而且只执行一次。</span><br><span class="line">一般方法是在对象创建后，需要使用时才被对象调用，并可以被多次调用。</span><br></pre></td></tr></table></figure><h3 id="09this在构造方法之间的调用"><a href="#09this在构造方法之间的调用" class="headerlink" title="09this在构造方法之间的调用"></a>09this在构造方法之间的调用</h3><pre><code>* A: 在之前学习方法之间调用时，可以通过方法名进行调用。可是针对构造方法，无法通过构造方法名来相互调用。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">构造方法之间的调用，可以通过<span class="keyword">this</span>关键字来完成。</span><br><span class="line">构造方法调用格式：</span><br><span class="line"><span class="keyword">this</span>(参数列表);</span><br><span class="line"></span><br><span class="line">* B:调用构造方法的案例</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// Person的成员属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数的构造方法</span></span><br><span class="line">Person() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给姓名初始化的构造方法</span></span><br><span class="line">Person(String nm) &#123;</span><br><span class="line">name = nm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给姓名和年龄初始化的构造方法</span></span><br><span class="line">Person(String nm, <span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="comment">// 由于已经存在给姓名进行初始化的构造方法 name = nm;因此只需要调用即可</span></span><br><span class="line"><span class="comment">// 调用其他构造方法，需要通过this关键字来调用</span></span><br><span class="line"><span class="keyword">this</span>(nm);</span><br><span class="line"><span class="comment">// 给年龄初始化</span></span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541838353/samples/java%20files/this_%E8%AF%AD%E5%8F%A5%E5%BD%A2%E5%BC%8F.jpg" alt="方法调用的内存图"></p><h3 id="10this在构造方法调用的内存图"><a href="#10this在构造方法调用的内存图" class="headerlink" title="10this在构造方法调用的内存图"></a>10this在构造方法调用的内存图</h3><pre><code>* A: 被加载的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">Person() &#123;</span><br><span class="line">&#125;</span><br><span class="line">Person(String nm) &#123;</span><br><span class="line">name = nm;</span><br><span class="line">&#125;</span><br><span class="line">Person(String nm, <span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">this</span>(nm);</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 构造方法调用的原理图</span><br><span class="line">*  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、先执行main方法，main方法压栈，执行其中的<span class="keyword">new</span> Person(“张三”,<span class="number">23</span>);</span><br><span class="line"><span class="number">2</span>、堆内存中开辟空间，并为其分配内存地址<span class="number">0x33</span>，，紧接着成员变量默认初始化（name=<span class="keyword">null</span>  age = <span class="number">0</span>）；</span><br><span class="line"><span class="number">3</span>、拥有两个参数的构造方法（Person（String nm , <span class="keyword">int</span> a））压栈，在这个构造方法中有一个隐式的<span class="keyword">this</span>，</span><br><span class="line">因为构造方法是给对象初始化的，哪个对象调用到这个构造方法，<span class="keyword">this</span>就指向堆中的哪个对象。</span><br><span class="line"><span class="number">4</span>、由于Person（String nm , <span class="keyword">int</span> a）构造方法中使用了<span class="keyword">this</span>(nm);构造方法Person(String nm)就会压栈，</span><br><span class="line">并将“张三”传递给nm。在Person（String nm , <span class="keyword">int</span> a）构造方法中同样也有隐式的<span class="keyword">this</span>，</span><br><span class="line"><span class="keyword">this</span>的值同样也为<span class="number">0x33</span>，这时会执行其中name = nm，即把“张三”赋值给成员的name。</span><br><span class="line">当赋值结束后Person（String nm , <span class="keyword">int</span> a）构造方法弹栈。</span><br><span class="line"><span class="number">5</span>、程序继续执行构造方法（Person（String nm , <span class="keyword">int</span> a）中的age = a；</span><br><span class="line">这时会将<span class="number">23</span>赋值给成员属性age。赋值结束构造方法（Person（String nm , <span class="keyword">int</span> a）弹栈。</span><br><span class="line"><span class="number">6</span>、当构造方法（Person（String nm , <span class="keyword">int</span> a）弹栈结束后</span><br><span class="line">，Person对象在内存中创建完成，并将<span class="number">0x33</span>赋值给main方法中的p引用变量。</span><br><span class="line">注意：</span><br><span class="line"><span class="keyword">this</span>到底代表什么呢？<span class="keyword">this</span>代表的是对象，具体代表哪个对象呢？</span><br><span class="line">哪个对象调用了<span class="keyword">this</span>所在的方法，<span class="keyword">this</span>就代表哪个对象。</span><br><span class="line">调用其他构造方法的语句必须定义在构造方法的第一行，原因是初始化动作要最先执行。</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541838353/samples/java%20files/this%E8%B0%83%E7%94%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="11this简易应用"><a href="#11this简易应用" class="headerlink" title="11this简易应用"></a>11this简易应用</h3><pre><code>* A: 当在方法中出现了局部变量和成员变量同名的时候，那么在方法中怎么区别局部变量成员变量呢？可以在成员变量名前面加上this.来区别成员变量和局部变量* B: 举例1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给姓名和年龄初始化的构造方法</span></span><br><span class="line">Person(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line"><span class="comment">// 当需要访问成员变量是，只需要在成员变量前面加上this.即可</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">",age="</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">p.speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* C: 举例<span class="number">2</span></span><br><span class="line">学习完了构造方法、<span class="keyword">this</span>的用法之后，现在做个小小的练习。</span><br><span class="line">需求：在Person类中定义功能，判断两个人是否是同龄人</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给姓名和年龄初始化的构造方法</span></span><br><span class="line">Person(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line"><span class="comment">// 当需要访问成员变量是，只需要在成员变量前面加上this.即可</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">",age="</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为同龄人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsAge</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用当前调用该equalsAge方法对象的age和传递进来p的age进行比较</span></span><br><span class="line"><span class="comment">// 由于无法确定具体是哪一个对象调用equalsAge方法，这里就可以使用this来代替</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * if(this.age == p.age) &#123; return true; &#125; return false;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12super关键字-1"><a href="#12super关键字-1" class="headerlink" title="12super关键字_1"></a>12super关键字_1</h3><pre><code>* A: 子父类中构造方法的调用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在创建子类对象时，父类的构造方法会先执行，因为子类中所有构造方法的第一行有默认的隐式<span class="keyword">super</span>();语句。</span><br><span class="line">* B: 格式：</span><br><span class="line">调用本类中的构造方法</span><br><span class="line"><span class="keyword">this</span>(实参列表);</span><br><span class="line">调用父类中的空参数构造方法</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">调用父类中的有参数构造方法</span><br><span class="line"><span class="keyword">super</span>(实参列表);</span><br></pre></td></tr></table></figure><h3 id="13super关键字-2"><a href="#13super关键字-2" class="headerlink" title="13super关键字_2"></a>13super关键字_2</h3><pre><code>* A:子类构造方法,有一个默认添加的构造方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">super</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">* B :为什么子类对象创建都要访问父类中的构造方法？因为子类继承了父类的内容，</span><br><span class="line">  所以创建对象时，必须要先看父类是如何对其内容进行初始化的，看如下程序</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Zi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num ;</span><br><span class="line">Fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu构造方法"</span>+num);</span><br><span class="line">num = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">Zi()&#123;</span><br><span class="line">         <span class="comment">//super(); 调用父类空参数构造方法</span></span><br><span class="line">System.out.println(<span class="string">"Zi构造方法"</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">　　     Fu构造方法<span class="number">0</span></span><br><span class="line">　　     Zi构造方法<span class="number">4</span></span><br><span class="line"></span><br><span class="line">通过结果发现，子类空参数构造方法执行时中，调用了父类空参数构造方法，这说明，子类空参数构造方法中有一句<span class="keyword">super</span>()。</span><br><span class="line"><span class="meta">@A</span>: <span class="string">"【子类】中的【空参数构造方法】会有一句【隐式】的"</span> <span class="keyword">super</span>()</span><br><span class="line">原因：子类会继承父类中的内容，所以子类在初始化时，必须先到父类中去执行父类的初始化动作。</span><br><span class="line">这样，才可以使用父类中的内容。</span><br><span class="line">——————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="meta">@B</span>: <span class="string">"当父类中【没有】【空参数构造方法】时，子类的构造方法【必须】有【显示】的【super(参数)语句】，</span></span><br><span class="line"><span class="string">  指定要访问的父类【有参数】【构造方法】。否则报错！！！"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);<span class="comment">//父类中【没有】【空参数构造方法】时，子类的构造方法【必须】有【显示】的【super(参数)语句】</span></span><br><span class="line">        System.out.println(<span class="string">"Child"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14子类父类的内存图"><a href="#14子类父类的内存图" class="headerlink" title="14子类父类的内存图"></a>14子类父类的内存图</h3><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541840130/samples/java%20files/%E5%AD%90%E7%B1%BB%E7%88%B6%E7%B1%BB%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图">    </p><h3 id="15super关键字-3"><a href="#15super关键字-3" class="headerlink" title="15super关键字_3"></a>15super关键字_3</h3><pre><code>* A: 创建子类对象的时候会必须调用父类的构造方法。   &quot;子类默认会调用父类的【无参构造】， 但如果父类【没有无参构造】，子类的构造方法继续调用父类的无参构造就会报错。&quot;   &quot;因此子类构造方法的第一行需要调用父类的构造方法，既可以调用父类的无参构造，也可以调用父类的有参构造，这样语法上就不会报错。&quot;</code></pre><h3 id="16super关键字-4"><a href="#16super关键字-4" class="headerlink" title="16super关键字_4"></a>16super关键字_4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* A: 构造方法第一行,写<span class="keyword">this</span>()还是<span class="keyword">super</span>()</span><br><span class="line">* <span class="string">" this() 是调用本类的构造方法,super()是调用父类的构造方法, 且两条语句不能同时存在 "</span></span><br><span class="line">* <span class="string">" 保证子类的所有构造方法调用到父类的构造方法即可 "</span></span><br><span class="line"></span><br><span class="line">* B: 小结:</span><br><span class="line">*<span class="string">" 无论如何,子类的所有构造方法,直接或间接必须调用到父类构造方法;"</span></span><br><span class="line">* <span class="string">"子类的构造方法什么都不写,默认的构造方法第一行是super() ，即默认调用父类的空参数构造方法"</span></span><br></pre></td></tr></table></figure><h3 id="17创建子类对象过程的细节"><a href="#17创建子类对象过程的细节" class="headerlink" title="17创建子类对象过程的细节"></a>17创建子类对象过程的细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* A 创建子类对象过程的细节</span><br><span class="line">* 如果子类的构造方法第一行写了<span class="keyword">this</span>调用了本类其他构造方法，那么<span class="keyword">super</span>调用父类的语句还有吗？</span><br><span class="line">* 这时是没有的，<span class="string">"因为this()或者super(),只能定义在构造方法的第一行，因为初始化动作要先执行。"</span></span><br><span class="line">* 父类构造方法中是否有隐式的<span class="keyword">super</span>呢？</span><br><span class="line">* 也是有的。记住：只要是构造方法默认第一行都是<span class="keyword">super</span>();</span><br><span class="line">* 父类的父类是谁呢？<span class="keyword">super</span>调用的到底是谁的构造方法呢？</span><br><span class="line">* Java体系在设计，定义了一个所有对象的父类Object</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">* </span><br><span class="line"><span class="string">"类中的构造方法默认第一行都有【隐式】的super()语句，访问父类中的【空参数构造方法】。</span></span><br><span class="line"><span class="string">所以父类的构造方法既可以给自己的对象初始化，也可以给自己的子类对象初始化。</span></span><br><span class="line"><span class="string">如果默认的隐式super()语句在父类中【没有】对应的构造方法，</span></span><br><span class="line"><span class="string">那么必须在构造方法中通过 this(参数) 或者 super(参数) 的形式明确要调用的构造方法。"</span></span><br></pre></td></tr></table></figure><h3 id="18super的应用"><a href="#18super的应用" class="headerlink" title="18super的应用"></a>18super的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">* A: 练习：描述学生和工人这两个类，将他们的共性name和age抽取出来存放在父类中，并提供相应的get和set方法，同时需要在创建学生和工人对象就必须明确姓名和年龄</span><br><span class="line">* 案例:</span><br><span class="line"><span class="comment">//定义Person类，将Student和Worker共性抽取出来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="comment">// super();</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// Student类的构造方法</span></span><br><span class="line">Student(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line"><span class="comment">// 使用super关键字调用父类构造方法，进行相应的初始化动作</span></span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;<span class="comment">// Studnet中特有的方法</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"同学在学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">Worker(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line"><span class="comment">// 使用super关键字调用父类构造方法，进行相应的初始化动作</span></span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;<span class="comment">// Worker 中特有的方法</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"工人在工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">"小明"</span>,<span class="number">23</span>);</span><br><span class="line">stu.study();</span><br><span class="line"></span><br><span class="line">Worker w = <span class="keyword">new</span> Worker(<span class="string">"小李"</span>,<span class="number">45</span>);</span><br><span class="line">w.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19总结"><a href="#19总结" class="headerlink" title="19总结"></a>19总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>关键字</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>关键字，本类对象的引用</span><br><span class="line"><span class="keyword">this</span>是在方法中使用的，哪个对象调用了该方法，那么，<span class="keyword">this</span>就代表调用该方法的对象引用</span><br><span class="line"><span class="keyword">this</span>什么时候存在的？当创建对象的时候，<span class="keyword">this</span>存在的</span><br><span class="line"><span class="keyword">this</span>的作用：用来区别同名的成员变量与局部变量（<span class="keyword">this</span>.成员变量）</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"><span class="string">"构造方法"</span>： <span class="string">"用来给类的成员进行初始化操作"</span></span><br><span class="line"></span><br><span class="line">格式： </span><br><span class="line">修饰符 类名 (参数列表) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">构造方法的特点：</span><br><span class="line"><span class="number">1</span>, 方法名与类名相同</span><br><span class="line"><span class="number">2</span>，【<span class="string">"没有返回值】，也【没有】【返回值类型】"</span>，连<span class="keyword">void</span>也没有</span><br><span class="line">构造方法什么时候会被调用执行？</span><br><span class="line"><span class="string">"【只有】在创建对象的时候才可以被调用"</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="keyword">super</span>: 指的是父类的存储空间(理解为<span class="string">"【父类的引用】"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"调用父类的【成员变量】"</span>： <span class="keyword">super</span>.成员变量;</span><br><span class="line"></span><br><span class="line"><span class="string">"调用父类的【构造方法】"</span>: <span class="keyword">super</span>(参数);</span><br><span class="line"></span><br><span class="line"><span class="string">"调用父类的【成员方法】"</span>: <span class="keyword">super</span>.成员方法();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继承中的构造方法注意事项：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>，<span class="string">"如果我们【手动给出了构造方法】，编译器【不会】再给我们提供【默认】的【空参数构造方法】</span></span><br><span class="line"><span class="string">如果我们【没写】任何的构造方法，编译器提供给我们【一个隐式空参数构造方法】"</span></span><br><span class="line"><span class="number">2</span>, 在构造方法中，【默认】的第一条语句为 <span class="keyword">super</span>();</span><br><span class="line">它是用来访问父类中的【空参数构造方法】，进行父类成员的初始化操作</span><br><span class="line"><span class="number">3</span>, 当父类中【没有】【空参数构造方法】的时候，怎么办？</span><br><span class="line">a: 通过 <span class="keyword">super</span>(参数) <span class="string">"访问【父类】【有参数的构造方法】"</span></span><br><span class="line">b: 通过 <span class="keyword">this</span>(参数) <span class="string">"访问【本类】中其他构造方法"</span></span><br><span class="line">   注意:<span class="string">"【本类】中的其他构造方法应满足已经能够正常访问【父类构造方法】，</span></span><br><span class="line"><span class="string">          即本类其他构造方法（含有super(参数)）"</span></span><br><span class="line"><span class="number">4</span>, <span class="string">"super(参数) 与 this(参数) 【不能】同时在构造方法中存在"</span></span><br></pre></td></tr></table></figure><h3 id="20完整员工案例分析"><a href="#20完整员工案例分析" class="headerlink" title="20完整员工案例分析"></a>20完整员工案例分析</h3><pre><code> * A: 项目介绍    某IT公司有多名员工，按照员工负责的工作不同，进行了部门的划分（研发部员工、维护部员工）。研发部根据所需研发的内容不同，又分为JavaEE工程师、Android工程师；维护部根据所需维护的内容不同，又分为网络维护工程师、硬件维护工程师。    公司的每名员工都有他们自己的员工编号、姓名，并要做它们所负责的工作。    工作内容    JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站    Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件    网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通    硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机    请根据描述，完成员工体系中所有类的定义，并指定类之间的继承关系。进行XX工程师类的对象创建，完成工作方法的调用。* B: 案例分析    根据上述部门的描述，得出如下的员工体系图    根据员工信息的描述，确定每个员工都有员工编号、姓名、要进行工作。则，把这些共同的属性与功能抽取到父类中（员工类），关于工作的内容由具体的工程师来进行指定。    工作内容    JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站    Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件    网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通    硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机    创建JavaEE工程师对象，完成工作方法的调用</code></pre><h3 id="21案例代码实现"><a href="#21案例代码实现" class="headerlink" title="21案例代码实现"></a>21案例代码实现</h3><pre><code>* A:定义员工类(抽象类)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;<span class="comment">// 员工编号</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工作方法（抽象方法）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* B :    定义研发部员工类Developer 继承 员工类Employee</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">//空参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Developer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Developer</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(id, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* C:    定义维护部员工类Maintainer 继承 员工类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Employee</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maintainer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">//空参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Maintainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参数构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Maintainer</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(id, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* D:    定义JavaEE工程师 继承 研发部员工类，重写工作方法</code></pre><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEE</span> <span class="keyword">extends</span> <span class="title">Developer</span> </span>{    <span class="comment">//空参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">JavaEE</span><span class="params">()</span> </span>{        <span class="keyword">super</span>();    }    <span class="comment">//有参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">JavaEE</span><span class="params">(String id, String name)</span> </span>{        <span class="keyword">super</span>(id, name);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{        System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在研发淘宝网站"</span>);    }}</code></pre><pre><code>* E:    定义Android工程师 继承 研发部员工类，重写工作方法</code></pre><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Developer</span> </span>{    <span class="comment">//空参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Android</span><span class="params">()</span> </span>{        <span class="keyword">super</span>();    }    <span class="comment">//有参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Android</span><span class="params">(String id, String name)</span> </span>{        <span class="keyword">super</span>(id, name);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{        System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在研发淘宝手机客户端软件"</span>);    }}</code></pre><pre><code>* F:    定义Network网络维护工程师 继承 维护部员工类，重写工作方法</code></pre><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Network</span> <span class="keyword">extends</span> <span class="title">Maintainer</span> </span>{    <span class="comment">//空参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Network</span><span class="params">()</span> </span>{        <span class="keyword">super</span>();    }    <span class="comment">//有参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Network</span><span class="params">(String id, String name)</span> </span>{        <span class="keyword">super</span>(id, name);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{        System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在检查网络是否畅通"</span>);    }}</code></pre><pre><code>* G:    定义Hardware硬件维护工程师 继承 维护部员工类，重写工作方法</code></pre><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hardware</span> <span class="keyword">extends</span> <span class="title">Maintainer</span> </span>{    <span class="comment">//空参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Hardware</span><span class="params">()</span> </span>{        <span class="keyword">super</span>();    }    <span class="comment">//有参数构造方法</span>    <span class="function"><span class="keyword">public</span> <span class="title">Hardware</span><span class="params">(String id, String name)</span> </span>{        <span class="keyword">super</span>(id, name);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{        System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在修复打印机"</span>);    }}* H:    在测试类中，创建JavaEE工程师对象，完成工作方法的调用<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        <span class="comment">//创建JavaEE工程师员工对象，该员工的编号000015，员工的姓名 小明</span>        JavaEE ee = <span class="keyword">new</span> JavaEE(<span class="string">"000015"</span>, <span class="string">"小明"</span>);        <span class="comment">//调用该员工的工作方法</span>        ee.work();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541640116/samples/test/photo-1539447322629-4100721554cd.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、构造方法&lt;br&gt;2、this关键字&lt;br&gt;3、super关键字&lt;br&gt;4、综合案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础9(接口，多态)</title>
    <link href="https://leesen998.github.io/2016/10/12/day11%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/12/day11笔记/</id>
    <published>2016-10-12T14:21:55.000Z</published>
    <updated>2018-11-21T08:29:05.155Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541385820/samples/test/photo-1539580709660-0505d36fa6e7.jpg" alt="" style="width:100%"></p><p>1、接口<br>2、多态</p><a id="more"></a><p><strong>Java中引用数据类型只有三种，分别是类(class)、接口(interface)、数组。</strong></p><p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。<strong>在函数中定义的一些【基本类型的变量】和【对象的引用变量】都是在函数的【栈内存】中分配。</strong></p><p>当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，<strong>当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</strong></p><p><strong>【堆内存用于存放由new创建的对象或数组】</strong>。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。<br>在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，<strong>这个变量的取值等于【数组或者对象在堆内存中的首地址】，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，</strong>引用变量相当于为数组或者对象起的一个别名。</p><p><strong>【引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。】</strong><br><strong>而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，【数组和对象在没有引用变量指向它的时候，才变成垃圾】，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。</strong>这个也是java比较占内存的主要原因，实际上，<strong>栈中的变量指向堆内存中的变量</strong>，这就是 Java 中的指针! </p><h3 id="01接口的概念"><a href="#01接口的概念" class="headerlink" title="01接口的概念"></a>01接口的概念</h3><pre><code>* A:接口的概念   接口是功能的集合，同样可看做是一种数据类型，是比抽象类更为抽象的”类”。   接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成。这样将功能的定义与实现分离，优化了程序设计。   请记住：一切事物均有功能，即一切事物均有接口。</code></pre><h3 id="02接口的定义"><a href="#02接口的定义" class="headerlink" title="02接口的定义"></a>02接口的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* A: 接口的定义</span><br><span class="line">与定义类的<span class="class"><span class="keyword">class</span>不同，接口定义时需要使用<span class="title">interface</span>关键字。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">定义接口所在的仍为.<span class="title">java</span>文件，虽然声明时使用的为<span class="title">interface</span>关键字的编译后仍然会产生.<span class="title">class</span>文件。</span></span><br><span class="line"><span class="class">这点可以让我们将接口看做是一种只包含了功能声明的特殊类。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">* B : 定义格式</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">抽象方法<span class="number">1</span>;</span><br><span class="line">抽象方法<span class="number">2</span>;</span><br><span class="line">抽象方法<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C: 定义步骤</span><br><span class="line">使用<span class="class"><span class="keyword">interface</span>代替了原来的<span class="title">class</span>，其他步骤与定义类相同：</span></span><br><span class="line">"接口中的方法均为【公共】访问的抽象方法":</span><br><span class="line">定义为：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br><span class="line">接口中无法定义普通的成员变量：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;<span class="comment">// NUM的值不能改变</span></span><br></pre></td></tr></table></figure><h3 id="03接口的实现类"><a href="#03接口的实现类" class="headerlink" title="03接口的实现类"></a>03接口的实现类</h3><pre><code>* A: 类与接口的关系</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"类与接口的关系为实现关系，即类实现接口"</span>。实现的动作类似继承，只是关键字不同，<span class="string">"实现使用 implements "</span></span><br><span class="line"></span><br><span class="line">其他类(实现类)实现接口后，就相当于声明：”我应该具备这个接口中的功能”。实现类仍然需要重写方法以实现具体的功能。</span><br><span class="line"></span><br><span class="line">* B: 类实现接口的格式</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类 <span class="keyword">implements</span> 接口 </span>&#123;</span><br><span class="line">重写接口中方法</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">* C:注意事项</span><br><span class="line"><span class="string">"在类实现接口后，该类就会将接口中的抽象方法继承过来，此时该类需要重写该抽象方法，完成具体的逻辑。"</span></span><br><span class="line"></span><br><span class="line">接口中定义功能，当需要具有该功能时，可以让类实现该接口，只声明了应该具备该方法，是功能的声明。</span><br><span class="line">在具体实现类中重写方法，实现功能，是方法的具体实现。</span><br></pre></td></tr></table></figure><h3 id="04接口中成员变量的特点"><a href="#04接口中成员变量的特点" class="headerlink" title="04接口中成员变量的特点"></a>04接口中成员变量的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A:成员变量特点</span><br><span class="line">* a 接口中可以定义变量，但是变量<span class="string">"必须有固定的修饰符修饰"</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> </span><br><span class="line">所以<span class="string">"接口中的变量也称之为常量，其值不能改变"</span>。后面我们会讲解<span class="keyword">static</span>与<span class="keyword">final</span>关键字</span><br><span class="line"></span><br><span class="line">* B:案例</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123; <span class="comment">///定义一个名称为Demo的接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;<span class="comment">// NUM的值不能改变</span></span><br><span class="line"><span class="comment">//可以省略不写修饰符public static final，接口默认是public static final</span></span><br><span class="line"><span class="keyword">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05接口中成员方法的特点"><a href="#05接口中成员方法的特点" class="headerlink" title="05接口中成员方法的特点"></a>05接口中成员方法的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">* A: 成员方法特点</span><br><span class="line">* a 接口中可以定义方法，<span class="string">"方法也有固定的修饰符"</span>，<span class="keyword">public</span> <span class="keyword">abstract</span></span><br><span class="line">同样，<span class="string">"可以省略不写"</span>修饰符<span class="keyword">public</span> <span class="keyword">abstract</span> ，接口的成员方法<span class="string">"默认"</span>是<span class="keyword">public</span> <span class="keyword">abstract</span></span><br><span class="line">但是，<span class="string">"在【实现类】中【重写】【接口中的方法】 【必须有】"</span> <span class="keyword">public</span></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">此外，注意： </span><br><span class="line">@<span class="number">1</span> 接口中可以定义<span class="string">"静态方法"</span>（<span class="keyword">static</span> method）：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">static_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中可以定义\"静态方法\" "</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">调用方式： 接口名.静态方法名();</span></span><br><span class="line"><span class="string">          MyInterface.static_func();</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">——————————————————————————————————————————————————————————</span><br><span class="line">@<span class="number">2</span> 接口中可以定义<span class="string">"默认方法"</span>（<span class="keyword">default</span> method）:</span><br><span class="line">通过<span class="keyword">default</span>修饰符标记该方法。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中可以定义\"默认方法\" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">* b <span class="string">"子类必须覆盖掉接口中【所有的抽象方法】后，子类才可以实例化。否则子类是一个抽象类。"</span></span><br><span class="line">* <span class="string">"所有接口中的成员变量【必须是静态常量】，由于【接口】【没有】【构造方法】，</span></span><br><span class="line"><span class="string">* 所以【必须显示赋值】。可以【直接】用【接口名】访问"</span></span><br><span class="line">* <span class="string">" 访问接口中的静态变量 "</span>:</span><br><span class="line">* <span class="string">"接口名.变量名"</span></span><br><span class="line">    Inter.COUNT</span><br><span class="line"></span><br><span class="line">* B: 案例</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123; <span class="comment">///定义一个名称为Demo的接口。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类去覆盖接口中的方法。类与接口之间的关系是 实现。通过 关键字 implements</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoImpl</span> <span class="keyword">implements</span> <span class="title">Demo</span> </span>&#123; <span class="comment">//子类实现Demo接口。</span></span><br><span class="line"><span class="comment">//重写接口中的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06实现类还是一个抽象类"><a href="#06实现类还是一个抽象类" class="headerlink" title="06实现类还是一个抽象类"></a>06实现类还是一个抽象类</h3><pre><code>A: 接口的实现类   一个类如果实现类接口,有两种操作方法:   第一:实现类是【非抽象类】,就需要【重写接口中所有】的抽象方法.————————————————————————————————————————————————————————————————————————————————————————   第二:实现类也声明为【抽象类】,那么实现类【可以不重写】接口中的抽象方法。</code></pre><h3 id="07类和接口的多实现"><a href="#07类和接口的多实现" class="headerlink" title="07类和接口的多实现"></a>07类和接口的多实现</h3><pre><code>* A：接口的多实现    了解了接口的特点后，那么想想为什么要定义接口，使用抽象类描述也没有问题，接口到底有啥用呢？    接口最重要的体现：解决多继承的弊端。将多继承这种机制在java中通过多实现完成了。* B 多实现的优点    * 怎么解决多继承的弊端呢？    * 弊端：多继承时，当多个父类中有相同功能时，子类调用会产生不确定性。    * 其实核心原因就是在于多继承父类中功能有主体，而导致调用运行时，不确定运行哪个主体内容。    * 为什么多实现能解决了呢？    * 因为接口中的功能都没有方法体，由子类来明确。</code></pre><p>C :案例演示</p><pre><code>interface Fu1{    void show1();}interface Fu2{    void show2();}class Zi implements Fu1,Fu2 {    // 多实现。同时实现多个接口。    public void show1(){}    public void show2(){}}</code></pre><h3 id="08类在继承类的同时实现多接口"><a href="#08类在继承类的同时实现多接口" class="headerlink" title="08类在继承类的同时实现多接口"></a>08类在继承类的同时实现多接口</h3><p>A: 继承的同时实现接口</p><pre><code>* 接口和类之间可以通过实现产生关系，同时也学习了类与类之间可以通过继承产生关系。当一个类已经继承了一个父类，它又需要扩展额外的功能，这时接口就派上用场了。* 子类通过继承父类扩展功能，通过继承扩展的功能都是子类应该具备的基础功能。如果子类想要继续扩展其他类中的功能呢？这时通过实现接口来完成。* 接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</code></pre><p>B: 代码演示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类：抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function">pulbic <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">kock</span> </span>&#123;</span><br><span class="line"><span class="function">pulbic <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类Zi在继承父类Fu的同时实现多接口(Inter,kock)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> <span class="keyword">implements</span> <span class="title">Inter</span>,<span class="title">kock</span> </span>&#123;</span><br><span class="line"><span class="comment">//重写接口的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写父类的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</span><br></pre></td></tr></table></figure></p><h3 id="09接口的多继承"><a href="#09接口的多继承" class="headerlink" title="09接口的多继承"></a>09接口的多继承</h3><pre><code>* A: 接口的多继承    * 学习类的时候，知道类与类之间可以通过继承产生关系，接口和类之间可以通过实现产生关系，那么接口与接口之间会有什么关系。    ————————————————————————————————————————————————————————————————————————————————————————    * 【多个接口】之间可以使用【 extends 】进行【多继承】。    ————————————————————————————————————————————————————————————————————————————————————————    * 【类】【没有】【多继承】    ————————————————————————————————————————————————————————————————————————————————————————    * 【接口】【有】【多继承】</code></pre><p>B 代码演示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_A</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_B</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_C</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口DD 多继承 AA,BB,CC</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DD</span> <span class="keyword">extends</span> <span class="title">AA</span>,<span class="title">BB</span>,<span class="title">CC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_D</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EE类实现接口DD</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EE</span> <span class="keyword">implements</span> <span class="title">DD</span></span>&#123;</span><br><span class="line"><span class="comment">//EE类实现接口DD，需要重写DD以及DD多继承接口的全部抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun_D</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_D"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_C</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在开发中如果多个接口中存在相同方法，这时若有个类实现了这些接口，那么就要实现接口中的方法，由于接口中的方法是抽象方法，子类实现后也不会发生调用的不确定性。</span><br></pre></td></tr></table></figure></p><h3 id="10接口思想"><a href="#10接口思想" class="headerlink" title="10接口思想"></a>10接口思想</h3><pre><code>* A:接口的思想    * 前面学习了接口的代码体现，现在来学习接口的思想，接下里从生活中的例子进行说明。    * 举例：我们都知道电脑上留有很多个插口，而这些插口可以插入相应的设备，这些设备为什么能插在上面呢？    * 主要原因是这些设备在生产的时候符合了这个插口的使用规则，否则将无法插入接口中，更无法使用。发现这个插口的出现让我们使用更多的设备。————————————————————————————————————————————————————————————————————————————————————————    * B: 接口的好处        * 总结：接口在开发中的它好处    * 1、接口的出现扩展了功能。    * 2、接口其实就是暴漏出来的规则。    * 3、接口的出现【降低】了【耦合性】，即设备与设备之间实现了【解耦】。    * 接口的出现方便后期使用和维护，一方是在使用接口（如电脑），一方在实现接口（插在插口上的设备）。例如：笔记本使用这个规则（接口），电脑外围设备实现这个规则（接口）。</code></pre><h3 id="11接口和抽象类的区别"><a href="#11接口和抽象类的区别" class="headerlink" title="11接口和抽象类的区别"></a>11接口和抽象类的区别</h3><pre><code>* A: 明白了接口思想和接口的用法后，接口和抽象类的区别是什么呢？接口在生活体现也基本掌握，那在程序中接口是如何体现的呢？    通过实例进行分析和代码演示抽象类和接口的用法。* B: 举例：    *    犬：            行为：            吼叫；            吃饭；    * 缉毒犬：            行为：            吼叫；            吃饭；            缉毒；* C:思考：    * 由于犬分为很多种类，他们吼叫和吃饭的方式不一样，在描述的时候不能具体化，也就是吼叫和吃饭的行为不能明确。    * 当描述行为时，行为的具体动作不能明确，这时，可以将这个行为写为抽象行为，那么这个类也就是抽象类。    * 可是当缉毒犬有其他额外功能时，而这个功能并不在这个事物的体系中。这时可以让缉毒犬具备犬科自身特点的同时也有其他额外功能，可以将这个额外功能定义接口中。* D: 代码演示</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 缉毒</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 缉毒();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义犬科的共性功能</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 犬科</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 吃饭();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 吼叫();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缉毒犬属于犬科一种，让其继承犬科，获取的犬科的特性，</span></span><br><span class="line"><span class="comment">//由于缉毒犬具有缉毒功能，那么它只要实现缉毒接口即可，这样即保证缉毒犬具备犬科的特性，也拥有了缉毒的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 缉毒犬 <span class="keyword">extends</span> 犬科 <span class="keyword">implements</span> 缉毒</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 缉毒() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 吃饭() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 吼叫() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 缉毒猪 <span class="keyword">implements</span> 缉毒</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 缉毒() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* E: 接口和抽象类区别总结</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">相同点:</span><br><span class="line">都位于继承的顶端,用于被其他类实现或继承;</span><br><span class="line"><span class="string">"【都不能】直接实例化对象"</span>;</span><br><span class="line"><span class="string">"都包含抽象方法,其子类都必须覆写这些抽象方法才能实例化"</span>;</span><br><span class="line">区别:</span><br><span class="line"><span class="string">"抽象类为部分方法提供实现,避免子类重复实现这些方法,提高代码重用性;"</span></span><br><span class="line"><span class="string">"【抽象类】【可以】【不包含】 【抽象方法】"</span></span><br><span class="line"><span class="string">"【接口】【只能】【含有】【抽象方法】"</span>;</span><br><span class="line"><span class="string">" 一个类只能继承一个直接父类(可能是抽象类),却可以实现多个接口;(接口弥补了Java的单继承) "</span></span><br><span class="line">抽象类是这个事物中<span class="string">"应该具备的内容"</span>, 继承体系是一种 is..a关系</span><br><span class="line">接口是这个事物中的<span class="string">"【额外内容】"</span>,继承体系是一种 like..a关系</span><br><span class="line"></span><br><span class="line">二者的选用:</span><br><span class="line"><span class="string">" 优先选用接口,尽量少用抽象类; "</span> </span><br><span class="line">需要定义子类的行为,又要为子类提供共性功能时才选用抽象类;</span><br></pre></td></tr></table></figure><h3 id="12多态概述"><a href="#12多态概述" class="headerlink" title="12多态概述"></a>12多态概述</h3><pre><code>* A: 多态概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">多态是继封装、继承之后，面向对象的第三大特性。</span><br><span class="line">现实事物经常会体现出多种形态，如学生，学生是人的一种，则一个具体的同学张三既是学生也是人，即出现两种形态。</span><br><span class="line">Java作为面向对象的语言，同样可以描述一个事物的多种形态。如Student类继承了Person类，一个Student的对象便既是Student，又是Person。</span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" Java中多态的代码体现在一个子类对象(实现类对象)既可以给这个子类(实现类对象)引用变量赋值，</span></span><br><span class="line"><span class="string">又可以给这个子类(实现类对象)的父类(接口)变量赋值。"</span></span><br><span class="line">**************************************************************</span><br><span class="line">如Student类可以为Person类的子类。那么一个Student对象既可以赋值给一个Student类型的引用，</span><br><span class="line">也可以赋值给一个Person类型的引用。</span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" 最终多态体现为父类引用变量可以指向子类对象。</span></span><br><span class="line"><span class="string">多态的前提是必须有子父类关系或者类实现接口关系，否则无法完成多态。 "</span></span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" 在使用多态后的【父类引用变量】【调用方法】时，会调用【子类】【重写】后的方法。"</span></span><br><span class="line">**************************************************************</span><br><span class="line">【多态的缺点】：</span><br><span class="line"><span class="string">"【父类】【不能】调用【子类】的【特有内容】，需要【向下转型】调用子类的【特有内容】"</span></span><br></pre></td></tr></table></figure><h3 id="13多态调用的三种格式"><a href="#13多态调用的三种格式" class="headerlink" title="13多态调用的三种格式"></a>13多态调用的三种格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* A:<span class="string">"多态的定义格式"</span>：</span><br><span class="line">* 就是父类的引用变量指向子类对象</span><br><span class="line"> 父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line"> 变量名.方法名();</span><br><span class="line"></span><br><span class="line">* B: <span class="string">"普通类多态定义的格式"</span></span><br><span class="line">父类 变量名 = <span class="keyword">new</span> 子类();</span><br><span class="line">举例：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">* C: <span class="string">"抽象类多态定义格式"</span></span><br><span class="line">抽象类 变量名 = <span class="keyword">new</span> 抽象类子类();</span><br><span class="line">举例：</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"重写父类抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br><span class="line">* D: <span class="string">"接口多态定义的格式"</span></span><br><span class="line">接口 变量名 = <span class="keyword">new</span> 接口实现类();</span><br><span class="line">如： <span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"重写接口抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">* E: <span class="string">"注意事项"</span></span><br><span class="line"><span class="string">"同一个父类的方法会被不同的子类重写。在调用方法时，调用的为各个子类重写后的方法。"</span></span><br><span class="line">如 Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">   Person p2 = <span class="keyword">new</span> Teacher();</span><br><span class="line">   p1.work(); <span class="comment">//p1会调用Student类中重写的work方法</span></span><br><span class="line">   p2.work(); <span class="comment">//p2会调用Teacher类中重写的work方法</span></span><br><span class="line">当变量名指向不同的子类对象时，由于每个子类重写父类方法的内容不同，所以会调用不同的方法。</span><br></pre></td></tr></table></figure><h3 id="14多态成员方法的特点"><a href="#14多态成员方法的特点" class="headerlink" title="14多态成员方法的特点"></a>14多态成员方法的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">* A: 掌握了多态的基本使用后，那么多态出现后类的成员有啥变化呢？</span><br><span class="line">* 前面学习继承时，我们知道子父类之间成员变量有了自己的特定变化，</span><br><span class="line">* 那么当多态出现后，成员变量在使用上有没有变化呢？</span><br><span class="line">* 多态出现后会导致子父类中的成员变量有微弱的变化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 代码演示</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(f.num);<span class="comment">//4</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(z.num);<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C: <span class="string">"多态成员变量"</span></span><br><span class="line">*  <span class="string">" &lt;&lt;参考基础11.[12]&gt;&gt;"</span></span><br><span class="line"><span class="string">"当子父类中出现同名的成员变量时，多态调用该变量时：</span></span><br><span class="line"><span class="string">编译时期：参考的是引用型变量所属的类中是否有被调用的成员变量。没有，编译失败。</span></span><br><span class="line"><span class="string">运行时期：也是调用引用型变量所属的类中的成员变量。"</span></span><br><span class="line"><span class="string">"简单记：编译和运行都参考等号的左边。编译运行看左边。"</span></span><br><span class="line"></span><br><span class="line">* D: 多态出现后会导致子父类中的成员方法有微弱的变化。看如下代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu show num"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi show num"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* E: <span class="string">"多态成员方法"</span></span><br><span class="line"><span class="string">"编译时期：参考引用变量所属的类，如果没有类中没有调用的方法，编译失败。</span></span><br><span class="line"><span class="string">运行时期：参考引用变量所指的对象所属的类，并运行对象所属类中的成员方法。</span></span><br><span class="line"><span class="string">简而言之：编译看左边，运行看右边。"</span></span><br></pre></td></tr></table></figure><h3 id="15instanceof关键字"><a href="#15instanceof关键字" class="headerlink" title="15instanceof关键字"></a>15instanceof关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* A: 作用</span><br><span class="line"> 可以通过<span class="keyword">instanceof</span>关键字来判断某个对象是否属于某种数据类型。如学生的对象属于学生类，学生的对象也属于人类</span><br><span class="line"></span><br><span class="line">* 格式:</span><br><span class="line"><span class="keyword">boolean</span>  b  = 对象  <span class="keyword">instanceof</span>  数据类型;</span><br><span class="line"></span><br><span class="line">* 举例:</span><br><span class="line">Person p1 = <span class="keyword">new</span> Student(); <span class="comment">// 前提条件，学生类已经继承了人类</span></span><br><span class="line"><span class="keyword">boolean</span> flag = p1 <span class="keyword">instanceof</span> Student; <span class="comment">//flag结果为true</span></span><br><span class="line"><span class="keyword">boolean</span> flag2 = p1 <span class="keyword">instanceof</span> Teacher; <span class="comment">//flag2结果为false</span></span><br></pre></td></tr></table></figure><h3 id="16多态-向上转型"><a href="#16多态-向上转型" class="headerlink" title="16多态-向上转型"></a>16多态-向上转型</h3><pre><code>* A: 多态的转型分为向上转型与向下转型两种：* B: 向上转型(自动类型转换)：* 当有子类对象赋值给一个父类引用时，便是向上转型，多态本身就是向上转型的过程。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用格式：</span><br><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><h3 id="17多态-向下转型"><a href="#17多态-向下转型" class="headerlink" title="17多态-向下转型"></a>17多态-向下转型</h3><pre><code>* A: 向下转型(强制类型转换)：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 一个已经向上转型的子类对象可以使用强制类型转换的格式，</span><br><span class="line">* <span class="string">"将【父类引用类型】强制转为【子类引用类型】，这个过程是向下转型。"</span></span><br><span class="line">* <span class="string">"好处：可以调用子类特有的方法"</span></span><br><span class="line">* <span class="string">"如果是直接创建父类对象，是无法向下转型的！"</span></span><br><span class="line"></span><br><span class="line">使用格式：</span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="string">"      子类类型 变量名 = (子类类型) 父类类型的变量;         "</span>   </span><br><span class="line">如:Student stu = (Student) p;  <span class="comment">//变量p 实际上指向Student对象</span></span><br><span class="line">————————————————————————————————————————————————————————————————</span><br></pre></td></tr></table></figure><h3 id="18多态的好处和弊端"><a href="#18多态的好处和弊端" class="headerlink" title="18多态的好处和弊端"></a>18多态的好处和弊端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* A: 多态的好处和弊端</span><br><span class="line">* 当父类的引用指向子类对象时，就发生了向上转型，即把子类类型对象转成了父类类型。</span><br><span class="line">  向上转型的好处是隐藏了子类类型，提高了代码的扩展性。</span><br><span class="line">* <span class="string">"但向上转型也有弊端，只能使用【父类共性】的内容，而【无法】使用【子类特有功能】，功能有限制"</span>。</span><br><span class="line"></span><br><span class="line">* B: 看如下代码</span><br><span class="line"><span class="comment">//描述动物类，并抽取共性eat方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 描述狗类，继承动物类，重写eat方法，增加lookHome方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"啃骨头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookHome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"看家"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述猫类，继承动物类，重写eat方法，增加catchMouse方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抓老鼠"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal a = <span class="keyword">new</span> Dog(); <span class="comment">//多态形式，创建一个狗对象</span></span><br><span class="line">a.eat(); <span class="comment">// 调用对象中的方法，会执行狗类中的eat方法</span></span><br><span class="line"><span class="comment">// a.lookHome();//使用Dog类特有的方法，需要向下转型，不能直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使用狗类的lookHome方法，需要向下转型</span></span><br><span class="line"><span class="comment">// 向下转型过程中，可能会发生类型转换的错误，即ClassCastException异常</span></span><br><span class="line"><span class="comment">// 那么，在转之前需要做健壮性判断 </span></span><br><span class="line"><span class="keyword">if</span>( !a <span class="keyword">instanceof</span> Dog)&#123; <span class="comment">// 判断当前对象是否是Dog类型</span></span><br><span class="line"> System.out.println(<span class="string">"类型不匹配，不能转换"</span>); </span><br><span class="line"> <span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line">Dog d = (Dog) a; <span class="comment">//向下转型</span></span><br><span class="line">d.lookHome();<span class="comment">//调用狗类的lookHome方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* C 多态总结:</span><br><span class="line"><span class="string">"什么时候使用向上转型：</span></span><br><span class="line"><span class="string">当【不需要】面对子类类型时，通过提高扩展性，</span></span><br><span class="line"><span class="string">或者使用父类的功能就能完成相应的操作，这时就可以使用向上转型。"</span></span><br><span class="line">如：</span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">    a.eat();</span><br><span class="line"><span class="string">"什么时候使用向下转型</span></span><br><span class="line"><span class="string">当要使用【子类特有功能】时，就需要使用【向下转型】。"</span></span><br><span class="line">如：Dog d = (Dog) a; <span class="comment">//向下转型</span></span><br><span class="line">    d.lookHome();<span class="comment">//调用狗类的lookHome方法 </span></span><br><span class="line"><span class="string">"向下转型的好处：可以使用子类特有功能。"</span></span><br><span class="line"><span class="string">"弊端是：需要面对具体的【子类对象】；在向下转型时容易发生 ClassCastException 类型转换异常。</span></span><br><span class="line"><span class="string">在转换之前必须做类型判断。"</span></span><br><span class="line">如：<span class="keyword">if</span>( !a <span class="keyword">instanceof</span> Dog)&#123;…&#125;</span><br></pre></td></tr></table></figure><h3 id="19多态举例"><a href="#19多态举例" class="headerlink" title="19多态举例"></a>19多态举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">* A: 刘老师和刘大爷的故事</span><br><span class="line">* 案例:</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">      描述刘老师和刘大爷，</span></span><br><span class="line"><span class="comment">      刘老师拥有讲课和看电影功能</span></span><br><span class="line"><span class="comment">      刘大爷拥有讲课和钓鱼功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> 刘大爷 </span>&#123;</span><br><span class="line">          <span class="keyword">void</span> 讲课() &#123;</span><br><span class="line">              System.out.println(<span class="string">"语文"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          <span class="keyword">void</span> 钓鱼() &#123;</span><br><span class="line">              System.out.println(<span class="string">"钓鱼"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 刘老师继承了刘大爷，就有拥有了刘大爷的讲课和钓鱼的功能，</span></span><br><span class="line">      <span class="comment">// 但刘老师和刘大爷的讲课内容不一样，因此刘老师要覆盖刘大爷的讲课功能</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> 刘老师 <span class="keyword">extends</span> 刘大爷 </span>&#123;</span><br><span class="line">          <span class="keyword">void</span> 讲课() &#123;</span><br><span class="line">              System.out.println(<span class="string">"Java"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          <span class="keyword">void</span> 看电影() &#123;</span><br><span class="line">              System.out.println(<span class="string">"看电影"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">              <span class="comment">// 多态形式</span></span><br><span class="line">              刘大爷 a = <span class="keyword">new</span> 刘老师(); <span class="comment">// 向上转型</span></span><br><span class="line">              a.讲课(); <span class="comment">// 这里表象是刘大爷，其实真正讲课的仍然是刘老师，因此调用的也是刘老师的讲课功能</span></span><br><span class="line">              a.钓鱼(); <span class="comment">// 这里表象是刘大爷，但对象其实是刘老师，而刘老师继承了刘大爷，即刘老师也具有钓鱼功能</span></span><br><span class="line">      </span><br><span class="line">              <span class="comment">// 当要调用刘老师特有的看电影功能时，就必须进行类型转换</span></span><br><span class="line">              刘老师 b = (刘老师) a; <span class="comment">// 向下转型</span></span><br><span class="line">              b.看电影();</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h3 id="20笔记本电脑案例"><a href="#20笔记本电脑案例" class="headerlink" title="20笔记本电脑案例"></a>20笔记本电脑案例</h3><pre><code> * A:案例介绍     * 定义USB接口（具备开启功能、关闭功能），笔记本要使用USB设备，即笔记本在生产时需要预留可以插入USB设备的USB接口，即就是笔记本具备使用USB设备的功能，     * 但具体是什么USB设备，笔记本并不关心，只要符合USB规格的设备都可以。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守USB规范，不然鼠标和键盘的生产出来无法使用    * 进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘        USB接口，包含开启功能、关闭功能        笔记本类，包含运行功能、关机功能、使用USB设备功能        鼠标类，要符合USB接口        键盘类，要符合USB接口* B: 案例分析    * 阶段一：        使用笔记本，笔记本有运行功能，需要笔记本对象来运行这个功能    * 阶段二：        想使用一个鼠标，又有一个功能使用鼠标，并多了一个鼠标对象。    * 阶段三：        还想使用一个键盘 ，又要多一个功能和一个对象    * 问题：每多一个功能就需要在笔记本对象中定义一个方法，不爽，程序扩展性极差。        降低鼠标、键盘等外围设备和笔记本电脑的耦合性。</code></pre><h3 id="21笔记本电脑案例代码实现"><a href="#21笔记本电脑案例代码实现" class="headerlink" title="21笔记本电脑案例代码实现"></a>21笔记本电脑案例代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">* A: 代码实现</span><br><span class="line">定义鼠标、键盘，笔记本三者之间应该遵守的规则</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">// 开启功能</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">// 关闭功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">鼠标实现USB规则</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鼠标开启"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鼠标关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">键盘实现USB规则</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyBoard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"键盘开启"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"键盘关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">定义笔记本</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</span><br><span class="line"><span class="comment">// 笔记本开启运行功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"笔记本运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔记本使用usb设备，这时当笔记本对象调用这个功能时，必须给其传递一个符合USB规则的USB设备</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useUSB</span><span class="params">(USB usb)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否有USB设备</span></span><br><span class="line"><span class="keyword">if</span> (usb != <span class="keyword">null</span>) &#123;</span><br><span class="line">usb.open();</span><br><span class="line">usb.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"笔记本关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建笔记本实体对象</span></span><br><span class="line">NoteBook nb = <span class="keyword">new</span> NoteBook();</span><br><span class="line"><span class="comment">// 笔记本开启</span></span><br><span class="line">nb.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建鼠标实体对象</span></span><br><span class="line">Mouse m = <span class="keyword">new</span> Mouse();</span><br><span class="line"><span class="comment">// 笔记本使用鼠标</span></span><br><span class="line">nb.useUSB(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建键盘实体对象</span></span><br><span class="line">KeyBoard kb = <span class="keyword">new</span> KeyBoard();</span><br><span class="line"><span class="comment">// 笔记本使用键盘</span></span><br><span class="line">nb.useUSB(kb);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔记本关闭</span></span><br><span class="line">nb.shutDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22小结"><a href="#22小结" class="headerlink" title="22小结"></a>22小结</h3><p>接口：理解为是一个特殊的抽象类，但它不是类，是一个接口<br>——————————————————————————————————————————————————————————<br>接口的特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，定义一个接口用<span class="class"><span class="keyword">interface</span>关键字</span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">Inter</span></span>&#123;&#125;</span><br><span class="line"><span class="number">2</span>，一个类实现一个接口，实现implements关键字</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Inter</span></span>&#123;&#125;</span><br><span class="line"><span class="number">3</span>, 接口不能直接创建对象</span><br><span class="line">   通过多态的方式，由子类来创建对象，接口多态</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>接口中的成员特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">成员变量：</span><br><span class="line">只能是<span class="keyword">final</span> 修饰的常量</span><br><span class="line">默认修饰符： <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">构造方法：</span><br><span class="line">无</span><br><span class="line">成员方法：</span><br><span class="line">只能是抽象方法</span><br><span class="line">默认修饰符: <span class="keyword">public</span> <span class="keyword">abstract</span></span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>类与类，类与接口，接口与接口之间的关系</p><pre><code>类与类之间：继承关系，单继承，可以是多层继承类与接口之间: 实现关系，单实现，也可以多实现接口与接口之间：继承关系，单继承，也可以是多继承            Java中的类可以继承一个父类的同时，实现多个接口</code></pre><p>——————————————————————————————————————————————————————————<br>多态：理解为同一种物质的多种形态<br>多态使用的前提：</p><pre><code>        1，有继承或者实现关系        2，要方法重写        3，父类引用指向子类对象——————————————————————————————————————————————————————————多态的成员访问特点：        方法的运行看右边，其他都看左边多态的好处：            提高了程序的扩展性——————————————————————————————————————————————————————————多态的弊端：        不能访问子类的特有功能——————————————————————————————————————————————————————————多态的分类</code></pre><p>——————————————————————————————————————————————————————————<br>类的多态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">             System.out.println(“重写父类抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>接口的多态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“重写接口抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>instanceof 关键字</p><pre><code>格式： 对象名 instanceof 类名返回值： true, false作用： 判断指定的对象 是否为 给定类创建的对象</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541385820/samples/test/photo-1539580709660-0505d36fa6e7.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、接口&lt;br&gt;2、多态&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础8(继承，抽象类)</title>
    <link href="https://leesen998.github.io/2016/10/11/day10%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/11/day10笔记/</id>
    <published>2016-10-11T02:21:53.000Z</published>
    <updated>2018-11-15T03:22:15.782Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541167132/samples/java%20files/photo-1539452851739-c57dee0c0859.jpg" alt="" style="width:100%"></p><p>1、继承<br>2、抽象类<br>3、综合案例—员工类系列定义</p><a id="more"></a><h3 id="01继承的概述"><a href="#01继承的概述" class="headerlink" title="01继承的概述"></a>01继承的概述</h3><pre><code>*A:继承的概念   *a:继承描述的是事物之间的所属关系，通过继承可以使多种事物之间形成一种关系体系   *b:在Java中，类的继承是指在一个现有类的基础上去构建一个新的类，       构建出来的新类被称作子类，现有类被称作父类 *B:继承关系的子类特点     *a:子类会自动拥有父类所有非private修饰的属性和方法</code></pre><h3 id="02继承的定义格式和使用"><a href="#02继承的定义格式和使用" class="headerlink" title="02继承的定义格式和使用"></a>02继承的定义格式和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">*A:继承的格式</span><br><span class="line">   <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;&#125;</span><br><span class="line">*B:雇员(Employee)与研发部员工(Developer)案例:</span><br><span class="line">   *cn.itcast.demo01包下:</span><br><span class="line">   *Employee.java:</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义员工类Employee</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">String name; <span class="comment">// 定义name属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;<span class="comment">// 定义员工的工作方法</span></span><br><span class="line">System.out.println(<span class="string">"尽心尽力地工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *Developer.java:</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义研发部员工类Developer 继承 员工类Employee</span></span><br><span class="line"><span class="comment"> * 继承了父类中所有非private修饰的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个打印name的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *测试员工类与研发部员工类:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义测试类</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Developer d = <span class="keyword">new</span> Developer(); <span class="comment">// 创建一个研发部员工类对象</span></span><br><span class="line">d.name = <span class="string">"小明"</span>; <span class="comment">// 为该员工类的name属性进行赋值</span></span><br><span class="line">d.printName(); <span class="comment">// 调用该员工的printName()方法</span></span><br><span class="line">d.work(); <span class="comment">// 调用Developer类继承来的work()方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *通过子类对象既可以调用自身的非<span class="keyword">private</span>修饰的成员,也可以调用父类的非<span class="keyword">private</span>修饰的成员</span><br></pre></td></tr></table></figure><h3 id="03继承的好处"><a href="#03继承的好处" class="headerlink" title="03继承的好处"></a>03继承的好处</h3><pre><code>*A:继承的好处：    *1、继承的出现提高了代码的复用性，提高软件开发效率。    *2、继承的出现让类与类之间产生了关系，提供了多态的前提。</code></pre><h3 id="04继承的注意事项"><a href="#04继承的注意事项" class="headerlink" title="04继承的注意事项"></a>04继承的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> *A:继承的注意事项 </span><br><span class="line"> *a:在Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类，例如下面这种情况是不合法的。</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;&#125;  <span class="comment">// C类不可以同时继承A类和B类</span></span><br><span class="line">  假如支持多继承例如:</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">               </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     C c=<span class="keyword">new</span> C();</span><br><span class="line">     System.out.println(c.a);<span class="comment">//到底是调用A的还是B的成员变量??无法确定</span></span><br><span class="line">     c.method();<span class="comment">//到底是调用A的还是B的成员方法??无法确定</span></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">      *b:多个类可以继承一个父类，例如下面这种情况是允许的(就像你爹可以多个儿子,但是这些儿子都只有一个爹)</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">// 类B和类C都可以继承类A</span></span><br><span class="line"> </span><br><span class="line">     *c:在Java中，多层继承是可以的，</span><br><span class="line">        即一个类的父类可以再去继承另外的父类，</span><br><span class="line">        例如C类继承自B类，而B类又可以去继承A类，这时，C类也可称作A类的子类。下面这种情况是允许的。</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">// 类B继承类A，类B是类A的子类</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;   <span class="comment">// 类C继承类B，类C是类B的子类，同时也是类A的子类</span></span><br><span class="line">     </span><br><span class="line">         *d:在Java中，子类和父类是一种相对概念，</span><br><span class="line">           也就是说一个类是某个类父类的同时，也可以是另一个类的子类。</span><br><span class="line">           例如上面的这种情况中，B类是A类的子类，同时又是C类的父类。</span><br></pre></td></tr></table></figure><h3 id="05继承的体系"><a href="#05继承的体系" class="headerlink" title="05继承的体系"></a>05继承的体系</h3><p>   *A:继承的体系:</p><pre><code>                                  动物(吃)                                    |                           -------------------------                           |                        |                        猫科动物(吃,胎生)      爬行动物(吃,卵生)                           |                            |         -------------------------------        -----------------               |                             |        |                |        猫(吃,抓老鼠,胎生)   虎(吃,领地,胎生)  蛇(吃,冬眠,卵生)  鳄鱼(吃,潜水,卵生)*a:动物体系是对每个具体事物共性的抽取,子类的共性抽取形成父类*b:父类:具有所有子类的共性内容   子类:不但有共性还有自身特有的内容*c:整个继承体系,越向上越抽象,越向下越具体</code></pre><h3 id="06继承后子类父类成员变量的特点"><a href="#06继承后子类父类成员变量的特点" class="headerlink" title="06继承后子类父类成员变量的特点"></a>06继承后子类父类成员变量的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">A:继承后子类父类成员变量的特点</span><br><span class="line">  a:子类的对象调用成员变量的时候,子类自己有,使用子类,子类自己没有调用的父类</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Fu中的成员变量。</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Zi中的成员变量</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//Zi中的成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Fu num="</span>+num);</span><br><span class="line"><span class="comment">//访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">"Zi num2="</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi(); <span class="comment">//创建子类对象</span></span><br><span class="line">z.show(); <span class="comment">//调用子类中的show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   b:当子父类中出现了同名成员变量</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Fu中的成员变量。</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Zi中的成员变量</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;   </span><br><span class="line"><span class="comment">//子类的局部变量</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接访问,遵循就近查找原则</span></span><br><span class="line">              System.out.println(num);<span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子父类中出现了同名的成员变量时</span></span><br><span class="line"><span class="comment">//在子类中需要访问父类中非私有成员变量时，需要使用super关键字</span></span><br><span class="line"><span class="comment">//访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Fu num="</span>+<span class="keyword">super</span>.num);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">"Zi num2="</span>+<span class="keyword">this</span>.num);<span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi(); <span class="comment">//创建子类对象</span></span><br><span class="line">z.show(); <span class="comment">//调用子类中的show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07继承后子类父类成员方法的特性-子类重写父类方法"><a href="#07继承后子类父类成员方法的特性-子类重写父类方法" class="headerlink" title="07继承后子类父类成员方法的特性_子类重写父类方法"></a>07继承后子类父类成员方法的特性_子类重写父类方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A:继承后子类父类成员方法的特性</span><br><span class="line">  a:子类的对象调用方法的时候,子类自己有,使用子类,子类自己没有调用的父类</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu类中的show方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi类中的show2方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">b:为什么要有重写?</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//上千行代码</span></span><br><span class="line">           <span class="comment">//Fu类中的方法最先存在,那么如果项目需求变了,该方法</span></span><br><span class="line">           <span class="comment">//功能不能够满足我们的需求,此时我们也不会去改这个方法</span></span><br><span class="line">           <span class="comment">//因为项目中可能有大量的功能已经使用到该方法,如果随意修改可能使调用该方法的功能出现问题</span></span><br><span class="line">           <span class="comment">//所以使用重写方式基于原有功能提供更强的功能</span></span><br><span class="line">    &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   c:子类中出现与父类一模一样的方法时，会出现覆盖操作，也称为override重写、复写或者覆盖</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//子类复写了父类的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">//Zi show 子类有直接使用子类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08方法覆盖的需求"><a href="#08方法覆盖的需求" class="headerlink" title="08方法覆盖的需求"></a>08方法覆盖的需求</h3><pre><code>A:方法覆盖的需求     a:案例:比如手机，当描述一个手机时，它具有发短信，打电话，显示来电号码功能，    后期由于手机需要在来电显示功能中增加显示姓名和头像，    这时可以重新定义一个类描述智能手机，并继承原有描述手机的类。    并在新定义的类中覆盖来电显示功能，在其中增加显示姓名和头像功能    b:分析:我们不改装(破坏)原来的手机,而是再买一个新的智能手机,不但有原有的功能,而且还有特有功能           例:厂商发布新手机都是基于原有手机的升级,不会拿着原有的手机在卖,新产一款       1:分析类的构建:           手机类            属性(成员变量):无            行为(成员方法):               发短信               打电话               来电显示:显示来电号码          智能手机类:            属性(成员变量):无            行为(成员方法):              发短信              打电话              来电显示:显示来电号码,显示姓名和头像          手机类和智能手机类有共性内容:              发短信              打电话              显示来电号码      2:继承关系分析:        对于发短信和打电话功能,让智能手机直接沿用(继承)手机的就可以        但是在智能手机中的来电显示不但实现号码,还显示姓名和头像,同样的都是来电显示功能,智能手机的来电显示比手机的功能更加强大,我们考虑使用重写</code></pre><h3 id="09方法覆盖的手机案例实现"><a href="#09方法覆盖的手机案例实现" class="headerlink" title="09方法覆盖的手机案例实现"></a>09方法覆盖的手机案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"来电显示号码"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="comment">//覆盖父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span></span><br><span class="line"><span class="comment">//从现实生活角度考虑沿用原有的showNum方法名便于用户更快熟悉和接受,而不是再起个新的名字</span></span><br><span class="line"><span class="comment">//用户还需要花费大量时间慢慢接受</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用父类已经存在的功能使用super</span></span><br><span class="line">              <span class="comment">//如果不加super这是调用子类自身的showNum(),自己调用自己,递归</span></span><br><span class="line">              <span class="comment">//方法不断入栈导致内存溢出</span></span><br><span class="line"><span class="keyword">super</span>.showNum();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加自己特有显示姓名和图片功能</span></span><br><span class="line">System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> NewPhone().showNum();<span class="comment">//来电显示  显示来电姓名 显示头像</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10方法覆盖的注意事项"><a href="#10方法覆盖的注意事项" class="headerlink" title="10方法覆盖的注意事项"></a>10方法覆盖的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A:方法覆盖的注意事项 </span><br><span class="line"> a:<span class="string">"权限:【子类方法】覆盖【父类方法】，【必须要保证】子类权限【大于等于】父类权限"</span>。</span><br><span class="line">   四大权限:<span class="keyword">public</span>&gt;默认=<span class="keyword">protected</span>&gt;<span class="keyword">private</span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Zi</span>() <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//编译运行没问题</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;<span class="comment">//编译错误</span></span><br><span class="line"></span><br><span class="line">   &#125;     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> b:方法定义:子类方法和要重写的父类的方法:<span class="string">"方法的方法名和参数列表都要一样。"</span></span><br><span class="line">   关于方法的返回值:</span><br><span class="line"><span class="string">"如果是【基本数据类型】,子类的方法和重写的父类的方法【返回值类型】【必须相同】"</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string"> 如果是【引用数据类型】,子类的方法和重写的父类的方法【返回值类型】【可以相同】</span></span><br><span class="line"><span class="string"> 或者【子类方法的返回值类型】是父类方法返回值类型的【子类】</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">"【父类方法返回值类型】&gt;= 【子类方法的返回值类型】"</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Zi</span>() <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//返回值为基本类型的重写</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method</span><span class="params">()</span></span>&#123;<span class="comment">//子类的方法和重写的父类的方法返回值类型可以相同</span></span><br><span class="line"></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Zi <span class="title">method2</span><span class="params">()</span></span>&#123;<span class="comment">//子类方法的返回值类型是父类方法返回值类型的子类</span></span><br><span class="line"></span><br><span class="line">    &#125;     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   c:重载与重写对比:</span><br><span class="line">      重载:</span><br><span class="line">    权限修饰符(<span class="keyword">public</span> <span class="keyword">private</span> 默认):无关</span><br><span class="line">    方法名:重载的两个方法的方法名必须相同</span><br><span class="line">    形参列表:</span><br><span class="line">      <span class="string">"形参类型的顺序不同</span></span><br><span class="line"><span class="string">      形参的个数不同</span></span><br><span class="line"><span class="string">      形参的类型不同</span></span><br><span class="line"><span class="string">      三者至少满足一个"</span></span><br><span class="line">    返回值类型:</span><br><span class="line">      <span class="string">"重载与返回值类型无关"</span></span><br><span class="line">重写:</span><br><span class="line">    权限修饰符(<span class="keyword">public</span> <span class="keyword">private</span> 默认): </span><br><span class="line">      <span class="string">"子类方法的权限&gt;=父类的方法的权限"</span></span><br><span class="line">    方法名: </span><br><span class="line">      <span class="string">"子类方法和父类方法必须相同"</span></span><br><span class="line">    形参列表: </span><br><span class="line">       <span class="string">"子类方法和父类方法的形参列表必须相同"</span></span><br><span class="line">    返回值类型:</span><br><span class="line">      <span class="string">"基本类数据类型:</span></span><br><span class="line"><span class="string">        必须相同"</span></span><br><span class="line"></span><br><span class="line">      <span class="string">"引用数据类型:</span></span><br><span class="line"><span class="string">       子类方法的返回值类型和父类方法的返回值类型相同</span></span><br><span class="line"><span class="string">       或者</span></span><br><span class="line"><span class="string">       子类方法的返回值类型是父类方法的返回值类型的 子类"</span></span><br><span class="line"><span class="string">"【父类方法返回值类型】⊇【子类方法的返回值类型】"</span></span><br></pre></td></tr></table></figure><h3 id="11抽象类的产生"><a href="#11抽象类的产生" class="headerlink" title="11抽象类的产生"></a>11抽象类的产生</h3><pre><code>A:抽象类的产生  a:分析事物时，发现了共性内容，就出现向上抽取。会有这样一种特殊情况，就是方法功能声明相同，但方法功能主体不同。那么这时也可以抽取，但只抽取方法声明，不抽取方法主体。那么此方法就是一个抽象方法。</code></pre><h3 id="12抽象类的定义格式"><a href="#12抽象类的定义格式" class="headerlink" title="12抽象类的定义格式"></a>12抽象类的定义格式</h3><pre><code>A:抽象方法定义的格式：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> a:<span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数);</span><br><span class="line">   抽象类定义的格式：</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">  b:抽象类示例代码：</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义类开发工程师类</span></span><br><span class="line"><span class="comment"> *    EE开发工程师 :  工作</span></span><br><span class="line"><span class="comment"> *    Android开发工程师 : 工作</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *    根据共性进行抽取,然后形成一个父类Develop</span></span><br><span class="line"><span class="comment"> *    定义方法,工作: 怎么工作,具体干什么呀</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *    抽象类,不能实例化对象, 不能new的</span></span><br><span class="line"><span class="comment"> *    不能创建对象的原因:  如果真的让你new了, 对象.调用抽象方法,抽象方法没有主体,根本就不能运行</span></span><br><span class="line"><span class="comment"> *    抽象类使用: 定义类继承抽象类,将抽象方法进行重写,创建子类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Develop</span> </span>&#123;</span><br><span class="line">   <span class="comment">//定义方法工作方法,但是怎么工作,说不清楚了,讲不明白</span></span><br><span class="line"><span class="comment">//就不说, 方法没有主体的方法,必须使用关键字abstract修饰</span></span><br><span class="line"><span class="comment">//抽象的方法,必须存在于抽象的类中,类也必须用abstract修饰</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13抽象类的使用方式"><a href="#13抽象类的使用方式" class="headerlink" title="13抽象类的使用方式"></a>13抽象类的使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   A:抽象类的使用方式</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义类,JavaEE的开发人员</span></span><br><span class="line"><span class="comment"> *  继承抽象类Develop,重写抽象的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEE</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line"><span class="comment">//重写父类的抽象方法</span></span><br><span class="line"><span class="comment">//去掉abstract修饰符,加上方法主体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"JavaEE工程师在开发B/S 软件"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义Android类,继承开发人员类</span></span><br><span class="line"><span class="comment"> *  重写抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"Android工程师开发手机软件"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  测试抽象类</span></span><br><span class="line"><span class="comment"> *    创建他的子类的对象,使用子类的对象调用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> JavaEE ee = <span class="keyword">new</span> JavaEE();</span><br><span class="line"> ee.work();<span class="comment">//"JavaEE工程师在开发B/S 软件"</span></span><br><span class="line"> </span><br><span class="line"> Android and = <span class="keyword">new</span> Android();</span><br><span class="line"> and.work();<span class="comment">//"Android工程师开发手机软件"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14抽象类特点"><a href="#14抽象类特点" class="headerlink" title="14抽象类特点"></a>14抽象类特点</h3> <font color="#D66" size=""><br>A:抽象类的特点<br><strong>a:抽象类和抽象方法都需要被abstract修饰。抽象方法一定要定义在抽象类中。<br>b:抽象类不可以直接创建对象，原因：调用抽象方法没有意义。<br>c:【只有覆盖了抽象类中所有的抽象方法后】，其子类才可以创建对象。【否则该子类还是一个抽象类】。</strong><br>之所以继承抽象类，更多的是在思想，是面对共性类型操作会更简单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//A2把A中的两个抽象方法都重写掉了</span></span><br><span class="line">                 <span class="comment">//A2类不再是抽象类</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A3</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//含有抽象方法的类一定是抽象类</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//public abstract void func2();//func2相当于被继承下来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></font><h3 id="15抽象类的设计思想"><a href="#15抽象类的设计思想" class="headerlink" title="15抽象类的设计思想"></a>15抽象类的设计思想</h3><pre><code>A:抽象类的设计思想  a:抽象类的作用:继承的体系抽象类,强制子类重写抽象的方法    抽象员工:      规定一个方法,work工作      EE员工,Android员工        Develop类 抽象类       abstract work();           |    -------------   |             |  EE            Android  //是我开发的一员必须工作  work(){}       work(){}</code></pre><h3 id="16抽象类的细节"><a href="#16抽象类的细节" class="headerlink" title="16抽象类的细节"></a>16抽象类的细节</h3><p>   A:抽象类的细节</p><p> a:抽象类一定是个父类？</p><pre><code>是的，因为不断抽取而来的。</code></pre><p> b:抽象类中是否可以不定义抽象方法?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     是可以的，那这个抽象类的存在到底有什么意义呢？不让该类创建对象,方法可以直接让子类去使用</span><br><span class="line">     (适配器设计模式)</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   "抽象类,可以没有抽象方法,可以定义带有方法体的方法"</span></span><br><span class="line"><span class="comment"> *   让子类继承后,可以直接使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"动物睡觉"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;     </span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Cat c = new Cat();</span></span><br><span class="line"><span class="keyword">new</span> Cat().sleep();<span class="comment">//不让该类创建对象,方法可以直接让子类去使用</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><pre><code>c:抽象关键字abstract不可以和哪些关键字共存？    </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:<span class="keyword">private</span>：私有的方法子类是无法继承到的，也不存在覆盖，</span><br><span class="line">         而<span class="keyword">abstract</span>和<span class="keyword">private</span>一起使用修饰方法，<span class="keyword">abstract</span>既要子类去实现这个方法,</span><br><span class="line">         而<span class="keyword">private</span>修饰子类根本无法得到父类这个方法。互相矛盾。 </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   抽象类,可以没有抽象方法,可以定义带有方法体的方法</span></span><br><span class="line"><span class="comment"> *   让子类继承后,可以直接使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// private abstract void show();</span></span><br><span class="line">     <span class="comment">//抽象方法,需要子类重写, 如果父类方法是私有的,子类继承不了,也就没有了重写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>:<span class="keyword">final</span>，，后面学</span><br><span class="line"><span class="number">3</span>:<span class="keyword">static</span>，后面学</span><br></pre></td></tr></table></figure><h3 id="17员工案例分析"><a href="#17员工案例分析" class="headerlink" title="17员工案例分析"></a>17员工案例分析</h3><p>A:员工案例分析:<br>  a:需求描述:</p><pre><code>某IT公司有多名员工，按照员工负责的工作不同，进行了部门的划分（研发部员工、维护部员工）。  研发部根据所需研发的内容不同，又分为JavaEE工程师、Android工程师；  维护部根据所需维护的内容不同，又分为网络维护工程师、硬件维护工程师。公司的每名员工都有他们自己的员工编号、姓名，并要做它们所负责的工作。    工作内容    JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站    Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件    网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通    硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机</code></pre><p>  b:继承体系:</p><pre><code>                        员工                         |       --------------------------------------------       |                                          |     研发部员工                                 维护部员工       |                                          |   -------------                              -----------   |            |                             |         |JavaEE工程师   Android工程师         网络维护工程师    硬件维护工程师</code></pre><p>  c:详细描述:</p><pre><code>    根据员工信息的描述，确定每个员工都有员工编号、姓名、要进行工作。     则，把这些共同的属性与功能抽取到父类中（员工类），     关于工作的内容由具体的工程师来进行指定。    工作内容        JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站        Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件        网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通        硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机    创建JavaEE工程师对象，完成工作方法的调用</code></pre><h3 id="18员工案例Employee类的编写"><a href="#18员工案例Employee类的编写" class="headerlink" title="18员工案例Employee类的编写"></a>18员工案例Employee类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> A:员工案例Employee类的编写:按照分析的继承体系来逐个实现</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义员工类</span></span><br><span class="line"><span class="comment"> *    内容,都是所有子类的共性抽取</span></span><br><span class="line"><span class="comment"> *      属性: 姓名,工号</span></span><br><span class="line"><span class="comment"> *      方法: 工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;<span class="comment">// 员工编号</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作方法（抽象方法）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19员工案例的子类的编写"><a href="#19员工案例的子类的编写" class="headerlink" title="19员工案例的子类的编写"></a>19员工案例的子类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  B:员工案例的子类的编写:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义研发员工类</span></span><br><span class="line"><span class="comment"> *    属于员工中的一种, 继承员工类 </span></span><br><span class="line"><span class="comment"> *    抽象类Develop 给自己的员工定义自己有的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Develop</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  描述JavaEE开发工程师类</span></span><br><span class="line"><span class="comment"> *    工号,姓名 工作方法</span></span><br><span class="line"><span class="comment"> *  其他的员工,也具备这些共性,抽取到父类中,自己就不需要定义了</span></span><br><span class="line"><span class="comment"> *  是研发部员工的一种,继承研发部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEE</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line"><span class="comment">//重写他父类的父类的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用父类的get方法,获取name,id值</span></span><br><span class="line">System.out.println(<span class="string">"JavaEE的工程师开发淘宝"</span>+ <span class="keyword">super</span>.getName()+<span class="string">".."</span>+<span class="keyword">super</span>.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*定义Android工程师 继承 研发部员工类，重写工作方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在研发淘宝手机客户端软件"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   定义维护员工类,属于员工中的一种</span></span><br><span class="line"><span class="comment"> *   继承员工类</span></span><br><span class="line"><span class="comment"> *   抽象类Maintainer 给自己的员工定义自己有的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maintainer</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  描述的是网络维护工程师</span></span><br><span class="line"><span class="comment"> *  属于维护部的员工,继承维护部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Network</span> <span class="keyword">extends</span> <span class="title">Maintainer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络工程师在检查网络是否畅通"</span>+<span class="keyword">super</span>.getName()+<span class="string">"..."</span>+<span class="keyword">super</span>.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *定义Hardware硬件维护工程师 继承 维护部员工类，重写工作方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hardware</span> <span class="keyword">extends</span> <span class="title">Maintainer</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在修复打印机"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20小结"><a href="#20小结" class="headerlink" title="20小结"></a>20小结</h3><p>（1）    继承：是指在一个现有类的基础上去构建一个新的类，构建出来的新类被称作子类，现有类被称作父类，子类会自动拥有父类所有<br>继承的好处：可继承的属性和方法。</p><pre><code>提高了代表的可维护性提高了代码的复用性让类与类之间产生了继承关系</code></pre><p>继承的弊端：</p><pre><code>类与类之间的耦合度过高</code></pre><p>继承特点：</p><pre><code>java中类只能够单继承，不能多继承，可以多层继承    class Yy extends Object {}    class Fu extends Yy{}    class Zi extends Fu {}所有的类都直接或者间接的继承了 Object类，Object类称为祖宗类</code></pre><p>继承的注意事项：</p><pre><code>1，使用关键字 extends 让类与类之间 产生继承关系2, 父类私有的成员，子类不能继承，因为根本看不到3，不能为了继承某个功能而随意进行继承操作， 必须要符合 is a 的关系    苹果 is a 水果    男人 is a 人    狗   is a 人 ， 这种情况就不能继承了</code></pre><p>继承中的成员变量关系：</p><pre><code>  不同名的变量：      子类直接继承使用  同名的变量：默认访问的是子类自己的成员变量(this.成员变量), 想访问父类中的同名变量，请使用 (super.成员变量);</code></pre><p>继承中的成员方法关系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">不同名的方法：</span><br><span class="line">子类直接继承使用</span><br><span class="line">同名的方法：</span><br><span class="line">默认访问的是子类自己的成员方法，想访问父类中的同名方法，请使用 <span class="keyword">super</span>.成员方法();</span><br><span class="line"><span class="keyword">super</span>:用来表示当前对象中包含的父类对象空间的引用</span><br><span class="line"></span><br><span class="line">调用父类的成员变量：</span><br><span class="line"><span class="keyword">super</span>.成员变量;</span><br><span class="line"></span><br><span class="line">调用方法的成员方法:</span><br><span class="line"><span class="keyword">super</span>.成员方法();</span><br></pre></td></tr></table></figure></p><p>(2)方法重写(override)：指 在子父类中，出现了方法声明相同的情况，也叫做方法覆盖，方法复写<br>方法重写的注意事项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，子类的方法声明要与父类相同</span><br><span class="line"><span class="number">2</span>, 子类要重写方法的方法，方法的权限修饰符不能比父类的更低</span><br><span class="line"><span class="number">3</span>, 父类私有的方法，子类不能够进行方法重写</span><br></pre></td></tr></table></figure></p><p>(3)方法重载(overload)：指 在同一个类中，多个方法名称相同，它们的参数列表不同(个数不同，数据类型不同)</p><p>(4)抽象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">抽象方法： 方法只有声明部分，没有方法体,即 <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">抽象类： 包含抽象方法的类，一定是抽象类</span><br><span class="line">     使用 <span class="keyword">abstract</span> 修饰的类，是抽象类</span><br></pre></td></tr></table></figure></p><p>抽象类的特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，抽象类与抽象方法都必须使用 <span class="keyword">abstract</span>来修饰 </span><br><span class="line"><span class="number">2</span>，抽象类不能直接创建对象</span><br><span class="line"><span class="number">3</span>，抽象类中可以有抽象方法，也可以没有抽象方法</span><br><span class="line"><span class="number">4</span>，抽象类的子类</span><br><span class="line">a，实现了抽象方法的具体类</span><br><span class="line">b，抽象类</span><br></pre></td></tr></table></figure></p><p>抽象类面试题：</p><pre><code>    1，抽象类中是否可以没有抽象方法？如果可以，那么，该类还定义成抽象类有意义吗？为什么？可以没有抽象方法，有意义，不会让其他人直接创建该类对象</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541167132/samples/java%20files/photo-1539452851739-c57dee0c0859.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、继承&lt;br&gt;2、抽象类&lt;br&gt;3、综合案例—员工类系列定义&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础7(类与对象，成员变量，封装)</title>
    <link href="https://leesen998.github.io/2016/10/10/day09%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/10/day09笔记/</id>
    <published>2016-10-10T13:21:53.000Z</published>
    <updated>2018-11-15T03:23:51.620Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058368/java/photo-1538831539254-abe4ffd1a812.jpg" alt="" style="width:100%"></p><p>1、面向对象思想<br>2、类与对象的关系<br>3、局部变量和成员变量的关系<br>4、封装思想<br>5、private,this关键字<br>6、随机点名器</p><a id="more"></a><h2 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h2><h3 id="面向对象和面向过程的思想"><a href="#面向对象和面向过程的思想" class="headerlink" title="面向对象和面向过程的思想"></a>面向对象和面向过程的思想</h3><pre><code>* A: 面向过程与面向对象都是我们编程中，编写程序的一种思维方式    * a: 面向过程的程序设计方式，是遇到一件事时，思考“我该怎么做”，然后一步步实现的过程。    * b: 面向对象的程序设计方式，是遇到一件事时，思考“我该让谁来做”，然后那个“谁”就是对象，他要怎么做这件事是他自己的事，反正最后一群对象合力能把事就好就行了。</code></pre><h3 id="面向对象的思想的生活案例"><a href="#面向对象的思想的生活案例" class="headerlink" title="面向对象的思想的生活案例"></a>面向对象的思想的生活案例</h3><pre><code>* A: 买电脑（组装机）    * a: 面向过程：自己该怎么做    * b: 面向对象：找人帮我们做</code></pre><h3 id="面向对象好处"><a href="#面向对象好处" class="headerlink" title="面向对象好处"></a>面向对象好处</h3><pre><code>* A: 面向对象好处    * a: 面向对象思维方式是一种更符合人们思考习惯的思想    * b: 面向过程思维方式中更多的体现的是执行者（自己做事情），面向对象中更多的体现是指挥者（指挥对象做事情）。    * c: 面向对象思维方式将复杂的问题简单化。</code></pre><h3 id="大象装进冰箱的代码案例"><a href="#大象装进冰箱的代码案例" class="headerlink" title="大象装进冰箱的代码案例"></a>大象装进冰箱的代码案例</h3><pre><code>* A: 需求：把大象装冰箱里    * a: 面向过程                 * 自己打开冰箱门        * 自己将大象装进去        * 自己关闭冰箱门        * b: 面向对象        * 分析发现打开、装、关闭都是冰箱的功能。即冰箱对象具    备如下功能        * 冰箱打开        * 冰箱存储        * 冰箱关闭* B: 通过伪代码描述大象和冰箱    * 描述大象：        class 大象        {        }    * 描述冰箱        class冰箱        {            void 打开(){}            void 存储(大象){}            void 关闭(){}        }* C: 使用对象：    * 1、创建冰箱的对象        * 冰箱 bx = new 冰箱();      * 2、调用冰箱的功能        * 对象.功能()；        * bx.打开();        * bx.存储(new 大象());        * bx.关闭();* D：总结：    * 1、先按照名词提炼问题领域中的对象    * 2、对对象进行描述，其实就是在明确对象中应该具备的属性和功能    * 3、通过new的方式就可以创建该事物的具体对象    * 4、通过该对象调用它以后的功能。</code></pre><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><h3 id="定义小汽车类"><a href="#定义小汽车类" class="headerlink" title="定义小汽车类"></a>定义小汽车类</h3><pre><code>* A: 分析小汽车的属性和功能    * 属性        * 颜色        * 轮胎个数    * 功能        * 运行    * B: 通过伪代码描述小汽车    * 小汽车{        * 颜色        * 轮胎个数        * 运行(){}    * }* C：通过JAVA代码描述小汽车</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">* String color;</span><br><span class="line">* <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">* <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">* System.out.println(color + <span class="string">":"</span> + number);</span><br><span class="line">* &#125;</span><br><span class="line">* &#125;</span><br></pre></td></tr></table></figure><h3 id="测试汽车类"><a href="#测试汽车类" class="headerlink" title="测试汽车类"></a>测试汽车类</h3><pre><code>* A: 创见对象的格式    * a: 类名 变量名 = new 类名();* B: 测试汽车类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 测试：Car类中的run方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 1,创建Car的对象。给对象起个名字。</span></span><br><span class="line">Car c = <span class="keyword">new</span> Car();<span class="comment">// c是类类型的变量。c指向了一个具体的Car类型的对象。</span></span><br><span class="line"><span class="comment">// 2,通过已有的对象调用该对象的功能。格式：对象.对象成员;</span></span><br><span class="line"><span class="comment">// 3,可以该对象的属性赋值。</span></span><br><span class="line">c.color = <span class="string">"red"</span>;</span><br><span class="line">c.number = <span class="number">4</span>;</span><br><span class="line">c.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的内存图"><a href="#对象的内存图" class="headerlink" title="对象的内存图"></a>对象的内存图</h3><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058377/java/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><pre><code>* A: 类和对象的关系    * 类是对某一类事物的抽象描述，而对象用于表示现实中该类事物的个体* B: 举例    * 可以将玩具模型看作是一个类，将一个个玩具看作对象，从玩具模型和玩具之间的关系便可以看出类与对象之间的关系</code></pre><h2 id="局部变量和成员变量的关系"><a href="#局部变量和成员变量的关系" class="headerlink" title="局部变量和成员变量的关系"></a>局部变量和成员变量的关系</h2><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 区别一：定义的位置不同</span><br><span class="line">* 定义在【类】中的变量是【成员变量】</span><br><span class="line">* 定义在【方法】中或者&#123;&#125;语句里面的变量是【局部变量】</span><br><span class="line">* 区别二：在内存中的位置不同</span><br><span class="line">* 【成员变量】存储在【堆内存】的对象中</span><br><span class="line">* 【局部变量】存储在【栈内存】的方法中（局部变量跟随方法进栈）</span><br><span class="line">* 区别三：声明周期不同</span><br><span class="line">* 成员变量随着对象的出现而出现在堆中，随着对象的消失而从堆中消失</span><br><span class="line">* 局部变量随着方法的运行而出现在栈中，随着方法的弹栈而消失</span><br><span class="line">* 区别四：初始化不同</span><br><span class="line">* 【成员变量】因为在堆内存中，【所有默认的初始化值】</span><br><span class="line">* 【局部变量】【没有默认】的初始化值，必须手动的给其赋值才可以使用。</span><br></pre></td></tr></table></figure><h2 id="封装思想"><a href="#封装思想" class="headerlink" title="封装思想"></a>封装思想</h2><h3 id="01方法参数是基本数据类型和引用数据类型"><a href="#01方法参数是基本数据类型和引用数据类型" class="headerlink" title="01方法参数是基本数据类型和引用数据类型"></a>01方法参数是基本数据类型和引用数据类型</h3><pre><code>* A.基本类型</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line">show(x);</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">基本类型作为参数传递时，其实就是将基本类型变量x空间中的值复制了一份传递给调用的方法show()，当在show()方法中x接受到了复制的值，再在show()方法中对x变量进行操作，这时只会影响到show中的x。当show方法执行完成，弹栈后，程序又回到main方法执行，main方法中的x值还是原来的值。</span><br></pre></td></tr></table></figure><pre><code>* B.引用类型</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.x = <span class="number">5</span>;</span><br><span class="line">show(d);</span><br><span class="line">System.out.println(<span class="string">"x="</span>+d.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Demo d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d.x = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">当引用变量作为参数传递时，这时其实是将引用变量空间中的内存地址(引用)复制了一份传递给了show方法的d引用变量。这时会有两个引用同时指向堆中的同一个对象。当执行show方法中的d.x=<span class="number">6</span>时，会根据d所持有的引用找到堆中的对象，并将其x属性的值改为<span class="number">6</span>.show方法弹栈。</span><br><span class="line">由于是两个引用指向同一个对象，不管是哪一个引用改变了引用的所指向的对象的中的值，其他引用再次使用都是改变后的值。</span><br><span class="line"></span><br><span class="line">* C.结论</span><br><span class="line">* 对于基本类型形式参数改变不会影响到实际参数</span><br><span class="line">* 对于引用类型形式参数改变会影响到实际参数</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058377/java/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="方法调用的内存图"></p><h3 id="02封装的概述"><a href="#02封装的概述" class="headerlink" title="02封装的概述"></a>02封装的概述</h3><pre><code>* A.面向对象三大特征    * 封装、继承、多态* B.封装表现    * 1、方法就是一个最基本封装体    * 2、类其实也是一个封装体    * C.封装的好处    * 1、提高了代码的复用性    * 2、隐藏了实现细节，还要对外提供可以访问的方式。便于调用者的使用。这是核心之一，也可以理解为就是封装的概念    * 3、提高了安全性     </code></pre><h3 id="03封装的生活中的举例"><a href="#03封装的生活中的举例" class="headerlink" title="03封装的生活中的举例"></a>03封装的生活中的举例</h3><pre><code>* A.封装的生活中的举例    机箱：    一台电脑，它是由CPU、主板、显卡、内存、硬盘、电源等部件组长，其实我们将这些部件组装在一起就可以使用电脑了，但是发现这些部件都散落在外面，很容造成不安全因素，于是，使用机箱壳子，把这些部件都装在里面，并在机箱壳上留下一些插口等，若不留插口，大家想想会是什么情况。    总结：机箱其实就是隐藏了办卡设备的细节，对外提供了插口以及开关等访问内部细节的方式。* B.总结    * 机箱其实就是隐藏了办卡设备的细节，对外提供了插口以及开关等访问内部细节的方式</code></pre><h2 id="private-this关键字"><a href="#private-this关键字" class="headerlink" title="private,this关键字"></a>private,this关键字</h2><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* A.<span class="keyword">private</span>概述</span><br><span class="line">* <span class="keyword">private</span>可以修饰成员内容包括成员方法和成员变量</span><br><span class="line">* 被<span class="keyword">private</span>修饰的内容不能在其他类访问</span><br><span class="line">* B.使用步骤</span><br><span class="line">* <span class="number">1</span>、通过<span class="keyword">private</span>修饰属性</span><br><span class="line">* C.完整代码 </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"age="</span> + age + <span class="string">",name"</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><pre><code>* A.get和set方法    * 年龄已被私有，错误的值无法赋值，可是正确的值也赋值不了，这样还是不行，那肿么办呢？按照之前所学习的封装的原理，隐藏后，还需要提供访问方式。只要对外提供可以访问的方法，让其他程序访问这些方法。同时在方法中可以对数据进行验证。</code></pre><p>一般对成员属性的访问动作：赋值(设置 set)，取值(获取 get)，因此对私有的变量访问的方式可以提供对应的 setXxx或者getXxx的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// 私有成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供设置成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于是设置成员变量的值，这里可以加入数据的验证</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt; <span class="number">130</span>) &#123;</span><br><span class="line">System.out.println(a + <span class="string">"不符合年龄的数据范围"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">age = a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供访问成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">* 总结</span><br><span class="line">* 类中不需要对外提供的内容都私有化，包括属性和方法。</span><br><span class="line">以后再描述事物，属性都私有化，并提供setXxx getXxx方法对其进行访问</span><br><span class="line">* 注意</span><br><span class="line">* 私有仅仅是封装的体现形式而已</span><br></pre></td></tr></table></figure></p><h3 id="私有化Person类带get-set"><a href="#私有化Person类带get-set" class="headerlink" title="私有化Person类带get,set"></a>私有化Person类带get,set</h3><pre><code>* 标准代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   类描述人:</span></span><br><span class="line"><span class="comment"> *     属性: 姓名和年龄</span></span><br><span class="line"><span class="comment"> *     方法: 说话</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   私有化所有的属性 (成员变量) ,必须写对应的get/set方法</span></span><br><span class="line"><span class="comment"> *   凡是自定义的类,自定义成员变量,应该私有化,提供get/set</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   this关键字:</span></span><br><span class="line"><span class="comment"> *     区分成员变量和局部变量同名情况</span></span><br><span class="line"><span class="comment"> *     方法中,方位成员变量,写this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set方法,变量name,age赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get方法,变量name,age获取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String  name = <span class="string">"哈哈"</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"人在说话  "</span> + <span class="keyword">this</span>.name + <span class="string">"..."</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* 标准测试代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//调用set方法,对成员变量赋值</span></span><br><span class="line">p.setAge(<span class="number">18</span>);</span><br><span class="line">p.setName(<span class="string">"旺财"</span>);</span><br><span class="line">p.speak();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用get方法,获取成员变量的值</span></span><br><span class="line"><span class="comment">//System.out.println(p.getName());</span></span><br><span class="line"><span class="comment">//System.out.println(p.getAge());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字-区分成员变量和局部变量的同名"><a href="#this关键字-区分成员变量和局部变量的同名" class="headerlink" title="this关键字_区分成员变量和局部变量的同名"></a>this关键字_区分成员变量和局部变量的同名</h3><pre><code>* A.什么时候用    * 当类中存在成员变量和局部变量同名的时候为了区分，就需要使用this关键字* B.代码    class Person {        private int age;        private String name;        public void speak() {            this.name = &quot;小强&quot;;            this.age = 18;            System.out.println(&quot;name=&quot; + this.name + &quot;,age=&quot; + this.age);        }    }    class PersonDemo {        public static void main(String[] args) {            Person p = new Person();            p.speak();        }    }</code></pre><h3 id="this内存图"><a href="#this内存图" class="headerlink" title="this内存图"></a>this内存图</h3><pre><code>* A.this内存图</code></pre><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058375/java/this%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="this的年龄比较"><a href="#this的年龄比较" class="headerlink" title="this的年龄比较"></a>this的年龄比较</h3><pre><code>* A.需求：在Person类中定义功能，判断两个人是否是同龄人* B.代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">",age="</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为同龄人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsAge</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用当前调用该equalsAge方法对象的age和传递进来p的age进行比较</span></span><br><span class="line"><span class="comment">// 由于无法确定具体是哪一个对象调用equalsAge方法，这里就可以使用this来代替</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * if(this.age == p.age) &#123; return true; &#125; return false;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058375/java/this%E4%BD%BF%E7%94%A8-%E5%B9%B4%E9%BE%84%E6%AF%94%E8%BE%83.jpg" alt="方法调用的内存图 "></p><h2 id="随机点名器"><a href="#随机点名器" class="headerlink" title="随机点名器"></a>随机点名器</h2><h3 id="随机点名器案例重构"><a href="#随机点名器案例重构" class="headerlink" title="随机点名器案例重构"></a>随机点名器案例重构</h3><pre><code>* A.需求：随机点名器，即在全班同学中随机的找出一名同学，打印这名同学的个人信息    它具备以下3个内容：    存储所有同学姓名    总览全班同学姓名    随机点名其中一人，打印到控制台* B.代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 第一步：存储全班同学信息</span></span><br><span class="line"><span class="comment"> * 第二步：打印全班同学每一个人的信息</span></span><br><span class="line"><span class="comment"> * 第三部：随机对学生点名，打印学生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;(); <span class="comment">//1.1创建一个可以存储多个同学名字的容器</span></span><br><span class="line"> <span class="comment">//1.存储全班同学信息</span></span><br><span class="line">addStudent(list);</span><br><span class="line"> <span class="comment">//2.打印全班同学每一个人的信息（姓名、年龄）</span></span><br><span class="line">printStudent(list);</span><br><span class="line"> <span class="comment">//3.随机对学生点名，打印学生信息</span></span><br><span class="line">randomStudent(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//键盘输入多个同学名字存储到容器中</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="comment">//创建学生</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(<span class="string">"存储第"</span>+i+<span class="string">"个学生姓名："</span>);</span><br><span class="line">String name = sc.next();</span><br><span class="line">s.setName(name);</span><br><span class="line">System.out.println(<span class="string">"存储第"</span>+i+<span class="string">"个学生年龄："</span>);</span><br><span class="line"><span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">s.setAge(age);</span><br><span class="line"><span class="comment">//添加学生到集合</span></span><br><span class="line">list.add(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 2.打印全班同学每一个人的信息（姓名、年龄）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span> <span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">Student s = list.get(i);</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+s.getName() +<span class="string">",年龄："</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 3.随机对学生点名，打印学生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomStudent</span> <span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//在班级总人数范围内，随机产生一个随机数</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line"><span class="comment">//在容器（ArrayList集合）中，查找该随机数所对应的同学信息（姓名、年龄）</span></span><br><span class="line">Student s = list.get(index);</span><br><span class="line">System.out.println(<span class="string">"被随机点名的同学："</span>+s.getName() + <span class="string">"，年龄:"</span> + s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生信息类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* A.类与对象</span><br><span class="line">* 类，用于描述多个对象的共同特征，它是对象的模板。</span><br><span class="line">* 对象，用于描述现实中的个体，它是类的实例。</span><br><span class="line">* 类的定义：使用关键字<span class="class"><span class="keyword">class</span>来定义<span class="title">java</span>中的类</span></span><br><span class="line"><span class="class">* 格式：</span></span><br><span class="line"><span class="class">*<span class="title">class</span> 类名 </span>&#123;</span><br><span class="line">*<span class="comment">//属性</span></span><br><span class="line">*数据类型 变量名;</span><br><span class="line">*…</span><br><span class="line">*<span class="comment">//方法</span></span><br><span class="line">*修饰符 返回值类型 方法名(参数)&#123;   &#125;</span><br><span class="line">*…</span><br><span class="line">*&#125;</span><br><span class="line">*</span><br><span class="line">* B.创建对象：</span><br><span class="line">* 格式：</span><br><span class="line">* 类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line"></span><br><span class="line">* C.封装（<span class="keyword">private</span>关键字）</span><br><span class="line">* 封装，把对象的属性与方法的实现细节隐藏，仅对外提供一些公共的访问方式</span><br><span class="line">* 封装的体现：</span><br><span class="line">* 变量:使用 <span class="keyword">private</span> 修饰，这就是变量的封装</span><br><span class="line">* 方法:也是一种封装，封装了多条代码</span><br><span class="line">* 类： 也是一种封装，封装了多个方法</span><br><span class="line">* D.<span class="keyword">private</span>关键字，私有的意思</span><br><span class="line">* 它可以用来修饰类中的成员(成员变量，成员方法)</span><br><span class="line">* <span class="keyword">private</span>的特点：</span><br><span class="line">* <span class="keyword">private</span>修饰的成员只能在当前类中访问，其他类中无法直接访问</span><br><span class="line">* E.<span class="keyword">this</span>关键字</span><br><span class="line">* <span class="keyword">this</span>关键字，本类对象的引用</span><br><span class="line">* <span class="keyword">this</span>是在方法中使用的，哪个对象调用了该方法，那么，<span class="keyword">this</span>就代表调用该方法的对象引用</span><br><span class="line">* <span class="keyword">this</span>什么时候存在的？当创建对象的时候，<span class="keyword">this</span>存在的</span><br><span class="line">* <span class="keyword">this</span>的作用：用来区别同名的成员变量与局部变量（<span class="keyword">this</span>.成员变量）</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">* <span class="keyword">this</span>.name = name;</span><br><span class="line">* &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058368/java/photo-1538831539254-abe4ffd1a812.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、面向对象思想&lt;br&gt;2、类与对象的关系&lt;br&gt;3、局部变量和成员变量的关系&lt;br&gt;4、封装思想&lt;br&gt;5、private,this关键字&lt;br&gt;6、随机点名器&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础6(自定义类，ArrayList)</title>
    <link href="https://leesen998.github.io/2016/10/09/day06%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/09/day06笔记/</id>
    <published>2016-10-09T13:41:53.000Z</published>
    <updated>2018-11-15T03:24:47.619Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864054/java/photo-1540543144-2570163afee1.jpg" alt="" style="width:100%"></p><p>1、自定义类型的定义及使用<br>2、自定义类的内存图<br>3、ArrayList集合的基本功能<br>4、随机点名器案例及库存案例代码优化</p><a id="more"></a><h3 id="01引用数据类型-类"><a href="#01引用数据类型-类" class="headerlink" title="01引用数据类型_类"></a>01引用数据类型_类</h3><pre><code>* A: 数据类型    * a: java中的数据类型分为：基本类型和引用类型* B: 引用类型的分类    * a: Java为我们提供好的类，比如说：Scanner,Random等。    * b: 我们自己创建的类，按照类的定义标准，可以在类中包含多个方法与属性，来供我们使用。 </code></pre><h3 id="02自定义类的概述"><a href="#02自定义类的概述" class="headerlink" title="02自定义类的概述"></a>02自定义类的概述</h3><pre><code>* A: 自定义类的概述    * java代码映射成现实事物的过程就是定义类的过程。    * 举例：        我们就拿一部手机进行分析，它能用来做什么呢？它可以打电话，上网，聊微信等，这些就是手机所提供的功能，也就是方法；手机也有它的特征，如颜色、尺寸大小、品牌型号等，这些就是手机的特征，也就是属性    * 目前，我们只关注类中的属性，类中的方法在面向对象部分再进行学习。</code></pre><h3 id="03自定义类的格式"><a href="#03自定义类的格式" class="headerlink" title="03自定义类的格式"></a>03自定义类的格式</h3><pre><code>* A: 自定义类的格式    * a: 使用类的形式,对现实中的事物进行描述。    * b: 事物由方法和属性两部分组成。        * 方法: 这个事物具备的功能。        * 属性: 这个事物具备的特征。    * c: 格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">属性定义</span><br><span class="line">  修饰符 数据类型 变量名 = 值</span><br><span class="line"></span><br><span class="line">方法定义</span><br><span class="line">  修饰符 返回值类型  方法名(参数列表)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04自定义的手机类"><a href="#04自定义的手机类" class="headerlink" title="04自定义的手机类"></a>04自定义的手机类</h3><pre><code>* A: 自定义的手机类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义手机的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String color ;</span><br><span class="line">String brand ;</span><br><span class="line"><span class="keyword">double</span> size ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05测试手机类"><a href="#05测试手机类" class="headerlink" title="05测试手机类"></a>05测试手机类</h3><p>导包：我们将所有的类放到同一个文件夹下，可以避免导包。</p><p>创建对象：数据类型  变量名 = new 数据类型();</p><p>调用方法：目前我们定义的自定义类不涉及方法，只是属性（自定义类中的方法部分在面向对象部分讲解）<br>访问属性：变量名.属性 (这是当前的方式，后期会采取调用方法的方式替代掉直接访问的方式来完成对属性的访问。)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* A: 调用方法执行流程</span><br><span class="line">* a: 实现引用类型的步骤</span><br><span class="line">* <span class="number">1</span>: 导入包 , 类都是在同一个文件夹,不需要导入包</span><br><span class="line">* <span class="number">2</span>: 创建引用类型的变量</span><br><span class="line">* <span class="number">3</span>: 变量.类型中的功能</span><br><span class="line">* b: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPhone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 2: 创建引用类型的变量</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//System.out.println(p);  //输出内存的地址</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//3: 变量.类型中的功能</span></span><br><span class="line"><span class="comment">//变量 p.的方式,调用类中的属性</span></span><br><span class="line"><span class="comment">//属性就是变量 , 赋值和获取值</span></span><br><span class="line">p.color = <span class="string">"土豪金"</span>;</span><br><span class="line">p.brand = <span class="string">"爱立信"</span>;</span><br><span class="line">p.size = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性值</span></span><br><span class="line">System.out.println(p.color+<span class="string">"  "</span>+p.brand+<span class="string">"  "</span>+p.size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="06自定义类的内存图-1"><a href="#06自定义类的内存图-1" class="headerlink" title="06自定义类的内存图_1"></a>06自定义类的内存图_1</h3><pre><code>* A: 自定义类的内存图_1</code></pre><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864297/java/%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="07自定义类的内存图-2"><a href="#07自定义类的内存图-2" class="headerlink" title="07自定义类的内存图_2"></a>07自定义类的内存图_2</h3><pre><code>* A: 自定义类的内存图_1</code></pre><h3 id="08两个引用类型变量内存图"><a href="#08两个引用类型变量内存图" class="headerlink" title="08两个引用类型变量内存图"></a>08两个引用类型变量内存图</h3><pre><code>* A: 自定义类的内存图_1</code></pre><p>   <img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864298/java/%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="09自定义类的练习"><a href="#09自定义类的练习" class="headerlink" title="09自定义类的练习"></a>09自定义类的练习</h3><pre><code>* A: 实体类的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    电饭锅，包含属性（品牌、容量大小、颜色等）</span></span><br><span class="line"><span class="comment">定义类,描述事物,电饭锅</span></span><br><span class="line"><span class="comment">  属性: 品牌,大小 ,颜色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义类,类名字,电饭锅</span></span><br><span class="line"><span class="comment">类的范围,定义三个属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DianFanGuo</span></span>&#123;</span><br><span class="line"><span class="comment">//定义三个属性</span></span><br><span class="line">String brand ;</span><br><span class="line">    <span class="keyword">double</span> size ;</span><br><span class="line">String color ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   汽车，包含属性（品牌、排量、类型等）</span></span><br><span class="line"><span class="comment">   定义类,类名 Car</span></span><br><span class="line"><span class="comment">     属性 品牌 排量 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="comment">//定义汽车三个属性</span></span><br><span class="line">String brand ;</span><br><span class="line"><span class="keyword">double</span> paiLiang ;</span><br><span class="line">String type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   学生，包含属性（姓名，年龄，性别等）</span></span><br><span class="line"><span class="comment">   定义类,类名Student</span></span><br><span class="line"><span class="comment">     三个属性: 姓名,年龄,性别 (char)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age ;</span><br><span class="line"><span class="keyword">char</span> sex ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* B: 测试类的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义的测试类</span></span><br><span class="line"><span class="comment">   同时测试,电饭锅,汽车,学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建电饭锅引用类型</span></span><br><span class="line">DianFanGuo dfg = <span class="keyword">new</span> DianFanGuo();</span><br><span class="line"></span><br><span class="line">dfg.brand = <span class="string">"特斯拉"</span>;</span><br><span class="line">dfg.color = <span class="string">"红色"</span>;</span><br><span class="line">dfg.size = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(dfg.brand+<span class="string">"  "</span>+dfg.color+<span class="string">"  "</span>+dfg.size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建汽车引用类型</span></span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.brand = <span class="string">"巨力"</span>;</span><br><span class="line">c.type = <span class="string">"拖拉机"</span>;</span><br><span class="line">c.paiLiang = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c.brand+<span class="string">"  "</span>+c.type+<span class="string">"  "</span>+c.paiLiang);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生引用类型</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.name = <span class="string">"张三"</span>;</span><br><span class="line">stu.age = <span class="number">20</span>;</span><br><span class="line">stu.sex = <span class="string">'男'</span>;</span><br><span class="line">System.out.println(stu.name+<span class="string">"  "</span>+stu.age+<span class="string">"  "</span>+stu.sex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10ArrayList创建变量的步骤"><a href="#10ArrayList创建变量的步骤" class="headerlink" title="10ArrayList创建变量的步骤"></a>10ArrayList创建变量的步骤</h3><p>为了保存这些数目不确定的元素，JDK中提供了一系列特殊的类，这些类可以存储任意类型的元素，并且长度可变，统称为集合。在这里，我们先介绍ArrayList集合.<br>导包：import java.util.ArrayList;</p><p><font color="#DD66" size=""> 创建对象：与其他普通的引用数据类型创建方式完全相同，但是要指定容器中存储的数据类型：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;要存储元素的数据类型&gt;  变量名  =  <span class="keyword">new</span>  ArrayList&lt;要存储元素的数据类型&gt;();</span><br></pre></td></tr></table></figure><pre><code>* A: ArrayList创建变量的步骤    * a: 导入包 java.util包中    * b: 创建引用类型的变量        数据类型&lt; 集合存储的数据类型&gt;  变量名 = new 数据类型&lt;集合存储的数据类型&gt;();           集合存储的数据类型: 要将数据存储到集合的容器中           创建集合引用变量的时候,必须要指定好,存储的类型是什么    * c: 变量名.方法         注意: 集合存储的数据,8个基本类型对应8个引用类型         存储引用类型,不存储基本类型</code></pre><p><font color="#DD66" size=""><br>“&lt;要存储元素的数据类型&gt;”中的数据类型必须是【引用数据类型】，不能是基本数据类型；<br></font><br>下面给出8种基本数据类型所对应的引用数据类型表示形式:</p><pre><code>基本数据类型        对应的引用数据类型表示形式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>Byte</span><br><span class="line"><span class="keyword">short</span>Short</span><br><span class="line">IntInteger</span><br><span class="line"><span class="keyword">long</span>Long</span><br><span class="line"><span class="keyword">float</span>Float</span><br><span class="line"><span class="keyword">double</span>Double</span><br><span class="line"><span class="keyword">char</span>Character</span><br><span class="line"><span class="keyword">boolean</span>Boolean</span><br></pre></td></tr></table></figure><h3 id="11ArrayList创建变量举例"><a href="#11ArrayList创建变量举例" class="headerlink" title="11ArrayList创建变量举例"></a>11ArrayList创建变量举例</h3><pre><code>* A: ArrayList创建变量的示例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建集合容器,指定存储的数据类型</span></span><br><span class="line"><span class="comment">//存储字符串</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合容器,存储整数</span></span><br><span class="line">ArrayList&lt;Integer&gt; array2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合容器,存储手机类型</span></span><br><span class="line">ArrayList&lt;Phone&gt; array3 = <span class="keyword">new</span> ArrayList&lt;Phone&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12ArrayList的常见方法"><a href="#12ArrayList的常见方法" class="headerlink" title="12ArrayList的常见方法"></a>12ArrayList的常见方法</h3><pre><code>* A: ArrayList的常见方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* a: add(参数) 向集合中添加元素</span><br><span class="line">* b: get(<span class="keyword">int</span> index) 取出集合中的元素,get方法的参数,写入索引</span><br><span class="line">* c: size() 返回集合的长度, 集合存储元素的个数</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义集合,存储字符串元素</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//调用集合方法add存储元素</span></span><br><span class="line">array.add(<span class="string">"abc"</span>);</span><br><span class="line">array.add(<span class="string">"itcast"</span>);</span><br><span class="line">    array.add(<span class="string">"love"</span>);</span><br><span class="line">array.add(<span class="string">"java"</span>);</span><br><span class="line"><span class="comment">//输出集合的长度,调用集合方法size, size方法的返回值类型 int</span></span><br><span class="line"><span class="keyword">int</span> size = array.size();</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取出集合中的一个元素,获取1索引的元素</span></span><br><span class="line"><span class="comment">//集合的方法get, 获取元素后结果数据类型</span></span><br><span class="line">String s = array.get(<span class="number">1</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(array.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">2</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13ArrayList集合的遍历"><a href="#13ArrayList集合的遍历" class="headerlink" title="13ArrayList集合的遍历"></a>13ArrayList集合的遍历</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   集合的遍历</span></span><br><span class="line"><span class="comment">   实现思想也是索引思想</span></span><br><span class="line"><span class="comment">   集合的索引从0开始,到 size()-1</span></span><br><span class="line"><span class="comment">   方法get(int index)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo_2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">array.add(<span class="number">121</span>);</span><br><span class="line">array.add(<span class="number">125</span>);</span><br><span class="line">array.add(<span class="number">123</span>);</span><br><span class="line">array.add(<span class="number">120</span>);</span><br><span class="line">array.add(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对集合进行遍历</span></span><br><span class="line"><span class="comment">//使用方法 size+get组合进行遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line">System.out.println( array.get(i) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14ArrayList补充方法"><a href="#14ArrayList补充方法" class="headerlink" title="14ArrayList补充方法"></a>14ArrayList补充方法</h3><pre><code>* A: ArrayList补充方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: add(<span class="keyword">int</span> 索引,存储的元素) 将元素添加到指定的索引上</span><br><span class="line">* b: set(<span class="keyword">int</span> 索引,修改后的元素) 将指定索引的元素,进行修改</span><br><span class="line">* c: remove(<span class="keyword">int</span> 索引) 删除指定索引上的元素</span><br><span class="line">* d: clear() 清空集合中的所有元素</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码import java.util.ArrayList;public class ArrayListDemo_3{    public static void main(String[] args){        ArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();        array.add(1);        array.add(2);        array.add(3);        array.add(4);        //在索引2上,添加元素7        array.add(2,7);        //将0索引上的元素,修改成10        array.set(0,10);        //将4索引上的元素,删除        array.remove(4);        array.clear();        //使用方法 size+get组合进行遍历        for(int i = 0 ; i &lt; array.size(); i++){            System.out.println( array.get(i) );        }    }}</code></pre><h3 id="15随机点名器案例分析"><a href="#15随机点名器案例分析" class="headerlink" title="15随机点名器案例分析"></a>15随机点名器案例分析</h3><pre><code>* A: 随机点名器案例分析    全班同学中随机的找出一名同学，打印这名同学的个人信息。    我们对本案例进行分析，得出如下分析结果：        1.存储全班同学信息（姓名、年龄）            将容器换成集合，集合中存的是Student类型        2.打印全班同学每一个人的信息（姓名、年龄）             遍历集合        3.在班级总人数范围内，随机产生一个随机数，查找该随机数所对应的同学信息（姓名、年龄）        随机点名器明确地分为了三个功能。如果将多个独立功能的代码写到一起，则代码相对冗长，我们可以针对不同的功能可以将其封装到一个方法中，将完整独立的功能分离出来。        而在存储同学姓名时，如果对每一个同学都定义一个变量进行姓名存储，则会出现过多孤立的变量，很难一次性将全部数据持有。此时，我们采用ArrayList集合来解决多个学生信息的存储问题</code></pre><h3 id="16随机点名器代码实现"><a href="#16随机点名器代码实现" class="headerlink" title="16随机点名器代码实现"></a>16随机点名器代码实现</h3><pre><code>* A: 随机点名器案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   随机点名器,集合改进 (学生的姓名和年龄)</span></span><br><span class="line"><span class="comment">   现实中有学生这个事物,使用定义类的形式,描述学生事物</span></span><br><span class="line"><span class="comment">   属性: 姓名,年龄</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   姓名存储了数组, 将容器换成是集合</span></span><br><span class="line"><span class="comment">   String[] s = &#123;"",""&#125;;</span></span><br><span class="line"><span class="comment">   集合中,存储的是学生的姓名吗?  应该存储Student类型</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   存储学生:</span></span><br><span class="line"><span class="comment">      学生类型,存储到集合中</span></span><br><span class="line"><span class="comment">   总览: 遍历集合</span></span><br><span class="line"><span class="comment">   随机: 随机数,作为索引,到集合中找到元素</span></span><br><span class="line"><span class="comment">   三个功能,共享的数据,集合容器,</span></span><br><span class="line"><span class="comment">   定义三个方法,必须参数传递集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义集合,存储的是StudentName类型变量</span></span><br><span class="line">ArrayList &lt;StudentName&gt; array = <span class="keyword">new</span> ArrayList&lt;StudentName&gt;();</span><br><span class="line"><span class="comment">//调用添加方法</span></span><br><span class="line">add (array);</span><br><span class="line"><span class="comment">//调用遍历集合</span></span><br><span class="line">printArrayList(array);</span><br><span class="line"></span><br><span class="line">randomStudentName(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  随机数,当作集合的索引,到集合中找到元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomStudentName</span><span class="params">(ArrayList&lt;StudentName&gt; array )</span></span>&#123;</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> number = r.nextInt( array.size());</span><br><span class="line"><span class="comment">//随机数,索引,到集合中get</span></span><br><span class="line">StudentName s = array.get(number);</span><br><span class="line">System.out.println( s.name +<span class="string">"  "</span>+s.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    总览学生的信息,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;StudentName&gt; array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size();i++)&#123;</span><br><span class="line"><span class="comment">//存储集合的时候, 集合.add(sn1)  sn1 是StudentName类型变量</span></span><br><span class="line"><span class="comment">//获取的时候,集合.get方法,获取出来的是什么, 还是StudentName类型变量</span></span><br><span class="line">StudentName s = array.get(i);</span><br><span class="line">System.out.println(s.name+<span class="string">"  "</span>+s.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现存储学生的姓名和年龄</span></span><br><span class="line"><span class="comment">   创建StudentName类型变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(ArrayList&lt;StudentName&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建StudentName类型变量</span></span><br><span class="line">StudentName sn1 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn2 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn3 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn4 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn5 = <span class="keyword">new</span> StudentName();</span><br><span class="line"></span><br><span class="line">sn1.name = <span class="string">"张三1"</span>;</span><br><span class="line">sn1.age = <span class="number">201</span>;</span><br><span class="line"></span><br><span class="line">sn2.name = <span class="string">"张三2"</span>;</span><br><span class="line">sn2.age = <span class="number">202</span>;</span><br><span class="line"></span><br><span class="line">sn3.name = <span class="string">"张三3"</span>;</span><br><span class="line">sn3.age = <span class="number">203</span>;</span><br><span class="line"></span><br><span class="line">sn4.name = <span class="string">"张三4"</span>;</span><br><span class="line">sn4.age = <span class="number">204</span>;</span><br><span class="line"></span><br><span class="line">sn5.name = <span class="string">"张三5"</span>;</span><br><span class="line">sn5.age = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将StudentName变量,存储到集合中</span></span><br><span class="line">array.add(sn1);</span><br><span class="line">array.add(sn2);</span><br><span class="line">array.add(sn3);</span><br><span class="line">array.add(sn4);</span><br><span class="line">array.add(sn5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17库存案例分析加入集合"><a href="#17库存案例分析加入集合" class="headerlink" title="17库存案例分析加入集合"></a>17库存案例分析加入集合</h3><pre><code>* A: 库存案例分析加入集合    * a: 参见\day06\day06(面向对象\day06_source\对象内存图.JPG</code></pre><h3 id="18库存案例添加商品信息"><a href="#18库存案例添加商品信息" class="headerlink" title="18库存案例添加商品信息"></a>18库存案例添加商品信息</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义,.描述商品的类</span></span><br><span class="line"><span class="comment">   商品 4个属性</span></span><br><span class="line"><span class="comment">     商品名字  大小     价格    库存</span></span><br><span class="line"><span class="comment">  String    double   double  int</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">定义类,类名Goods</span></span><br><span class="line"><span class="comment">这个类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span></span>&#123;</span><br><span class="line"><span class="comment">//定义商品名字</span></span><br><span class="line">String brand ;</span><br><span class="line"><span class="comment">//大小属性</span></span><br><span class="line"><span class="keyword">double</span> size ;</span><br><span class="line"><span class="comment">// 价格属性</span></span><br><span class="line"><span class="keyword">double</span> price ;</span><br><span class="line"><span class="comment">//库存属性</span></span><br><span class="line"><span class="keyword">int</span> count ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19库存案例查看库存清单"><a href="#19库存案例查看库存清单" class="headerlink" title="19库存案例查看库存清单"></a>19库存案例查看库存清单</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      2.查看库存清单</span></span><br><span class="line"><span class="comment">    将集合进行遍历, 获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">输出每一个Goods类型的属性</span></span><br><span class="line"><span class="comment">计算求和: 总库存,总金额</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,查看库存清单,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出表头</span></span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,保存总库存数,和总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">double</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//get(索引)获取出集合中的元素,存储的是Goods类,获取的也是Goods类型</span></span><br><span class="line"><span class="comment">//使用Goods类型变量,接受get方法结果</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(g.brand+<span class="string">"   "</span>+g.size+<span class="string">"    "</span>+g.price+<span class="string">"    "</span>+g.count);</span><br><span class="line">totalCount = totalCount+g.count;</span><br><span class="line">totalMoney = totalMoney + g.count*g.price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20库存案例修改库存清单及测试代码的实现"><a href="#20库存案例修改库存清单及测试代码的实现" class="headerlink" title="20库存案例修改库存清单及测试代码的实现"></a>20库存案例修改库存清单及测试代码的实现</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      2.查看库存清单</span></span><br><span class="line"><span class="comment">    将集合进行遍历, 获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">输出每一个Goods类型的属性</span></span><br><span class="line"><span class="comment">计算求和: 总库存,总金额</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.修改商品的库存</span></span><br><span class="line"><span class="comment">    集合遍历 ,获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">变量调用Goods类的属性count,值进行修改 (键盘输入)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line"><span class="comment">//进入死循环中</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//调用选择功能的方法,获取到用户输入的功能序号</span></span><br><span class="line"><span class="keyword">int</span> number = chooseFunction();</span><br><span class="line"><span class="comment">//对序号判断,如果=1 进入查看库存功能  = 2 进入修改库存功能  =3 结束</span></span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//进入查看库存,调用查看库存的方法,传递存储商品信息的集合</span></span><br><span class="line">printStore(array);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//进入修改库存功能,调用修改库存的方法,传递集合</span></span><br><span class="line">update(array);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"> System.out.println(<span class="string">"无此功能"</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  方法定义,修改库存</span></span><br><span class="line"><span class="comment">  键盘的输入,将Goods中的属性值,修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//遍历集合,获取集合中的每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//集合方法get获取的是集合的元素,元素类型Goods</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(<span class="string">"请输入"</span>+g.brand+<span class="string">"的库存数"</span>);</span><br><span class="line"><span class="comment">//Goods属性,count进行修改</span></span><br><span class="line">g.count = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现选择菜单,用户根据功能选择菜单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------库存管理------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1.查看库存清单"</span>);</span><br><span class="line">System.out.println(<span class="string">"2.修改商品库存数量"</span>);</span><br><span class="line">System.out.println(<span class="string">"3.退出"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入要执行的操作序号："</span>);</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> number = sc.nextInt();</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,查看库存清单,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出表头</span></span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,保存总库存数,和总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">double</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//get(索引)获取出集合中的元素,存储的是Goods类,获取的也是Goods类型</span></span><br><span class="line"><span class="comment">//使用Goods类型变量,接受get方法结果</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(g.brand+<span class="string">"   "</span>+g.size+<span class="string">"    "</span>+g.price+<span class="string">"    "</span>+g.count);</span><br><span class="line">totalCount = totalCount+g.count;</span><br><span class="line">totalMoney = totalMoney + g.count*g.price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864054/java/photo-1540543144-2570163afee1.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、自定义类型的定义及使用&lt;br&gt;2、自定义类的内存图&lt;br&gt;3、ArrayList集合的基本功能&lt;br&gt;4、随机点名器案例及库存案例代码优化&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础5(方法)</title>
    <link href="https://leesen998.github.io/2016/10/08/day05%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/08/day05笔记/</id>
    <published>2016-10-08T13:41:53.000Z</published>
    <updated>2018-11-15T03:25:19.081Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280034/samples/java%20files/ChMkJ1or0PmIahOGABoj0mukBisAAi_rwBK9FkAGiPq398.jpg" alt="" style="width:100%"></p><p>1、方法基础知识<br>2、方法高级内容<br>3、方法案例</p><a id="more"></a><h3 id="01方法的概述"><a href="#01方法的概述" class="headerlink" title="01方法的概述"></a>01方法的概述</h3><pre><code>* A: 为什么要有方法    * 提高代码的复用性 * B: 什么是方法    * 完成特定功能的代码块。 </code></pre><h3 id="02方法的定义格式"><a href="#02方法的定义格式" class="headerlink" title="02方法的定义格式"></a>02方法的定义格式</h3><pre><code>* A: 方法的格式*         修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {            方法体语句;            return 返回值;         } * B: 方法的格式说明    * 修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。    * 返回值类型：就是功能结果的数据类型。    * 方法名：符合命名规则即可。方便我们的调用。    * 参数：        * 实际参数：就是实际参与运算的。        * 形式参数；就是方法定义上的，用于接收实际参数的。    * 参数类型：就是参数的数据类型    * 参数名：就是变量名    * 方法体语句：就是完成功能的代码。    * return：结束方法的。    * 返回值：就是功能的结果，由return带给调用者。 </code></pre><h3 id="03定义方法计算面积"><a href="#03定义方法计算面积" class="headerlink" title="03定义方法计算面积"></a>03定义方法计算面积</h3><pre><code>* A: 定义方法计算面积</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//调用方法, 方法执行起来</span></span><br><span class="line"> <span class="comment">// 在方法main中,调用方法 getArea</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> area = getArea(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"> System.out.println(<span class="string">"面积是: "</span>+area);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   要求: 计算一个长方形的面积</span></span><br><span class="line"><span class="comment">   定义方法解决这个要求</span></span><br><span class="line"><span class="comment">   分析方法定义过程:</span></span><br><span class="line"><span class="comment">      1.明确方法计算后的结果的数据类型 int  定义格式对应的就是返回值类型</span></span><br><span class="line"><span class="comment">  2.方法计算过程中,有没有未知的数据, 宽和长, 未知数据的数据类型 int</span></span><br><span class="line"><span class="comment">      未知数的变量,定义在方法的小括号内</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getArea</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line"><span class="comment">//实现方法的功能主体</span></span><br><span class="line"><span class="comment">//int area = w * h;</span></span><br><span class="line"><span class="keyword">return</span> w * h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04调用方法"><a href="#04调用方法" class="headerlink" title="04调用方法"></a>04调用方法</h3><pre><code>* A: 调用方法    * a: 在main函数中调用方法，让方法执行起来    * b: 方法的形参        * 方法要什么参数我们就给什么类型的参数。    * c: 方法的返回值        * 方法返回什么类型的值我们就用对应的数据类型的变量来接收</code></pre><h3 id="05调用方法执行流程"><a href="#05调用方法执行流程" class="headerlink" title="05调用方法执行流程"></a>05调用方法执行流程</h3><pre><code>* A: 调用方法执行流程    * a: 方法的定义是没有顺序的，写在main函数的上边或者下边都可以。    * b: 方法的执行，是把实参传递给形参，从而来执行的。    * c: 方法只有被调用才会执行。</code></pre><h3 id="06方法调用的内存图"><a href="#06方法调用的内存图" class="headerlink" title="06方法调用的内存图"></a>06方法调用的内存图</h3><ul><li>A: 方法调用的内存图<br><img src="https://res.cloudinary.com/leesen/image/upload/v1540350598/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></li></ul><h3 id="07方法调用的练习"><a href="#07方法调用的练习" class="headerlink" title="07方法调用的练习"></a>07方法调用的练习</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   方法的定义练习</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//printRect();</span></span><br><span class="line"><span class="comment">//int number = getNumber();</span></span><br><span class="line"><span class="comment">//System.out.println(getNumber());</span></span><br><span class="line"><span class="comment">//printRect2(3,5);</span></span><br><span class="line"><span class="keyword">double</span> avg = getAvg(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(avg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义有返回值有参数方法，如求三个数的平均值</span></span><br><span class="line"><span class="comment">   明确方法计算后的数据类型, 返回值类型 double</span></span><br><span class="line"><span class="comment">   明确方法未知数, 三个未知的整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getAvg</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (a+b+c)/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义无返回值有参数方法，如打印指定M行，每行N个*号的矩形</span></span><br><span class="line"><span class="comment">明确方法计算后结果,控制台输出图形,没有返回值的</span></span><br><span class="line"><span class="comment">方法中有没有未知数,图形行数,和列数,是未知的, 数据类型整数int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRect2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ;  j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义有返回值无参数方法，如键盘录入得到一个整数</span></span><br><span class="line"><span class="comment">   明确方法计算后结果的数据类型 int</span></span><br><span class="line"><span class="comment">   明确有没有未知数,没</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//int number = sc.nextInt();</span></span><br><span class="line"><span class="keyword">return</span> sc.nextInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义无返回值无参数方法，如打印3行，每行3个*号的矩形</span></span><br><span class="line"><span class="comment">   为什么没有返回值:</span></span><br><span class="line"><span class="comment">       打印矩形 ,输出效果,不需要将结果返回</span></span><br><span class="line"><span class="comment">   明确未知数: 不需要未知数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRect</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">3</span> ;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08方法的定义和使用的注意事项"><a href="#08方法的定义和使用的注意事项" class="headerlink" title="08方法的定义和使用的注意事项"></a>08方法的定义和使用的注意事项</h3><pre><code>* A: 方法的定义和使用的注意事项</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 方法不能定义在另一个方法的里面</span><br><span class="line">* b: 写错方法名字</span><br><span class="line">* c: 写错了参数列表</span><br><span class="line">* d: 方法返回值是<span class="keyword">void</span>,方法中可以省略<span class="keyword">return</span> 不写</span><br><span class="line">     <span class="keyword">return</span> 下面不能有代码</span><br><span class="line">* e 方法返回值类型,和<span class="keyword">return</span> 后面数据类型必须匹配</span><br><span class="line">* f: 方法重复定义问题</span><br><span class="line">* g: 调用方法的时候,返回值是<span class="keyword">void</span>, 不能写在输出语句中</span><br></pre></td></tr></table></figure><h3 id="09方法的重载"><a href="#09方法的重载" class="headerlink" title="09方法的重载"></a>09方法的重载</h3><pre><code>* A: 方法的重载</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* 在同一个类中，方法名相同，参数列表不同。与返回值类型无关。</span><br><span class="line"></span><br><span class="line">* 参数列表不同：</span><br><span class="line">* A:参数个数不同</span><br><span class="line">* B:参数类型不同</span><br><span class="line">* C:参数的顺序不同(算重载,但是在开发中不用)</span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"两个int参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"三个int参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"两个double参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10方法重载注意事项"><a href="#10方法重载注意事项" class="headerlink" title="10方法重载注意事项"></a>10方法重载注意事项</h3><pre><code>* A: 方法重载注意事项    * a: 参数列表必须不同    * b: 重载和参数变量名无关    * c: 重载和返回值类型无关    * d: 重载和修饰符无关    * e: 技巧: 重载看方法名和参数列表</code></pre><h3 id="11方法参数是基本数据类型"><a href="#11方法参数是基本数据类型" class="headerlink" title="11方法参数是基本数据类型"></a>11方法参数是基本数据类型</h3><pre><code>* A: 方法参数是基本数据类型    * a: 方法参数是基本类型时，传递的是值。 </code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540350597/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="基本数据类型"></p><h3 id="12方法参数是引用数据类型"><a href="#12方法参数是引用数据类型" class="headerlink" title="12方法参数是引用数据类型"></a>12方法参数是引用数据类型</h3><pre><code>* A: 方法参数是引用数据类型    * a: 方法参数是引用类型时，传递的是内存地址值。</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540350598/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="引用数据类型">        </p><h3 id="13随机点名器"><a href="#13随机点名器" class="headerlink" title="13随机点名器"></a>13随机点名器</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   实现随机点名器</span></span><br><span class="line"><span class="comment">     1.存储所有学生姓名</span></span><br><span class="line"><span class="comment"> 2.预览所有学生姓名,遍历数组</span></span><br><span class="line"><span class="comment"> 3.随机数作为索引,到数组中找元素</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">将功能独立出来, 作成方法,调用方法即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义三个功能, 用到同一个姓名数据</span></span><br><span class="line"><span class="comment">姓名存储到数组中,三个方法,使用一个数组中的数据, 方法传递参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义数组,存储学生姓名</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line"><span class="comment">//调用添加姓名方法</span></span><br><span class="line">addStudent(names);</span><br><span class="line"><span class="comment">//调用遍历数组方法</span></span><br><span class="line">printStudentName(names);</span><br><span class="line"><span class="comment">//调用随机姓名的方法</span></span><br><span class="line">String name = randomStudentName(names);</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,随机数,做索引,数组中找到学生姓名</span></span><br><span class="line"><span class="comment">  返回值?  学生姓名</span></span><br><span class="line"><span class="comment">  参数?  数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomStudentName</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> index = ran.nextInt(names.length);</span><br><span class="line"><span class="keyword">return</span> names[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,遍历数组</span></span><br><span class="line"><span class="comment">   返回值? 没有</span></span><br><span class="line"><span class="comment">   参数? 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudentName</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现向数组中添加学生姓名</span></span><br><span class="line"><span class="comment">   返回值? 没有,</span></span><br><span class="line"><span class="comment">   参数?  参数就是数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"张三"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"李四"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"王五"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"李蕾"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"韩梅梅"</span>;</span><br><span class="line">names[<span class="number">5</span>] = <span class="string">"小名"</span>;</span><br><span class="line">names[<span class="number">6</span>] = <span class="string">"老王"</span>;</span><br><span class="line">names[<span class="number">7</span>] = <span class="string">"小华"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14库存案例代码实现-1"><a href="#14库存案例代码实现-1" class="headerlink" title="14库存案例代码实现_1"></a>14库存案例代码实现_1</h3><pre><code>* A: 案例代码/*   实现商品的库存管理     功能:        1.展示用户选择功能清单        2.根据选择的功能编号,进行不同的操作           A. 展示所有库存           B. 修改库存数量      分析:        1.展示用户清单:           输出语句, 用户输入, 选择功能序号        2.根据选择,调用不同的方法            switch语句              case 1 2 3           A  展示库存             将存储商品的数组,遍历           B  修改库存              修改所有的库存数量*/import java.util.Scanner;public class Shopp{    public static void main(String[] args){    }    /*       定义方法,展示所有的库存清单,遍历       返回值,没有       参数, 数组    */    public static void printStore(String[] brand,double[] size,double[] price,int[] count){        System.out.println(&quot;----------商场库存清单----------&quot;);        System.out.println(&quot;品牌型号     尺寸    价格    库存数&quot;);        //定义变量,计算总库存数,和总价格        int totalCount = 0;        int totalMoney = 0;        //遍历数组,将数组中所有的商品信息打印出来        for(int i = 0 ; i &lt; brand.length ; i++){            System.out.println(brand[i]+&quot;   &quot;+size[i]+&quot;    &quot;+price[i]+&quot;   &quot;+count[i]);            totalCount += count[i];            totalMoney += count[i]*price[i];        }        System.out.println(&quot;总库存数: &quot;+totalCount);        System.out.println(&quot;商品库存总金额: &quot;+totalMoney);    }    /*      定义方法,实现用户的选择功能,功能的需要返回来      返回值, int      参数, 没有    */    public static int chooseFunction(){        System.out.println(&quot;-------------库存管理------------&quot;);        System.out.println(&quot;1.查看库存清单&quot;);        System.out.println(&quot;2.修改商品库存数量&quot;);        System.out.println(&quot;3.退出&quot;);        System.out.println(&quot;请输入要执行的操作序号：&quot;);        //接受键盘输入        Scanner sc = new Scanner(System.in);        int chooseNumber = sc.nextInt();        return chooseNumber;    }}</code></pre><h3 id="15库存案例代码实现-2"><a href="#15库存案例代码实现-2" class="headerlink" title="15库存案例代码实现_2"></a>15库存案例代码实现_2</h3><pre><code>* A: 案例代码    /*      定义方法,修改所有商品的库存        用户输入1个,修改1个        返回值,没有        参数, 库存数的数组, 品名数组    */    public static void update(String[] brand, int[] count){        //遍历数组,遍历到一个,修改一个        //接受键盘输入        Scanner sc = new Scanner(System.in);        //遍历数组        for(int i = 0; i &lt; brand.length ; i++){            System.out.println(&quot;请输入&quot;+brand[i]+&quot;的库存数&quot;);            //键盘输入,录入库存, 存储到库存的数组中            int newCount = sc.nextInt();            count[i] = newCount;        }        //int chooseNumber = sc.nextInt();    }</code></pre><h3 id="16库存案例代码测试"><a href="#16库存案例代码测试" class="headerlink" title="16库存案例代码测试"></a>16库存案例代码测试</h3><pre><code>* A: 案例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   实现商品的库存管理</span></span><br><span class="line"><span class="comment">     功能:</span></span><br><span class="line"><span class="comment">    1.展示用户选择功能清单</span></span><br><span class="line"><span class="comment">2.根据选择的功能编号,进行不同的操作</span></span><br><span class="line"><span class="comment">   A. 展示所有库存</span></span><br><span class="line"><span class="comment">   B. 修改库存数量</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">  分析:</span></span><br><span class="line"><span class="comment">    1.展示用户清单:</span></span><br><span class="line"><span class="comment">   输出语句, 用户输入, 选择功能序号</span></span><br><span class="line"><span class="comment">2.根据选择,调用不同的方法</span></span><br><span class="line"><span class="comment">    switch语句</span></span><br><span class="line"><span class="comment">  case 1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   A  展示库存</span></span><br><span class="line"><span class="comment">     将存储商品的数组,遍历</span></span><br><span class="line"><span class="comment">   B  修改库存</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">  修改所有的库存数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//使用数组,保存商品的信息</span></span><br><span class="line"><span class="comment">//品名,尺寸,价格,库存数, 定义5个数组</span></span><br><span class="line">String[] brand = &#123;<span class="string">"MacBookAir"</span>,<span class="string">"ThinkpadT450"</span>&#125;;</span><br><span class="line"><span class="keyword">double</span>[] size = &#123;<span class="number">13.3</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line"><span class="keyword">double</span>[] price = &#123;<span class="number">9998.97</span>,<span class="number">6789.56</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] count = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> choose = chooseFunction();</span><br><span class="line"><span class="keyword">switch</span>(choose)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="comment">//调用查看库存清单方法</span></span><br><span class="line">  printStore(brand,size,price,count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="comment">//调用修改库存的方法</span></span><br><span class="line">  update(brand,count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  System.out.println(<span class="string">"没有这个功能"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,修改所有商品的库存</span></span><br><span class="line"><span class="comment">    用户输入1个,修改1个</span></span><br><span class="line"><span class="comment">返回值,没有</span></span><br><span class="line"><span class="comment">参数, 库存数的数组, 品名数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String[] brand, <span class="keyword">int</span>[] count)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历数组,遍历到一个,修改一个</span></span><br><span class="line"><span class="comment">//接受键盘输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; brand.length ; i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入"</span>+brand[i]+<span class="string">"的库存数"</span>);</span><br><span class="line"><span class="comment">//键盘输入,录入库存, 存储到库存的数组中</span></span><br><span class="line"><span class="keyword">int</span> newCount = sc.nextInt();</span><br><span class="line">count[i] = newCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int chooseNumber = sc.nextInt();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,展示所有的库存清单,遍历</span></span><br><span class="line"><span class="comment">   返回值,没有</span></span><br><span class="line"><span class="comment">   参数, 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(String[] brand,<span class="keyword">double</span>[] size,<span class="keyword">double</span>[] price,<span class="keyword">int</span>[] count)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,计算总库存数,和总价格</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历数组,将数组中所有的商品信息打印出来</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; brand.length ; i++)&#123;</span><br><span class="line">System.out.println(brand[i]+<span class="string">"   "</span>+size[i]+<span class="string">"    "</span>+price[i]+<span class="string">"   "</span>+count[i]);</span><br><span class="line">totalCount += count[i];</span><br><span class="line">totalMoney += count[i]*price[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,实现用户的选择功能,功能的需要返回来</span></span><br><span class="line"><span class="comment">  返回值, int</span></span><br><span class="line"><span class="comment">  参数, 没有</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------库存管理------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1.查看库存清单"</span>);</span><br><span class="line">System.out.println(<span class="string">"2.修改商品库存数量"</span>);</span><br><span class="line">System.out.println(<span class="string">"3.退出"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入要执行的操作序号："</span>);</span><br><span class="line"><span class="comment">//接受键盘输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> chooseNumber = sc.nextInt();</span><br><span class="line"><span class="keyword">return</span> chooseNumber;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280034/samples/java%20files/ChMkJ1or0PmIahOGABoj0mukBisAAi_rwBK9FkAGiPq398.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、方法基础知识&lt;br&gt;2、方法高级内容&lt;br&gt;3、方法案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础4(switch，数组)</title>
    <link href="https://leesen998.github.io/2016/10/04/day04%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day04笔记/</id>
    <published>2016-10-04T08:41:53.000Z</published>
    <updated>2018-11-15T03:26:14.228Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280255/samples/java%20files/photo-1537967371577-a17d31d7035f.jpg" alt="" style="width:100%"></p><p>1、流程控制语句switch<br>2、数组<br>3、随机点名器案例</p><a id="more"></a><h3 id="01switch语句解构"><a href="#01switch语句解构" class="headerlink" title="01switch语句解构"></a>01switch语句解构</h3><pre><code>* A:switch语句解构      * a:switch只能针对某个表达式的值作出判断，从而决定程序执行哪一段代码。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* b:格式如下:</span><br><span class="line">      swtich(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">1</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">2</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">3</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* c: 执行流程:  表达式,和<span class="keyword">case</span>后面的常量进行比较和哪个<span class="keyword">case</span>后的常量相同,就执行哪个<span class="keyword">case</span>后面的程序,遇到<span class="keyword">break</span>,就全结束</span><br><span class="line"></span><br><span class="line">* d: 关键字: <span class="keyword">switch</span> <span class="keyword">case</span> <span class="keyword">default</span> <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">* e:举例</span><br><span class="line">如果等于<span class="number">1</span>，则输出星期一</span><br><span class="line">如果等于<span class="number">2</span>，则输出星期二</span><br><span class="line">如果等于<span class="number">3</span>，则输出星期三</span><br><span class="line">如果等于<span class="number">4</span>，则输出星期四</span><br><span class="line">如果等于<span class="number">5</span>，则输出星期五</span><br><span class="line">如果等于<span class="number">6</span>，则输出星期六</span><br><span class="line">如果等于<span class="number">7</span>，则输出星期天</span><br></pre></td></tr></table></figure><h3 id="02switch语句的星期判断"><a href="#02switch语句的星期判断" class="headerlink" title="02switch语句的星期判断"></a>02switch语句的星期判断</h3><pre><code>* A: switch语句的星期判断</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* a: 明确需求</span><br><span class="line">需求:初始化<span class="keyword">int</span>类型变量(<span class="number">1</span>-<span class="number">7</span>)代表星期几,使用<span class="keyword">switch</span>语句进行判断,并打印出该整数对应的星期.</span><br><span class="line"></span><br><span class="line">* b: 代码实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> week = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入的数字不正确..."</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03switch语句接受的数据类型"><a href="#03switch语句接受的数据类型" class="headerlink" title="03switch语句接受的数据类型"></a>03switch语句接受的数据类型</h3><pre><code>* A: switch语句接受的数据类型    * a:注意事项        switch语句中的表达式的数据类型,是有要求的        JDK1.0 - 1.4  数据类型接受 byte short int char        JDK1.5   数据类型接受 byte short int char enum(枚举)        JDK1.7   数据类型接受 byte short int char enum(枚举), String    </code></pre><h3 id="04case穿透"><a href="#04case穿透" class="headerlink" title="04case穿透"></a>04case穿透</h3><pre><code>* A:case穿透</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* a: 在使用<span class="keyword">switch</span>语句的过程中，如果多个<span class="keyword">case</span>条件后面的执行语句是一样的，则该执行语句只需书写一次即可，这是一种简写的方式。</span><br><span class="line">* b: 例如，要判断一周中的某一天是否为工作日，同样使用数字<span class="number">1</span>~<span class="number">7</span>来表示星期一到星期天，当输入的数字为<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>时就视为工作日，否则就视为休息日。</span><br><span class="line">* 注意：<span class="keyword">case</span> 语句后面 没有<span class="keyword">break</span> 就会一直穿透下去。</span><br></pre></td></tr></table></figure><h3 id="05数组的概述"><a href="#05数组的概述" class="headerlink" title="05数组的概述"></a>05数组的概述</h3><pre><code>* A: 数组的概述    * a:数组的需求        现在需要统计某公司员工的工资情况，例如计算平均工资、最高工资等。假设该公司有50名员工，用前面所学的知识完成，        那么程序首先需要声明50个变量来分别记住每位员工的工资，这样做会显得很麻烦.     * b:数组的概述         数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。</code></pre><h3 id="06数组的定义"><a href="#06数组的定义" class="headerlink" title="06数组的定义"></a>06数组的定义</h3><pre><code>* A：数组的定义</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* b:格式:</span><br><span class="line"> 数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[元素个数或数组长度];</span><br><span class="line"></span><br><span class="line">* c:举例:</span><br><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">* c:要点说明</span><br><span class="line">  <span class="number">1</span>)数据类型: 数组中存储元素的数据类型</span><br><span class="line"><span class="number">2</span>) [] 表示数组的意思</span><br><span class="line"><span class="number">3</span>) 变量名  自定义标识符  </span><br><span class="line"><span class="number">4</span>) <span class="keyword">new</span>  创建容器关键字</span><br><span class="line"><span class="number">5</span>)数据类型: 数组中存储元素的数据类型</span><br><span class="line"><span class="number">6</span>)[]  表示数组的意思</span><br><span class="line"><span class="number">7</span>)元素个数,就是数组中,可以存储多少个数据 (恒定, 定长)</span><br><span class="line">  </span><br><span class="line">数组是一个容器: 存储到数组中的每个元素,都有自己的自动编号</span><br><span class="line">自动编号,最小值是<span class="number">0</span>, 最大值,长度-<span class="number">1</span></span><br><span class="line">自动编号专业名次, 索引(index), 下标, 角标</span><br><span class="line">访问数组存储的元素,必须依赖于索引, 公式 数组名[索引]</span><br><span class="line"></span><br><span class="line">Java提供一个属性,操作索引的</span><br><span class="line">数组的一个属性,就是数组的长度, 属性的名字 length</span><br><span class="line">使用属性:  数组名.length  数据类型 <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">数组的最小索引是<span class="number">0</span>, 最大索引数组.length-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="07JVM内存划分"><a href="#07JVM内存划分" class="headerlink" title="07JVM内存划分"></a>07JVM内存划分</h3><pre><code>* A：内存划分* JVM对自己的内存划分为5个区域      * a: 寄存器:内存和CUP之间      * b: 本地方法栈: JVM调用了系统中的功能      * c: 方法和数据共享: 运行时期class文件进入的地方      * d: 方法栈:所有的方法运行的时候进入内存      * e: 堆:存储的是容器和对象</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/JVM%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.jpg" alt="&quot;JVM内存划分&quot;"></p><h3 id="08数组的内存"><a href="#08数组的内存" class="headerlink" title="08数组的内存"></a>08数组的内存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* A: 数组的内存</span><br><span class="line">* <span class="keyword">int</span>[] x;            <span class="comment">// 声明一个int[]类型的变量</span></span><br><span class="line">* x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];<span class="comment">// 创建一个长度为100的数组</span></span><br><span class="line">* 接下来，通过两张内存图来详细地说明数组在创建过程中内存的分配情况。</span><br><span class="line">* 第一行代码 <span class="keyword">int</span>[] x; 声明了一个变量x，该变量的类型为<span class="keyword">int</span>[]，即一个<span class="keyword">int</span>类型的数组。变量x会占用一块内存单元，它没有被分配初始值</span><br><span class="line">* 第二行代码 x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>]; 创建了一个数组，将数组的地址赋值给变量x。在程序运行期间可以使用变量x来引用数组，这时内存中的状态会发生变化</span><br><span class="line">* 引用数据类型 存的是变量的地址</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="数组的内存"></p><h3 id="09使用索引访问数组的元素"><a href="#09使用索引访问数组的元素" class="headerlink" title="09使用索引访问数组的元素"></a>09使用索引访问数组的元素</h3><pre><code>* A: 使用索引访问数组的元素    * 组中有100个元素，初始值都为0。数组中的每个元素都有一个索引(也可称为角标)，要想访问数组中的元素可以通过“x[0]、x[1]、……、x[98]、x[99]”的形式。    * 需要注意的是，数组中最小的索引是0，最大的索引是“数组的长度-1”</code></pre><h3 id="10数组的length属性"><a href="#10数组的length属性" class="headerlink" title="10数组的length属性"></a>10数组的length属性</h3><pre><code>* A: lenth属性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* a 在Java中，为了方便我们获得数组的长度，提供了一个length属性，在程序中可以通过“数组名.length”的方式来获得数组的长度，即元素的个数。</span><br><span class="line">* b 求数组的长度</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr; <span class="comment">// 声明变量</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 创建数组对象</span></span><br><span class="line">System.out.println(<span class="string">"arr[0]="</span> + arr[<span class="number">0</span>]); <span class="comment">// 访问数组中的第一个元素</span></span><br><span class="line">System.out.println(<span class="string">"arr[1]="</span> + arr[<span class="number">1</span>]); <span class="comment">// 访问数组中的第二个元素</span></span><br><span class="line">System.out.println(<span class="string">"arr[2]="</span> + arr[<span class="number">2</span>]); <span class="comment">// 访问数组中的第三个元素</span></span><br><span class="line">System.out.println(<span class="string">"数组的长度是："</span> + arr.length); <span class="comment">// 打印数组长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11为数组的元素赋值"><a href="#11为数组的元素赋值" class="headerlink" title="11为数组的元素赋值"></a>11为数组的元素赋值</h3><pre><code>* A: 为数组的元素赋值    * a: 如果在使用数组时，不想使用这些默认初始值，也可以显式地为这些元素赋值。    *     赋值过的元素已经变为新的数值,没有赋值的元素默认初始化的数值    * b: 案例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>]; <span class="comment">// 定义可以存储4个整数的数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 为第1个元素赋值1</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">// 为第2个元素赋值2</span></span><br><span class="line"><span class="comment">// 下面的代码是打印数组中每个元素的值</span></span><br><span class="line">System.out.println(<span class="string">"arr[0]="</span> + arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[1]="</span> + arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[2]="</span> + arr[<span class="number">2</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[3]="</span> + arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12数组的定义-2"><a href="#12数组的定义-2" class="headerlink" title="12数组的定义_2"></a>12数组的定义_2</h3><pre><code>* A: 定义数组格式2</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* a: 数组初始化</span><br><span class="line">动态初始化 : 在定义数组时只指定数组的长度，由系统自动为元素赋初值的方式称作动态初始化。</span><br><span class="line"><span class="number">1</span>、类型[] 数组名 = <span class="keyword">new</span> 类型[长度];</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">静态初始化: 在初始化数组时还有一种方式叫做静态初始化，就是在定义数组的同时就为数组的每个元素赋值。</span><br><span class="line"><span class="number">2</span>、类型[] 数组名 = <span class="keyword">new</span> 类型[]&#123;元素，元素，……&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组。 例如：</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br><span class="line"><span class="number">3</span>、类型[] 数组名 = &#123;元素，元素，元素，……&#125;; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">* 数组拷贝</span><br><span class="line"><span class="keyword">int</span>[] smallPrimes = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] luckyNumbers = smallPrimes;</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>如果希望将一个数组的所有值拷贝到一个新的数组中去，<br>就要使用 Arrays 类的 copyOf方法：<br></font>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length) ;</span><br><span class="line"><span class="comment">//第 2 个参数是新数组的长度。这个方法通常用来增加数组的大小</span></span><br><span class="line">luckyNumbers = Arrays.copyOf(luckyNumbers, <span class="number">2</span> * luckyNumbers.length);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>如果数组元素是数值型，那么多余的元素将被赋值为 0 ; 如果数组元素是布尔型， 则将赋值<br>为 false。相反， 如果长度小于原始数组的长度，则只拷贝最前面的数据元素。<br></font>    <h3 id="13遍历数组"><a href="#13遍历数组" class="headerlink" title="13遍历数组"></a>13遍历数组</h3><pre><code>* A:遍历数组    * 在操作数组时，经常需要依次访问数组中的每个元素，这种操作称作数组的遍历* B:练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 定义数组</span></span><br><span class="line"><span class="comment">// 使用for循环遍历数组的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]); <span class="comment">// 通过索引访问元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">上述代码中，定义一个长度为<span class="number">5</span>的数组arr，数组的角标为<span class="number">0</span>~<span class="number">4</span>。由于<span class="keyword">for</span>循环中定义的变量i的值在循环过程中为<span class="number">0</span>~<span class="number">4</span>，因此可以作为索引，依次去访问数组中的元素，并将元素的值打印出来</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each 循环 =&gt; 遍历数组</span><br><span class="line"><span class="keyword">for</span> (variable : collection) &#123;statement&#125;</span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element : a)</span><br><span class="line">   System.out.println(element);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>提示：有个更加简单的方式打印数组中的所有值， 即利用 Arrays 类的 toString 方法。 调用 Arrays.toString(a), 返回一个包含数组元素的字符串， 这些元素被放置在括号内， 并用逗号分隔， 例如，“ [2, 3, 5,7，11 ，13]”、 要想打印数组， 可以调用<br>System.out.println(Arrays.toString(a));<br></font><h3 id="14数组中常见的异常"><a href="#14数组中常见的异常" class="headerlink" title="14数组中常见的异常"></a>14数组中常见的异常</h3><pre><code>* A: 数组操作中,常见的两个异常     数组的索引越界异常      空指针异常* B: 练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo_4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//数组的索引越界异常</span></span><br><span class="line"><span class="comment">//int[] arr = &#123;5,2,1&#125;;</span></span><br><span class="line"><span class="comment">//数组中3个元素,索引 0,1,2</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);//java.lang.ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空指针异常</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);</span><br><span class="line">arr2 = <span class="keyword">null</span>; <span class="comment">// arr2 不在保存数组的地址了</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);<span class="comment">//java.lang.NullPointerException</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15数组最值和排序"><a href="#15数组最值和排序" class="headerlink" title="15数组最值和排序"></a>15数组最值和排序</h3><pre><code>* A: 数组获取最值的原理思想    * 定义数组的第一个元素arr[0]为最大值;循环arr数组,判断如果有比arr[0] 大的就交换,直到arr数组遍历完毕,那么arr[0]中就保存了最大的元素* B: 数组排序    * 要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：    int[] a = new int[10000];    Arrays.sort(a)</code></pre><h3 id="16数组获取最值代码实现"><a href="#16数组获取最值代码实现" class="headerlink" title="16数组获取最值代码实现"></a>16数组获取最值代码实现</h3><pre><code>* A: 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo05</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span> &#125;; <span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>]; <span class="comment">// 定义变量max用于记住最大数，首先假设第一个元素为最大值</span></span><br><span class="line"><span class="comment">// 下面通过一个for循环遍历数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x] &gt; max) &#123; <span class="comment">// 比较 arr[x]的值是否大于max</span></span><br><span class="line">max = arr[x]; <span class="comment">// 条件成立，将arr[x]的值赋给max</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"max="</span> + max); <span class="comment">// 打印最大值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17二维数组的定义"><a href="#17二维数组的定义" class="headerlink" title="17二维数组的定义"></a>17二维数组的定义</h3><pre><code>* A 二维数组的作用    * 要统计一个学校各个班级学生的考试成绩，又该如何实现呢？    * 这时就需要用到多维数组，多维数组可以简单地理解为在数组中嵌套数组。* B 定义格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a 第一种定义格式:</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">*  上面的代码相当于定义了一个<span class="number">3</span>*<span class="number">4</span>的二维数组，即二维数组的长度为<span class="number">3</span>，二维数组中的每个元素又是一个长度为<span class="number">4</span>的数组</span><br><span class="line">* b 第二种定义格式</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">*  第二种方式和第一种类似，只是数组中每个元素的长度不确定</span><br><span class="line">* c 第三种定义格式</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">*  二维数组中定义了三个元素，这三个元素都是数组，分别为&#123;<span class="number">1</span>,<span class="number">2</span>&#125;、&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;、&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="18二维数组元素的访问"><a href="#18二维数组元素的访问" class="headerlink" title="18二维数组元素的访问"></a>18二维数组元素的访问</h3><pre><code>* A: 二维数组的访问* 案例:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二维数组的方式</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">System.out.println( arr );</span><br><span class="line">System.out.println(<span class="string">"二维数组的长度: "</span> + arr.length);</span><br><span class="line"><span class="comment">//获取二维数组的3个元素</span></span><br><span class="line">System.out.println( arr[<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第一个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">1</span>] );<span class="comment">//访问的为二维数组中第1个一维数组的第2个元素</span></span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">3</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第二个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">3</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第三个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">3</span>] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19二维数组内存图"><a href="#19二维数组内存图" class="headerlink" title="19二维数组内存图"></a>19二维数组内存图</h3><pre><code>* A: 二维数组内存图* 举例:int[][] arr = new int[3][2];* 外层数组长在内存开辟连续的3个大的内存空间,每一个内存空间都对应的有地址值* 每一个大内存空间里又开辟连续的两个小的内存空间.</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="数组的内存"></p><h3 id="20二维数组的定义和访问"><a href="#20二维数组的定义和访问" class="headerlink" title="20二维数组的定义和访问"></a>20二维数组的定义和访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* A: 二维数组的定义和访问</span><br><span class="line"> * 格式<span class="number">1</span>: </span><br><span class="line"> * <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; 不推荐</span><br><span class="line"> * 格式<span class="number">2</span></span><br><span class="line"> *  <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"> *  </span><br><span class="line">* B: 二维数组的访问</span><br><span class="line"> 举例:<span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;  </span><br><span class="line">  想要打印数组中<span class="number">7</span>这个元素需要先找到大的元素索引&#123;<span class="number">5</span>,<span class="number">7</span>&#125; 索引为<span class="number">2</span> ,在找<span class="number">7</span>在&#123;<span class="number">5</span>,<span class="number">7</span>&#125;中的索引<span class="number">2</span></span><br><span class="line">  那么结果为 arr[<span class="number">2</span>][<span class="number">2</span>]  第一个[<span class="number">2</span>]代表大数组中&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;这个元素索引</span><br><span class="line">  第二个[<span class="number">2</span>]代表&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;中<span class="number">7</span>元素的索引</span><br></pre></td></tr></table></figure><h3 id="21二维数组的遍历"><a href="#21二维数组的遍历" class="headerlink" title="21二维数组的遍历"></a>21二维数组的遍历</h3><pre><code>* A:二维数组遍历</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"> 先使用<span class="keyword">for</span>循环遍历arr这个二维数组,得到每一个元素为arr[i]为一维数组</span><br><span class="line"> 再外层<span class="keyword">for</span>循环中嵌套一个<span class="keyword">for</span>循环遍历每一个一维数组arr[i],得到每一元素</span><br><span class="line"></span><br><span class="line"> *B:举例:遍历二维数组</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayArrayDemo_2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外循环,遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ;i++)&#123;</span><br><span class="line"><span class="comment">//内循环,遍历每个一维数组 arr[0] arr[1] arr[i]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* C:二维数组累加求和</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo09</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[][] arr2 = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr2.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr2[i].length; j++) &#123;</span><br><span class="line">                 <span class="comment">//System.out.println(arr2[i][j])</span></span><br><span class="line">sum2 += arr2[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sum2= "</span>+ sum2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>for each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维数组处理的要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：<br></font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> [] row : a)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> value : row)</span><br><span class="line"><span class="comment">//do something with value</span></span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>提示： 要想快速地打印一个二维数组的数据元素列表， 可以调用：<br>System.out.println(Arrays.deepToString(a)) ;<br>输出格式为：<br>[[16, B, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]<br></font><h3 id="22二维数组的求和练习"><a href="#22二维数组的求和练习" class="headerlink" title="22二维数组的求和练习"></a>22二维数组的求和练习</h3><pre><code>* A 例如要统计一个公司三个销售小组中每个小组的总销售额以及整个公司的销售额。如下所示   * 第一小组销售额为{11, 12}万元   * 第二小组销售额为{21, 22, 23}万元   * 第三小组销售额为{31, 32, 33, 34}万元。 * B 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo10</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; <span class="comment">// 定义一个长度为3的二维数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">12</span> &#125;; <span class="comment">// 为数组的元素赋值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span> &#125;;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 定义变量记录总销售额</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 遍历数组元素</span></span><br><span class="line"><span class="keyword">int</span> groupSum = <span class="number">0</span>; <span class="comment">// 定义变量记录小组销售总额</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123; <span class="comment">// 遍历小组内每个人的销售额</span></span><br><span class="line">groupSum = groupSum + arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">sum = sum + groupSum; <span class="comment">// 累加小组销售额</span></span><br><span class="line">System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"小组销售额为："</span> + groupSum + <span class="string">" 万元"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总销售额为: "</span> + sum + <span class="string">" 万元"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23随机点名器案例分析"><a href="#23随机点名器案例分析" class="headerlink" title="23随机点名器案例分析"></a>23随机点名器案例分析</h3><pre><code>* A 随机点名器案例分析* B: 需求    * 随机点名器，即在全班同学中随机的打印出一名同学名字。* C:分析:    * 1)定义数组存数全班同学    * 2)生成随机数范围0 到 数组长度-1    * 3)根据这个索引找到数组中的同学名称</code></pre><h3 id="24随机点名器代码实现"><a href="#24随机点名器代码实现" class="headerlink" title="24随机点名器代码实现"></a>24随机点名器代码实现</h3><pre><code>* A: 分析       随机点名器:    1  存储姓名    2. 预览所有人的姓名    3. 随机出一个人的姓名* B 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//存储姓名,姓名存储到数组中</span></span><br><span class="line"><span class="comment">//数组存储姓名,姓名的数据类型,String</span></span><br><span class="line">String[] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"李蕾"</span>,<span class="string">"韩梅梅"</span>,<span class="string">"小名"</span>,<span class="string">"老王"</span>,<span class="string">"小华"</span>,<span class="string">"约翰逊"</span>,<span class="string">"爱丽丝"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预览: 遍历数组,打印所有姓名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ; i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"============="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机出一个人的名</span></span><br><span class="line"><span class="comment">//利用随机数,生成一个整数,作为索引,到数组中找到对应的元素</span></span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//随机数,范围必须是0-数组的最大索引</span></span><br><span class="line"><span class="keyword">int</span> index = ran.nextInt(names.length);<span class="comment">//index 就是随机数,作为索引</span></span><br><span class="line">System.out.println(names[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25随机点名器代码实现-2"><a href="#25随机点名器代码实现-2" class="headerlink" title="25随机点名器代码实现_2"></a>25随机点名器代码实现_2</h3><pre><code>* A 代码优化:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String[] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"李蕾"</span>,<span class="string">"韩梅梅"</span>,<span class="string">"小名"</span>,<span class="string">"老王"</span>,<span class="string">"小华"</span>,<span class="string">"约翰逊"</span>,<span class="string">"爱丽丝"</span>&#125;;</span><br><span class="line">System.out.println(names[<span class="keyword">new</span> Random().nextInt(names.length)]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280255/samples/java%20files/photo-1537967371577-a17d31d7035f.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、流程控制语句switch&lt;br&gt;2、数组&lt;br&gt;3、随机点名器案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础3(引用类型，if，while)</title>
    <link href="https://leesen998.github.io/2016/10/04/day03%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day03笔记/</id>
    <published>2016-10-04T02:41:53.000Z</published>
    <updated>2018-11-15T03:29:45.354Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1539609413529-1166774c3954.jpg" alt="" style="width:100%"></p><p>1、引用类型变量的创建及使用<br>2、流程控制语句之选择语句<br>3、流程控制语句之循环语句<br>4、循环高级<br><a id="more"></a></p><h3 id="01创建引用类型变量公式"><a href="#01创建引用类型变量公式" class="headerlink" title="01创建引用类型变量公式"></a>01创建引用类型变量公式</h3><ul><li>A: 创建引用类型变量公式</li><li>a: 我们要学的Scanner类是属于引用数据类型，我们先了解下引用数据类型。</li><li><p>b: 引用数据类型的定义格式</p><ul><li>与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式。</li><li><font color="#D66" size="">数据类型  变量名  =  new 数据类型();</font></li></ul></li><li><p>c: 引用数据类型的使用</p><ul><li>每种引用数据类型都有其功能，我们可以调用该类型实例的功能。</li><li><font color="#D66" size="">变量名.方法名();</font></li></ul></li></ul><h3 id="02Scanner类的使用"><a href="#02Scanner类的使用" class="headerlink" title="02Scanner类的使用"></a>02Scanner类的使用</h3><pre><code>* A: Scanner类的使用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* a: 导包<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">* b：创建键盘录入对象 Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">* c: 读取键盘录入的一个整数</span><br><span class="line">* <span class="keyword">int</span> enterNumber = sc.nextInt();</span><br><span class="line">* d: 读取键盘录入的字符串</span><br><span class="line">* String enterString = sc.next();</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码    import java.util.Scanner;    public class Demo05Scanner{        public static void main(String[] args)         {            Scanner sc = new Scanner(System.in);            int enterNumber = sc.nextInt();            System.out.println(&quot;用户输入的整数为&quot;+enterNumber);            String enterString = sc.next();            System.out.println(&quot;用户输入的字符串为&quot;+enterString);        }    }</code></pre><h3 id="03Random随机数类的使用-1"><a href="#03Random随机数类的使用-1" class="headerlink" title="03Random随机数类的使用_1"></a>03Random随机数类的使用_1</h3><pre><code>* A: Random随机数类的使用_1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* a: 功能</span><br><span class="line">* 生成随机数需要使用到引用类型随机数Random类</span><br><span class="line">* b: 使用方式</span><br><span class="line">* <span class="keyword">import</span>导包：所属包java.util. Random</span><br><span class="line">* 创建实例格式：Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line">* 调用方法</span><br><span class="line">* nextInt(<span class="keyword">int</span> maxValue)产生[<span class="number">0</span>,maxValue)范围的随机数,包含<span class="number">0</span>不包含maxValue</span><br><span class="line">* nextDouble()  产生[<span class="number">0</span>,<span class="number">1</span>)范围的随机数</span><br><span class="line">如：</span><br><span class="line">Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line"><span class="keyword">int</span>  myNumber = random.nextInt(<span class="number">100</span>);<span class="comment">//结果为0-99的一个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">   <span class="comment">// Random类中的,产生随机数的功能</span></span><br><span class="line">   <span class="keyword">int</span> i = ran.nextInt(<span class="number">100</span>);</span><br><span class="line">   System.out.println(i);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//问题? 产生随机数,范围 1-100之间</span></span><br><span class="line">   <span class="comment">// nextInt(100) 0-99 + 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04Random随机数类的使用-2"><a href="#04Random随机数类的使用-2" class="headerlink" title="04Random随机数类的使用_2"></a>04Random随机数类的使用_2</h3><pre><code>* A: Random随机数类的使用_2</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* a: 调用方法</span><br><span class="line">* nextDouble()  产生[<span class="number">0</span>,<span class="number">1</span>)范围的随机数</span><br><span class="line">如：</span><br><span class="line">Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line"><span class="keyword">int</span>  myNumber = random.nextDouble();<span class="comment">//结果为0.0-1.0之间的数(包括0.0不包括1.0)</span></span><br></pre></td></tr></table></figure><h3 id="05if语句格式第一种"><a href="#05if语句格式第一种" class="headerlink" title="05if语句格式第一种"></a>05if语句格式第一种</h3><pre><code>* A: if语句格式第一种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 先计算比较表达式的值，看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>。</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体；</span><br><span class="line">* 如果是<span class="keyword">false</span>，就不执行语句体；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">5</span> ;</span><br><span class="line">  <span class="comment">//对变量i进行if判断</span></span><br><span class="line">  <span class="keyword">if</span>(i &gt; <span class="number">5</span>)&#123;</span><br><span class="line">  System.out.println(<span class="string">"if中的条件是true"</span>);</span><br><span class="line">  i++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06if语句格式第二种"><a href="#06if语句格式第二种" class="headerlink" title="06if语句格式第二种"></a>06if语句格式第二种</h3><pre><code>* A: if语句格式第二种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 首先计算比较表达式的值，看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>。</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">1</span>；</span><br><span class="line">* 如果是<span class="keyword">false</span>，就执行语句体<span class="number">2</span>；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">16</span> ;</span><br><span class="line"> <span class="comment">//判断变量,是奇偶数, 除以2,看余数是0还是1</span></span><br><span class="line"> <span class="keyword">if</span>( i % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line"> System.out.println(i+<span class="string">" 是偶数"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> System.out.println(i+<span class="string">" 是奇数"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07if语句格式第三种"><a href="#07if语句格式第三种" class="headerlink" title="07if语句格式第三种"></a>07if语句格式第三种</h3><pre><code>* A: if语句格式第三种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">3</span>) &#123;</span><br><span class="line">语句体<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 首先计算比较表达式<span class="number">1</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">1</span>，<span class="keyword">if</span>语句结束。</span><br><span class="line">* 如果是<span class="keyword">false</span>，接着计算比较表达式<span class="number">2</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line"></span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">2</span>，<span class="keyword">if</span>语句结束。</span><br><span class="line">* 如果是<span class="keyword">false</span>，接着计算比较表达式<span class="number">3</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line"></span><br><span class="line">* 如果都是<span class="keyword">false</span>，就执行语句体n+<span class="number">1</span>。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseIfDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//成绩判断要求 ,成绩&gt;80  成绩&gt;70  成绩&gt;60  不及格</span></span><br><span class="line"><span class="comment">//定义变量,保存成绩</span></span><br><span class="line"><span class="keyword">int</span> grade = <span class="number">75</span>;</span><br><span class="line"><span class="comment">//使用if else if 语句对成绩判断</span></span><br><span class="line"><span class="keyword">if</span>( grade &gt; <span class="number">80</span> )&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是优"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">70</span>)&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是良"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">60</span>)&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是中"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是差"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08if语句和三元运算符的互换"><a href="#08if语句和三元运算符的互换" class="headerlink" title="08if语句和三元运算符的互换"></a>08if语句和三元运算符的互换</h3><pre><code>* A: 三元运算符</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 概念</span><br><span class="line">* 用来完成简单的选择逻辑，即根据条件判断，从两个选择中选择一种执行</span><br><span class="line">* b: 使用格式</span><br><span class="line">* (条件表达式)？表达式<span class="number">1</span>：表达式<span class="number">2</span>；</span><br><span class="line">* c: 运算规则</span><br><span class="line">* <span class="number">1</span>: 判断条件表达式，结果为一个布尔值</span><br><span class="line">* <span class="number">2</span>: <span class="keyword">true</span>，运算结果为表达式<span class="number">1</span></span><br><span class="line">* <span class="number">3</span>: <span class="keyword">false</span>，运算结果为表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line"><span class="comment">//使用if语句,判断出最大值</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;j)&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">System.out.println(i+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(j+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用三元运算实现</span></span><br><span class="line"><span class="keyword">int</span> k = i&gt;j ? i : j;</span><br><span class="line">System.out.println(k+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">* C: 使用<span class="keyword">if</span>语句还是三元表达式</span><br><span class="line">* 判断条件多,使用<span class="keyword">if</span></span><br><span class="line"> * 三元,必须有结果的, <span class="keyword">if</span> 可以没有结果的</span><br></pre></td></tr></table></figure><h3 id="09while循环"><a href="#09while循环" class="headerlink" title="09while循环"></a>09while循环</h3><pre><code>* A: while循环结构</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line">初始化表达式；</span><br><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br><span class="line">* b: 执行顺序</span><br><span class="line">  当条件是<span class="keyword">true</span>,就执行循环体,执行完循环体后</span><br><span class="line">  程序再次执行<span class="keyword">while</span>中的条件,如果条件还是<span class="keyword">true</span>,继续执行循环体</span><br><span class="line">  直到条件是<span class="keyword">false</span>的时候,循环就结束</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出 1-4之间的整数</span></span><br><span class="line"><span class="comment">//定义变量,整数类型, 循环的条件</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>( i &lt; <span class="number">5</span> )&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10for循环-1"><a href="#10for循环-1" class="headerlink" title="10for循环_1"></a>10for循环_1</h3><pre><code>* A: for循环_1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line"> <span class="keyword">for</span>(初始化变量 ; 条件 ; 增量)&#123;</span><br><span class="line"> 循环体;</span><br><span class="line"> &#125;</span><br><span class="line">* b: 各模块解释</span><br><span class="line">初始化变量: 定义变量,作用是用来控制循环的次数</span><br><span class="line">    条件: 当条件是<span class="keyword">true</span>,执行循环体,条件是<span class="keyword">false</span>,结束循环</span><br><span class="line">    增量: 变量自增情况 </span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//for循环,输出0-10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">11</span> ; i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11for循环-2"><a href="#11for循环-2" class="headerlink" title="11for循环_2"></a>11for循环_2</h3><pre><code>* A: for循环的执行流程    for（①1 ; ②2 ; ③3）{        ④4    }    第一步，执行①1    第二步，执行②2，如果判断结果为true，执行第三步，如果判断结果为false，执行第五步    第三步，执行④4    第四步，执行③3，然后重复执行第二步    第五步，退出循环</code></pre><h3 id="12for循环-3"><a href="#12for循环-3" class="headerlink" title="12for循环_3"></a>12for循环_3</h3><pre><code>* A: 案例    * a: 利用for循环,计算1+4的结果* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义变量,记录求和后的数据</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 利用循环,将变量从1变化到4</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">4</span> ; i++)&#123;</span><br><span class="line"><span class="comment">//对变量进行求和</span></span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13do-while循环"><a href="#13do-while循环" class="headerlink" title="13do_while循环"></a>13do_while循环</h3><pre><code>* A: do_while循环</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   循环体;</span><br><span class="line">    &#125;<span class="keyword">while</span>(条件);</span><br><span class="line">* b: 执行顺序</span><br><span class="line">先执行一次循环体，然后再判断条件，如果条件为<span class="keyword">true</span>，继续执行循环体，</span><br><span class="line">如果条件为<span class="keyword">false</span>，循环结束。</span><br><span class="line">* c: 特点</span><br><span class="line">* 无条件先执行一次</span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>( i &lt;  <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14死循环"><a href="#14死循环" class="headerlink" title="14死循环"></a>14死循环</h3><pre><code>* A: 死循环概述    * 无限循环存在的原因是并不知道循环多少次，而是根据某些条件，来控制循环* B: 死循环格式    * while(true){}    * for(;;){}</code></pre><h3 id="15嵌套for循环-1"><a href="#15嵌套for循环-1" class="headerlink" title="15嵌套for循环_1"></a>15嵌套for循环_1</h3><pre><code>* A: 嵌套循环的概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 嵌套循环是指在一个循环语句的循环体中再定义一个循环语句的语法结构。</span><br><span class="line">* <span class="keyword">while</span>、<span class="keyword">do</span>…<span class="keyword">while</span>、<span class="keyword">for</span>循环语句都可以进行嵌套，并且它们之间也可以互相嵌套，</span><br><span class="line">* 如最常见的在<span class="keyword">for</span>循环中嵌套<span class="keyword">for</span>循环。</span><br></pre></td></tr></table></figure><pre><code>* B: 嵌套循环的格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 循环条件; 操作表达式) &#123;</span><br><span class="line">………</span><br><span class="line"><span class="keyword">for</span>(初始化表达式; 循环条件; 操作表达式) &#123;</span><br><span class="line">执行语句</span><br><span class="line">………</span><br><span class="line">&#125;</span><br><span class="line">………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* C: 各模块解释</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 总的循环次数 =  内循环次数 * 外循环的次数</span><br><span class="line">* 内循环,是外循环的循环体</span><br><span class="line">   </span><br><span class="line">* 外循环,控制的是行数</span><br><span class="line">* 内循环,控制的是每行的个数</span><br></pre></td></tr></table></figure><h3 id="16嵌套for循环-2"><a href="#16嵌套for循环-2" class="headerlink" title="16嵌套for循环_2"></a>16嵌套for循环_2</h3><pre><code>* A: 案例    * a: 打印正三角形* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span> ;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17break语句"><a href="#17break语句" class="headerlink" title="17break语句"></a>17break语句</h3><pre><code>* A: break语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 跳出所在的循环体</span><br><span class="line">* b: 书写位置</span><br><span class="line">* 必须出现在循环或选择结构内</span><br><span class="line">* c: 举例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(“我爱Java”+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会从0-5输出6次“我爱Java”</span></span><br></pre></td></tr></table></figure><pre><code>* B: break详细解释</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 在loop/<span class="keyword">switch</span>选择或者循环过程中，我们总是满足布尔表达条件才能执行对应的代码，然而在这些逻辑过程中，</span><br><span class="line">可以使用一些关键字直接跳出正在执行的代码，去执行后边或者指定位置的代码，</span><br><span class="line">这些关键字一旦出现就可以跳转语句执行顺序。</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 无法单独使用，必须将<span class="keyword">break</span>关键字置于<span class="keyword">switch</span>或循环语句中</span><br><span class="line">* c: 运行规律</span><br><span class="line">* 不需要判断任何条件，只要遇到<span class="keyword">break</span>变直接跳出执行后续代码。会完全跳出选择或者循环结构</span><br><span class="line">* 只能跳出最近的代码块，不能跨越多级代码块</span><br></pre></td></tr></table></figure><pre><code>* C：循环标号</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 为什么使用循环标号</span><br><span class="line">* 当在双层循环或者循环内有<span class="keyword">switch</span>选择语句时，我们发现，使用<span class="keyword">break</span>或者<span class="keyword">continue</span>所作用的对象均是内层语句，无法直接跳出外层循环，这时就需要使用标号语句跳转了.</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 在外层循环外的某行前边，使用后边跟有冒号”:”的标识符，即定义完毕。</span><br><span class="line">  使用时当在内层循环使用<span class="keyword">break</span>或<span class="keyword">continue</span>时后边紧跟之前定义的标号即可</span><br><span class="line">* c: 运行规律</span><br><span class="line">* 当外层循环外定义了标号</span><br><span class="line">* 内层使用<span class="keyword">break</span>，终止内外双层循环。</span><br><span class="line">* 内层使用<span class="keyword">continue</span>，终止内层循环，继续外层循环。</span><br></pre></td></tr></table></figure><h3 id="18continue语句"><a href="#18continue语句" class="headerlink" title="18continue语句"></a>18continue语句</h3><pre><code>* A: continue语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 提前结束本次循环，继续进行下次循环</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 无法单独使用，必须将<span class="keyword">continue</span>关键字置于循环语句中</span><br><span class="line">* c：运行规律</span><br><span class="line">* 不需要判断任何条件，只要遇到<span class="keyword">continue</span>变直接跳出本轮循环进行下次循环</span><br><span class="line">* d：案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会把0-9之间所有的奇数打印到控制台上</span></span><br></pre></td></tr></table></figure><h3 id="19猜数字小游戏"><a href="#19猜数字小游戏" class="headerlink" title="19猜数字小游戏"></a>19猜数字小游戏</h3><pre><code>* A: 猜数字小游戏            * a: 分析        * 用户给的数可能大于、小于、或等于被猜的数，这样就会出现三种情况，用前面讲的三元运算符可以实现，            但是得用三元运算符的嵌套，比较麻烦！可以用更简单的方式if条件判断，可以有三个以上的条件    * b: 需求分析        * 后台预先生成一个随机数1-100，用户键盘录入猜数字        * 如果猜对了，打印“恭喜您，答对了”        * 如果猜错了        * 猜大了：打印“sorry，您猜大了!”        * 猜小了：打印“sorry，您猜小了!”                直到数字猜到为止                最多只能猜5次，否则提示“sorry，您没有机会了!”* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">猜数字小游戏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">完成猜数字小游戏：</span></span><br><span class="line"><span class="comment">1、产生随机数</span></span><br><span class="line"><span class="comment">后台预先生成一个随机数1-100，用户键盘录入猜数字</span></span><br><span class="line"><span class="comment">2、通过if语句对用户猜的数与随机数进行比较</span></span><br><span class="line"><span class="comment">如果猜对了，打印“恭喜您，答对了”</span></span><br><span class="line"><span class="comment">如果猜错了</span></span><br><span class="line"><span class="comment">猜大了：打印“sorry，您猜大了!”</span></span><br><span class="line"><span class="comment">猜小了：打印“sorry，您猜小了!”</span></span><br><span class="line"><span class="comment">3、通过for循环完成用户猜数的循环</span></span><br><span class="line"><span class="comment">直到数字猜到为止</span></span><br><span class="line"><span class="comment">最多只能猜5次，否则提示“sorry，您没有机会了!”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//通过*的方式可以一次导入该包下所有的类，但是不建议使用。建议使用哪个导哪个。</span></span><br><span class="line"><span class="comment">//import java.util.*;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessNumber</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、产生随机数</span></span><br><span class="line"><span class="comment">//后台预先生成一个随机数1-100，用户键盘录入猜数字</span></span><br><span class="line"><span class="comment">//创建随机数对象</span></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//产生一个1-100的随机数</span></span><br><span class="line"><span class="keyword">int</span> randomNumber = random.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//System.out.println("我产生的随机数是："+randomNumber+"你猜猜是多少？");  作弊专用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//产生控制台录入的Scanner对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//3、通过for循环完成用户猜数的循环</span></span><br><span class="line"><span class="comment">//通过for循环完成猜数字逻辑</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="comment">//提示用户输入要猜的数，用变量接收</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"请您输入一个1-100的数："</span>);</span><br><span class="line"><span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过if语句对用户猜的数与随机数进行比较</span></span><br><span class="line"><span class="comment">//如果猜对了</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber==randomNumber) &#123;</span><br><span class="line"><span class="comment">//打印猜对后的提示</span></span><br><span class="line">System.out.println(<span class="string">"恭喜您，猜对了！"</span>);</span><br><span class="line"><span class="comment">//跳出循环，不用再猜了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果猜错了</span></span><br><span class="line"><span class="comment">//如果猜大了</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber&gt;randomNumber) &#123;</span><br><span class="line">System.out.println(<span class="string">"sorry，您猜大了!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果猜小了</span></span><br><span class="line">System.out.println(<span class="string">"sorry，您猜小了!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果猜到了最后的第5次仍然没有猜对就跳出循环</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"对不起，点太背，下次再来吧！"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次猜错后，都提示还有多少次机会</span></span><br><span class="line">System.out.println(<span class="string">"请注意，您还有"</span>+(<span class="number">5</span>-i)+<span class="string">"次机会，请慎重作答！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1539609413529-1166774c3954.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、引用类型变量的创建及使用&lt;br&gt;2、流程控制语句之选择语句&lt;br&gt;3、流程控制语句之循环语句&lt;br&gt;4、循环高级&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AS环境配置踩坑经历</title>
    <link href="https://leesen998.github.io/2016/10/03/AS%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <id>https://leesen998.github.io/2016/10/03/AS环境配置踩坑经历/</id>
    <published>2016-10-03T02:41:53.000Z</published>
    <updated>2018-10-23T07:41:31.702Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1538150096488-cda7e455f3ee.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a><font color="#551A8B" size="">遇到的bug</font></h2><pre><code>Unable to resolve dependency for &apos;:app@debug/compileClasspath&apos;</code></pre><p>这是由于配置文件的依赖是通过Google下载的，然而该下载被墙了！<br>[解决办法]：</p><h3 id="在整个工程的build-gradle中添加以下框内代码："><a href="#在整个工程的build-gradle中添加以下框内代码：" class="headerlink" title="在整个工程的build.gradle中添加以下框内代码："></a>在整个工程的build.gradle中添加以下框内代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">        url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span></span><br><span class="line">        &#125;</span><br><span class="line">maven &#123; url <span class="string">'http://repo1.maven.org/maven2'</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="app下的build-gradle配置如下"><a href="#app下的build-gradle配置如下" class="headerlink" title="app下的build.gradle配置如下:"></a>app下的build.gradle配置如下:</h3><p>buildToolsVersion 需要和你的sdk安装目录 ~\sdk\build-tools文件里面已有的版本对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26</span><br><span class="line">    buildToolsVersion <span class="string">'27.0.3'</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.administrator.myapplication"</span></span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 22</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>implementation ‘com.android.support:appcompat-v7:26.+’ 中v7:26.+表示使用的sdk版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:26.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:0.4'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="若配置后还没解决问题，依然报错"><a href="#若配置后还没解决问题，依然报错" class="headerlink" title="若配置后还没解决问题，依然报错"></a>若配置后还没解决问题，依然报错</h3><p><font color="#FF00FF" size="">打开 C:/Users/(用户名)/.gradle/gradle.properties</font><br>把http代理的配置注释掉，例如：</p><pre><code>## For more details on how to configure your build environment visit# http://www.gradle.org/docs/current/userguide/build_environment.html## Specifies the JVM arguments used for the daemon process.# The setting is particularly useful for tweaking memory settings.# Default value: -Xmx1024m -XX:MaxPermSize=256m# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8## When configured, Gradle will run in incubating parallel mode.# This option should only be used with decoupled projects. More details, visit# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects# org.gradle.parallel=true#Sat Sep 29 23:37:12 CST 2018#systemProp.http.proxyHost=mirrors.neusoft.edu.cn#systemProp.https.proxyPort=80#systemProp.https.proxyHost=mirrors.neusoft.edu.cn#systemProp.http.proxyPort=80</code></pre><p>More info: <a href="https://blog.csdn.net/magicbaby810/article/details/79848425" target="_blank" rel="noopener">参考该问题的csdn博客</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1538150096488-cda7e455f3ee.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装" scheme="https://leesen998.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="AS" scheme="https://leesen998.github.io/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础1(变量，运算符)</title>
    <link href="https://leesen998.github.io/2016/10/02/java%E5%85%A5%E9%97%A8/"/>
    <id>https://leesen998.github.io/2016/10/02/java入门/</id>
    <published>2016-10-02T03:59:18.000Z</published>
    <updated>2018-11-15T03:32:26.916Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg" alt="" style="width:100%"></p><p>1、变量<br>2、运算符<br><a id="more"></a></p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a><font color="#551A8B" size="">第一个Java程序</font></h2><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a><font color="#00CD66" size="">Java代码</font></h3><p>Java程序是大小写敏感的 对格式没有严格要求，但用空格或Tab键缩进会比较好看</p><h3 id="Hello-java"><a href="#Hello-java" class="headerlink" title="Hello.java"></a><font color="#D66" size="">Hello.java</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名必须是Hello.java，文件名也要注意大小写，必须与程序的类名完全一致，扩展名是.java。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><font color="#DD66" size="">编译</font></h3><p>切换到Hello.java所在目录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure></p><p>无任何输出表示成功，可查看编译出的Hello.class文件。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a><font color="#3D66" size="">执行</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Hello</span><br></pre></td></tr></table></figure><p>代码格式：public 和 static 是修饰符static表示静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数) &#123;</span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line">你的程序代码;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class定义结束</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font color="#551A8B" size="">变量</font></h2><h3 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h3><p>A: 什么是变量?<br>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 变量是一个内存中的小盒子（小容器），容器是什么？生活中也有很多容器，例如水杯是容器，用来装载水；你家里的大衣柜是容器，用来装载衣裤；饭盒是容器，用来装载饭菜。那么变量是装载什么的呢？</span><br><span class="line">答案是数据！结论：变量是内存中装载数据的小盒子，你只能用它来存数据和取数据。</span><br></pre></td></tr></table></figure></p><h3 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h3><p>A: 计算机中储存和运算的最小单位是?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a: 一个字节,也就是一个<span class="keyword">byte</span>.</span><br><span class="line"> win+r--cmd--回车</span><br><span class="line">b: 常用储存单位</span><br><span class="line">*<span class="number">1</span>B（字节） = <span class="number">8</span>bit</span><br><span class="line">*<span class="number">1</span>KB = <span class="number">1024</span>B</span><br><span class="line">*<span class="number">1</span>MB = <span class="number">1024</span>KB</span><br><span class="line">*<span class="number">1</span>GB = <span class="number">1024</span>MB</span><br><span class="line">*<span class="number">1</span>TB = <span class="number">1024</span>GB</span><br><span class="line">*<span class="number">1</span>PB = <span class="number">1024</span>TB</span><br></pre></td></tr></table></figure></p><h3 id="Java中数据类型四类八种"><a href="#Java中数据类型四类八种" class="headerlink" title="Java中数据类型四类八种"></a>Java中数据类型四类八种</h3><p> A: 数据类型四类八种<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*四类八种字节数数据表示范围</span><br><span class="line">*整型<span class="keyword">byte</span><span class="number">1</span>-<span class="number">128</span>～<span class="number">127</span></span><br><span class="line"><span class="keyword">short</span><span class="number">2</span>-<span class="number">32768</span>～<span class="number">32767</span></span><br><span class="line"><span class="keyword">int</span><span class="number">4</span>-<span class="number">2147483648</span>～<span class="number">2147483648</span></span><br><span class="line"><span class="keyword">long</span><span class="number">8</span>-<span class="number">263</span>～<span class="number">263</span>-<span class="number">1</span></span><br><span class="line">*浮点型<span class="keyword">float</span><span class="number">4</span>-<span class="number">3.403E38</span>～<span class="number">3.403E38</span></span><br><span class="line"><span class="keyword">double</span><span class="number">8</span>-<span class="number">1.798E308</span>～<span class="number">1.798E308</span></span><br><span class="line">*字符型<span class="keyword">char</span><span class="number">2</span>表示一个字符，如(<span class="string">'a'</span>，<span class="string">'A'</span>，<span class="string">'0'</span>，<span class="string">'家'</span>)</span><br><span class="line">*布尔型<span class="keyword">boolean</span><span class="number">1</span>只有两个值<span class="keyword">true</span>与<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p><h3 id="常量和数据类型"><a href="#常量和数据类型" class="headerlink" title="常量和数据类型"></a>常量和数据类型</h3><p> A:常量的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: 整形常量默认是int类型</span><br><span class="line">* b: 小数常量默认是double类型</span><br><span class="line">* c: 定义长整形数据如果值超过int取值范围后面要+<span class="string">"L"</span></span><br><span class="line">* d: 定义<span class="built_in">float</span>类型的数据后面要+<span class="string">"f"</span> 否则默认是double</span><br></pre></td></tr></table></figure></p><h3 id="变量创建的三要素"><a href="#变量创建的三要素" class="headerlink" title="变量创建的三要素"></a>变量创建的三要素</h3><p>A: 定义变量的语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">数据类型  变量名  =  变量值;</span><br><span class="line">* <span class="keyword">int</span>         a    =  <span class="number">100</span>;</span><br><span class="line">      * B:代码:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'z'</span>;</span><br><span class="line">String s = <span class="string">"i love java"</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义所有的基本数据类型变量"><a href="#定义所有的基本数据类型变量" class="headerlink" title="定义所有的基本数据类型变量"></a>定义所有的基本数据类型变量</h3><ul><li><p>A: 案例演示</p><ul><li>a: 八种基本类型数据的创建</li></ul></li></ul><h3 id="定义字符串变量"><a href="#定义字符串变量" class="headerlink" title="定义字符串变量"></a>定义字符串变量</h3><ul><li>A：案例演示<ul><li>创建字符串数据类型变量</li><li>String 是引用数据类型<h3 id="变量定义使用注意事项"><a href="#变量定义使用注意事项" class="headerlink" title="变量定义使用注意事项"></a>变量定义使用注意事项</h3></li></ul></li><li>A：变量使用的注意事项<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* a: 变量定义后可以不赋值，使用时再赋值。不赋值不能使用。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">x = <span class="number">20</span>; <span class="comment">//为x赋值20</span></span><br><span class="line">System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* c:变量使用时有作用域的限制。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">System.out.println(y);<span class="comment">//读取y变量中的值失败，失败原因，找不到y变量，因为超出了y变量作用范围，所以不能使用y变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-自动转换"><a href="#数据类型转换-自动转换" class="headerlink" title="数据类型转换_自动转换"></a>数据类型转换_自动转换</h3><ul><li>A:     自动类型转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a:表示范围小的数据类型转换成范围大的数据类型，这种方式称为自动类型转换</span><br><span class="line">自动类型转换格式：</span><br><span class="line">范围大的数据类型 变量 = 范围小的数据类型值；</span><br><span class="line">如：</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1000</span>;</span><br><span class="line">或</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">double</span> d2 = i;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-强制转换"><a href="#数据类型转换-强制转换" class="headerlink" title="数据类型转换_强制转换"></a>数据类型转换_强制转换</h3><ul><li>A: 强制类型转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*a: 表示范围大的数据类型转换成范围小的数据类型，这种方式称为强制类型转换</span><br><span class="line">*b: 强制类型转换格式：</span><br><span class="line">范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">int</span>  i = (<span class="keyword">int</span>)<span class="number">6.718</span>;   <span class="comment">//i的值为6</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">double</span>  d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span>  i2 = (<span class="keyword">int</span>)d;     <span class="comment">//i2的值为3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><font color="#551A8B" size="">运算符</font></h2><h3 id="算数运算符-1"><a href="#算数运算符-1" class="headerlink" title="算数运算符_1"></a>算数运算符_1</h3><ul><li><p>A: 常见操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">+正号+<span class="number">3</span><span class="number">3</span></span><br><span class="line">+加<span class="number">2</span>+<span class="number">3</span><span class="number">5</span></span><br><span class="line">+连接字符串“中”+“国”“中国”</span><br><span class="line">-负号<span class="keyword">int</span> a=<span class="number">3</span>;-a-<span class="number">3</span></span><br><span class="line">-减<span class="number">3</span>-<span class="number">1</span><span class="number">2</span></span><br><span class="line">*乘<span class="number">2</span>*<span class="number">3</span><span class="number">6</span></span><br><span class="line">/除<span class="number">5</span>/<span class="number">2</span><span class="number">2</span></span><br><span class="line">%取模<span class="number">5</span>/<span class="number">2</span><span class="number">1</span></span><br><span class="line">++自增<span class="keyword">int</span> a=<span class="number">1</span>;a++/++a<span class="number">2</span></span><br><span class="line">--自减<span class="keyword">int</span> b=<span class="number">3</span>;a--/--a<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>B: 注意事项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*a:加法运算符在连接字符串时要注意，只有直接与字符串相加才会转成字符串。</span><br><span class="line">*b:除法“/”当两边为整数时，取整数部分，舍余数。当其中一边为浮点型时，按正常规则相除。 </span><br><span class="line">*c:“%”为整除取余符号，小数取余没有意义。结果符号与被取余符号相同。</span><br><span class="line">*d:整数做被除数，<span class="number">0</span>不能做除数，否则报错。</span><br><span class="line">*e:小数做被除数，整除<span class="number">0</span>结果为Infinity，对<span class="number">0</span>取模结果为NaN</span><br></pre></td></tr></table></figure></li><li><p>C:代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 常量使用算数运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(<span class="number">10</span>+<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 变量使用算数运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//"+"作为加法运算使用</span></span><br><span class="line"><span class="keyword">int</span> z = x + y; </span><br><span class="line"><span class="comment">//"+"作为连接字符串使用</span></span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">System.out.println(<span class="string">"z="</span>+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算数运算符-2"><a href="#算数运算符-2" class="headerlink" title="算数运算符_2"></a>算数运算符_2</h3><ul><li>算数运算符++、–<pre><code>* A:算数运算符++、--的使用    * a: ++运算符，会在原有值的基础上自增1    * b: --运算符，会在原有值的基础上自减1。* B:++  -- 位置的使用    * a:++,--运算符后置时，先使用变量a原有值参与运算操作，运算操作完成后，变量a的值自增1或者自减1；    * b:++，--运算符前置时，先将变量a的值自增1或者自减1，然后使用更新后的新值参与运算操作。</code></pre></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>A: 赋值运算符的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符 运算规则范例结果</span><br><span class="line">=赋值<span class="keyword">int</span> a=<span class="number">2</span><span class="number">2</span></span><br><span class="line">+=加后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a+=<span class="number">2</span><span class="number">4</span></span><br><span class="line">-=减后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a-=<span class="number">2</span><span class="number">0</span></span><br><span class="line">*=乘后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a*=<span class="number">2</span><span class="number">4</span></span><br><span class="line">/=整除后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a/=<span class="number">2</span><span class="number">1</span></span><br><span class="line">%=取模后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a%=<span class="number">2</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>B：案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> * 赋值运算符</span><br><span class="line"> * +=, -=, *=, /=, %= ： </span><br><span class="line"> * 上面的运算符作用：将等号左右两边计算，会将结果自动强转成等号左边的数据类型,再赋值给等号左边的</span><br><span class="line"> * 注意：赋值运算符左边必须是变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> x = <span class="number">10</span>;</span><br><span class="line">x += <span class="number">20</span>;<span class="comment">// 相当于 x = (byte)(x+20);</span></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>A:比较运算符的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">==相等于<span class="number">4</span>==<span class="number">3</span>False</span><br><span class="line">!=不等于<span class="number">4</span>!=<span class="number">3</span>True</span><br><span class="line">&lt;小于<span class="number">4</span>&lt;<span class="number">3</span>False</span><br><span class="line">&gt;大于<span class="number">4</span>&gt;<span class="number">3</span>True</span><br><span class="line">&lt;=小于等于<span class="number">4</span>&lt;=<span class="number">3</span>False</span><br><span class="line">&gt;=大于等于        <span class="number">4</span>&gt;=<span class="number">3</span>True</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>A: 逻辑运算符的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">&amp;与<span class="keyword">false</span>&amp;<span class="keyword">true</span>False</span><br><span class="line">|或<span class="keyword">false</span>|<span class="keyword">true</span>True</span><br><span class="line">^异或<span class="keyword">true</span>^flaseTrue</span><br><span class="line">!非!<span class="keyword">true</span>Flase</span><br><span class="line">&amp;&amp;短路与<span class="keyword">false</span>&amp;&amp;<span class="keyword">true</span>False</span><br><span class="line">||短路或<span class="keyword">false</span>||<span class="keyword">true</span>True</span><br><span class="line"></span><br><span class="line">规律小结:</span><br><span class="line">短路与&amp;&amp;:参与运算的两边数据，有<span class="keyword">false</span>，则运算结果为<span class="keyword">false</span>；</span><br><span class="line">短路或||:参与运算的两边数据，有<span class="keyword">true</span>，则运算结果为<span class="keyword">true</span>；</span><br><span class="line">逻辑非! : 参与运算的数据，原先是<span class="keyword">true</span>则变成<span class="keyword">false</span>，原先是<span class="keyword">false</span>则变成<span class="keyword">true</span>。</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>A: 格式:</p><pre><code>(条件表达式)？表达式1：表达式2；</code></pre><p>B: 代码案例</p><pre><code>方式一：System.out.println( 3&gt;2 ? “正确” : “错误” ); // 三元运算符运算后的结果为true，运算结果为表达式1的值“正确”，然后将结果“正确”，在控制台输出打印方式二：int a = 3;int b = 4;String result = (a==b) ? “相等” : “不相等”;  //三元运算符运算后的结果为false，运算结果为表达式2的值“不相等”，然后将结果赋值给了变量result方式三：int n = (3&gt;2 &amp;&amp; 4&gt;6) ? 100 : 200;//三元运算符运算后的结果为false，运算结果为表达式2的值200,然后将结果200赋值给了变量n</code></pre><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">优先级描述运算符</span><br><span class="line"><span class="number">1</span>括号()、[]</span><br><span class="line"><span class="number">2</span>正负号+、-</span><br><span class="line"><span class="number">3</span>自增自减，非++、--、!</span><br><span class="line"><span class="number">4</span>乘除，取余*、/、%</span><br><span class="line"><span class="number">5</span>加减+、-</span><br><span class="line"><span class="number">6</span>移位运算&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</span><br><span class="line"><span class="number">7</span>大小关系&gt;、&gt;=、&lt;、&lt;=</span><br><span class="line"><span class="number">8</span>相等关系==、!=</span><br><span class="line"><span class="number">9</span>按位与&amp;</span><br><span class="line"><span class="number">10</span>按位异或^</span><br><span class="line"><span class="number">11</span>按位或|</span><br><span class="line"><span class="number">12</span>逻辑与&amp;&amp;</span><br><span class="line"><span class="number">13</span>逻辑或||</span><br><span class="line"><span class="number">14</span>条件运算?:</span><br><span class="line"><span class="number">15</span>赋值运算=、+=、-=、*=、/=、%=</span><br><span class="line"><span class="number">16</span>位赋值运算&amp;=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</span><br></pre></td></tr></table></figure><h3 id="商场库存清单案例"><a href="#商场库存清单案例" class="headerlink" title="商场库存清单案例"></a>商场库存清单案例</h3><p>A: 案例分析.</p><ul><li>a:观察清单后，可将清单分解为三个部分（清单顶部、清单中部、清单底部）</li><li>b:清单顶部为固定的数据，直接打印即可</li><li><p>c:清单中部为商品，为变化的数据，需要记录商品信息后，打印<br>经过观察，我们确定一项商品应该有如下几个属性：<br>品牌型号: 即商品名称，String型<br>尺寸：物品大小，double型<br>价格：物品单价，double型<br>配置：这一项为每种商品的配置信息，String型<br>库存数：这一项为每种商品的库存个数，int型</p></li><li><p>d:清单底部包含了统计操作，需经过计算后，打印<br>我们发现两个单独的可变化量<br>总库存数：所有商品总个数，int型<br>库存商品总金额：所有商品金额，double型</p></li></ul><p>B: 案例代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤一:  创建Demo01库存清单.java文件，编写main主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span>库存清单 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤二:  记录每种库存商品信息</span></span><br><span class="line"><span class="comment">//苹果笔记本电脑</span></span><br><span class="line">String macBrand = <span class="string">"MacBookAir"</span>;</span><br><span class="line"><span class="keyword">double</span> macSize = <span class="number">13.3</span>;</span><br><span class="line"><span class="keyword">double</span> macPrice = <span class="number">6988.88</span>;</span><br><span class="line"><span class="keyword">int</span> macCount = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联想Thinkpad笔记本电脑</span></span><br><span class="line">String thinkpadBrand = <span class="string">"ThinkpadT450"</span>;</span><br><span class="line"><span class="keyword">double</span> thinkpadSize = <span class="number">14.0</span>;</span><br><span class="line"><span class="keyword">double</span> thinkpadPrice = <span class="number">5999.99</span>;</span><br><span class="line"><span class="keyword">int</span> thinkpadCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//华硕ASUS笔记本电脑</span></span><br><span class="line">String ASUSBrand = <span class="string">"ASUS-FL5800"</span>;</span><br><span class="line"><span class="keyword">double</span> ASUSSize = <span class="number">15.6</span>;</span><br><span class="line"><span class="keyword">double</span> ASUSPrice = <span class="number">4999.50</span>;</span><br><span class="line"><span class="keyword">int</span> ASUSCount = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤三: 统计库存总个数、库存总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = macCount + thinkpadCount + ASUSCount;</span><br><span class="line"><span class="keyword">double</span> totalMoney = (macCount * macPrice) + (thinkpadCount * thinkpadPrice) + (ASUSCount * ASUSPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤四: 列表顶部</span></span><br><span class="line">System.out.println(<span class="string">"------------------------------商城库存清单-----------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号尺寸价格库存数"</span>);</span><br><span class="line"></span><br><span class="line">步骤四:打印库存清单中部信息</span><br><span class="line"><span class="comment">//列表中部</span></span><br><span class="line">System.out.println(macBrand+<span class="string">""</span>+macSize+<span class="string">""</span>+macPrice+<span class="string">""</span>+macCount);</span><br><span class="line">System.out.println(thinkpadBrand+<span class="string">""</span>+thinkpadSize+<span class="string">""</span>+thinkpadPrice+<span class="string">""</span>+thinkpadCount);</span><br><span class="line">System.out.println(ASUSBrand+<span class="string">""</span>+ASUSSize+<span class="string">""</span>+ASUSPrice+<span class="string">""</span>ASUSCount);</span><br><span class="line">打印库存清单底部信息</span><br><span class="line"><span class="comment">//列表底部</span></span><br><span class="line">System.out.println(<span class="string">"-----------------------------------------------------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"总库存数："</span>+totalCount); </span><br><span class="line">System.out.println(<span class="string">"库存商品总金额："</span>+totalMoney);</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、变量&lt;br&gt;2、运算符&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
</feed>
