<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QJun</title>
  
  <subtitle>QJun&#39;s Homepage</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leesen998.github.io/"/>
  <updated>2018-10-21T02:29:04.739Z</updated>
  <id>https://leesen998.github.io/</id>
  
  <author>
    <name>QJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello</title>
    <link href="https://leesen998.github.io/2017/10/03/hello-world/"/>
    <id>https://leesen998.github.io/2017/10/03/hello-world/</id>
    <published>2017-10-03T02:41:53.000Z</published>
    <updated>2018-10-21T02:29:04.739Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1700x900" alt="" style="width:100%"><br>只是单纯地发个图片,不知道写啥<br><a id="more"></a></p><pre><code>hexo deploy11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111hexo deploy</code></pre><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1700x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;只是单纯地发个图片,不知道写啥&lt;br&gt;
    
    </summary>
    
      <category term="first test" scheme="https://leesen998.github.io/categories/first-test/"/>
    
    
      <category term="test" scheme="https://leesen998.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础4</title>
    <link href="https://leesen998.github.io/2016/10/04/day04%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day04笔记/</id>
    <published>2016-10-04T08:41:53.000Z</published>
    <updated>2018-10-16T13:28:45.596Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1601x900" alt="" style="width:100%"></p><p>1、流程控制语句switch<br>2、数组<br>3、随机点名器案例</p><a id="more"></a><h3 id="01switch语句解构"><a href="#01switch语句解构" class="headerlink" title="01switch语句解构"></a>01switch语句解构</h3><pre><code>* A:switch语句解构      * a:switch只能针对某个表达式的值作出判断，从而决定程序执行哪一段代码。    * b:格式如下:          swtich(表达式){              case 常量1 :                要执行的语句;              break;              case 常量2 :                要执行的语句;              break;              case 常量3 :                要执行的语句;              break;              default:                要执行的语句;              break;          }    * c: 执行流程:  表达式,和case后面的常量进行比较和哪个case后的常量相同,就执行哪个case后面的程序,遇到break,就全结束    * d: 关键字: switch case default break      * e:举例        如果等于1，则输出星期一        如果等于2，则输出星期二        如果等于3，则输出星期三        如果等于4，则输出星期四        如果等于5，则输出星期五        如果等于6，则输出星期六        如果等于7，则输出星期天</code></pre><h3 id="02switch语句的星期判断"><a href="#02switch语句的星期判断" class="headerlink" title="02switch语句的星期判断"></a>02switch语句的星期判断</h3><pre><code>* A: switch语句的星期判断    * a: 明确需求        需求:初始化int类型变量(1-7)代表星期几,使用switch语句进行判断,并打印出该整数对应的星期.    * b: 代码实现         public class SwitchDemo01 {            public static void main(String[] args) {                int week = 5;                switch (week) {                case 1:                    System.out.println(&quot;星期一&quot;);                    break;                case 2:                    System.out.println(&quot;星期二&quot;);                    break;                case 3:                    System.out.println(&quot;星期三&quot;);                    break;                case 4:                    System.out.println(&quot;星期四&quot;);                    break;                case 5:                    System.out.println(&quot;星期五&quot;);                    break;                case 6:                    System.out.println(&quot;星期六&quot;);                    break;                case 7:                    System.out.println(&quot;星期天&quot;);                    break;                default:                    System.out.println(&quot;输入的数字不正确...&quot;);                    break;                }            }        }</code></pre><h3 id="03switch语句接受的数据类型"><a href="#03switch语句接受的数据类型" class="headerlink" title="03switch语句接受的数据类型"></a>03switch语句接受的数据类型</h3><pre><code>* A: switch语句接受的数据类型    * a:注意事项        switch语句中的表达式的数据类型,是有要求的        JDK1.0 - 1.4  数据类型接受 byte short int char        JDK1.5   数据类型接受 byte short int char enum(枚举)        JDK1.7   数据类型接受 byte short int char enum(枚举), String    </code></pre><h3 id="04case穿透"><a href="#04case穿透" class="headerlink" title="04case穿透"></a>04case穿透</h3><pre><code>* A:case穿透    * a: 在使用switch语句的过程中，如果多个case条件后面的执行语句是一样的，则该执行语句只需书写一次即可，这是一种简写的方式。    * b: 例如，要判断一周中的某一天是否为工作日，同样使用数字1~7来表示星期一到星期天，当输入的数字为1、2、3、4、5时就视为工作日，否则就视为休息日。</code></pre><h3 id="05数组的概述"><a href="#05数组的概述" class="headerlink" title="05数组的概述"></a>05数组的概述</h3><pre><code>* A: 数组的概述    * a:数组的需求        现在需要统计某公司员工的工资情况，例如计算平均工资、最高工资等。假设该公司有50名员工，用前面所学的知识完成，        那么程序首先需要声明50个变量来分别记住每位员工的工资，这样做会显得很麻烦.     * b:数组的概述         数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。</code></pre><h3 id="06数组的定义"><a href="#06数组的定义" class="headerlink" title="06数组的定义"></a>06数组的定义</h3><pre><code>* A：数组的定义* b:格式:         数据类型[] 数组名 = new 数据类型[元素个数或数组长度];    * c:举例:        int[] x = new int[100];* c:要点说明      1)数据类型: 数组中存储元素的数据类型    2) [] 表示数组的意思    3) 变量名  自定义标识符      4) new  创建容器关键字    5)数据类型: 数组中存储元素的数据类型    6)[]  表示数组的意思    7)元素个数,就是数组中,可以存储多少个数据 (恒定, 定长)    数组是一个容器: 存储到数组中的每个元素,都有自己的自动编号    自动编号,最小值是0, 最大值,长度-1    自动编号专业名次, 索引(index), 下标, 角标    访问数组存储的元素,必须依赖于索引, 公式 数组名[索引]    Java提供一个属性,操作索引的    数组的一个属性,就是数组的长度, 属性的名字 length    使用属性:  数组名.length  数据类型 int    数组的最小索引是0, 最大索引数组.length-1</code></pre><h3 id="07JVM内存划分"><a href="#07JVM内存划分" class="headerlink" title="07JVM内存划分"></a>07JVM内存划分</h3><pre><code>* A：内存划分* JVM对自己的内存划分为5个区域      * a: 寄存器:内存和CUP之间      * b: 本地方法栈: JVM调用了系统中的功能      * c: 方法和数据共享: 运行时期class文件进入的地方      * d: 方法栈:所有的方法运行的时候进入内存      * e: 堆:存储的是容器和对象</code></pre><h3 id="08数组的内存"><a href="#08数组的内存" class="headerlink" title="08数组的内存"></a>08数组的内存</h3><pre><code>* A: 数组的内存* int[] x;                    // 声明一个int[]类型的变量*    x = new int[100];        // 创建一个长度为100的数组*    接下来，通过两张内存图来详细地说明数组在创建过程中内存的分配情况。*    第一行代码 int[] x; 声明了一个变量x，该变量的类型为int[]，即一个int类型的数组。变量x会占用一块内存单元，它没有被分配初始值*    第二行代码 x = new int[100]; 创建了一个数组，将数组的地址赋值给变量x。在程序运行期间可以使用变量x来引用数组，这时内存中的状态会发生变化</code></pre><h3 id="09使用索引访问数组的元素"><a href="#09使用索引访问数组的元素" class="headerlink" title="09使用索引访问数组的元素"></a>09使用索引访问数组的元素</h3><pre><code>* A: 使用索引访问数组的元素    * 组中有100个元素，初始值都为0。数组中的每个元素都有一个索引(也可称为角标)，要想访问数组中的元素可以通过“x[0]、x[1]、……、x[98]、x[99]”的形式。    * 需要注意的是，数组中最小的索引是0，最大的索引是“数组的长度-1”</code></pre><h3 id="10数组的length属性"><a href="#10数组的length属性" class="headerlink" title="10数组的length属性"></a>10数组的length属性</h3><pre><code>* A: lenth属性    * a 在Java中，为了方便我们获得数组的长度，提供了一个length属性，在程序中可以通过“数组名.length”的方式来获得数组的长度，即元素的个数。    * b 求数组的长度        public class ArrayDemo01 {             public static void main(String[] args) {                 int[] arr; // 声明变量                 arr = new int[3]; // 创建数组对象                 System.out.println(&quot;arr[0]=&quot; + arr[0]); // 访问数组中的第一个元素                 System.out.println(&quot;arr[1]=&quot; + arr[1]); // 访问数组中的第二个元素                 System.out.println(&quot;arr[2]=&quot; + arr[2]); // 访问数组中的第三个元素                 System.out.println(&quot;数组的长度是：&quot; + arr.length); // 打印数组长度             }         }</code></pre><h3 id="11为数组的元素赋值"><a href="#11为数组的元素赋值" class="headerlink" title="11为数组的元素赋值"></a>11为数组的元素赋值</h3><pre><code>* A: 为数组的元素赋值    * a: 如果在使用数组时，不想使用这些默认初始值，也可以显式地为这些元素赋值。    *     赋值过的元素已经变为新的数值,没有赋值的元素默认初始化的数值    * b: 案例         public class ArrayDemo02 {             public static void main(String[] args) {                 int[] arr = new int[4]; // 定义可以存储4个整数的数组                 arr[0] = 1; // 为第1个元素赋值1                 arr[1] = 2; // 为第2个元素赋值2                 // 下面的代码是打印数组中每个元素的值                 System.out.println(&quot;arr[0]=&quot; + arr[0]);                 System.out.println(&quot;arr[1]=&quot; + arr[1]);                 System.out.println(&quot;arr[2]=&quot; + arr[2]);                System.out.println(&quot;arr[3]=&quot; + arr[3]);             }         }</code></pre><h3 id="12数组的定义-2"><a href="#12数组的定义-2" class="headerlink" title="12数组的定义_2"></a>12数组的定义_2</h3><pre><code>* A: 定义数组格式2    * a: 数组初始化        动态初始化 : 在定义数组时只指定数组的长度，由系统自动为元素赋初值的方式称作动态初始化。        1、类型[] 数组名 = new 类型[长度];        int[] arr = new int[4];        静态初始化: 在初始化数组时还有一种方式叫做静态初始化，就是在定义数组的同时就为数组的每个元素赋值。        2、类型[] 数组名 = new 类型[]{元素，元素，……};        int[] arr = new int[]{1,2,3,4};        3、类型[] 数组名 = {元素，元素，元素，……};             int[] arr = { 1, 2, 3, 4 };</code></pre><h3 id="13遍历数组"><a href="#13遍历数组" class="headerlink" title="13遍历数组"></a>13遍历数组</h3><pre><code>* A:遍历数组    * 在操作数组时，经常需要依次访问数组中的每个元素，这种操作称作数组的遍历* B:练习    public class ArrayDemo04 {        public static void main(String[] args) {            int[] arr = { 1, 2, 3, 4, 5 }; // 定义数组            // 使用for循环遍历数组的元素            for (int i = 0; i &lt; arr.length; i++) {                System.out.println(arr[i]); // 通过索引访问元素            }        }    }    上述代码中，定义一个长度为5的数组arr，数组的角标为0~4。由于for循环中定义的变量i的值在循环过程中为0~4，因此可以作为索引，依次去访问数组中的元素，并将元素的值打印出来</code></pre><h3 id="14数组中常见的异常"><a href="#14数组中常见的异常" class="headerlink" title="14数组中常见的异常"></a>14数组中常见的异常</h3><pre><code>* A: 数组操作中,常见的两个异常     数组的索引越界异常      空指针异常* B: 练习    public class ArrayDemo_4{        public static void main(String[] args){            //数组的索引越界异常            //int[] arr = {5,2,1};            //数组中3个元素,索引 0,1,2            //System.out.println(arr[3]);//java.lang.ArrayIndexOutOfBoundsException: 3            //空指针异常            int[] arr2 = {1,5,8};            System.out.println(arr2[2]);            arr2 = null; // arr2 不在保存数组的地址了            System.out.println(arr2[2]);//java.lang.NullPointerException        }    }</code></pre><h3 id="15数组最值"><a href="#15数组最值" class="headerlink" title="15数组最值"></a>15数组最值</h3><pre><code>* A: 数组获取最值的原理思想    * 定义数组的第一个元素arr[0]为最大值;循环arr数组,判断如果有比arr[0] 大的就交换,直到arr数组遍历完毕,那么arr[0]中就保存了最大的元素</code></pre><h3 id="16数组获取最值代码实现"><a href="#16数组获取最值代码实现" class="headerlink" title="16数组获取最值代码实现"></a>16数组获取最值代码实现</h3><pre><code>* A: 代码实现    public class ArrayDemo05 {        public static void main(String[] args) {            int[] arr = { 4, 1, 6, 3, 9, 8 };     // 定义一个数组            int max = arr[0];                     // 定义变量max用于记住最大数，首先假设第一个元素为最大值            // 下面通过一个for循环遍历数组中的元素            for (int x = 1; x &lt; arr.length; x++) {                if (arr[x] &gt; max) {             // 比较 arr[x]的值是否大于max                    max = arr[x];                 // 条件成立，将arr[x]的值赋给max                }            }            System.out.println(&quot;max=&quot; + max);     // 打印最大值        }    }</code></pre><h3 id="17二维数组的定义"><a href="#17二维数组的定义" class="headerlink" title="17二维数组的定义"></a>17二维数组的定义</h3><pre><code>* A 二维数组的作用    * 要统计一个学校各个班级学生的考试成绩，又该如何实现呢？    * 这时就需要用到多维数组，多维数组可以简单地理解为在数组中嵌套数组。* B 定义格式    * a 第一种定义格式:        *  int[][] arr = new int[3][4];        *  上面的代码相当于定义了一个3*4的二维数组，即二维数组的长度为3，二维数组中的每个元素又是一个长度为4的数组    * b 第二种定义格式        *  int[][] arr = new int[3][];        *  第二种方式和第一种类似，只是数组中每个元素的长度不确定    * c 第三种定义格式        *      int[][] arr = {{1,2},{3,4,5,6},{7,8,9}};        *      二维数组中定义了三个元素，这三个元素都是数组，分别为{1,2}、{3,4,5,6}、{7,8,9}</code></pre><h3 id="18二维数组元素的访问"><a href="#18二维数组元素的访问" class="headerlink" title="18二维数组元素的访问"></a>18二维数组元素的访问</h3><pre><code> * A: 二维数组的访问 * 案例:  class ArrayDemo08 {    public static void main(String[] args){        //定义二维数组的方式        int[][] arr = new int[3][4];        System.out.println( arr );        System.out.println(&quot;二维数组的长度: &quot; + arr.length);        //获取二维数组的3个元素        System.out.println( arr[0] );        System.out.println( arr[1] );        System.out.println( arr[2] );        System.out.println(&quot;打印第一个一维数组的元素值&quot;);        System.out.println( arr[0][0] );        System.out.println( arr[0][1] );//访问的为二维数组中第1个一维数组的第2个元素        System.out.println( arr[0][2] );        System.out.println( arr[0][3] );        System.out.println(&quot;打印第二个一维数组的元素值&quot;);        System.out.println( arr[1][0] );        System.out.println( arr[1][1] );        System.out.println( arr[1][2] );        System.out.println( arr[1][3] );        System.out.println(&quot;打印第三个一维数组的元素值&quot;);        System.out.println( arr[2][0] );        System.out.println( arr[2][1] );        System.out.println( arr[2][2] );        System.out.println( arr[2][3] );    }}</code></pre><h3 id="19二维数组内存图"><a href="#19二维数组内存图" class="headerlink" title="19二维数组内存图"></a>19二维数组内存图</h3><pre><code>* A: 二维数组内存图* 举例:int[][] arr = new int[3][2];* 外层数组长在内存开辟连续的3个大的内存空间,每一个内存空间都对应的有地址值* 每一个大内存空间里又开辟连续的两个小的内存空间.</code></pre><h3 id="20二维数组的定义和访问"><a href="#20二维数组的定义和访问" class="headerlink" title="20二维数组的定义和访问"></a>20二维数组的定义和访问</h3><pre><code>* A: 二维数组的定义和访问    * 格式1:     *     int[][] arr = new int[3][]; 不推荐    * 格式2    *  int[][] arr = {{1,2,4},{4,7},{0,9,3}};    *  * B: 二维数组的访问     举例:int[][] arr = {{1,2,4},{5,8,7},{0,9,3}};       想要打印数组中7这个元素需要先找到大的元素索引{5,7} 索引为2 ,在找7在{5,7}中的索引2     那么结果为 arr[2][2]  第一个[2]代表大数组中{5,8,7}这个元素索引     第二个[2]代表{5,8,7}中7元素的索引</code></pre><h3 id="21二维数组的遍历"><a href="#21二维数组的遍历" class="headerlink" title="21二维数组的遍历"></a>21二维数组的遍历</h3><pre><code>* A:二维数组遍历   int[][] arr = {{1,2,4},{4,7},{0,9,3}};     先使用for循环遍历arr这个二维数组,得到每一个元素为arr[i]为一维数组   再外层for循环中嵌套一个for循环遍历每一个一维数组arr[i],得到每一元素*    B:举例:遍历二维数组  public class ArrayArrayDemo_2{      public static void main(String[] args){          int[][] arr = { {1,2,3},{4,5},{6,7,8,9},{0} };          //外循环,遍历二维数组          for(int i = 0 ; i &lt; arr.length ;i++){              //内循环,遍历每个一维数组 arr[0] arr[1] arr[i]              for(int j = 0 ; j &lt; arr[i].length; j++){                  System.out.print(arr[i][j]);              }              System.out.println();          }      }* C:二维数组累加求和 class ArrayDemo09 {      public static void main(String[] args){            int[][] arr2 = { {1,2},{3,4,5},{6,7,8,9,10} };          int sum2 = 0;          for (int i=0; i&lt;arr2.length; i++) {              for (int j=0; j&lt;arr2[i].length; j++) {                   //System.out.println(arr2[i][j])                  sum2 += arr2[i][j];              }          }          System.out.println(&quot;sum2= &quot;+ sum2);      }  }</code></pre><h3 id="22二维数组的求和练习"><a href="#22二维数组的求和练习" class="headerlink" title="22二维数组的求和练习"></a>22二维数组的求和练习</h3><pre><code>* A 例如要统计一个公司三个销售小组中每个小组的总销售额以及整个公司的销售额。如下所示   * 第一小组销售额为{11, 12}万元   * 第二小组销售额为{21, 22, 23}万元   * 第三小组销售额为{31, 32, 33, 34}万元。 * B 代码实现      public class ArrayDemo10 {        public static void main(String[] args) {            int[][] arr = new int[3][];             // 定义一个长度为3的二维数组           arr[0] = new int[] { 11, 12 };             // 为数组的元素赋值            arr[1] = new int[] { 21, 22, 23 };            arr[2] = new int[] { 31, 32, 33, 34 };                    int sum = 0;                             // 定义变量记录总销售额            for (int i = 0; i &lt; arr.length; i++) { // 遍历数组元素                int groupSum = 0; // 定义变量记录小组销售总额            for (int j = 0; j &lt; arr[i].length; j++) { // 遍历小组内每个人的销售额                    groupSum = groupSum + arr[i][j];            }                sum = sum + groupSum;             // 累加小组销售额                System.out.println(&quot;第&quot; + (i + 1) + &quot;小组销售额为：&quot; + groupSum + &quot; 万元&quot;);            }            System.out.println(&quot;总销售额为: &quot; + sum + &quot; 万元&quot;);        }    }</code></pre><h3 id="23随机点名器案例分析"><a href="#23随机点名器案例分析" class="headerlink" title="23随机点名器案例分析"></a>23随机点名器案例分析</h3><pre><code>* A 随机点名器案例分析* B: 需求    * 随机点名器，即在全班同学中随机的打印出一名同学名字。* C:分析:    * 1)定义数组存数全班同学    * 2)生成随机数范围0 到 数组长度-1    * 3)根据这个索引找到数组中的同学名称</code></pre><h3 id="24随机点名器代码实现"><a href="#24随机点名器代码实现" class="headerlink" title="24随机点名器代码实现"></a>24随机点名器代码实现</h3><pre><code>* A: 分析       随机点名器:    1  存储姓名    2. 预览所有人的姓名    3. 随机出一个人的姓名* B 代码实现   import java.util.Random;   public class CallName{       public static void main(String[] args){           //存储姓名,姓名存储到数组中           //数组存储姓名,姓名的数据类型,String           String[] names = {&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;李蕾&quot;,&quot;韩梅梅&quot;,&quot;小名&quot;,&quot;老王&quot;,&quot;小华&quot;,&quot;约翰逊&quot;,&quot;爱丽丝&quot;};           //预览: 遍历数组,打印所有姓名           for(int i = 0 ; i &lt; names.length ; i++){               System.out.println(names[i]);           }           System.out.println(&quot;=============&quot;);           //随机出一个人的名           //利用随机数,生成一个整数,作为索引,到数组中找到对应的元素           Random ran = new Random();           //随机数,范围必须是0-数组的最大索引           int index = ran.nextInt(names.length);//index 就是随机数,作为索引           System.out.println(names[index]);       }   }</code></pre><h3 id="25随机点名器代码实现-2"><a href="#25随机点名器代码实现-2" class="headerlink" title="25随机点名器代码实现_2"></a>25随机点名器代码实现_2</h3><pre><code>* A 代码优化:import java.util.Random;public class CallName{    public static void main(String[] args){        String[] names = {&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;李蕾&quot;,&quot;韩梅梅&quot;,&quot;小名&quot;,&quot;老王&quot;,&quot;小华&quot;,&quot;约翰逊&quot;,&quot;爱丽丝&quot;};        System.out.println(names[new Random().nextInt(names.length)]);    }}</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1601x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、流程控制语句switch&lt;br&gt;2、数组&lt;br&gt;3、随机点名器案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础3</title>
    <link href="https://leesen998.github.io/2016/10/04/day03%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day03笔记/</id>
    <published>2016-10-04T02:41:53.000Z</published>
    <updated>2018-10-16T13:28:29.973Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1701x900" alt="" style="width:100%"></p><p>1、引用类型变量的创建及使用<br>2、流程控制语句之选择语句<br>3、流程控制语句之循环语句<br>4、循环高级<br><a id="more"></a></p><h3 id="01创建引用类型变量公式"><a href="#01创建引用类型变量公式" class="headerlink" title="01创建引用类型变量公式"></a>01创建引用类型变量公式</h3><pre><code>* A: 创建引用类型变量公式    * a: 我们要学的Scanner类是属于引用数据类型，我们先了解下引用数据类型。    * b: 引用数据类型的定义格式        * 与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式。        * 数据类型  变量名  =  new 数据类型();    * c: 引用数据类型的使用        * 每种引用数据类型都有其功能，我们可以调用该类型实例的功能。        * 变量名.方法名();</code></pre><h3 id="02Scanner类的使用"><a href="#02Scanner类的使用" class="headerlink" title="02Scanner类的使用"></a>02Scanner类的使用</h3><pre><code>* A: Scanner类的使用    * a: 导包import java.util.Scanner;    * b：创建键盘录入对象 Scanner sc = new Scanner(System.in);    * c: 读取键盘录入的一个整数        * int enterNumber = sc.nextInt();    * d: 读取键盘录入的字符串        * String enterString = sc.next();* B: 案例代码    import java.util.Scanner;    public class Demo05Scanner{        public static void main(String[] args)         {            Scanner sc = new Scanner(System.in);            int enterNumber = sc.nextInt();            System.out.println(&quot;用户输入的整数为&quot;+enterNumber);            String enterString = sc.next();            System.out.println(&quot;用户输入的字符串为&quot;+enterString);        }    }</code></pre><h3 id="03Random随机数类的使用-1"><a href="#03Random随机数类的使用-1" class="headerlink" title="03Random随机数类的使用_1"></a>03Random随机数类的使用_1</h3><pre><code>* A: Random随机数类的使用_1    * a: 功能        * 生成随机数需要使用到引用类型随机数Random类    * b: 使用方式        * import导包：所属包java.util. Random        * 创建实例格式：Random  random = new Random ();        * 调用方法            * nextInt(int maxValue)    产生[0,maxValue)范围的随机数,包含0不包含maxValue            * nextDouble()  产生[0,1)范围的随机数            如：                Random  random = new Random ();                int  myNumber = random.nextInt(100);//结果为0-99的一个数* B: 案例代码    import java.util.Random;    public class RandomDemo{        public static void main(String[] args){           Random ran = new Random();           // Random类中的,产生随机数的功能           int i = ran.nextInt(100);           System.out.println(i);           //问题? 产生随机数,范围 1-100之间           // nextInt(100) 0-99 + 1        }    }</code></pre><h3 id="04Random随机数类的使用-2"><a href="#04Random随机数类的使用-2" class="headerlink" title="04Random随机数类的使用_2"></a>04Random随机数类的使用_2</h3><pre><code>* A: Random随机数类的使用_2    * a: 调用方法        * nextDouble()  产生[0,1)范围的随机数        如：            Random  random = new Random ();            int  myNumber = random.nextDouble();//结果为0.0-1.0之间的数(包括0.0不包括1.0)</code></pre><h3 id="05if语句格式第一种"><a href="#05if语句格式第一种" class="headerlink" title="05if语句格式第一种"></a>05if语句格式第一种</h3><pre><code>* A: if语句格式第一种    * a: 书写格式        if(比较表达式) {            语句体;        }    * b：执行流程：        * 先计算比较表达式的值，看其返回值是true还是false。        * 如果是true，就执行语句体；        * 如果是false，就不执行语句体；* B: 案例代码    public class IfDemo{        public static void main(String[] args){              int i = 5 ;              //对变量i进行if判断              if(i &gt; 5){                  System.out.println(&quot;if中的条件是true&quot;);                  i++;              }              System.out.println(i);        }    }</code></pre><h3 id="06if语句格式第二种"><a href="#06if语句格式第二种" class="headerlink" title="06if语句格式第二种"></a>06if语句格式第二种</h3><pre><code>* A: if语句格式第二种    * a: 书写格式        if(比较表达式) {            语句体1;        }else {            语句体2;        }    * b：执行流程：        * 首先计算比较表达式的值，看其返回值是true还是false。        * 如果是true，就执行语句体1；        * 如果是false，就执行语句体2；* B: 案例代码    public class IfElseDemo{        public static void main(String[] args){             int i = 16 ;             //判断变量,是奇偶数, 除以2,看余数是0还是1             if( i % 2 == 0 ){                 System.out.println(i+&quot; 是偶数&quot;);             }else{                 System.out.println(i+&quot; 是奇数&quot;);             }        }    }</code></pre><h3 id="07if语句格式第三种"><a href="#07if语句格式第三种" class="headerlink" title="07if语句格式第三种"></a>07if语句格式第三种</h3><pre><code>* A: if语句格式第三种    * a: 书写格式            if(比较表达式1) {                语句体1;            }else if(比较表达式2) {                语句体2;            }else if(比较表达式3) {                语句体3;            }            ...            else {                语句体n+1;            }    * b：执行流程：        * 首先计算比较表达式1看其返回值是true还是false，        * 如果是true，就执行语句体1，if语句结束。        * 如果是false，接着计算比较表达式2看其返回值是true还是false，        * 如果是true，就执行语句体2，if语句结束。        * 如果是false，接着计算比较表达式3看其返回值是true还是false，        * 如果都是false，就执行语句体n+1。* B: 案例代码    public class IfElseIfDemo{        public static void main(String[] args){            //成绩判断要求 ,成绩&gt;80  成绩&gt;70  成绩&gt;60  不及格            //定义变量,保存成绩            int grade = 75;            //使用if else if 语句对成绩判断            if( grade &gt; 80 ){                System.out.println(grade+&quot; 成绩是优&quot;);            }else if ( grade &gt; 70){                System.out.println(grade+&quot; 成绩是良&quot;);            }else if ( grade &gt; 60){                System.out.println(grade+&quot; 成绩是中&quot;);            }else{                System.out.println(grade+&quot; 成绩是差&quot;);            }        }    }</code></pre><h3 id="08if语句和三元运算符的互换"><a href="#08if语句和三元运算符的互换" class="headerlink" title="08if语句和三元运算符的互换"></a>08if语句和三元运算符的互换</h3><pre><code>* A: 三元运算符    * a: 概念        * 用来完成简单的选择逻辑，即根据条件判断，从两个选择中选择一种执行    * b: 使用格式        * (条件表达式)？表达式1：表达式2；    * c: 运算规则        * 1: 判断条件表达式，结果为一个布尔值        * 2: true，运算结果为表达式1        * 3: false，运算结果为表达式2* B: 案例代码    public class IfElseDemo_1{        public static void main(String[] args){            int j = 6;            int i = 15;            //使用if语句,判断出最大值            if(i&gt;j){            int j = 6;                System.out.println(i+&quot; 是最大值&quot;);            }else{                System.out.println(j+&quot; 是最大值&quot;);            }            //使用三元运算实现            int k = i&gt;j ? i : j;            System.out.println(k+&quot; 是最大值&quot;);        }    }* C: 使用if语句还是三元表达式    * 判断条件多,使用if     * 三元,必须有结果的, if 可以没有结果的</code></pre><h3 id="09while循环"><a href="#09while循环" class="headerlink" title="09while循环"></a>09while循环</h3><pre><code>* A: while循环结构    * a: 使用格式        初始化表达式；        while(条件){            循环体        }    * b: 执行顺序          当条件是true,就执行循环体,执行完循环体后          程序再次执行while中的条件,如果条件还是true,继续执行循环体          直到条件是false的时候,循环就结束* B: 案例代码    public class WhileDemo{        public static void main(String[] args){            //输出 1-4之间的整数            //定义变量,整数类型, 循环的条件            int i = 1;            while( i &lt; 5 ){                System.out.println(i);                i++;            }        }    }</code></pre><h3 id="10for循环-1"><a href="#10for循环-1" class="headerlink" title="10for循环_1"></a>10for循环_1</h3><pre><code>* A: for循环_1    * a: 使用格式         for(初始化变量 ; 条件 ; 增量){             循环体;         }    * b: 各模块解释        初始化变量: 定义变量,作用是用来控制循环的次数        条件: 当条件是true,执行循环体,条件是false,结束循环        增量: 变量自增情况 * B: 案例代码    public class ForDemo{        public static void main(String[] args){            //for循环,输出0-10            for(int i = 0 ; i &lt; 11 ; i++){                System.out.println(i);            }        }    }</code></pre><h3 id="11for循环-2"><a href="#11for循环-2" class="headerlink" title="11for循环_2"></a>11for循环_2</h3><pre><code>* A: for循环的执行流程    for（① ; ② ; ③）{        ④    }    第一步，执行①    第二步，执行②，如果判断结果为true，执行第三步，如果判断结果为false，执行第五步    第三步，执行④    第四步，执行③，然后重复执行第二步    第五步，退出循环</code></pre><h3 id="12for循环-3"><a href="#12for循环-3" class="headerlink" title="12for循环_3"></a>12for循环_3</h3><pre><code>* A: 案例    * a: 利用for循环,计算1+4的结果* B: 案例代码    public class ForDemo_1{        public static void main(String[] args){            // 定义变量,记录求和后的数据            int sum = 0;            // 利用循环,将变量从1变化到4            for(int i = 1 ; i &lt;= 4 ; i++){                //对变量进行求和                sum = sum + i;            }            System.out.println(sum);        }    }</code></pre><h3 id="13do-while循环"><a href="#13do-while循环" class="headerlink" title="13do_while循环"></a>13do_while循环</h3><pre><code>* A: do_while循环    * a: 使用格式        do{           循环体;        }while(条件);    * b: 执行顺序        先执行一次循环体，然后再判断条件，如果条件为true，继续执行循环体，        如果条件为false，循环结束。    * c: 特点        * 无条件先执行一次* B: 案例代码    public class DoWhileDemo{        public static void main(String[] args){            int i = 0;             do{                System.out.println(i);                i++;            }while( i &lt;  5);        }    }</code></pre><h3 id="14死循环"><a href="#14死循环" class="headerlink" title="14死循环"></a>14死循环</h3><pre><code>* A: 死循环概述    * 无限循环存在的原因是并不知道循环多少次，而是根据某些条件，来控制循环* B: 死循环格式    * while(true){}    * for(;;){}</code></pre><h3 id="15嵌套for循环-1"><a href="#15嵌套for循环-1" class="headerlink" title="15嵌套for循环_1"></a>15嵌套for循环_1</h3><pre><code>* A: 嵌套循环的概述    * 嵌套循环是指在一个循环语句的循环体中再定义一个循环语句的语法结构。while、do…while、for循环语句都可以进行嵌套，并且它们之间也可以互相嵌套，如最常见的在for循环中嵌套for循环。* B: 嵌套循环的格式    for(初始化表达式; 循环条件; 操作表达式) {        ………        for(初始化表达式; 循环条件; 操作表达式) {            执行语句            ………        }        ………    }* C: 各模块解释    * 总的循环次数 =  内循环次数 * 外循环的次数    * 内循环,是外循环的循环体    * 外循环,控制的是行数    * 内循环,控制的是每行的个数</code></pre><h3 id="16嵌套for循环-2"><a href="#16嵌套for循环-2" class="headerlink" title="16嵌套for循环_2"></a>16嵌套for循环_2</h3><pre><code>* A: 案例    * a: 打印正三角形* B: 案例代码    public class ForForDemo{        public static void main(String[] args){            for(int i = 0 ; i &lt; 9 ; i++){                for(int j = 0; j &lt; i+1 ;j++){                    System.out.print(&quot;* &quot;);                }                System.out.println();            }        }    }</code></pre><h3 id="17break语句"><a href="#17break语句" class="headerlink" title="17break语句"></a>17break语句</h3><pre><code>* A: break语句    * a: 作用        * 跳出所在的循环体    * b: 书写位置        * 必须出现在循环或选择结构内    * c: 举例        for(int i=0; i&lt;10; i++) {            if(i&gt;5) {            break;        }            System.out.println(“我爱Java”+i);        }        //会从0-5输出6次“我爱Java”* B: break详细解释    * a: 作用        * 在loop/switch选择或者循环过程中，我们总是满足布尔表达条件才能执行对应的代码，然而在这些逻辑过程中，            可以使用一些关键字直接跳出正在执行的代码，去执行后边或者指定位置的代码，            这些关键字一旦出现就可以跳转语句执行顺序。    * b: 使用方式        * 无法单独使用，必须将break关键字置于switch或循环语句中    * c: 运行规律        * 不需要判断任何条件，只要遇到break变直接跳出执行后续代码。会完全跳出选择或者循环结构        * 只能跳出最近的代码块，不能跨越多级代码块* C：循环标号    * a: 为什么使用循环标号        * 当在双层循环或者循环内有switch选择语句时，我们发现，使用break或者continue所作用的对象均是内层语句，无法直接跳出外层循环，这时就需要使用标号语句跳转了.    * b: 使用方式        * 在外层循环外的某行前边，使用后边跟有冒号”:”的标识符，即定义完毕。          使用时当在内层循环使用break或continue时后边紧跟之前定义的标号即可    * c: 运行规律        * 当外层循环外定义了标号        * 内层使用break，终止内外双层循环。        * 内层使用continue，终止内层循环，继续外层循环。</code></pre><h3 id="18continue语句"><a href="#18continue语句" class="headerlink" title="18continue语句"></a>18continue语句</h3><pre><code>* A: continue语句    * a: 作用        * 提前结束本次循环，继续进行下次循环    * b: 使用方式        * 无法单独使用，必须将continue关键字置于循环语句中    * c：运行规律        * 不需要判断任何条件，只要遇到continue变直接跳出本轮循环进行下次循环    * d：案例代码        public class ContinueDemo{            public static void main(String[] args){                for(int i = 0 ; i &lt; 10 ; i++){                    if(i%2==0){                        continue;                    }                    System.out.println(i);                }            }        }        //会把0-9之间所有的奇数打印到控制台上</code></pre><h3 id="19猜数字小游戏"><a href="#19猜数字小游戏" class="headerlink" title="19猜数字小游戏"></a>19猜数字小游戏</h3><pre><code>* A: 猜数字小游戏            * a: 分析        * 用户给的数可能大于、小于、或等于被猜的数，这样就会出现三种情况，用前面讲的三元运算符可以实现，            但是得用三元运算符的嵌套，比较麻烦！可以用更简单的方式if条件判断，可以有三个以上的条件    * b: 需求分析        * 后台预先生成一个随机数1-100，用户键盘录入猜数字        * 如果猜对了，打印“恭喜您，答对了”        * 如果猜错了        * 猜大了：打印“sorry，您猜大了!”        * 猜小了：打印“sorry，您猜小了!”                直到数字猜到为止                最多只能猜5次，否则提示“sorry，您没有机会了!”* B: 案例代码    /*        猜数字小游戏        完成猜数字小游戏：        1、产生随机数        后台预先生成一个随机数1-100，用户键盘录入猜数字        2、通过if语句对用户猜的数与随机数进行比较        如果猜对了，打印“恭喜您，答对了”        如果猜错了        猜大了：打印“sorry，您猜大了!”        猜小了：打印“sorry，您猜小了!”        3、通过for循环完成用户猜数的循环        直到数字猜到为止        最多只能猜5次，否则提示“sorry，您没有机会了!”    */    import java.util.Random;    import java.util.Scanner;    //通过*的方式可以一次导入该包下所有的类，但是不建议使用。建议使用哪个导哪个。    //import java.util.*;    public class GuessNumber{        public static void main(String[] args) {            //1、产生随机数            //后台预先生成一个随机数1-100，用户键盘录入猜数字            //创建随机数对象            Random random = new Random();            //产生一个1-100的随机数            int randomNumber = random.nextInt(100)+1;            //System.out.println(&quot;我产生的随机数是：&quot;+randomNumber+&quot;你猜猜是多少？&quot;);  作弊专用            //产生控制台录入的Scanner对象            Scanner sc = new Scanner(System.in);            //3、通过for循环完成用户猜数的循环            //通过for循环完成猜数字逻辑            for(int i=1; i&lt;=5; i++){                //提示用户输入要猜的数，用变量接收                System.out.println();                System.out.println(&quot;请您输入一个1-100的数：&quot;);                int guessNumber = sc.nextInt();                //2、通过if语句对用户猜的数与随机数进行比较                //如果猜对了                if(guessNumber==randomNumber) {                    //打印猜对后的提示                    System.out.println(&quot;恭喜您，猜对了！&quot;);                    //跳出循环，不用再猜了                    break;                }else {//如果猜错了                    //如果猜大了                    if(guessNumber&gt;randomNumber) {                        System.out.println(&quot;sorry，您猜大了!&quot;);                    }else {//如果猜小了                        System.out.println(&quot;sorry，您猜小了!&quot;);                    }                }                //如果猜到了最后的第5次仍然没有猜对就跳出循环                if(i==5) {                    System.out.println(&quot;对不起，点太背，下次再来吧！&quot;);                    break;                }                //每次猜错后，都提示还有多少次机会                System.out.println(&quot;请注意，您还有&quot;+(5-i)+&quot;次机会，请慎重作答！&quot;);            }        }    }</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1701x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、引用类型变量的创建及使用&lt;br&gt;2、流程控制语句之选择语句&lt;br&gt;3、流程控制语句之循环语句&lt;br&gt;4、循环高级&lt;br&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AS环境配置踩坑经历</title>
    <link href="https://leesen998.github.io/2016/10/03/AS%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <id>https://leesen998.github.io/2016/10/03/AS环境配置踩坑经历/</id>
    <published>2016-10-03T02:41:53.000Z</published>
    <updated>2018-10-16T13:44:29.380Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1600x900" alt="" style="width:100%"></p><a id="more"></a><h2 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a><font color="#551A8B" size="">遇到的bug</font></h2><pre><code>Unable to resolve dependency for &apos;:app@debug/compileClasspath&apos;</code></pre><p>这是由于配置文件的依赖是通过Google下载的，然而该下载被墙了！<br>[解决办法]：</p><h3 id="在整个工程的build-gradle中添加以下框内代码："><a href="#在整个工程的build-gradle中添加以下框内代码：" class="headerlink" title="在整个工程的build.gradle中添加以下框内代码："></a>在整个工程的build.gradle中添加以下框内代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">        url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span></span><br><span class="line">        &#125;</span><br><span class="line">maven &#123; url <span class="string">'http://repo1.maven.org/maven2'</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="app下的build-gradle配置如下"><a href="#app下的build-gradle配置如下" class="headerlink" title="app下的build.gradle配置如下:"></a>app下的build.gradle配置如下:</h3><p>buildToolsVersion 需要和你的sdk安装目录 ~\sdk\build-tools文件里面已有的版本对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26</span><br><span class="line">    buildToolsVersion <span class="string">'27.0.3'</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.administrator.myapplication"</span></span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 22</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>implementation ‘com.android.support:appcompat-v7:26.+’ 中v7:26.+表示使用的sdk版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:26.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:0.4'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="若配置后还没解决问题，依然报错"><a href="#若配置后还没解决问题，依然报错" class="headerlink" title="若配置后还没解决问题，依然报错"></a>若配置后还没解决问题，依然报错</h3><p><font color="#FF00FF" size="">打开 C:/Users/(用户名)/.gradle/gradle.properties</font><br>把http代理的配置注释掉，例如：</p><pre><code>## For more details on how to configure your build environment visit# http://www.gradle.org/docs/current/userguide/build_environment.html## Specifies the JVM arguments used for the daemon process.# The setting is particularly useful for tweaking memory settings.# Default value: -Xmx1024m -XX:MaxPermSize=256m# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8## When configured, Gradle will run in incubating parallel mode.# This option should only be used with decoupled projects. More details, visit# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects# org.gradle.parallel=true#Sat Sep 29 23:37:12 CST 2018#systemProp.http.proxyHost=mirrors.neusoft.edu.cn#systemProp.https.proxyPort=80#systemProp.https.proxyHost=mirrors.neusoft.edu.cn#systemProp.http.proxyPort=80</code></pre><p>More info: <a href="https://blog.csdn.net/magicbaby810/article/details/79848425" target="_blank" rel="noopener">参考该问题的csdn博客</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1600x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装" scheme="https://leesen998.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="AS" scheme="https://leesen998.github.io/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>java入门</title>
    <link href="https://leesen998.github.io/2016/10/02/java%E5%85%A5%E9%97%A8/"/>
    <id>https://leesen998.github.io/2016/10/02/java入门/</id>
    <published>2016-10-02T03:59:18.000Z</published>
    <updated>2018-10-08T09:03:21.126Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg" alt="" style="width:100%"><br>java入门笔记<br><a id="more"></a></p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a><font color="#551A8B" size="">第一个Java程序</font></h2><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a><font color="#00CD66" size="">Java代码</font></h3><p>Java程序是大小写敏感的 对格式没有严格要求，但用空格或Tab键缩进会比较好看</p><h3 id="Hello-java"><a href="#Hello-java" class="headerlink" title="Hello.java"></a><font color="#D66" size="">Hello.java</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名必须是Hello.java，文件名也要注意大小写，必须与程序的类名完全一致，扩展名是.java。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><font color="#DD66" size="">编译</font></h3><p>切换到Hello.java所在目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure></p><p>无任何输出表示成功，可查看编译出的Hello.class文件。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a><font color="#3D66" size="">执行</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Hello</span><br></pre></td></tr></table></figure><p>代码格式：public 和 static 是修饰符static表示静态方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class 类名 &#123;</span><br><span class="line">public static void 方法名(参数) &#123;</span><br><span class="line">//单行注释</span><br><span class="line">你的程序代码;</span><br><span class="line">/*</span><br><span class="line">多行注释</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//class定义结束</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font color="#551A8B" size="">变量</font></h2><h3 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h3><p>A: 什么是变量?<br>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 变量是一个内存中的小盒子（小容器），容器是什么？生活中也有很多容器，例如水杯是容器，用来装载水；你家里的大衣柜是容器，用来装载衣裤；饭盒是容器，用来装载饭菜。那么变量是装载什么的呢？</span><br><span class="line">答案是数据！结论：变量是内存中装载数据的小盒子，你只能用它来存数据和取数据。</span><br></pre></td></tr></table></figure></p><h3 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h3><p>A: 计算机中储存和运算的最小单位是?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a: 一个字节,也就是一个byte.</span><br><span class="line"> win+r--cmd--回车</span><br><span class="line">b: 常用储存单位</span><br><span class="line">*1B（字节） = 8bit</span><br><span class="line">*1KB = 1024B</span><br><span class="line">*1MB = 1024KB</span><br><span class="line">*1GB = 1024MB</span><br><span class="line">*1TB = 1024GB</span><br><span class="line">*1PB = 1024TB</span><br></pre></td></tr></table></figure></p><h3 id="Java中数据类型四类八种"><a href="#Java中数据类型四类八种" class="headerlink" title="Java中数据类型四类八种"></a>Java中数据类型四类八种</h3><p> A: 数据类型四类八种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*四类八种字节数数据表示范围</span><br><span class="line">*整型byte1-128～127</span><br><span class="line">short2-32768～32767</span><br><span class="line">int4-2147483648～2147483648</span><br><span class="line">long8-263～263-1</span><br><span class="line">*浮点型<span class="built_in">float</span>4-3.403E38～3.403E38</span><br><span class="line">double8-1.798E308～1.798E308</span><br><span class="line">*字符型char2表示一个字符，如(<span class="string">'a'</span>，<span class="string">'A'</span>，<span class="string">'0'</span>，<span class="string">'家'</span>)</span><br><span class="line">*布尔型boolean1只有两个值<span class="literal">true</span>与<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="常量和数据类型"><a href="#常量和数据类型" class="headerlink" title="常量和数据类型"></a>常量和数据类型</h3><p> A:常量的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: 整形常量默认是int类型</span><br><span class="line">* b: 小数常量默认是double类型</span><br><span class="line">* c: 定义长整形数据如果值超过int取值范围后面要+<span class="string">"L"</span></span><br><span class="line">* d: 定义<span class="built_in">float</span>类型的数据后面要+<span class="string">"f"</span> 否则默认是double</span><br></pre></td></tr></table></figure></p><h3 id="变量创建的三要素"><a href="#变量创建的三要素" class="headerlink" title="变量创建的三要素"></a>变量创建的三要素</h3><p>A: 定义变量的语法格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">数据类型  变量名  =  变量值;</span><br><span class="line">* int         a    =  100;</span><br><span class="line">      * B:代码:</span><br><span class="line">public class Variable &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a = 10;</span><br><span class="line">double b = 3.14;</span><br><span class="line">char c = <span class="string">'z'</span>;</span><br><span class="line">String s = <span class="string">"i love java"</span>;</span><br><span class="line"></span><br><span class="line">a = 20;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义所有的基本数据类型变量"><a href="#定义所有的基本数据类型变量" class="headerlink" title="定义所有的基本数据类型变量"></a>定义所有的基本数据类型变量</h3><ul><li><p>A: 案例演示</p><ul><li>a: 八种基本类型数据的创建</li></ul></li></ul><h3 id="定义字符串变量"><a href="#定义字符串变量" class="headerlink" title="定义字符串变量"></a>定义字符串变量</h3><ul><li>A：案例演示<ul><li>创建字符串数据类型变量</li><li>String 是引用数据类型<h3 id="变量定义使用注意事项"><a href="#变量定义使用注意事项" class="headerlink" title="变量定义使用注意事项"></a>变量定义使用注意事项</h3></li></ul></li><li>A：变量使用的注意事项<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* a: 变量定义后可以不赋值，使用时再赋值。不赋值不能使用。</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x;</span><br><span class="line">x = 20; //为x赋值20</span><br><span class="line">System.out.println(x);//读取x变量中的值，再打印</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* c:变量使用时有作用域的限制。</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x = 20;</span><br><span class="line">&#123;</span><br><span class="line">    int y = 20;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x);//读取x变量中的值，再打印</span><br><span class="line">System.out.println(y);//读取y变量中的值失败，失败原因，找不到y变量，因为超出了y变量作用范围，所以不能使用y变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-自动转换"><a href="#数据类型转换-自动转换" class="headerlink" title="数据类型转换_自动转换"></a>数据类型转换_自动转换</h3><ul><li>A:     自动类型转换<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a:表示范围小的数据类型转换成范围大的数据类型，这种方式称为自动类型转换</span><br><span class="line">自动类型转换格式：</span><br><span class="line">范围大的数据类型 变量 = 范围小的数据类型值；</span><br><span class="line">如：</span><br><span class="line">    double d = 1000;</span><br><span class="line">或</span><br><span class="line">    int i = 100;</span><br><span class="line">    double d2 = i;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-强制转换"><a href="#数据类型转换-强制转换" class="headerlink" title="数据类型转换_强制转换"></a>数据类型转换_强制转换</h3><ul><li>A: 强制类型转换<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*a: 表示范围大的数据类型转换成范围小的数据类型，这种方式称为强制类型转换</span><br><span class="line">*b: 强制类型转换格式：</span><br><span class="line">范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;</span><br><span class="line">如：</span><br><span class="line">int  i = (int)6.718;   //i的值为6</span><br><span class="line">或</span><br><span class="line">double  d = 3.14;</span><br><span class="line">int  i2 = (int)d;     //i2的值为3</span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><font color="#551A8B" size="">运算符</font></h2><h3 id="算数运算符-1"><a href="#算数运算符-1" class="headerlink" title="算数运算符_1"></a>算数运算符_1</h3><ul><li><p>A: 常见操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">+正号+33</span><br><span class="line">+加2+35</span><br><span class="line">+连接字符串“中”+“国”“中国”</span><br><span class="line">-负号int a=3;-a-3</span><br><span class="line">-减3-12</span><br><span class="line">*乘2*36</span><br><span class="line">/除5/22</span><br><span class="line">%取模5/21</span><br><span class="line">++自增int a=1;a++/++a2</span><br><span class="line">--自减int b=3;a--/--a2</span><br></pre></td></tr></table></figure></li><li><p>B: 注意事项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*a:加法运算符在连接字符串时要注意，只有直接与字符串相加才会转成字符串。</span><br><span class="line">*b:除法“/”当两边为整数时，取整数部分，舍余数。当其中一边为浮点型时，按正常规则相除。 </span><br><span class="line">*c:“%”为整除取余符号，小数取余没有意义。结果符号与被取余符号相同。</span><br><span class="line">*d:整数做被除数，0不能做除数，否则报错。</span><br><span class="line">*e:小数做被除数，整除0结果为Infinity，对0取模结果为NaN</span><br></pre></td></tr></table></figure></li><li><p>C:代码演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class OperatorDemo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/*</span><br><span class="line"> * 常量使用算数运算符</span><br><span class="line"> */</span><br><span class="line">System.out.println(10+20);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 变量使用算数运算符</span><br><span class="line"> */</span><br><span class="line">int x = 10;</span><br><span class="line">int y = 20;</span><br><span class="line">//<span class="string">"+"</span>作为加法运算使用</span><br><span class="line">int z = x + y; </span><br><span class="line">//<span class="string">"+"</span>作为连接字符串使用</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">System.out.println(<span class="string">"z="</span>+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算数运算符-2"><a href="#算数运算符-2" class="headerlink" title="算数运算符_2"></a>算数运算符_2</h3><ul><li>算数运算符++、–<pre><code>* A:算数运算符++、--的使用    * a: ++运算符，会在原有值的基础上自增1    * b: --运算符，会在原有值的基础上自减1。* B:++  -- 位置的使用    * a:++,--运算符后置时，先使用变量a原有值参与运算操作，运算操作完成后，变量a的值自增1或者自减1；    * b:++，--运算符前置时，先将变量a的值自增1或者自减1，然后使用更新后的新值参与运算操作。</code></pre></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>A: 赋值运算符的使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符 运算规则范例结果</span><br><span class="line">=赋值int a=22</span><br><span class="line">+=加后赋值int a=2，a+=24</span><br><span class="line">-=减后赋值int a=2，a-=20</span><br><span class="line">*=乘后赋值int a=2，a*=24</span><br><span class="line">/=整除后赋值int a=2，a/=21</span><br><span class="line">%=取模后赋值int a=2，a%=20</span><br></pre></td></tr></table></figure></li><li><p>B：案例演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> * 赋值运算符</span><br><span class="line"> * +=, -=, *=, /=, %= ： </span><br><span class="line"> * 上面的运算符作用：将等号左右两边计算，会将结果自动强转成等号左边的数据类型,再赋值给等号左边的</span><br><span class="line"> * 注意：赋值运算符左边必须是变量</span><br><span class="line"></span><br><span class="line">public class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">byte x = 10;</span><br><span class="line">x += 20;// 相当于 x = (byte)(x+20);</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>A:比较运算符的使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">==相等于4==3False</span><br><span class="line">!=不等于4!=3True</span><br><span class="line">&lt;小于4&lt;3False</span><br><span class="line">&gt;大于4&gt;3True</span><br><span class="line">&lt;=小于等于4&lt;=3False</span><br><span class="line">&gt;=大于等于        4&gt;=3True</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>A: 逻辑运算符的使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">&amp;与<span class="literal">false</span>&amp;<span class="literal">true</span>False</span><br><span class="line">|或<span class="literal">false</span>|<span class="literal">true</span>True</span><br><span class="line">^异或<span class="literal">true</span>^flaseTrue</span><br><span class="line">!非!<span class="literal">true</span>Flase</span><br><span class="line">&amp;&amp;短路与<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>False</span><br><span class="line">||短路或<span class="literal">false</span>||<span class="literal">true</span>True</span><br><span class="line"></span><br><span class="line">规律小结:</span><br><span class="line">短路与&amp;&amp;:参与运算的两边数据，有<span class="literal">false</span>，则运算结果为<span class="literal">false</span>；</span><br><span class="line">短路或||:参与运算的两边数据，有<span class="literal">true</span>，则运算结果为<span class="literal">true</span>；</span><br><span class="line">逻辑非! : 参与运算的数据，原先是<span class="literal">true</span>则变成<span class="literal">false</span>，原先是<span class="literal">false</span>则变成<span class="literal">true</span>。</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>A: 格式:</li><li><pre><code>(条件表达式)？表达式1：表达式2；</code></pre></li><li><p>B: 代码案例</p><pre><code>方式一：System.out.println( 3&gt;2 ? “正确” : “错误” ); // 三元运算符运算后的结果为true，运算结果为表达式1的值“正确”，然后将结果“正确”，在控制台输出打印方式二：int a = 3;int b = 4;String result = (a==b) ? “相等” : “不相等”;  //三元运算符运算后的结果为false，运算结果为表达式2的值“不相等”，然后将结果赋值给了变量result方式三：int n = (3&gt;2 &amp;&amp; 4&gt;6) ? 100 : 200;//三元运算符运算后的结果为false，运算结果为表达式2的值200,然后将结果200赋值给了变量n</code></pre></li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">优先级描述运算符</span><br><span class="line">1括号()、[]</span><br><span class="line">2正负号+、-</span><br><span class="line">3自增自减，非++、--、!</span><br><span class="line">4乘除，取余*、/、%</span><br><span class="line">5加减+、-</span><br><span class="line">6移位运算&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</span><br><span class="line">7大小关系&gt;、&gt;=、&lt;、&lt;=</span><br><span class="line">8相等关系==、!=</span><br><span class="line">9按位与&amp;</span><br><span class="line">10按位异或^</span><br><span class="line">11按位或|</span><br><span class="line">12逻辑与&amp;&amp;</span><br><span class="line">13逻辑或||</span><br><span class="line">14条件运算?:</span><br><span class="line">15赋值运算=、+=、-=、*=、/=、%=</span><br><span class="line">16位赋值运算&amp;=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</span><br></pre></td></tr></table></figure><h3 id="商场库存清单案例"><a href="#商场库存清单案例" class="headerlink" title="商场库存清单案例"></a>商场库存清单案例</h3><p>A: 案例分析.</p><ul><li>a:观察清单后，可将清单分解为三个部分（清单顶部、清单中部、清单底部）</li><li>b:清单顶部为固定的数据，直接打印即可</li><li><p>c:清单中部为商品，为变化的数据，需要记录商品信息后，打印<br>经过观察，我们确定一项商品应该有如下几个属性：<br>品牌型号: 即商品名称，String型<br>尺寸：物品大小，double型<br>价格：物品单价，double型<br>配置：这一项为每种商品的配置信息，String型<br>库存数：这一项为每种商品的库存个数，int型</p></li><li><p>d:清单底部包含了统计操作，需经过计算后，打印<br>我们发现两个单独的可变化量<br>总库存数：所有商品总个数，int型<br>库存商品总金额：所有商品金额，double型</p></li></ul><p>B: 案例代码实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//步骤一:  创建Demo01库存清单.java文件，编写main主方法</span><br><span class="line">public class Demo01库存清单 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//步骤二:  记录每种库存商品信息</span><br><span class="line">//苹果笔记本电脑</span><br><span class="line">String macBrand = <span class="string">"MacBookAir"</span>;</span><br><span class="line">double macSize = 13.3;</span><br><span class="line">double macPrice = 6988.88;</span><br><span class="line">int macCount = 5;</span><br><span class="line"></span><br><span class="line">//联想Thinkpad笔记本电脑</span><br><span class="line">String thinkpadBrand = <span class="string">"ThinkpadT450"</span>;</span><br><span class="line">double thinkpadSize = 14.0;</span><br><span class="line">double thinkpadPrice = 5999.99;</span><br><span class="line">int thinkpadCount = 10;</span><br><span class="line"></span><br><span class="line">//华硕ASUS笔记本电脑</span><br><span class="line">String ASUSBrand = <span class="string">"ASUS-FL5800"</span>;</span><br><span class="line">double ASUSSize = 15.6;</span><br><span class="line">double ASUSPrice = 4999.50;</span><br><span class="line">int ASUSCount = 18;</span><br><span class="line"></span><br><span class="line">//步骤三: 统计库存总个数、库存总金额</span><br><span class="line">int totalCount = macCount + thinkpadCount + ASUSCount;</span><br><span class="line">double totalMoney = (macCount * macPrice) + (thinkpadCount * thinkpadPrice) + (ASUSCount * ASUSPrice);</span><br><span class="line"></span><br><span class="line">//步骤四: 列表顶部</span><br><span class="line">System.out.println(<span class="string">"------------------------------商城库存清单-----------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号尺寸价格库存数"</span>);</span><br><span class="line"></span><br><span class="line">步骤四:打印库存清单中部信息</span><br><span class="line">//列表中部</span><br><span class="line">System.out.println(macBrand+<span class="string">""</span>+macSize+<span class="string">""</span>+macPrice+<span class="string">""</span>+macCount);</span><br><span class="line">System.out.println(thinkpadBrand+<span class="string">""</span>+thinkpadSize+<span class="string">""</span>+thinkpadPrice+<span class="string">""</span>+thinkpadCount);</span><br><span class="line">System.out.println(ASUSBrand+<span class="string">""</span>+ASUSSize+<span class="string">""</span>+ASUSPrice+<span class="string">""</span>ASUSCount);</span><br><span class="line">打印库存清单底部信息</span><br><span class="line">//列表底部</span><br><span class="line">System.out.println(<span class="string">"-----------------------------------------------------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"总库存数："</span>+totalCount); </span><br><span class="line">System.out.println(<span class="string">"库存商品总金额："</span>+totalMoney);</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;java入门笔记&lt;br&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
</feed>
