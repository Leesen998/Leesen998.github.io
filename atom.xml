<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QJun</title>
  
  <subtitle>QJun&#39;s Homepage</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leesen998.github.io/"/>
  <updated>2018-10-23T07:40:31.112Z</updated>
  <id>https://leesen998.github.io/</id>
  
  <author>
    <name>QJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello</title>
    <link href="https://leesen998.github.io/2017/10/03/hello-world/"/>
    <id>https://leesen998.github.io/2017/10/03/hello-world/</id>
    <published>2017-10-03T02:41:53.000Z</published>
    <updated>2018-10-23T07:40:31.112Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://source.unsplash.com/random/1700x900" alt="" style="width:100%"><br>只是单纯地发个图片<br><a id="more"></a></p><pre><code>hexo deploy11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111hexo deploy</code></pre><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1700x900&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;只是单纯地发个图片&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="first test" scheme="https://leesen998.github.io/categories/first-test/"/>
    
    
      <category term="test" scheme="https://leesen998.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础9</title>
    <link href="https://leesen998.github.io/2016/10/12/day11%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/12/day11笔记/</id>
    <published>2016-10-12T14:21:55.000Z</published>
    <updated>2018-11-06T14:27:37.057Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541385820/samples/test/photo-1539580709660-0505d36fa6e7.jpg" alt="" style="width:100%"></p><p>1、接口<br>2、多态</p><a id="more"></a><p><strong>Java中引用数据类型只有三种，分别是类(class)、接口(interface)、数组。</strong></p><p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。<strong>在函数中定义的一些【基本类型的变量】和【对象的引用变量】都是在函数的【栈内存】中分配。</strong></p><p>当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，<strong>当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</strong></p><p><strong>【堆内存用于存放由new创建的对象或数组】</strong>。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。<br>在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，<strong>这个变量的取值等于【数组或者对象在堆内存中的首地址】，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，</strong>引用变量相当于为数组或者对象起的一个别名。</p><p><strong>【引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。】</strong><br><strong>而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，【数组和对象在没有引用变量指向它的时候，才变成垃圾】，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。</strong>这个也是java比较占内存的主要原因，实际上，<strong>栈中的变量指向堆内存中的变量</strong>，这就是 Java 中的指针! </p><h3 id="01接口的概念"><a href="#01接口的概念" class="headerlink" title="01接口的概念"></a>01接口的概念</h3><pre><code>* A:接口的概念   接口是功能的集合，同样可看做是一种数据类型，是比抽象类更为抽象的”类”。   接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成。这样将功能的定义与实现分离，优化了程序设计。   请记住：一切事物均有功能，即一切事物均有接口。</code></pre><h3 id="02接口的定义"><a href="#02接口的定义" class="headerlink" title="02接口的定义"></a>02接口的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* A: 接口的定义</span><br><span class="line">与定义类的<span class="class"><span class="keyword">class</span>不同，接口定义时需要使用<span class="title">interface</span>关键字。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">定义接口所在的仍为.<span class="title">java</span>文件，虽然声明时使用的为<span class="title">interface</span>关键字的编译后仍然会产生.<span class="title">class</span>文件。</span></span><br><span class="line"><span class="class">这点可以让我们将接口看做是一种只包含了功能声明的特殊类。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">* B : 定义格式</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">抽象方法<span class="number">1</span>;</span><br><span class="line">抽象方法<span class="number">2</span>;</span><br><span class="line">抽象方法<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C: 定义步骤</span><br><span class="line">使用<span class="class"><span class="keyword">interface</span>代替了原来的<span class="title">class</span>，其他步骤与定义类相同：</span></span><br><span class="line">接口中的方法均为公共访问的抽象方法:</span><br><span class="line">定义为：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br><span class="line">接口中无法定义普通的成员变量：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;<span class="comment">// NUM的值不能改变</span></span><br></pre></td></tr></table></figure><h3 id="03接口的实现类"><a href="#03接口的实现类" class="headerlink" title="03接口的实现类"></a>03接口的实现类</h3><pre><code>* A: 类与接口的关系</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">类与接口的关系为实现关系，即类实现接口。实现的动作类似继承，只是关键字不同，实现使用 implements 。</span><br><span class="line"></span><br><span class="line">其他类(实现类)实现接口后，就相当于声明：”我应该具备这个接口中的功能”。实现类仍然需要重写方法以实现具体的功能。</span><br><span class="line"></span><br><span class="line">* B: 类实现接口的格式</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类 <span class="keyword">implements</span> 接口 </span>&#123;</span><br><span class="line">重写接口中方法</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">* C:注意事项</span><br><span class="line"> 在类实现接口后，该类就会将接口中的抽象方法继承过来，此时该类需要重写该抽象方法，完成具体的逻辑。</span><br><span class="line"></span><br><span class="line">接口中定义功能，当需要具有该功能时，可以让类实现该接口，只声明了应该具备该方法，是功能的声明。</span><br><span class="line">在具体实现类中重写方法，实现功能，是方法的具体实现。</span><br></pre></td></tr></table></figure><h3 id="04接口中成员变量的特点"><a href="#04接口中成员变量的特点" class="headerlink" title="04接口中成员变量的特点"></a>04接口中成员变量的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A:成员变量特点</span><br><span class="line">* a 接口中可以定义变量，但是变量必须有固定的修饰符修饰</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 所以接口中的变量也称之为常量，其值不能改变。后面我们会讲解<span class="keyword">static</span>与<span class="keyword">final</span>关键字</span><br><span class="line"></span><br><span class="line">* B:案例</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123; <span class="comment">///定义一个名称为Demo的接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">3</span>;<span class="comment">// NUM的值不能改变</span></span><br><span class="line"><span class="comment">//可以省略不写修饰符public static final，接口默认是public static final</span></span><br><span class="line"><span class="keyword">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05接口中成员方法的特点"><a href="#05接口中成员方法的特点" class="headerlink" title="05接口中成员方法的特点"></a>05接口中成员方法的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* A: 成员方法特点</span><br><span class="line">* a 接口中可以定义方法，方法也有固定的修饰符，<span class="keyword">public</span> <span class="keyword">abstract</span></span><br><span class="line">同样，可以省略不写修饰符<span class="keyword">public</span> <span class="keyword">static</span> ，接口的成员方法默认是<span class="keyword">public</span> <span class="keyword">static</span></span><br><span class="line">但是，重写接口中的方法 必须有 <span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">* b 子类必须覆盖掉接口中所有的抽象方法后，子类才可以实例化。否则子类是一个抽象类。</span><br><span class="line"></span><br><span class="line">* B: 案例</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123; <span class="comment">///定义一个名称为Demo的接口。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类去覆盖接口中的方法。类与接口之间的关系是 实现。通过 关键字 implements</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoImpl</span> <span class="keyword">implements</span> <span class="title">Demo</span> </span>&#123; <span class="comment">//子类实现Demo接口。</span></span><br><span class="line"><span class="comment">//重写接口中的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06实现类还是一个抽象类"><a href="#06实现类还是一个抽象类" class="headerlink" title="06实现类还是一个抽象类"></a>06实现类还是一个抽象类</h3><pre><code>A: 接口的实现类   一个类如果实现类接口,有两种操作方法:   第一:实现类是【非抽象类】,就需要【重写接口中所有】的抽象方法.   第二:实现类也声明为【抽象类】,那么实现类【可以不重写】接口中的抽象方法。</code></pre><h3 id="07类和接口的多实现"><a href="#07类和接口的多实现" class="headerlink" title="07类和接口的多实现"></a>07类和接口的多实现</h3><pre><code>* A：接口的多实现    了解了接口的特点后，那么想想为什么要定义接口，使用抽象类描述也没有问题，接口到底有啥用呢？    接口最重要的体现：解决多继承的弊端。将多继承这种机制在java中通过多实现完成了。* B 多实现的优点    * 怎么解决多继承的弊端呢？    * 弊端：多继承时，当多个父类中有相同功能时，子类调用会产生不确定性。    * 其实核心原因就是在于多继承父类中功能有主体，而导致调用运行时，不确定运行哪个主体内容。    * 为什么多实现能解决了呢？    * 因为接口中的功能都没有方法体，由子类来明确。</code></pre><p>C :案例演示</p><pre><code>interface Fu1{    void show1();}interface Fu2{    void show2();}class Zi implements Fu1,Fu2 {    // 多实现。同时实现多个接口。    public void show1(){}    public void show2(){}}</code></pre><h3 id="08类在继承类的同时实现多接口"><a href="#08类在继承类的同时实现多接口" class="headerlink" title="08类在继承类的同时实现多接口"></a>08类在继承类的同时实现多接口</h3><p>A: 继承的同时实现接口</p><pre><code>* 接口和类之间可以通过实现产生关系，同时也学习了类与类之间可以通过继承产生关系。当一个类已经继承了一个父类，它又需要扩展额外的功能，这时接口就派上用场了。* 子类通过继承父类扩展功能，通过继承扩展的功能都是子类应该具备的基础功能。如果子类想要继续扩展其他类中的功能呢？这时通过实现接口来完成。* 接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</code></pre><p>B: 代码演示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类：抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function">pulbic <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">kock</span> </span>&#123;</span><br><span class="line"><span class="function">pulbic <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类Zi在继承父类Fu的同时实现多接口(Inter,kock)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> <span class="keyword">implements</span> <span class="title">Inter</span>,<span class="title">kock</span> </span>&#123;</span><br><span class="line"><span class="comment">//重写接口的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写父类的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</span><br></pre></td></tr></table></figure></p><h3 id="09接口的多继承"><a href="#09接口的多继承" class="headerlink" title="09接口的多继承"></a>09接口的多继承</h3><pre><code>* A: 接口的多继承    * 学习类的时候，知道类与类之间可以通过继承产生关系，接口和类之间可以通过实现产生关系，那么接口与接口之间会有什么关系。    * 多个接口之间可以使用 extends 进行多继承。    * 类没有多继承    * 接口有多继承</code></pre><p>B 代码演示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_A</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_B</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_C</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口DD 多继承 AA,BB,CC</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DD</span> <span class="keyword">extends</span> <span class="title">AA</span>,<span class="title">BB</span>,<span class="title">CC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_D</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EE类实现接口DD</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EE</span> <span class="keyword">implements</span> <span class="title">DD</span></span>&#123;</span><br><span class="line"><span class="comment">//EE类实现接口DD，需要重写DD以及DD多继承接口的全部抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun_D</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_D"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func_C</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重写fun_C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在开发中如果多个接口中存在相同方法，这时若有个类实现了这些接口，那么就要实现接口中的方法，由于接口中的方法是抽象方法，子类实现后也不会发生调用的不确定性。</span><br></pre></td></tr></table></figure></p><h3 id="10接口思想"><a href="#10接口思想" class="headerlink" title="10接口思想"></a>10接口思想</h3><pre><code>* A:接口的思想    * 前面学习了接口的代码体现，现在来学习接口的思想，接下里从生活中的例子进行说明。    * 举例：我们都知道电脑上留有很多个插口，而这些插口可以插入相应的设备，这些设备为什么能插在上面呢？    * 主要原因是这些设备在生产的时候符合了这个插口的使用规则，否则将无法插入接口中，更无法使用。发现这个插口的出现让我们使用更多的设备。* B: 接口的好处        * 总结：接口在开发中的它好处    * 1、接口的出现扩展了功能。    * 2、接口其实就是暴漏出来的规则。    * 3、接口的出现降低了耦合性，即设备与设备之间实现了解耦。    * 接口的出现方便后期使用和维护，一方是在使用接口（如电脑），一方在实现接口（插在插口上的设备）。例如：笔记本使用这个规则（接口），电脑外围设备实现这个规则（接口）。</code></pre><h3 id="11接口和抽象类的区别"><a href="#11接口和抽象类的区别" class="headerlink" title="11接口和抽象类的区别"></a>11接口和抽象类的区别</h3><pre><code>* A: 明白了接口思想和接口的用法后，接口和抽象类的区别是什么呢？接口在生活体现也基本掌握，那在程序中接口是如何体现的呢？    通过实例进行分析和代码演示抽象类和接口的用法。* B: 举例：    *    犬：            行为：            吼叫；            吃饭；    * 缉毒犬：            行为：            吼叫；            吃饭；            缉毒；* C:思考：    * 由于犬分为很多种类，他们吼叫和吃饭的方式不一样，在描述的时候不能具体化，也就是吼叫和吃饭的行为不能明确。    * 当描述行为时，行为的具体动作不能明确，这时，可以将这个行为写为抽象行为，那么这个类也就是抽象类。    * 可是当缉毒犬有其他额外功能时，而这个功能并不在这个事物的体系中。这时可以让缉毒犬具备犬科自身特点的同时也有其他额外功能，可以将这个额外功能定义接口中。* D: 代码演示</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 缉毒</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 缉毒();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义犬科的共性功能</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 犬科</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 吃饭();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 吼叫();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缉毒犬属于犬科一种，让其继承犬科，获取的犬科的特性，</span></span><br><span class="line"><span class="comment">//由于缉毒犬具有缉毒功能，那么它只要实现缉毒接口即可，这样即保证缉毒犬具备犬科的特性，也拥有了缉毒的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 缉毒犬 <span class="keyword">extends</span> 犬科 <span class="keyword">implements</span> 缉毒</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 缉毒() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 吃饭() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> 吼叫() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 缉毒猪 <span class="keyword">implements</span> 缉毒</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 缉毒() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* E: 接口和抽象类区别总结</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相同点:</span><br><span class="line">都位于继承的顶端,用于被其他类实现或继承;</span><br><span class="line">都不能直接实例化对象;</span><br><span class="line">都包含抽象方法,其子类都必须覆写这些抽象方法;</span><br><span class="line">区别:</span><br><span class="line">抽象类为部分方法提供实现,避免子类重复实现这些方法,提高代码重用性;</span><br><span class="line">接口只能包含抽象方法;</span><br><span class="line"><span class="string">" 一个类只能继承一个直接父类(可能是抽象类),却可以实现多个接口;(接口弥补了Java的单继承) "</span></span><br><span class="line">抽象类是这个事物中应该具备的内容, 继承体系是一种 is..a关系</span><br><span class="line">接口是这个事物中的额外内容,继承体系是一种 like..a关系</span><br><span class="line"></span><br><span class="line">二者的选用:</span><br><span class="line"><span class="string">" 优先选用接口,尽量少用抽象类; "</span> </span><br><span class="line">需要定义子类的行为,又要为子类提供共性功能时才选用抽象类;</span><br></pre></td></tr></table></figure><h3 id="12多态概述"><a href="#12多态概述" class="headerlink" title="12多态概述"></a>12多态概述</h3><pre><code>* A: 多态概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">多态是继封装、继承之后，面向对象的第三大特性。</span><br><span class="line">现实事物经常会体现出多种形态，如学生，学生是人的一种，则一个具体的同学张三既是学生也是人，即出现两种形态。</span><br><span class="line">Java作为面向对象的语言，同样可以描述一个事物的多种形态。如Student类继承了Person类，一个Student的对象便既是Student，又是Person。</span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" Java中多态的代码体现在一个子类对象(实现类对象)既可以给这个子类(实现类对象)引用变量赋值，</span></span><br><span class="line"><span class="string">又可以给这个子类(实现类对象)的父类(接口)变量赋值。"</span></span><br><span class="line">**************************************************************</span><br><span class="line">如Student类可以为Person类的子类。那么一个Student对象既可以赋值给一个Student类型的引用，</span><br><span class="line">也可以赋值给一个Person类型的引用。</span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" 最终多态体现为父类引用变量可以指向子类对象。</span></span><br><span class="line"><span class="string">多态的前提是必须有子父类关系或者类实现接口关系，否则无法完成多态。 "</span></span><br><span class="line">**************************************************************</span><br><span class="line"><span class="string">" 在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法。"</span></span><br></pre></td></tr></table></figure><h3 id="13多态调用的三种格式"><a href="#13多态调用的三种格式" class="headerlink" title="13多态调用的三种格式"></a>13多态调用的三种格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* A:<span class="string">"多态的定义格式"</span>：</span><br><span class="line">* 就是父类的引用变量指向子类对象</span><br><span class="line"> 父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line"> 变量名.方法名();</span><br><span class="line"></span><br><span class="line">* B: <span class="string">"普通类多态定义的格式"</span></span><br><span class="line">父类 变量名 = <span class="keyword">new</span> 子类();</span><br><span class="line">举例：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">* C: <span class="string">"抽象类多态定义格式"</span></span><br><span class="line">抽象类 变量名 = <span class="keyword">new</span> 抽象类子类();</span><br><span class="line">举例：</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"重写父类抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br><span class="line">* D: <span class="string">"接口多态定义的格式"</span></span><br><span class="line">接口 变量名 = <span class="keyword">new</span> 接口实现类();</span><br><span class="line">如： <span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"重写接口抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">* E: <span class="string">"注意事项"</span></span><br><span class="line"><span class="string">"同一个父类的方法会被不同的子类重写。在调用方法时，调用的为各个子类重写后的方法。"</span></span><br><span class="line">如 Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">   Person p2 = <span class="keyword">new</span> Teacher();</span><br><span class="line">   p1.work(); <span class="comment">//p1会调用Student类中重写的work方法</span></span><br><span class="line">   p2.work(); <span class="comment">//p2会调用Teacher类中重写的work方法</span></span><br><span class="line">当变量名指向不同的子类对象时，由于每个子类重写父类方法的内容不同，所以会调用不同的方法。</span><br></pre></td></tr></table></figure><h3 id="14多态成员方法的特点"><a href="#14多态成员方法的特点" class="headerlink" title="14多态成员方法的特点"></a>14多态成员方法的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">* A: 掌握了多态的基本使用后，那么多态出现后类的成员有啥变化呢？前面学习继承时，我们知道子父类之间成员变量有了自己的特定变化，</span><br><span class="line">* 那么当多态出现后，成员变量在使用上有没有变化呢？</span><br><span class="line">* 多态出现后会导致子父类中的成员变量有微弱的变化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 代码演示</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(f.num);<span class="comment">//4</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(z.num);<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* C: 多态成员变量</span><br><span class="line"><span class="string">"当子父类中出现同名的成员变量时，多态调用该变量时：</span></span><br><span class="line"><span class="string">编译时期：参考的是引用型变量所属的类中是否有被调用的成员变量。没有，编译失败。</span></span><br><span class="line"><span class="string">运行时期：也是调用引用型变量所属的类中的成员变量。"</span></span><br><span class="line"><span class="string">"简单记：编译和运行都参考等号的左边。编译运行看左边。"</span></span><br><span class="line"></span><br><span class="line">* D: 多态出现后会导致子父类中的成员方法有微弱的变化。看如下代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu show num"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi show num"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* E: 多态成员方法</span><br><span class="line">编译时期：参考引用变量所属的类，如果没有类中没有调用的方法，编译失败。</span><br><span class="line">运行时期：参考引用变量所指的对象所属的类，并运行对象所属类中的成员方法。</span><br><span class="line">简而言之：编译看左边，运行看右边。</span><br></pre></td></tr></table></figure><h3 id="15instanceof关键字"><a href="#15instanceof关键字" class="headerlink" title="15instanceof关键字"></a>15instanceof关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* A: 作用</span><br><span class="line"> 可以通过<span class="keyword">instanceof</span>关键字来判断某个对象是否属于某种数据类型。如学生的对象属于学生类，学生的对象也属于人类</span><br><span class="line"></span><br><span class="line">* 格式:</span><br><span class="line"><span class="keyword">boolean</span>  b  = 对象  <span class="keyword">instanceof</span>  数据类型;</span><br><span class="line"></span><br><span class="line">* 举例:</span><br><span class="line">Person p1 = <span class="keyword">new</span> Student(); <span class="comment">// 前提条件，学生类已经继承了人类</span></span><br><span class="line"><span class="keyword">boolean</span> flag = p1 <span class="keyword">instanceof</span> Student; <span class="comment">//flag结果为true</span></span><br><span class="line"><span class="keyword">boolean</span> flag2 = p2 <span class="keyword">instanceof</span> Teacher; <span class="comment">//flag结果为false</span></span><br></pre></td></tr></table></figure><h3 id="16多态-向上转型"><a href="#16多态-向上转型" class="headerlink" title="16多态-向上转型"></a>16多态-向上转型</h3><pre><code>* A: 多态的转型分为向上转型与向下转型两种：* B: 向上转型：当有子类对象赋值给一个父类引用时，便是向上转型，多态本身就是向上转型的过程。    使用格式：    父类类型  变量名 = new 子类类型();    如：Person p = new Student();</code></pre><h3 id="17多态-向下转型"><a href="#17多态-向下转型" class="headerlink" title="17多态-向下转型"></a>17多态-向下转型</h3><pre><code>* A: 向下转型：一个已经向上转型的子类对象可以使用强制类型转换的格式，将父类引用转为子类引用，这个过程是向下转型。如果是直接创建父类对象，是无法向下转型的！    使用格式：    子类类型 变量名 = (子类类型) 父类类型的变量;    如:Student stu = (Student) p;  //变量p 实际上指向Student对象</code></pre><h3 id="18多态的好处和弊端"><a href="#18多态的好处和弊端" class="headerlink" title="18多态的好处和弊端"></a>18多态的好处和弊端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* A: 多态的好处和弊端</span><br><span class="line">* 当父类的引用指向子类对象时，就发生了向上转型，即把子类类型对象转成了父类类型。</span><br><span class="line">  向上转型的好处是隐藏了子类类型，提高了代码的扩展性。</span><br><span class="line">* 但向上转型也有弊端，只能使用父类共性的内容，而无法使用子类特有功能，功能有限制。</span><br><span class="line"></span><br><span class="line">* B: 看如下代码</span><br><span class="line"><span class="comment">//描述动物类，并抽取共性eat方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 描述狗类，继承动物类，重写eat方法，增加lookHome方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"啃骨头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookHome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"看家"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述猫类，继承动物类，重写eat方法，增加catchMouse方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"抓老鼠"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal a = <span class="keyword">new</span> Dog(); <span class="comment">//多态形式，创建一个狗对象</span></span><br><span class="line">a.eat(); <span class="comment">// 调用对象中的方法，会执行狗类中的eat方法</span></span><br><span class="line"><span class="comment">// a.lookHome();//使用Dog类特有的方法，需要向下转型，不能直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使用狗类的lookHome方法，需要向下转型</span></span><br><span class="line"><span class="comment">// 向下转型过程中，可能会发生类型转换的错误，即ClassCastException异常</span></span><br><span class="line"><span class="comment">// 那么，在转之前需要做健壮性判断 </span></span><br><span class="line"><span class="keyword">if</span>( !a <span class="keyword">instanceof</span> Dog)&#123; <span class="comment">// 判断当前对象是否是Dog类型</span></span><br><span class="line"> System.out.println(<span class="string">"类型不匹配，不能转换"</span>); </span><br><span class="line"> <span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line">Dog d = (Dog) a; <span class="comment">//向下转型</span></span><br><span class="line">d.lookHome();<span class="comment">//调用狗类的lookHome方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* C 多态总结:</span><br><span class="line">什么时候使用向上转型：</span><br><span class="line">当不需要面对子类类型时，通过提高扩展性，或者使用父类的功能就能完成相应的操作，这时就可以使用向上转型。</span><br><span class="line">如：</span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">    a.eat();</span><br><span class="line">什么时候使用向下转型</span><br><span class="line">当要使用子类特有功能时，就需要使用向下转型。</span><br><span class="line">如：Dog d = (Dog) a; <span class="comment">//向下转型</span></span><br><span class="line">    d.lookHome();<span class="comment">//调用狗类的lookHome方法</span></span><br><span class="line">向下转型的好处：可以使用子类特有功能。</span><br><span class="line">弊端是：需要面对具体的子类对象；在向下转型时容易发生 ClassCastException 类型转换异常。在转换之前必须做类型判断。</span><br><span class="line">如：<span class="keyword">if</span>( !a <span class="keyword">instanceof</span> Dog)&#123;…&#125;</span><br></pre></td></tr></table></figure><h3 id="19多态举例"><a href="#19多态举例" class="headerlink" title="19多态举例"></a>19多态举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">* A: 毕老师和毕姥爷的故事</span><br><span class="line">* 案例:</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">描述毕老师和毕姥爷，</span></span><br><span class="line"><span class="comment">毕老师拥有讲课和看电影功能</span></span><br><span class="line"><span class="comment">毕姥爷拥有讲课和钓鱼功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 毕姥爷 </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 讲课() &#123;</span><br><span class="line">System.out.println(<span class="string">"政治"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> 钓鱼() &#123;</span><br><span class="line">System.out.println(<span class="string">"钓鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 毕老师继承了毕姥爷，就有拥有了毕姥爷的讲课和钓鱼的功能，</span></span><br><span class="line"><span class="comment">// 但毕老师和毕姥爷的讲课内容不一样，因此毕老师要覆盖毕姥爷的讲课功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 毕老师 <span class="keyword">extends</span> 毕姥爷 </span>&#123;</span><br><span class="line"><span class="keyword">void</span> 讲课() &#123;</span><br><span class="line">System.out.println(<span class="string">"Java"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> 看电影() &#123;</span><br><span class="line">System.out.println(<span class="string">"看电影"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 多态形式</span></span><br><span class="line">毕姥爷 a = <span class="keyword">new</span> 毕老师(); <span class="comment">// 向上转型</span></span><br><span class="line">a.讲课(); <span class="comment">// 这里表象是毕姥爷，其实真正讲课的仍然是毕老师，因此调用的也是毕老师的讲课功能</span></span><br><span class="line">a.钓鱼(); <span class="comment">// 这里表象是毕姥爷，但对象其实是毕老师，而毕老师继承了毕姥爷，即毕老师也具有钓鱼功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当要调用毕老师特有的看电影功能时，就必须进行类型转换</span></span><br><span class="line">毕老师 b = (毕老师) a; <span class="comment">// 向下转型</span></span><br><span class="line">b.看电影();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20笔记本电脑案例"><a href="#20笔记本电脑案例" class="headerlink" title="20笔记本电脑案例"></a>20笔记本电脑案例</h3><pre><code> * A:案例介绍     * 定义USB接口（具备开启功能、关闭功能），笔记本要使用USB设备，即笔记本在生产时需要预留可以插入USB设备的USB接口，即就是笔记本具备使用USB设备的功能，     * 但具体是什么USB设备，笔记本并不关心，只要符合USB规格的设备都可以。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守USB规范，不然鼠标和键盘的生产出来无法使用    * 进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘        USB接口，包含开启功能、关闭功能        笔记本类，包含运行功能、关机功能、使用USB设备功能        鼠标类，要符合USB接口        键盘类，要符合USB接口* B: 案例分析    * 阶段一：        使用笔记本，笔记本有运行功能，需要笔记本对象来运行这个功能    * 阶段二：        想使用一个鼠标，又有一个功能使用鼠标，并多了一个鼠标对象。    * 阶段三：        还想使用一个键盘 ，又要多一个功能和一个对象    * 问题：每多一个功能就需要在笔记本对象中定义一个方法，不爽，程序扩展性极差。        降低鼠标、键盘等外围设备和笔记本电脑的耦合性。</code></pre><h3 id="21笔记本电脑案例代码实现"><a href="#21笔记本电脑案例代码实现" class="headerlink" title="21笔记本电脑案例代码实现"></a>21笔记本电脑案例代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">* A: 代码实现</span><br><span class="line">定义鼠标、键盘，笔记本三者之间应该遵守的规则</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">// 开启功能</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">// 关闭功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">鼠标实现USB规则</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鼠标开启"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"鼠标关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">键盘实现USB规则</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyBoard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"键盘开启"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"键盘关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">定义笔记本</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</span><br><span class="line"><span class="comment">// 笔记本开启运行功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"笔记本运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔记本使用usb设备，这时当笔记本对象调用这个功能时，必须给其传递一个符合USB规则的USB设备</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useUSB</span><span class="params">(USB usb)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否有USB设备</span></span><br><span class="line"><span class="keyword">if</span> (usb != <span class="keyword">null</span>) &#123;</span><br><span class="line">usb.open();</span><br><span class="line">usb.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"笔记本关闭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建笔记本实体对象</span></span><br><span class="line">NoteBook nb = <span class="keyword">new</span> NoteBook();</span><br><span class="line"><span class="comment">// 笔记本开启</span></span><br><span class="line">nb.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建鼠标实体对象</span></span><br><span class="line">Mouse m = <span class="keyword">new</span> Mouse();</span><br><span class="line"><span class="comment">// 笔记本使用鼠标</span></span><br><span class="line">nb.useUSB(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建键盘实体对象</span></span><br><span class="line">KeyBoard kb = <span class="keyword">new</span> KeyBoard();</span><br><span class="line"><span class="comment">// 笔记本使用键盘</span></span><br><span class="line">nb.useUSB(kb);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 笔记本关闭</span></span><br><span class="line">nb.shutDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22小结"><a href="#22小结" class="headerlink" title="22小结"></a>22小结</h3><p>接口：理解为是一个特殊的抽象类，但它不是类，是一个接口<br>——————————————————————————————————————————————————————————<br>接口的特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，定义一个接口用<span class="class"><span class="keyword">interface</span>关键字</span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">Inter</span></span>&#123;&#125;</span><br><span class="line"><span class="number">2</span>，一个类实现一个接口，实现implements关键字</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Inter</span></span>&#123;&#125;</span><br><span class="line"><span class="number">3</span>, 接口不能直接创建对象</span><br><span class="line">   通过多态的方式，由子类来创建对象，接口多态</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>接口中的成员特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">成员变量：</span><br><span class="line">只能是<span class="keyword">final</span> 修饰的常量</span><br><span class="line">默认修饰符： <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">构造方法：</span><br><span class="line">无</span><br><span class="line">成员方法：</span><br><span class="line">只能是抽象方法</span><br><span class="line">默认修饰符: <span class="keyword">public</span> <span class="keyword">abstract</span></span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>类与类，类与接口，接口与接口之间的关系</p><pre><code>类与类之间：继承关系，单继承，可以是多层继承类与接口之间: 实现关系，单实现，也可以多实现接口与接口之间：继承关系，单继承，也可以是多继承            Java中的类可以继承一个父类的同时，实现多个接口</code></pre><p>——————————————————————————————————————————————————————————<br>多态：理解为同一种物质的多种形态<br>多态使用的前提：</p><pre><code>        1，有继承或者实现关系        2，要方法重写        3，父类引用指向子类对象——————————————————————————————————————————————————————————多态的成员访问特点：        方法的运行看右边，其他都看左边多态的好处：            提高了程序的扩展性——————————————————————————————————————————————————————————多态的弊端：        不能访问子类的特有功能——————————————————————————————————————————————————————————多态的分类</code></pre><p>——————————————————————————————————————————————————————————<br>类的多态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">             System.out.println(“重写父类抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>接口的多态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“重写接口抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure></p><p>——————————————————————————————————————————————————————————<br>instanceof 关键字</p><pre><code>格式： 对象名 instanceof 类名返回值： true, false作用： 判断指定的对象 是否为 给定类创建的对象</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541385820/samples/test/photo-1539580709660-0505d36fa6e7.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、接口&lt;br&gt;2、多态&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础8</title>
    <link href="https://leesen998.github.io/2016/10/11/day10%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/11/day10笔记/</id>
    <published>2016-10-11T02:21:53.000Z</published>
    <updated>2018-11-05T08:00:15.466Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541167132/samples/java%20files/photo-1539452851739-c57dee0c0859.jpg" alt="" style="width:100%"></p><p>1、继承<br>2、抽象类<br>3、综合案例—员工类系列定义</p><a id="more"></a><h3 id="01继承的概述"><a href="#01继承的概述" class="headerlink" title="01继承的概述"></a>01继承的概述</h3><pre><code>*A:继承的概念   *a:继承描述的是事物之间的所属关系，通过继承可以使多种事物之间形成一种关系体系   *b:在Java中，类的继承是指在一个现有类的基础上去构建一个新的类，       构建出来的新类被称作子类，现有类被称作父类 *B:继承关系的子类特点     *a:子类会自动拥有父类所有非private修饰的属性和方法</code></pre><h3 id="02继承的定义格式和使用"><a href="#02继承的定义格式和使用" class="headerlink" title="02继承的定义格式和使用"></a>02继承的定义格式和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">*A:继承的格式</span><br><span class="line">   <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;&#125;</span><br><span class="line">*B:雇员(Employee)与研发部员工(Developer)案例:</span><br><span class="line">   *cn.itcast.demo01包下:</span><br><span class="line">   *Employee.java:</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义员工类Employee</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">String name; <span class="comment">// 定义name属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;<span class="comment">// 定义员工的工作方法</span></span><br><span class="line">System.out.println(<span class="string">"尽心尽力地工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *Developer.java:</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义研发部员工类Developer 继承 员工类Employee</span></span><br><span class="line"><span class="comment"> * 继承了父类中所有非private修饰的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个打印name的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *测试员工类与研发部员工类:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义测试类</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Developer d = <span class="keyword">new</span> Developer(); <span class="comment">// 创建一个研发部员工类对象</span></span><br><span class="line">d.name = <span class="string">"小明"</span>; <span class="comment">// 为该员工类的name属性进行赋值</span></span><br><span class="line">d.printName(); <span class="comment">// 调用该员工的printName()方法</span></span><br><span class="line">d.work(); <span class="comment">// 调用Developer类继承来的work()方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      *通过子类对象既可以调用自身的非<span class="keyword">private</span>修饰的成员,也可以调用父类的非<span class="keyword">private</span>修饰的成员</span><br></pre></td></tr></table></figure><h3 id="03继承的好处"><a href="#03继承的好处" class="headerlink" title="03继承的好处"></a>03继承的好处</h3><pre><code>*A:继承的好处：    *1、继承的出现提高了代码的复用性，提高软件开发效率。    *2、继承的出现让类与类之间产生了关系，提供了多态的前提。</code></pre><h3 id="04继承的注意事项"><a href="#04继承的注意事项" class="headerlink" title="04继承的注意事项"></a>04继承的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> *A:继承的注意事项 </span><br><span class="line"> *a:在Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类，例如下面这种情况是不合法的。</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;&#125;  <span class="comment">// C类不可以同时继承A类和B类</span></span><br><span class="line">  假如支持多继承例如:</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">               </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     C c=<span class="keyword">new</span> C();</span><br><span class="line">     System.out.println(c.a);<span class="comment">//到底是调用A的还是B的成员变量??无法确定</span></span><br><span class="line">     c.method();<span class="comment">//到底是调用A的还是B的成员方法??无法确定</span></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">      *b:多个类可以继承一个父类，例如下面这种情况是允许的(就像你爹可以多个儿子,但是这些儿子都只有一个爹)</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">// 类B和类C都可以继承类A</span></span><br><span class="line"> </span><br><span class="line">     *c:在Java中，多层继承是可以的，</span><br><span class="line">        即一个类的父类可以再去继承另外的父类，</span><br><span class="line">        例如C类继承自B类，而B类又可以去继承A类，这时，C类也可称作A类的子类。下面这种情况是允许的。</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;   <span class="comment">// 类B继承类A，类B是类A的子类</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;   <span class="comment">// 类C继承类B，类C是类B的子类，同时也是类A的子类</span></span><br><span class="line">     </span><br><span class="line">         *d:在Java中，子类和父类是一种相对概念，</span><br><span class="line">           也就是说一个类是某个类父类的同时，也可以是另一个类的子类。</span><br><span class="line">           例如上面的这种情况中，B类是A类的子类，同时又是C类的父类。</span><br></pre></td></tr></table></figure><h3 id="05继承的体系"><a href="#05继承的体系" class="headerlink" title="05继承的体系"></a>05继承的体系</h3><p>   *A:继承的体系:</p><pre><code>                                  动物(吃)                                    |                           -------------------------                           |                        |                        猫科动物(吃,胎生)      爬行动物(吃,卵生)                           |                            |         -------------------------------        -----------------               |                             |        |                |        猫(吃,抓老鼠,胎生)   虎(吃,领地,胎生)  蛇(吃,冬眠,卵生)  鳄鱼(吃,潜水,卵生)*a:动物体系是对每个具体事物共性的抽取,子类的共性抽取形成父类*b:父类:具有所有子类的共性内容   子类:不但有共性还有自身特有的内容*c:整个继承体系,越向上越抽象,越向下越具体</code></pre><h3 id="06继承后子类父类成员变量的特点"><a href="#06继承后子类父类成员变量的特点" class="headerlink" title="06继承后子类父类成员变量的特点"></a>06继承后子类父类成员变量的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">A:继承后子类父类成员变量的特点</span><br><span class="line">  a:子类的对象调用成员变量的时候,子类自己有,使用子类,子类自己没有调用的父类</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Fu中的成员变量。</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Zi中的成员变量</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//Zi中的成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Fu num="</span>+num);</span><br><span class="line"><span class="comment">//访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">"Zi num2="</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi(); <span class="comment">//创建子类对象</span></span><br><span class="line">z.show(); <span class="comment">//调用子类中的show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   b:当子父类中出现了同名成员变量</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Fu中的成员变量。</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//Zi中的成员变量</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;   </span><br><span class="line"><span class="comment">//子类的局部变量</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接访问,遵循就近查找原则</span></span><br><span class="line">              System.out.println(num);<span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子父类中出现了同名的成员变量时</span></span><br><span class="line"><span class="comment">//在子类中需要访问父类中非私有成员变量时，需要使用super关键字</span></span><br><span class="line"><span class="comment">//访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">"Fu num="</span>+<span class="keyword">super</span>.num);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">"Zi num2="</span>+<span class="keyword">this</span>.num);<span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi(); <span class="comment">//创建子类对象</span></span><br><span class="line">z.show(); <span class="comment">//调用子类中的show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07继承后子类父类成员方法的特性-子类重写父类方法"><a href="#07继承后子类父类成员方法的特性-子类重写父类方法" class="headerlink" title="07继承后子类父类成员方法的特性_子类重写父类方法"></a>07继承后子类父类成员方法的特性_子类重写父类方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A:继承后子类父类成员方法的特性</span><br><span class="line">  a:子类的对象调用方法的时候,子类自己有,使用子类,子类自己没有调用的父类</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu类中的show方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi类中的show2方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">b:为什么要有重写?</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//上千行代码</span></span><br><span class="line">           <span class="comment">//Fu类中的方法最先存在,那么如果项目需求变了,该方法</span></span><br><span class="line">           <span class="comment">//功能不能够满足我们的需求,此时我们也不会去改这个方法</span></span><br><span class="line">           <span class="comment">//因为项目中可能有大量的功能已经使用到该方法,如果随意修改可能使调用该方法的功能出现问题</span></span><br><span class="line">           <span class="comment">//所以使用重写方式基于原有功能提供更强的功能</span></span><br><span class="line">    &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   c:子类中出现与父类一模一样的方法时，会出现覆盖操作，也称为override重写、复写或者覆盖</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fu show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="comment">//子类复写了父类的show方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Zi show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">//Zi show 子类有直接使用子类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08方法覆盖的需求"><a href="#08方法覆盖的需求" class="headerlink" title="08方法覆盖的需求"></a>08方法覆盖的需求</h3><pre><code>A:方法覆盖的需求     a:案例:比如手机，当描述一个手机时，它具有发短信，打电话，显示来电号码功能，    后期由于手机需要在来电显示功能中增加显示姓名和头像，    这时可以重新定义一个类描述智能手机，并继承原有描述手机的类。    并在新定义的类中覆盖来电显示功能，在其中增加显示姓名和头像功能    b:分析:我们不改装(破坏)原来的手机,而是再买一个新的智能手机,不但有原有的功能,而且还有特有功能           例:厂商发布新手机都是基于原有手机的升级,不会拿着原有的手机在卖,新产一款       1:分析类的构建:           手机类            属性(成员变量):无            行为(成员方法):               发短信               打电话               来电显示:显示来电号码          智能手机类:            属性(成员变量):无            行为(成员方法):              发短信              打电话              来电显示:显示来电号码,显示姓名和头像          手机类和智能手机类有共性内容:              发短信              打电话              显示来电号码      2:继承关系分析:        对于发短信和打电话功能,让智能手机直接沿用(继承)手机的就可以        但是在智能手机中的来电显示不但实现号码,还显示姓名和头像,同样的都是来电显示功能,智能手机的来电显示比手机的功能更加强大,我们考虑使用重写</code></pre><h3 id="09方法覆盖的手机案例实现"><a href="#09方法覆盖的手机案例实现" class="headerlink" title="09方法覆盖的手机案例实现"></a>09方法覆盖的手机案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"来电显示号码"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="comment">//覆盖父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span></span><br><span class="line"><span class="comment">//从现实生活角度考虑沿用原有的showNum方法名便于用户更快熟悉和接受,而不是再起个新的名字</span></span><br><span class="line"><span class="comment">//用户还需要花费大量时间慢慢接受</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用父类已经存在的功能使用super</span></span><br><span class="line">              <span class="comment">//如果不加super这是调用子类自身的showNum(),自己调用自己,递归</span></span><br><span class="line">              <span class="comment">//方法不断入栈导致内存溢出</span></span><br><span class="line"><span class="keyword">super</span>.showNum();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加自己特有显示姓名和图片功能</span></span><br><span class="line">System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> NewPhone().showNum();<span class="comment">//来电显示  显示来电姓名 显示头像</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10方法覆盖的注意事项"><a href="#10方法覆盖的注意事项" class="headerlink" title="10方法覆盖的注意事项"></a>10方法覆盖的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A:方法覆盖的注意事项 </span><br><span class="line"> a:权限:子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</span><br><span class="line">   四大权限:<span class="keyword">public</span>&gt;默认=<span class="keyword">protected</span>&gt;<span class="keyword">private</span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Zi</span>() <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//编译运行没问题</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;<span class="comment">//编译错误</span></span><br><span class="line"></span><br><span class="line">   &#125;     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">b:方法定义:子类方法和要重写的父类的方法:方法的方法名和参数列表都要一样。</span><br><span class="line">  关于方法的返回值:</span><br><span class="line">    如果是基本数据类型,子类的方法和重写的父类的方法返回值类型必须相同</span><br><span class="line">    如果是引用数据类型,子类的方法和重写的父类的方法返回值类型可以相同或者子类方法的返回值类型是父类方法返回值类型的子类</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Zi</span>() <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//返回值为基本类型的重写</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Fu <span class="title">method</span><span class="params">()</span></span>&#123;<span class="comment">//子类的方法和重写的父类的方法返回值类型可以相同</span></span><br><span class="line"></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Zi <span class="title">method2</span><span class="params">()</span></span>&#123;<span class="comment">//子类方法的返回值类型是父类方法返回值类型的子类</span></span><br><span class="line"></span><br><span class="line">    &#125;     </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   c:重载与重写对比:</span><br><span class="line">      重载:</span><br><span class="line">    权限修饰符(<span class="keyword">public</span> <span class="keyword">private</span> 默认):无关</span><br><span class="line">    方法名:重载的两个方法的方法名必须相同</span><br><span class="line">    形参列表:</span><br><span class="line">      形参类型的顺序不同</span><br><span class="line">      形参的个数不同</span><br><span class="line">      形参的类型不同</span><br><span class="line">      三者至少满足一个</span><br><span class="line">    返回值类型:</span><br><span class="line">      重载与返回值类型无关</span><br><span class="line">重写:</span><br><span class="line">    权限修饰符(<span class="keyword">public</span> <span class="keyword">private</span> 默认): </span><br><span class="line">      子类方法的权限&gt;=父类的方法的权限</span><br><span class="line">    方法名: </span><br><span class="line">      子类方法和父类方法必须相同</span><br><span class="line">    形参列表: </span><br><span class="line">       子类方法和父类方法的形参列表必须相同</span><br><span class="line">    返回值类型:</span><br><span class="line">      基本类数据类型:</span><br><span class="line">        必须相同</span><br><span class="line">      引用数据类型:</span><br><span class="line">       子类方法的返回值类型和父类方法的返回值类型相同</span><br><span class="line">       或者</span><br><span class="line">       子类方法的返回值类型是父类方法的返回值类型的 子类</span><br></pre></td></tr></table></figure><h3 id="11抽象类的产生"><a href="#11抽象类的产生" class="headerlink" title="11抽象类的产生"></a>11抽象类的产生</h3><pre><code>A:抽象类的产生  a:分析事物时，发现了共性内容，就出现向上抽取。会有这样一种特殊情况，就是方法功能声明相同，但方法功能主体不同。那么这时也可以抽取，但只抽取方法声明，不抽取方法主体。那么此方法就是一个抽象方法。</code></pre><h3 id="12抽象类的定义格式"><a href="#12抽象类的定义格式" class="headerlink" title="12抽象类的定义格式"></a>12抽象类的定义格式</h3><pre><code>A:抽象方法定义的格式：  a:public abstract 返回值类型 方法名(参数);    抽象类定义的格式：    abstract class 类名 {     }   b:抽象类示例代码：      /*        *  定义类开发工程师类        *    EE开发工程师 :  工作        *    Android开发工程师 : 工作        *            *    根据共性进行抽取,然后形成一个父类Develop        *    定义方法,工作: 怎么工作,具体干什么呀        *            *    抽象类,不能实例化对象, 不能new的        *    不能创建对象的原因:  如果真的让你new了, 对象.调用抽象方法,抽象方法没有主体,根本就不能运行        *    抽象类使用: 定义类继承抽象类,将抽象方法进行重写,创建子类的对象        */       public abstract class Develop {          //定义方法工作方法,但是怎么工作,说不清楚了,讲不明白           //就不说, 方法没有主体的方法,必须使用关键字abstract修饰           //抽象的方法,必须存在于抽象的类中,类也必须用abstract修饰           public abstract void work();       }</code></pre><h3 id="13抽象类的使用方式"><a href="#13抽象类的使用方式" class="headerlink" title="13抽象类的使用方式"></a>13抽象类的使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   A:抽象类的使用方式</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义类,JavaEE的开发人员</span></span><br><span class="line"><span class="comment"> *  继承抽象类Develop,重写抽象的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEE</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line"><span class="comment">//重写父类的抽象方法</span></span><br><span class="line"><span class="comment">//去掉abstract修饰符,加上方法主体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"JavaEE工程师在开发B/S 软件"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义Android类,继承开发人员类</span></span><br><span class="line"><span class="comment"> *  重写抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"Android工程师开发手机软件"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  测试抽象类</span></span><br><span class="line"><span class="comment"> *    创建他的子类的对象,使用子类的对象调用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> JavaEE ee = <span class="keyword">new</span> JavaEE();</span><br><span class="line"> ee.work();<span class="comment">//"JavaEE工程师在开发B/S 软件"</span></span><br><span class="line"> </span><br><span class="line"> Android and = <span class="keyword">new</span> Android();</span><br><span class="line"> and.work();<span class="comment">//"Android工程师开发手机软件"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14抽象类特点"><a href="#14抽象类特点" class="headerlink" title="14抽象类特点"></a>14抽象类特点</h3> <font color="#D66" size=""><br>A:抽象类的特点<br><strong>a:抽象类和抽象方法都需要被abstract修饰。抽象方法一定要定义在抽象类中。<br>b:抽象类不可以直接创建对象，原因：调用抽象方法没有意义。<br>c:【只有覆盖了抽象类中所有的抽象方法后】，其子类才可以创建对象。否则该子类还是一个抽象类。</strong><br>之所以继承抽象类，更多的是在思想，是面对共性类型操作会更简单。<br>  abstract class A{<br>      public abstract void func();<br>      public abstract void func2();<br>  }<br>  class A2 extends A{//A2把A中的两个抽象方法都重写掉了<br>                       //A2类不再是抽象类<br>       public void func(){}<br>       public void func2(){}<br>  }<br><br>  abstract class A3 extends A{//含有抽象方法的类一定是抽象类<br>       public void func(){<br><br>       }<br>       //public abstract void func2();//func2相当于被继承下来<br>  }<br></font><h3 id="15抽象类的设计思想"><a href="#15抽象类的设计思想" class="headerlink" title="15抽象类的设计思想"></a>15抽象类的设计思想</h3><pre><code>A:抽象类的设计思想  a:抽象类的作用:继承的体系抽象类,强制子类重写抽象的方法    抽象员工:      规定一个方法,work工作      EE员工,Android员工        Develop类 抽象类       abstract work();           |    -------------   |             |  EE            Android  //是我开发的一员必须工作  work(){}       work(){}</code></pre><h3 id="16抽象类的细节"><a href="#16抽象类的细节" class="headerlink" title="16抽象类的细节"></a>16抽象类的细节</h3><p>   A:抽象类的细节</p><p> a:抽象类一定是个父类？</p><pre><code>是的，因为不断抽取而来的。</code></pre><p> b:抽象类中是否可以不定义抽象方法?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     是可以的，那这个抽象类的存在到底有什么意义呢？不让该类创建对象,方法可以直接让子类去使用</span><br><span class="line">     (适配器设计模式)</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   抽象类,可以没有抽象方法,可以定义带有方法体的方法</span></span><br><span class="line"><span class="comment"> *   让子类继承后,可以直接使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"动物睡觉"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;     </span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Cat c = new Cat();</span></span><br><span class="line"><span class="keyword">new</span> Cat().sleep();<span class="comment">//不让该类创建对象,方法可以直接让子类去使用</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p> c:抽象关键字abstract不可以和哪些关键字共存？    </p><pre><code> 1:private：私有的方法子类是无法继承到的，也不存在覆盖，            而abstract和private一起使用修饰方法，abstract既要子类去实现这个方法,            而private修饰子类根本无法得到父类这个方法。互相矛盾。    /*    *   抽象类,可以没有抽象方法,可以定义带有方法体的方法    *   让子类继承后,可以直接使用    */   public  abstract class Animal {        // private abstract void show();        //抽象方法,需要子类重写, 如果父类方法是私有的,子类继承不了,也就没有了重写   }2:final，，后面学3:static，后面学</code></pre><h3 id="17员工案例分析"><a href="#17员工案例分析" class="headerlink" title="17员工案例分析"></a>17员工案例分析</h3><p>A:员工案例分析:<br>  a:需求描述:</p><pre><code>某IT公司有多名员工，按照员工负责的工作不同，进行了部门的划分（研发部员工、维护部员工）。  研发部根据所需研发的内容不同，又分为JavaEE工程师、Android工程师；  维护部根据所需维护的内容不同，又分为网络维护工程师、硬件维护工程师。公司的每名员工都有他们自己的员工编号、姓名，并要做它们所负责的工作。    工作内容    JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站    Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件    网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通    硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机</code></pre><p>  b:继承体系:</p><pre><code>                        员工                         |       --------------------------------------------       |                                          |     研发部员工                                 维护部员工       |                                          |   -------------                              -----------   |            |                             |         |JavaEE工程师   Android工程师         网络维护工程师    硬件维护工程师</code></pre><p>  c:详细描述:</p><pre><code>    根据员工信息的描述，确定每个员工都有员工编号、姓名、要进行工作。     则，把这些共同的属性与功能抽取到父类中（员工类），     关于工作的内容由具体的工程师来进行指定。    工作内容        JavaEE工程师：员工号为xxx的 xxx员工，正在研发淘宝网站        Android工程师：员工号为xxx的 xxx员工，正在研发淘宝手机客户端软件        网络维护工程师：员工号为xxx的 xxx员工，正在检查网络是否畅通        硬件维护工程师：员工号为xxx的 xxx员工，正在修复打印机    创建JavaEE工程师对象，完成工作方法的调用</code></pre><h3 id="18员工案例Employee类的编写"><a href="#18员工案例Employee类的编写" class="headerlink" title="18员工案例Employee类的编写"></a>18员工案例Employee类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> A:员工案例Employee类的编写:按照分析的继承体系来逐个实现</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义员工类</span></span><br><span class="line"><span class="comment"> *    内容,都是所有子类的共性抽取</span></span><br><span class="line"><span class="comment"> *      属性: 姓名,工号</span></span><br><span class="line"><span class="comment"> *      方法: 工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;<span class="comment">// 员工编号</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作方法（抽象方法）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19员工案例的子类的编写"><a href="#19员工案例的子类的编写" class="headerlink" title="19员工案例的子类的编写"></a>19员工案例的子类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  B:员工案例的子类的编写:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  定义研发员工类</span></span><br><span class="line"><span class="comment"> *    属于员工中的一种, 继承员工类 </span></span><br><span class="line"><span class="comment"> *    抽象类Develop 给自己的员工定义自己有的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Develop</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  描述JavaEE开发工程师类</span></span><br><span class="line"><span class="comment"> *    工号,姓名 工作方法</span></span><br><span class="line"><span class="comment"> *  其他的员工,也具备这些共性,抽取到父类中,自己就不需要定义了</span></span><br><span class="line"><span class="comment"> *  是研发部员工的一种,继承研发部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEE</span> <span class="keyword">extends</span> <span class="title">Develop</span></span>&#123;</span><br><span class="line"><span class="comment">//重写他父类的父类的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//调用父类的get方法,获取name,id值</span></span><br><span class="line">System.out.println(<span class="string">"JavaEE的工程师开发淘宝"</span>+ <span class="keyword">super</span>.getName()+<span class="string">".."</span>+<span class="keyword">super</span>.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*定义Android工程师 继承 研发部员工类，重写工作方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在研发淘宝手机客户端软件"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   定义维护员工类,属于员工中的一种</span></span><br><span class="line"><span class="comment"> *   继承员工类</span></span><br><span class="line"><span class="comment"> *   抽象类Maintainer 给自己的员工定义自己有的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maintainer</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  描述的是网络维护工程师</span></span><br><span class="line"><span class="comment"> *  属于维护部的员工,继承维护部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Network</span> <span class="keyword">extends</span> <span class="title">Maintainer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络工程师在检查网络是否畅通"</span>+<span class="keyword">super</span>.getName()+<span class="string">"..."</span>+<span class="keyword">super</span>.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *定义Hardware硬件维护工程师 继承 维护部员工类，重写工作方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hardware</span> <span class="keyword">extends</span> <span class="title">Maintainer</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"员工号为 "</span> + getId() + <span class="string">" 的 "</span> + getName() + <span class="string">" 员工，正在修复打印机"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20小结"><a href="#20小结" class="headerlink" title="20小结"></a>20小结</h3><p>（1）    继承：是指在一个现有类的基础上去构建一个新的类，构建出来的新类被称作子类，现有类被称作父类，子类会自动拥有父类所有<br>继承的好处：可继承的属性和方法。</p><pre><code>提高了代表的可维护性提高了代码的复用性让类与类之间产生了继承关系</code></pre><p>继承的弊端：</p><pre><code>类与类之间的耦合度过高</code></pre><p>继承特点：</p><pre><code>java中类只能够单继承，不能多继承，可以多层继承    class Yy extends Object {}    class Fu extends Yy{}    class Zi extends Fu {}所有的类都直接或者间接的继承了 Object类，Object类称为祖宗类</code></pre><p>继承的注意事项：</p><pre><code>1，使用关键字 extends 让类与类之间 产生继承关系2, 父类私有的成员，子类不能继承，因为根本看不到3，不能为了继承某个功能而随意进行继承操作， 必须要符合 is a 的关系    苹果 is a 水果    男人 is a 人    狗   is a 人 ， 这种情况就不能继承了</code></pre><p>继承中的成员变量关系：</p><pre><code>  不同名的变量：      子类直接继承使用  同名的变量：默认访问的是子类自己的成员变量(this.成员变量), 想访问父类中的同名变量，请使用 (super.成员变量);</code></pre><p>继承中的成员方法关系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">不同名的方法：</span><br><span class="line">子类直接继承使用</span><br><span class="line">同名的方法：</span><br><span class="line">默认访问的是子类自己的成员方法，想访问父类中的同名方法，请使用 <span class="keyword">super</span>.成员方法();</span><br><span class="line"><span class="keyword">super</span>:用来表示当前对象中包含的父类对象空间的引用</span><br><span class="line"></span><br><span class="line">调用父类的成员变量：</span><br><span class="line"><span class="keyword">super</span>.成员变量;</span><br><span class="line"></span><br><span class="line">调用方法的成员方法:</span><br><span class="line"><span class="keyword">super</span>.成员方法();</span><br></pre></td></tr></table></figure></p><p>(2)方法重写(override)：指 在子父类中，出现了方法声明相同的情况，也叫做方法覆盖，方法复写<br>方法重写的注意事项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，子类的方法声明要与父类相同</span><br><span class="line"><span class="number">2</span>, 子类要重写方法的方法，方法的权限修饰符不能比父类的更低</span><br><span class="line"><span class="number">3</span>, 父类私有的方法，子类不能够进行方法重写</span><br></pre></td></tr></table></figure></p><p>(3)方法重载(overload)：指 在同一个类中，多个方法名称相同，它们的参数列表不同(个数不同，数据类型不同)</p><p>(4)抽象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">抽象方法： 方法只有声明部分，没有方法体,即 <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">抽象类： 包含抽象方法的类，一定是抽象类</span><br><span class="line">     使用 <span class="keyword">abstract</span> 修饰的类，是抽象类</span><br></pre></td></tr></table></figure></p><p>抽象类的特点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，抽象类与抽象方法都必须使用 <span class="keyword">abstract</span>来修饰 </span><br><span class="line"><span class="number">2</span>，抽象类不能直接创建对象</span><br><span class="line"><span class="number">3</span>，抽象类中可以有抽象方法，也可以没有抽象方法</span><br><span class="line"><span class="number">4</span>，抽象类的子类</span><br><span class="line">a，实现了抽象方法的具体类</span><br><span class="line">b，抽象类</span><br></pre></td></tr></table></figure></p><p>抽象类面试题：</p><pre><code>    1，抽象类中是否可以没有抽象方法？如果可以，那么，该类还定义成抽象类有意义吗？为什么？可以没有抽象方法，有意义，不会让其他人直接创建该类对象</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541167132/samples/java%20files/photo-1539452851739-c57dee0c0859.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、继承&lt;br&gt;2、抽象类&lt;br&gt;3、综合案例—员工类系列定义&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础7</title>
    <link href="https://leesen998.github.io/2016/10/10/day09%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/10/day09笔记/</id>
    <published>2016-10-10T13:21:53.000Z</published>
    <updated>2018-11-05T08:12:02.674Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058368/java/photo-1538831539254-abe4ffd1a812.jpg" alt="" style="width:100%"></p><p>1、面向对象思想<br>2、类与对象的关系<br>3、局部变量和成员变量的关系<br>4、封装思想<br>5、private,this关键字<br>6、随机点名器</p><a id="more"></a><h2 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h2><h3 id="面向对象和面向过程的思想"><a href="#面向对象和面向过程的思想" class="headerlink" title="面向对象和面向过程的思想"></a>面向对象和面向过程的思想</h3><pre><code>* A: 面向过程与面向对象都是我们编程中，编写程序的一种思维方式    * a: 面向过程的程序设计方式，是遇到一件事时，思考“我该怎么做”，然后一步步实现的过程。    * b: 面向对象的程序设计方式，是遇到一件事时，思考“我该让谁来做”，然后那个“谁”就是对象，他要怎么做这件事是他自己的事，反正最后一群对象合力能把事就好就行了。</code></pre><h3 id="面向对象的思想的生活案例"><a href="#面向对象的思想的生活案例" class="headerlink" title="面向对象的思想的生活案例"></a>面向对象的思想的生活案例</h3><pre><code>* A: 买电脑（组装机）    * a: 面向过程：自己该怎么做    * b: 面向对象：找人帮我们做</code></pre><h3 id="面向对象好处"><a href="#面向对象好处" class="headerlink" title="面向对象好处"></a>面向对象好处</h3><pre><code>* A: 面向对象好处    * a: 面向对象思维方式是一种更符合人们思考习惯的思想    * b: 面向过程思维方式中更多的体现的是执行者（自己做事情），面向对象中更多的体现是指挥者（指挥对象做事情）。    * c: 面向对象思维方式将复杂的问题简单化。</code></pre><h3 id="大象装进冰箱的代码案例"><a href="#大象装进冰箱的代码案例" class="headerlink" title="大象装进冰箱的代码案例"></a>大象装进冰箱的代码案例</h3><pre><code>* A: 需求：把大象装冰箱里    * a: 面向过程                 * 自己打开冰箱门        * 自己将大象装进去        * 自己关闭冰箱门        * b: 面向对象        * 分析发现打开、装、关闭都是冰箱的功能。即冰箱对象具    备如下功能        * 冰箱打开        * 冰箱存储        * 冰箱关闭* B: 通过伪代码描述大象和冰箱    * 描述大象：        class 大象        {        }    * 描述冰箱        class冰箱        {            void 打开(){}            void 存储(大象){}            void 关闭(){}        }* C: 使用对象：    * 1、创建冰箱的对象        * 冰箱 bx = new 冰箱();      * 2、调用冰箱的功能        * 对象.功能()；        * bx.打开();        * bx.存储(new 大象());        * bx.关闭();* D：总结：    * 1、先按照名词提炼问题领域中的对象    * 2、对对象进行描述，其实就是在明确对象中应该具备的属性和功能    * 3、通过new的方式就可以创建该事物的具体对象    * 4、通过该对象调用它以后的功能。</code></pre><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><h3 id="定义小汽车类"><a href="#定义小汽车类" class="headerlink" title="定义小汽车类"></a>定义小汽车类</h3><pre><code>* A: 分析小汽车的属性和功能    * 属性        * 颜色        * 轮胎个数    * 功能        * 运行    * B: 通过伪代码描述小汽车    * 小汽车{        * 颜色        * 轮胎个数        * 运行(){}    * }* C：通过JAVA代码描述小汽车</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">* String color;</span><br><span class="line">* <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">* <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">* System.out.println(color + <span class="string">":"</span> + number);</span><br><span class="line">* &#125;</span><br><span class="line">* &#125;</span><br></pre></td></tr></table></figure><h3 id="测试汽车类"><a href="#测试汽车类" class="headerlink" title="测试汽车类"></a>测试汽车类</h3><pre><code>* A: 创见对象的格式    * a: 类名 变量名 = new 类名();* B: 测试汽车类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 测试：Car类中的run方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 1,创建Car的对象。给对象起个名字。</span></span><br><span class="line">Car c = <span class="keyword">new</span> Car();<span class="comment">// c是类类型的变量。c指向了一个具体的Car类型的对象。</span></span><br><span class="line"><span class="comment">// 2,通过已有的对象调用该对象的功能。格式：对象.对象成员;</span></span><br><span class="line"><span class="comment">// 3,可以该对象的属性赋值。</span></span><br><span class="line">c.color = <span class="string">"red"</span>;</span><br><span class="line">c.number = <span class="number">4</span>;</span><br><span class="line">c.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的内存图"><a href="#对象的内存图" class="headerlink" title="对象的内存图"></a>对象的内存图</h3><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058377/java/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><pre><code>* A: 类和对象的关系    * 类是对某一类事物的抽象描述，而对象用于表示现实中该类事物的个体* B: 举例    * 可以将玩具模型看作是一个类，将一个个玩具看作对象，从玩具模型和玩具之间的关系便可以看出类与对象之间的关系</code></pre><h2 id="局部变量和成员变量的关系"><a href="#局部变量和成员变量的关系" class="headerlink" title="局部变量和成员变量的关系"></a>局部变量和成员变量的关系</h2><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 区别一：定义的位置不同</span><br><span class="line">* 定义在【类】中的变量是【成员变量】</span><br><span class="line">* 定义在【方法】中或者&#123;&#125;语句里面的变量是【局部变量】</span><br><span class="line">* 区别二：在内存中的位置不同</span><br><span class="line">* 【成员变量】存储在【堆内存】的对象中</span><br><span class="line">* 【局部变量】存储在【栈内存】的方法中（局部变量跟随方法进栈）</span><br><span class="line">* 区别三：声明周期不同</span><br><span class="line">* 成员变量随着对象的出现而出现在堆中，随着对象的消失而从堆中消失</span><br><span class="line">* 局部变量随着方法的运行而出现在栈中，随着方法的弹栈而消失</span><br><span class="line">* 区别四：初始化不同</span><br><span class="line">* 【成员变量】因为在堆内存中，【所有默认的初始化值】</span><br><span class="line">* 【局部变量】【没有默认】的初始化值，必须手动的给其赋值才可以使用。</span><br></pre></td></tr></table></figure><h2 id="封装思想"><a href="#封装思想" class="headerlink" title="封装思想"></a>封装思想</h2><h3 id="01方法参数是基本数据类型和引用数据类型"><a href="#01方法参数是基本数据类型和引用数据类型" class="headerlink" title="01方法参数是基本数据类型和引用数据类型"></a>01方法参数是基本数据类型和引用数据类型</h3><pre><code>* A.基本类型</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line">show(x);</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">基本类型作为参数传递时，其实就是将基本类型变量x空间中的值复制了一份传递给调用的方法show()，当在show()方法中x接受到了复制的值，再在show()方法中对x变量进行操作，这时只会影响到show中的x。当show方法执行完成，弹栈后，程序又回到main方法执行，main方法中的x值还是原来的值。</span><br></pre></td></tr></table></figure><pre><code>* B.引用类型</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.x = <span class="number">5</span>;</span><br><span class="line">show(d);</span><br><span class="line">System.out.println(<span class="string">"x="</span>+d.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Demo d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d.x = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">当引用变量作为参数传递时，这时其实是将引用变量空间中的内存地址(引用)复制了一份传递给了show方法的d引用变量。这时会有两个引用同时指向堆中的同一个对象。当执行show方法中的d.x=<span class="number">6</span>时，会根据d所持有的引用找到堆中的对象，并将其x属性的值改为<span class="number">6</span>.show方法弹栈。</span><br><span class="line">由于是两个引用指向同一个对象，不管是哪一个引用改变了引用的所指向的对象的中的值，其他引用再次使用都是改变后的值。</span><br><span class="line"></span><br><span class="line">* C.结论</span><br><span class="line">* 对于基本类型形式参数改变不会影响到实际参数</span><br><span class="line">* 对于引用类型形式参数改变会影响到实际参数</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058377/java/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="方法调用的内存图"></p><h3 id="02封装的概述"><a href="#02封装的概述" class="headerlink" title="02封装的概述"></a>02封装的概述</h3><pre><code>* A.面向对象三大特征    * 封装、继承、多态* B.封装表现    * 1、方法就是一个最基本封装体    * 2、类其实也是一个封装体    * C.封装的好处    * 1、提高了代码的复用性    * 2、隐藏了实现细节，还要对外提供可以访问的方式。便于调用者的使用。这是核心之一，也可以理解为就是封装的概念    * 3、提高了安全性     </code></pre><h3 id="03封装的生活中的举例"><a href="#03封装的生活中的举例" class="headerlink" title="03封装的生活中的举例"></a>03封装的生活中的举例</h3><pre><code>* A.封装的生活中的举例    机箱：    一台电脑，它是由CPU、主板、显卡、内存、硬盘、电源等部件组长，其实我们将这些部件组装在一起就可以使用电脑了，但是发现这些部件都散落在外面，很容造成不安全因素，于是，使用机箱壳子，把这些部件都装在里面，并在机箱壳上留下一些插口等，若不留插口，大家想想会是什么情况。    总结：机箱其实就是隐藏了办卡设备的细节，对外提供了插口以及开关等访问内部细节的方式。* B.总结    * 机箱其实就是隐藏了办卡设备的细节，对外提供了插口以及开关等访问内部细节的方式</code></pre><h2 id="private-this关键字"><a href="#private-this关键字" class="headerlink" title="private,this关键字"></a>private,this关键字</h2><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* A.<span class="keyword">private</span>概述</span><br><span class="line">* <span class="keyword">private</span>可以修饰成员内容包括成员方法和成员变量</span><br><span class="line">* 被<span class="keyword">private</span>修饰的内容不能在其他类访问</span><br><span class="line">* B.使用步骤</span><br><span class="line">* <span class="number">1</span>、通过<span class="keyword">private</span>修饰属性</span><br><span class="line">* C.完整代码 </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"age="</span> + age + <span class="string">",name"</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><pre><code>* A.get和set方法    * 年龄已被私有，错误的值无法赋值，可是正确的值也赋值不了，这样还是不行，那肿么办呢？按照之前所学习的封装的原理，隐藏后，还需要提供访问方式。只要对外提供可以访问的方法，让其他程序访问这些方法。同时在方法中可以对数据进行验证。</code></pre><p>一般对成员属性的访问动作：赋值(设置 set)，取值(获取 get)，因此对私有的变量访问的方式可以提供对应的 setXxx或者getXxx的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">// 私有成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供设置成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于是设置成员变量的值，这里可以加入数据的验证</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt; <span class="number">130</span>) &#123;</span><br><span class="line">System.out.println(a + <span class="string">"不符合年龄的数据范围"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">age = a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供访问成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">* 总结</span><br><span class="line">* 类中不需要对外提供的内容都私有化，包括属性和方法。</span><br><span class="line">以后再描述事物，属性都私有化，并提供setXxx getXxx方法对其进行访问</span><br><span class="line">* 注意</span><br><span class="line">* 私有仅仅是封装的体现形式而已</span><br></pre></td></tr></table></figure></p><h3 id="私有化Person类带get-set"><a href="#私有化Person类带get-set" class="headerlink" title="私有化Person类带get,set"></a>私有化Person类带get,set</h3><pre><code>* 标准代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   类描述人:</span></span><br><span class="line"><span class="comment"> *     属性: 姓名和年龄</span></span><br><span class="line"><span class="comment"> *     方法: 说话</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   私有化所有的属性 (成员变量) ,必须写对应的get/set方法</span></span><br><span class="line"><span class="comment"> *   凡是自定义的类,自定义成员变量,应该私有化,提供get/set</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   this关键字:</span></span><br><span class="line"><span class="comment"> *     区分成员变量和局部变量同名情况</span></span><br><span class="line"><span class="comment"> *     方法中,方位成员变量,写this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set方法,变量name,age赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get方法,变量name,age获取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String  name = <span class="string">"哈哈"</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"人在说话  "</span> + <span class="keyword">this</span>.name + <span class="string">"..."</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* 标准测试代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//调用set方法,对成员变量赋值</span></span><br><span class="line">p.setAge(<span class="number">18</span>);</span><br><span class="line">p.setName(<span class="string">"旺财"</span>);</span><br><span class="line">p.speak();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用get方法,获取成员变量的值</span></span><br><span class="line"><span class="comment">//System.out.println(p.getName());</span></span><br><span class="line"><span class="comment">//System.out.println(p.getAge());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字-区分成员变量和局部变量的同名"><a href="#this关键字-区分成员变量和局部变量的同名" class="headerlink" title="this关键字_区分成员变量和局部变量的同名"></a>this关键字_区分成员变量和局部变量的同名</h3><pre><code>* A.什么时候用    * 当类中存在成员变量和局部变量同名的时候为了区分，就需要使用this关键字* B.代码    class Person {        private int age;        private String name;        public void speak() {            this.name = &quot;小强&quot;;            this.age = 18;            System.out.println(&quot;name=&quot; + this.name + &quot;,age=&quot; + this.age);        }    }    class PersonDemo {        public static void main(String[] args) {            Person p = new Person();            p.speak();        }    }</code></pre><h3 id="this内存图"><a href="#this内存图" class="headerlink" title="this内存图"></a>this内存图</h3><pre><code>* A.this内存图</code></pre><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058375/java/this%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="this的年龄比较"><a href="#this的年龄比较" class="headerlink" title="this的年龄比较"></a>this的年龄比较</h3><pre><code>* A.需求：在Person类中定义功能，判断两个人是否是同龄人* B.代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">",age="</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为同龄人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsAge</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用当前调用该equalsAge方法对象的age和传递进来p的age进行比较</span></span><br><span class="line"><span class="comment">// 由于无法确定具体是哪一个对象调用equalsAge方法，这里就可以使用this来代替</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * if(this.age == p.age) &#123; return true; &#125; return false;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058375/java/this%E4%BD%BF%E7%94%A8-%E5%B9%B4%E9%BE%84%E6%AF%94%E8%BE%83.jpg" alt="方法调用的内存图 "></p><h2 id="随机点名器"><a href="#随机点名器" class="headerlink" title="随机点名器"></a>随机点名器</h2><h3 id="随机点名器案例重构"><a href="#随机点名器案例重构" class="headerlink" title="随机点名器案例重构"></a>随机点名器案例重构</h3><pre><code>* A.需求：随机点名器，即在全班同学中随机的找出一名同学，打印这名同学的个人信息    它具备以下3个内容：    存储所有同学姓名    总览全班同学姓名    随机点名其中一人，打印到控制台* B.代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 第一步：存储全班同学信息</span></span><br><span class="line"><span class="comment"> * 第二步：打印全班同学每一个人的信息</span></span><br><span class="line"><span class="comment"> * 第三部：随机对学生点名，打印学生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;(); <span class="comment">//1.1创建一个可以存储多个同学名字的容器</span></span><br><span class="line"> <span class="comment">//1.存储全班同学信息</span></span><br><span class="line">addStudent(list);</span><br><span class="line"> <span class="comment">//2.打印全班同学每一个人的信息（姓名、年龄）</span></span><br><span class="line">printStudent(list);</span><br><span class="line"> <span class="comment">//3.随机对学生点名，打印学生信息</span></span><br><span class="line">randomStudent(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//键盘输入多个同学名字存储到容器中</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="comment">//创建学生</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(<span class="string">"存储第"</span>+i+<span class="string">"个学生姓名："</span>);</span><br><span class="line">String name = sc.next();</span><br><span class="line">s.setName(name);</span><br><span class="line">System.out.println(<span class="string">"存储第"</span>+i+<span class="string">"个学生年龄："</span>);</span><br><span class="line"><span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">s.setAge(age);</span><br><span class="line"><span class="comment">//添加学生到集合</span></span><br><span class="line">list.add(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 2.打印全班同学每一个人的信息（姓名、年龄）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span> <span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">Student s = list.get(i);</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+s.getName() +<span class="string">",年龄："</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 3.随机对学生点名，打印学生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomStudent</span> <span class="params">(ArrayList&lt;Student&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//在班级总人数范围内，随机产生一个随机数</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line"><span class="comment">//在容器（ArrayList集合）中，查找该随机数所对应的同学信息（姓名、年龄）</span></span><br><span class="line">Student s = list.get(index);</span><br><span class="line">System.out.println(<span class="string">"被随机点名的同学："</span>+s.getName() + <span class="string">"，年龄:"</span> + s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生信息类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* A.类与对象</span><br><span class="line">* 类，用于描述多个对象的共同特征，它是对象的模板。</span><br><span class="line">* 对象，用于描述现实中的个体，它是类的实例。</span><br><span class="line">* 类的定义：使用关键字<span class="class"><span class="keyword">class</span>来定义<span class="title">java</span>中的类</span></span><br><span class="line"><span class="class">* 格式：</span></span><br><span class="line"><span class="class">*<span class="title">class</span> 类名 </span>&#123;</span><br><span class="line">*<span class="comment">//属性</span></span><br><span class="line">*数据类型 变量名;</span><br><span class="line">*…</span><br><span class="line">*<span class="comment">//方法</span></span><br><span class="line">*修饰符 返回值类型 方法名(参数)&#123;   &#125;</span><br><span class="line">*…</span><br><span class="line">*&#125;</span><br><span class="line">*</span><br><span class="line">* B.创建对象：</span><br><span class="line">* 格式：</span><br><span class="line">* 类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line"></span><br><span class="line">* C.封装（<span class="keyword">private</span>关键字）</span><br><span class="line">* 封装，把对象的属性与方法的实现细节隐藏，仅对外提供一些公共的访问方式</span><br><span class="line">* 封装的体现：</span><br><span class="line">* 变量:使用 <span class="keyword">private</span> 修饰，这就是变量的封装</span><br><span class="line">* 方法:也是一种封装，封装了多条代码</span><br><span class="line">* 类： 也是一种封装，封装了多个方法</span><br><span class="line">* D.<span class="keyword">private</span>关键字，私有的意思</span><br><span class="line">* 它可以用来修饰类中的成员(成员变量，成员方法)</span><br><span class="line">* <span class="keyword">private</span>的特点：</span><br><span class="line">* <span class="keyword">private</span>修饰的成员只能在当前类中访问，其他类中无法直接访问</span><br><span class="line">* E.<span class="keyword">this</span>关键字</span><br><span class="line">* <span class="keyword">this</span>关键字，本类对象的引用</span><br><span class="line">* <span class="keyword">this</span>是在方法中使用的，哪个对象调用了该方法，那么，<span class="keyword">this</span>就代表调用该方法的对象引用</span><br><span class="line">* <span class="keyword">this</span>什么时候存在的？当创建对象的时候，<span class="keyword">this</span>存在的</span><br><span class="line">* <span class="keyword">this</span>的作用：用来区别同名的成员变量与局部变量（<span class="keyword">this</span>.成员变量）</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">* <span class="keyword">this</span>.name = name;</span><br><span class="line">* &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1541058368/java/photo-1538831539254-abe4ffd1a812.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、面向对象思想&lt;br&gt;2、类与对象的关系&lt;br&gt;3、局部变量和成员变量的关系&lt;br&gt;4、封装思想&lt;br&gt;5、private,this关键字&lt;br&gt;6、随机点名器&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础6</title>
    <link href="https://leesen998.github.io/2016/10/09/day06%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/09/day06笔记/</id>
    <published>2016-10-09T13:41:53.000Z</published>
    <updated>2018-11-05T08:21:41.219Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864054/java/photo-1540543144-2570163afee1.jpg" alt="" style="width:100%"></p><p>1、自定义类型的定义及使用<br>2、自定义类的内存图<br>3、ArrayList集合的基本功能<br>4、随机点名器案例及库存案例代码优化</p><a id="more"></a><h3 id="01引用数据类型-类"><a href="#01引用数据类型-类" class="headerlink" title="01引用数据类型_类"></a>01引用数据类型_类</h3><pre><code>* A: 数据类型    * a: java中的数据类型分为：基本类型和引用类型* B: 引用类型的分类    * a: Java为我们提供好的类，比如说：Scanner,Random等。    * b: 我们自己创建的类，按照类的定义标准，可以在类中包含多个方法与属性，来供我们使用。 </code></pre><h3 id="02自定义类的概述"><a href="#02自定义类的概述" class="headerlink" title="02自定义类的概述"></a>02自定义类的概述</h3><pre><code>* A: 自定义类的概述    * java代码映射成现实事物的过程就是定义类的过程。    * 举例：        我们就拿一部手机进行分析，它能用来做什么呢？它可以打电话，上网，聊微信等，这些就是手机所提供的功能，也就是方法；手机也有它的特征，如颜色、尺寸大小、品牌型号等，这些就是手机的特征，也就是属性    * 目前，我们只关注类中的属性，类中的方法在面向对象部分再进行学习。</code></pre><h3 id="03自定义类的格式"><a href="#03自定义类的格式" class="headerlink" title="03自定义类的格式"></a>03自定义类的格式</h3><pre><code>* A: 自定义类的格式    * a: 使用类的形式,对现实中的事物进行描述。    * b: 事物由方法和属性两部分组成。        * 方法: 这个事物具备的功能。        * 属性: 这个事物具备的特征。    * c: 格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">属性定义</span><br><span class="line">  修饰符 数据类型 变量名 = 值</span><br><span class="line"></span><br><span class="line">方法定义</span><br><span class="line">  修饰符 返回值类型  方法名(参数列表)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04自定义的手机类"><a href="#04自定义的手机类" class="headerlink" title="04自定义的手机类"></a>04自定义的手机类</h3><pre><code>* A: 自定义的手机类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义手机的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String color ;</span><br><span class="line">String brand ;</span><br><span class="line"><span class="keyword">double</span> size ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05测试手机类"><a href="#05测试手机类" class="headerlink" title="05测试手机类"></a>05测试手机类</h3><p>导包：我们将所有的类放到同一个文件夹下，可以避免导包。</p><p>创建对象：数据类型  变量名 = new 数据类型();</p><p>调用方法：目前我们定义的自定义类不涉及方法，只是属性（自定义类中的方法部分在面向对象部分讲解）<br>访问属性：变量名.属性 (这是当前的方式，后期会采取调用方法的方式替代掉直接访问的方式来完成对属性的访问。)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* A: 调用方法执行流程</span><br><span class="line">* a: 实现引用类型的步骤</span><br><span class="line">* <span class="number">1</span>: 导入包 , 类都是在同一个文件夹,不需要导入包</span><br><span class="line">* <span class="number">2</span>: 创建引用类型的变量</span><br><span class="line">* <span class="number">3</span>: 变量.类型中的功能</span><br><span class="line">* b: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPhone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 2: 创建引用类型的变量</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//System.out.println(p);  //输出内存的地址</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//3: 变量.类型中的功能</span></span><br><span class="line"><span class="comment">//变量 p.的方式,调用类中的属性</span></span><br><span class="line"><span class="comment">//属性就是变量 , 赋值和获取值</span></span><br><span class="line">p.color = <span class="string">"土豪金"</span>;</span><br><span class="line">p.brand = <span class="string">"爱立信"</span>;</span><br><span class="line">p.size = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性值</span></span><br><span class="line">System.out.println(p.color+<span class="string">"  "</span>+p.brand+<span class="string">"  "</span>+p.size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="06自定义类的内存图-1"><a href="#06自定义类的内存图-1" class="headerlink" title="06自定义类的内存图_1"></a>06自定义类的内存图_1</h3><pre><code>* A: 自定义类的内存图_1</code></pre><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864297/java/%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="07自定义类的内存图-2"><a href="#07自定义类的内存图-2" class="headerlink" title="07自定义类的内存图_2"></a>07自定义类的内存图_2</h3><pre><code>* A: 自定义类的内存图_1</code></pre><h3 id="08两个引用类型变量内存图"><a href="#08两个引用类型变量内存图" class="headerlink" title="08两个引用类型变量内存图"></a>08两个引用类型变量内存图</h3><pre><code>* A: 自定义类的内存图_1</code></pre><p>   <img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864298/java/%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></p><h3 id="09自定义类的练习"><a href="#09自定义类的练习" class="headerlink" title="09自定义类的练习"></a>09自定义类的练习</h3><pre><code>* A: 实体类的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    电饭锅，包含属性（品牌、容量大小、颜色等）</span></span><br><span class="line"><span class="comment">定义类,描述事物,电饭锅</span></span><br><span class="line"><span class="comment">  属性: 品牌,大小 ,颜色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义类,类名字,电饭锅</span></span><br><span class="line"><span class="comment">类的范围,定义三个属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DianFanGuo</span></span>&#123;</span><br><span class="line"><span class="comment">//定义三个属性</span></span><br><span class="line">String brand ;</span><br><span class="line">    <span class="keyword">double</span> size ;</span><br><span class="line">String color ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   汽车，包含属性（品牌、排量、类型等）</span></span><br><span class="line"><span class="comment">   定义类,类名 Car</span></span><br><span class="line"><span class="comment">     属性 品牌 排量 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="comment">//定义汽车三个属性</span></span><br><span class="line">String brand ;</span><br><span class="line"><span class="keyword">double</span> paiLiang ;</span><br><span class="line">String type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   学生，包含属性（姓名，年龄，性别等）</span></span><br><span class="line"><span class="comment">   定义类,类名Student</span></span><br><span class="line"><span class="comment">     三个属性: 姓名,年龄,性别 (char)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age ;</span><br><span class="line"><span class="keyword">char</span> sex ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* B: 测试类的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义的测试类</span></span><br><span class="line"><span class="comment">   同时测试,电饭锅,汽车,学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建电饭锅引用类型</span></span><br><span class="line">DianFanGuo dfg = <span class="keyword">new</span> DianFanGuo();</span><br><span class="line"></span><br><span class="line">dfg.brand = <span class="string">"特斯拉"</span>;</span><br><span class="line">dfg.color = <span class="string">"红色"</span>;</span><br><span class="line">dfg.size = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(dfg.brand+<span class="string">"  "</span>+dfg.color+<span class="string">"  "</span>+dfg.size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建汽车引用类型</span></span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.brand = <span class="string">"巨力"</span>;</span><br><span class="line">c.type = <span class="string">"拖拉机"</span>;</span><br><span class="line">c.paiLiang = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c.brand+<span class="string">"  "</span>+c.type+<span class="string">"  "</span>+c.paiLiang);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生引用类型</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.name = <span class="string">"张三"</span>;</span><br><span class="line">stu.age = <span class="number">20</span>;</span><br><span class="line">stu.sex = <span class="string">'男'</span>;</span><br><span class="line">System.out.println(stu.name+<span class="string">"  "</span>+stu.age+<span class="string">"  "</span>+stu.sex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10ArrayList创建变量的步骤"><a href="#10ArrayList创建变量的步骤" class="headerlink" title="10ArrayList创建变量的步骤"></a>10ArrayList创建变量的步骤</h3><p>为了保存这些数目不确定的元素，JDK中提供了一系列特殊的类，这些类可以存储任意类型的元素，并且长度可变，统称为集合。在这里，我们先介绍ArrayList集合.<br>导包：import java.util.ArrayList;</p><p><font color="#DD66" size=""> 创建对象：与其他普通的引用数据类型创建方式完全相同，但是要指定容器中存储的数据类型：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;要存储元素的数据类型&gt;  变量名  =  <span class="keyword">new</span>  ArrayList&lt;要存储元素的数据类型&gt;();</span><br></pre></td></tr></table></figure><pre><code>* A: ArrayList创建变量的步骤    * a: 导入包 java.util包中    * b: 创建引用类型的变量        数据类型&lt; 集合存储的数据类型&gt;  变量名 = new 数据类型&lt;集合存储的数据类型&gt;();           集合存储的数据类型: 要将数据存储到集合的容器中           创建集合引用变量的时候,必须要指定好,存储的类型是什么    * c: 变量名.方法         注意: 集合存储的数据,8个基本类型对应8个引用类型         存储引用类型,不存储基本类型</code></pre><p><font color="#DD66" size=""><br>“&lt;要存储元素的数据类型&gt;”中的数据类型必须是【引用数据类型】，不能是基本数据类型；<br></font><br>下面给出8种基本数据类型所对应的引用数据类型表示形式:</p><pre><code>基本数据类型        对应的引用数据类型表示形式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>Byte</span><br><span class="line"><span class="keyword">short</span>Short</span><br><span class="line">IntInteger</span><br><span class="line"><span class="keyword">long</span>Long</span><br><span class="line"><span class="keyword">float</span>Float</span><br><span class="line"><span class="keyword">double</span>Double</span><br><span class="line"><span class="keyword">char</span>Character</span><br><span class="line"><span class="keyword">boolean</span>Boolean</span><br></pre></td></tr></table></figure><h3 id="11ArrayList创建变量举例"><a href="#11ArrayList创建变量举例" class="headerlink" title="11ArrayList创建变量举例"></a>11ArrayList创建变量举例</h3><pre><code>* A: ArrayList创建变量的示例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建集合容器,指定存储的数据类型</span></span><br><span class="line"><span class="comment">//存储字符串</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合容器,存储整数</span></span><br><span class="line">ArrayList&lt;Integer&gt; array2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建集合容器,存储手机类型</span></span><br><span class="line">ArrayList&lt;Phone&gt; array3 = <span class="keyword">new</span> ArrayList&lt;Phone&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12ArrayList的常见方法"><a href="#12ArrayList的常见方法" class="headerlink" title="12ArrayList的常见方法"></a>12ArrayList的常见方法</h3><pre><code>* A: ArrayList的常见方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* a: add(参数) 向集合中添加元素</span><br><span class="line">* b: get(<span class="keyword">int</span> index) 取出集合中的元素,get方法的参数,写入索引</span><br><span class="line">* c: size() 返回集合的长度, 集合存储元素的个数</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义集合,存储字符串元素</span></span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//调用集合方法add存储元素</span></span><br><span class="line">array.add(<span class="string">"abc"</span>);</span><br><span class="line">array.add(<span class="string">"itcast"</span>);</span><br><span class="line">    array.add(<span class="string">"love"</span>);</span><br><span class="line">array.add(<span class="string">"java"</span>);</span><br><span class="line"><span class="comment">//输出集合的长度,调用集合方法size, size方法的返回值类型 int</span></span><br><span class="line"><span class="keyword">int</span> size = array.size();</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取出集合中的一个元素,获取1索引的元素</span></span><br><span class="line"><span class="comment">//集合的方法get, 获取元素后结果数据类型</span></span><br><span class="line">String s = array.get(<span class="number">1</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(array.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">2</span>));</span><br><span class="line">System.out.println(array.get(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13ArrayList集合的遍历"><a href="#13ArrayList集合的遍历" class="headerlink" title="13ArrayList集合的遍历"></a>13ArrayList集合的遍历</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   集合的遍历</span></span><br><span class="line"><span class="comment">   实现思想也是索引思想</span></span><br><span class="line"><span class="comment">   集合的索引从0开始,到 size()-1</span></span><br><span class="line"><span class="comment">   方法get(int index)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo_2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">array.add(<span class="number">121</span>);</span><br><span class="line">array.add(<span class="number">125</span>);</span><br><span class="line">array.add(<span class="number">123</span>);</span><br><span class="line">array.add(<span class="number">120</span>);</span><br><span class="line">array.add(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对集合进行遍历</span></span><br><span class="line"><span class="comment">//使用方法 size+get组合进行遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line">System.out.println( array.get(i) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14ArrayList补充方法"><a href="#14ArrayList补充方法" class="headerlink" title="14ArrayList补充方法"></a>14ArrayList补充方法</h3><pre><code>* A: ArrayList补充方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: add(<span class="keyword">int</span> 索引,存储的元素) 将元素添加到指定的索引上</span><br><span class="line">* b: set(<span class="keyword">int</span> 索引,修改后的元素) 将指定索引的元素,进行修改</span><br><span class="line">* c: remove(<span class="keyword">int</span> 索引) 删除指定索引上的元素</span><br><span class="line">* d: clear() 清空集合中的所有元素</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码import java.util.ArrayList;public class ArrayListDemo_3{    public static void main(String[] args){        ArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();        array.add(1);        array.add(2);        array.add(3);        array.add(4);        //在索引2上,添加元素7        array.add(2,7);        //将0索引上的元素,修改成10        array.set(0,10);        //将4索引上的元素,删除        array.remove(4);        array.clear();        //使用方法 size+get组合进行遍历        for(int i = 0 ; i &lt; array.size(); i++){            System.out.println( array.get(i) );        }    }}</code></pre><h3 id="15随机点名器案例分析"><a href="#15随机点名器案例分析" class="headerlink" title="15随机点名器案例分析"></a>15随机点名器案例分析</h3><pre><code>* A: 随机点名器案例分析    全班同学中随机的找出一名同学，打印这名同学的个人信息。    我们对本案例进行分析，得出如下分析结果：        1.存储全班同学信息（姓名、年龄）            将容器换成集合，集合中存的是Student类型        2.打印全班同学每一个人的信息（姓名、年龄）             遍历集合        3.在班级总人数范围内，随机产生一个随机数，查找该随机数所对应的同学信息（姓名、年龄）        随机点名器明确地分为了三个功能。如果将多个独立功能的代码写到一起，则代码相对冗长，我们可以针对不同的功能可以将其封装到一个方法中，将完整独立的功能分离出来。        而在存储同学姓名时，如果对每一个同学都定义一个变量进行姓名存储，则会出现过多孤立的变量，很难一次性将全部数据持有。此时，我们采用ArrayList集合来解决多个学生信息的存储问题</code></pre><h3 id="16随机点名器代码实现"><a href="#16随机点名器代码实现" class="headerlink" title="16随机点名器代码实现"></a>16随机点名器代码实现</h3><pre><code>* A: 随机点名器案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   随机点名器,集合改进 (学生的姓名和年龄)</span></span><br><span class="line"><span class="comment">   现实中有学生这个事物,使用定义类的形式,描述学生事物</span></span><br><span class="line"><span class="comment">   属性: 姓名,年龄</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   姓名存储了数组, 将容器换成是集合</span></span><br><span class="line"><span class="comment">   String[] s = &#123;"",""&#125;;</span></span><br><span class="line"><span class="comment">   集合中,存储的是学生的姓名吗?  应该存储Student类型</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   存储学生:</span></span><br><span class="line"><span class="comment">      学生类型,存储到集合中</span></span><br><span class="line"><span class="comment">   总览: 遍历集合</span></span><br><span class="line"><span class="comment">   随机: 随机数,作为索引,到集合中找到元素</span></span><br><span class="line"><span class="comment">   三个功能,共享的数据,集合容器,</span></span><br><span class="line"><span class="comment">   定义三个方法,必须参数传递集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义集合,存储的是StudentName类型变量</span></span><br><span class="line">ArrayList &lt;StudentName&gt; array = <span class="keyword">new</span> ArrayList&lt;StudentName&gt;();</span><br><span class="line"><span class="comment">//调用添加方法</span></span><br><span class="line">add (array);</span><br><span class="line"><span class="comment">//调用遍历集合</span></span><br><span class="line">printArrayList(array);</span><br><span class="line"></span><br><span class="line">randomStudentName(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  随机数,当作集合的索引,到集合中找到元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomStudentName</span><span class="params">(ArrayList&lt;StudentName&gt; array )</span></span>&#123;</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> number = r.nextInt( array.size());</span><br><span class="line"><span class="comment">//随机数,索引,到集合中get</span></span><br><span class="line">StudentName s = array.get(number);</span><br><span class="line">System.out.println( s.name +<span class="string">"  "</span>+s.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    总览学生的信息,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;StudentName&gt; array)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size();i++)&#123;</span><br><span class="line"><span class="comment">//存储集合的时候, 集合.add(sn1)  sn1 是StudentName类型变量</span></span><br><span class="line"><span class="comment">//获取的时候,集合.get方法,获取出来的是什么, 还是StudentName类型变量</span></span><br><span class="line">StudentName s = array.get(i);</span><br><span class="line">System.out.println(s.name+<span class="string">"  "</span>+s.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现存储学生的姓名和年龄</span></span><br><span class="line"><span class="comment">   创建StudentName类型变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(ArrayList&lt;StudentName&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建StudentName类型变量</span></span><br><span class="line">StudentName sn1 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn2 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn3 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn4 = <span class="keyword">new</span> StudentName();</span><br><span class="line">StudentName sn5 = <span class="keyword">new</span> StudentName();</span><br><span class="line"></span><br><span class="line">sn1.name = <span class="string">"张三1"</span>;</span><br><span class="line">sn1.age = <span class="number">201</span>;</span><br><span class="line"></span><br><span class="line">sn2.name = <span class="string">"张三2"</span>;</span><br><span class="line">sn2.age = <span class="number">202</span>;</span><br><span class="line"></span><br><span class="line">sn3.name = <span class="string">"张三3"</span>;</span><br><span class="line">sn3.age = <span class="number">203</span>;</span><br><span class="line"></span><br><span class="line">sn4.name = <span class="string">"张三4"</span>;</span><br><span class="line">sn4.age = <span class="number">204</span>;</span><br><span class="line"></span><br><span class="line">sn5.name = <span class="string">"张三5"</span>;</span><br><span class="line">sn5.age = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将StudentName变量,存储到集合中</span></span><br><span class="line">array.add(sn1);</span><br><span class="line">array.add(sn2);</span><br><span class="line">array.add(sn3);</span><br><span class="line">array.add(sn4);</span><br><span class="line">array.add(sn5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17库存案例分析加入集合"><a href="#17库存案例分析加入集合" class="headerlink" title="17库存案例分析加入集合"></a>17库存案例分析加入集合</h3><pre><code>* A: 库存案例分析加入集合    * a: 参见\day06\day06(面向对象\day06_source\对象内存图.JPG</code></pre><h3 id="18库存案例添加商品信息"><a href="#18库存案例添加商品信息" class="headerlink" title="18库存案例添加商品信息"></a>18库存案例添加商品信息</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义,.描述商品的类</span></span><br><span class="line"><span class="comment">   商品 4个属性</span></span><br><span class="line"><span class="comment">     商品名字  大小     价格    库存</span></span><br><span class="line"><span class="comment">  String    double   double  int</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">定义类,类名Goods</span></span><br><span class="line"><span class="comment">这个类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span></span>&#123;</span><br><span class="line"><span class="comment">//定义商品名字</span></span><br><span class="line">String brand ;</span><br><span class="line"><span class="comment">//大小属性</span></span><br><span class="line"><span class="keyword">double</span> size ;</span><br><span class="line"><span class="comment">// 价格属性</span></span><br><span class="line"><span class="keyword">double</span> price ;</span><br><span class="line"><span class="comment">//库存属性</span></span><br><span class="line"><span class="keyword">int</span> count ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19库存案例查看库存清单"><a href="#19库存案例查看库存清单" class="headerlink" title="19库存案例查看库存清单"></a>19库存案例查看库存清单</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      2.查看库存清单</span></span><br><span class="line"><span class="comment">    将集合进行遍历, 获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">输出每一个Goods类型的属性</span></span><br><span class="line"><span class="comment">计算求和: 总库存,总金额</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,查看库存清单,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出表头</span></span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,保存总库存数,和总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">double</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//get(索引)获取出集合中的元素,存储的是Goods类,获取的也是Goods类型</span></span><br><span class="line"><span class="comment">//使用Goods类型变量,接受get方法结果</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(g.brand+<span class="string">"   "</span>+g.size+<span class="string">"    "</span>+g.price+<span class="string">"    "</span>+g.count);</span><br><span class="line">totalCount = totalCount+g.count;</span><br><span class="line">totalMoney = totalMoney + g.count*g.price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20库存案例修改库存清单及测试代码的实现"><a href="#20库存案例修改库存清单及测试代码的实现" class="headerlink" title="20库存案例修改库存清单及测试代码的实现"></a>20库存案例修改库存清单及测试代码的实现</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现库存管理案例:</span></span><br><span class="line"><span class="comment">  1.存储商品信息</span></span><br><span class="line"><span class="comment">    存储商品类型变量</span></span><br><span class="line"><span class="comment">将商品类型的变量,存储到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      2.查看库存清单</span></span><br><span class="line"><span class="comment">    将集合进行遍历, 获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">输出每一个Goods类型的属性</span></span><br><span class="line"><span class="comment">计算求和: 总库存,总金额</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     3.修改商品的库存</span></span><br><span class="line"><span class="comment">    集合遍历 ,获取出集合中存储的Goods类型变量</span></span><br><span class="line"><span class="comment">变量调用Goods类的属性count,值进行修改 (键盘输入)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建ArrayList集合,存储Goods类型</span></span><br><span class="line">ArrayList&lt;Goods&gt; array = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"><span class="comment">//调用添加商品信息的方法</span></span><br><span class="line">addGoods(array);</span><br><span class="line"><span class="comment">//进入死循环中</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//调用选择功能的方法,获取到用户输入的功能序号</span></span><br><span class="line"><span class="keyword">int</span> number = chooseFunction();</span><br><span class="line"><span class="comment">//对序号判断,如果=1 进入查看库存功能  = 2 进入修改库存功能  =3 结束</span></span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//进入查看库存,调用查看库存的方法,传递存储商品信息的集合</span></span><br><span class="line">printStore(array);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//进入修改库存功能,调用修改库存的方法,传递集合</span></span><br><span class="line">update(array);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"> System.out.println(<span class="string">"无此功能"</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  方法定义,修改库存</span></span><br><span class="line"><span class="comment">  键盘的输入,将Goods中的属性值,修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//遍历集合,获取集合中的每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;  i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//集合方法get获取的是集合的元素,元素类型Goods</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(<span class="string">"请输入"</span>+g.brand+<span class="string">"的库存数"</span>);</span><br><span class="line"><span class="comment">//Goods属性,count进行修改</span></span><br><span class="line">g.count = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现选择菜单,用户根据功能选择菜单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------库存管理------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1.查看库存清单"</span>);</span><br><span class="line">System.out.println(<span class="string">"2.修改商品库存数量"</span>);</span><br><span class="line">System.out.println(<span class="string">"3.退出"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入要执行的操作序号："</span>);</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> number = sc.nextInt();</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,查看库存清单,遍历集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出表头</span></span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,保存总库存数,和总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">double</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.size(); i++)&#123;</span><br><span class="line"><span class="comment">//get(索引)获取出集合中的元素,存储的是Goods类,获取的也是Goods类型</span></span><br><span class="line"><span class="comment">//使用Goods类型变量,接受get方法结果</span></span><br><span class="line">Goods g = array.get(i);</span><br><span class="line">System.out.println(g.brand+<span class="string">"   "</span>+g.size+<span class="string">"    "</span>+g.price+<span class="string">"    "</span>+g.count);</span><br><span class="line">totalCount = totalCount+g.count;</span><br><span class="line">totalMoney = totalMoney + g.count*g.price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,将商品的信息存储到集合中</span></span><br><span class="line"><span class="comment">   集合是所有方法的共享数据,参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addGoods</span> <span class="params">(ArrayList&lt;Goods&gt; array)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建商品类型变量 Goods类型的变量</span></span><br><span class="line">Goods g1 = <span class="keyword">new</span> Goods();</span><br><span class="line">Goods g2 = <span class="keyword">new</span> Goods();</span><br><span class="line">g1.brand = <span class="string">"MacBook"</span>;</span><br><span class="line">g1.size = <span class="number">13.3</span>;</span><br><span class="line">g1.price = <span class="number">9999.99</span>;</span><br><span class="line">g1.count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">g2.brand = <span class="string">"Thinkpad"</span>;</span><br><span class="line">g2.size = <span class="number">15.6</span>;</span><br><span class="line">g2.price = <span class="number">7999.99</span>;</span><br><span class="line">g2.count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Goods类型的变量,存储到集合中</span></span><br><span class="line">array.add(g1);</span><br><span class="line">array.add(g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1540864054/java/photo-1540543144-2570163afee1.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、自定义类型的定义及使用&lt;br&gt;2、自定义类的内存图&lt;br&gt;3、ArrayList集合的基本功能&lt;br&gt;4、随机点名器案例及库存案例代码优化&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础5</title>
    <link href="https://leesen998.github.io/2016/10/08/day05%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/08/day05笔记/</id>
    <published>2016-10-08T13:41:53.000Z</published>
    <updated>2018-11-05T08:35:02.407Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280034/samples/java%20files/ChMkJ1or0PmIahOGABoj0mukBisAAi_rwBK9FkAGiPq398.jpg" alt="" style="width:100%"></p><p>1、方法基础知识<br>2、方法高级内容<br>3、方法案例</p><a id="more"></a><h3 id="01方法的概述"><a href="#01方法的概述" class="headerlink" title="01方法的概述"></a>01方法的概述</h3><pre><code>* A: 为什么要有方法    * 提高代码的复用性 * B: 什么是方法    * 完成特定功能的代码块。 </code></pre><h3 id="02方法的定义格式"><a href="#02方法的定义格式" class="headerlink" title="02方法的定义格式"></a>02方法的定义格式</h3><pre><code>* A: 方法的格式*         修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {            方法体语句;            return 返回值;         } * B: 方法的格式说明    * 修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。    * 返回值类型：就是功能结果的数据类型。    * 方法名：符合命名规则即可。方便我们的调用。    * 参数：        * 实际参数：就是实际参与运算的。        * 形式参数；就是方法定义上的，用于接收实际参数的。    * 参数类型：就是参数的数据类型    * 参数名：就是变量名    * 方法体语句：就是完成功能的代码。    * return：结束方法的。    * 返回值：就是功能的结果，由return带给调用者。 </code></pre><h3 id="03定义方法计算面积"><a href="#03定义方法计算面积" class="headerlink" title="03定义方法计算面积"></a>03定义方法计算面积</h3><pre><code>* A: 定义方法计算面积</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//调用方法, 方法执行起来</span></span><br><span class="line"> <span class="comment">// 在方法main中,调用方法 getArea</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> area = getArea(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"> System.out.println(<span class="string">"面积是: "</span>+area);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   要求: 计算一个长方形的面积</span></span><br><span class="line"><span class="comment">   定义方法解决这个要求</span></span><br><span class="line"><span class="comment">   分析方法定义过程:</span></span><br><span class="line"><span class="comment">      1.明确方法计算后的结果的数据类型 int  定义格式对应的就是返回值类型</span></span><br><span class="line"><span class="comment">  2.方法计算过程中,有没有未知的数据, 宽和长, 未知数据的数据类型 int</span></span><br><span class="line"><span class="comment">      未知数的变量,定义在方法的小括号内</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getArea</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line"><span class="comment">//实现方法的功能主体</span></span><br><span class="line"><span class="comment">//int area = w * h;</span></span><br><span class="line"><span class="keyword">return</span> w * h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04调用方法"><a href="#04调用方法" class="headerlink" title="04调用方法"></a>04调用方法</h3><pre><code>* A: 调用方法    * a: 在main函数中调用方法，让方法执行起来    * b: 方法的形参        * 方法要什么参数我们就给什么类型的参数。    * c: 方法的返回值        * 方法返回什么类型的值我们就用对应的数据类型的变量来接收</code></pre><h3 id="05调用方法执行流程"><a href="#05调用方法执行流程" class="headerlink" title="05调用方法执行流程"></a>05调用方法执行流程</h3><pre><code>* A: 调用方法执行流程    * a: 方法的定义是没有顺序的，写在main函数的上边或者下边都可以。    * b: 方法的执行，是把实参传递给形参，从而来执行的。    * c: 方法只有被调用才会执行。</code></pre><h3 id="06方法调用的内存图"><a href="#06方法调用的内存图" class="headerlink" title="06方法调用的内存图"></a>06方法调用的内存图</h3><ul><li>A: 方法调用的内存图<br><img src="https://res.cloudinary.com/leesen/image/upload/v1540350598/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="方法调用的内存图"></li></ul><h3 id="07方法调用的练习"><a href="#07方法调用的练习" class="headerlink" title="07方法调用的练习"></a>07方法调用的练习</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   方法的定义练习</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//printRect();</span></span><br><span class="line"><span class="comment">//int number = getNumber();</span></span><br><span class="line"><span class="comment">//System.out.println(getNumber());</span></span><br><span class="line"><span class="comment">//printRect2(3,5);</span></span><br><span class="line"><span class="keyword">double</span> avg = getAvg(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(avg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义有返回值有参数方法，如求三个数的平均值</span></span><br><span class="line"><span class="comment">   明确方法计算后的数据类型, 返回值类型 double</span></span><br><span class="line"><span class="comment">   明确方法未知数, 三个未知的整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getAvg</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (a+b+c)/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义无返回值有参数方法，如打印指定M行，每行N个*号的矩形</span></span><br><span class="line"><span class="comment">明确方法计算后结果,控制台输出图形,没有返回值的</span></span><br><span class="line"><span class="comment">方法中有没有未知数,图形行数,和列数,是未知的, 数据类型整数int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRect2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ;  j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义有返回值无参数方法，如键盘录入得到一个整数</span></span><br><span class="line"><span class="comment">   明确方法计算后结果的数据类型 int</span></span><br><span class="line"><span class="comment">   明确有没有未知数,没</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//int number = sc.nextInt();</span></span><br><span class="line"><span class="keyword">return</span> sc.nextInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义无返回值无参数方法，如打印3行，每行3个*号的矩形</span></span><br><span class="line"><span class="comment">   为什么没有返回值:</span></span><br><span class="line"><span class="comment">       打印矩形 ,输出效果,不需要将结果返回</span></span><br><span class="line"><span class="comment">   明确未知数: 不需要未知数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRect</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">3</span> ;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08方法的定义和使用的注意事项"><a href="#08方法的定义和使用的注意事项" class="headerlink" title="08方法的定义和使用的注意事项"></a>08方法的定义和使用的注意事项</h3><pre><code>* A: 方法的定义和使用的注意事项</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 方法不能定义在另一个方法的里面</span><br><span class="line">* b: 写错方法名字</span><br><span class="line">* c: 写错了参数列表</span><br><span class="line">* d: 方法返回值是<span class="keyword">void</span>,方法中可以省略<span class="keyword">return</span> 不写</span><br><span class="line">     <span class="keyword">return</span> 下面不能有代码</span><br><span class="line">* e 方法返回值类型,和<span class="keyword">return</span> 后面数据类型必须匹配</span><br><span class="line">* f: 方法重复定义问题</span><br><span class="line">* g: 调用方法的时候,返回值是<span class="keyword">void</span>, 不能写在输出语句中</span><br></pre></td></tr></table></figure><h3 id="09方法的重载"><a href="#09方法的重载" class="headerlink" title="09方法的重载"></a>09方法的重载</h3><pre><code>* A: 方法的重载</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* 在同一个类中，方法名相同，参数列表不同。与返回值类型无关。</span><br><span class="line"></span><br><span class="line">* 参数列表不同：</span><br><span class="line">* A:参数个数不同</span><br><span class="line">* B:参数类型不同</span><br><span class="line">* C:参数的顺序不同(算重载,但是在开发中不用)</span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"两个int参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"三个int参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"两个double参数"</span>);</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10方法重载注意事项"><a href="#10方法重载注意事项" class="headerlink" title="10方法重载注意事项"></a>10方法重载注意事项</h3><pre><code>* A: 方法重载注意事项    * a: 参数列表必须不同    * b: 重载和参数变量名无关    * c: 重载和返回值类型无关    * d: 重载和修饰符无关    * e: 技巧: 重载看方法名和参数列表</code></pre><h3 id="11方法参数是基本数据类型"><a href="#11方法参数是基本数据类型" class="headerlink" title="11方法参数是基本数据类型"></a>11方法参数是基本数据类型</h3><pre><code>* A: 方法参数是基本数据类型    * a: 方法参数是基本类型时，传递的是值。 </code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540350597/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="基本数据类型"></p><h3 id="12方法参数是引用数据类型"><a href="#12方法参数是引用数据类型" class="headerlink" title="12方法参数是引用数据类型"></a>12方法参数是引用数据类型</h3><pre><code>* A: 方法参数是引用数据类型    * a: 方法参数是引用类型时，传递的是内存地址值。</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540350598/samples/java%20files/day05/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%98%AF%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="引用数据类型">        </p><h3 id="13随机点名器"><a href="#13随机点名器" class="headerlink" title="13随机点名器"></a>13随机点名器</h3><pre><code>* A: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   实现随机点名器</span></span><br><span class="line"><span class="comment">     1.存储所有学生姓名</span></span><br><span class="line"><span class="comment"> 2.预览所有学生姓名,遍历数组</span></span><br><span class="line"><span class="comment"> 3.随机数作为索引,到数组中找元素</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">将功能独立出来, 作成方法,调用方法即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义三个功能, 用到同一个姓名数据</span></span><br><span class="line"><span class="comment">姓名存储到数组中,三个方法,使用一个数组中的数据, 方法传递参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义数组,存储学生姓名</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line"><span class="comment">//调用添加姓名方法</span></span><br><span class="line">addStudent(names);</span><br><span class="line"><span class="comment">//调用遍历数组方法</span></span><br><span class="line">printStudentName(names);</span><br><span class="line"><span class="comment">//调用随机姓名的方法</span></span><br><span class="line">String name = randomStudentName(names);</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,随机数,做索引,数组中找到学生姓名</span></span><br><span class="line"><span class="comment">  返回值?  学生姓名</span></span><br><span class="line"><span class="comment">  参数?  数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomStudentName</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> index = ran.nextInt(names.length);</span><br><span class="line"><span class="keyword">return</span> names[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,遍历数组</span></span><br><span class="line"><span class="comment">   返回值? 没有</span></span><br><span class="line"><span class="comment">   参数? 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudentName</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,实现向数组中添加学生姓名</span></span><br><span class="line"><span class="comment">   返回值? 没有,</span></span><br><span class="line"><span class="comment">   参数?  参数就是数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"张三"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"李四"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"王五"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"李蕾"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"韩梅梅"</span>;</span><br><span class="line">names[<span class="number">5</span>] = <span class="string">"小名"</span>;</span><br><span class="line">names[<span class="number">6</span>] = <span class="string">"老王"</span>;</span><br><span class="line">names[<span class="number">7</span>] = <span class="string">"小华"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14库存案例代码实现-1"><a href="#14库存案例代码实现-1" class="headerlink" title="14库存案例代码实现_1"></a>14库存案例代码实现_1</h3><pre><code>* A: 案例代码/*   实现商品的库存管理     功能:        1.展示用户选择功能清单        2.根据选择的功能编号,进行不同的操作           A. 展示所有库存           B. 修改库存数量      分析:        1.展示用户清单:           输出语句, 用户输入, 选择功能序号        2.根据选择,调用不同的方法            switch语句              case 1 2 3           A  展示库存             将存储商品的数组,遍历           B  修改库存              修改所有的库存数量*/import java.util.Scanner;public class Shopp{    public static void main(String[] args){    }    /*       定义方法,展示所有的库存清单,遍历       返回值,没有       参数, 数组    */    public static void printStore(String[] brand,double[] size,double[] price,int[] count){        System.out.println(&quot;----------商场库存清单----------&quot;);        System.out.println(&quot;品牌型号     尺寸    价格    库存数&quot;);        //定义变量,计算总库存数,和总价格        int totalCount = 0;        int totalMoney = 0;        //遍历数组,将数组中所有的商品信息打印出来        for(int i = 0 ; i &lt; brand.length ; i++){            System.out.println(brand[i]+&quot;   &quot;+size[i]+&quot;    &quot;+price[i]+&quot;   &quot;+count[i]);            totalCount += count[i];            totalMoney += count[i]*price[i];        }        System.out.println(&quot;总库存数: &quot;+totalCount);        System.out.println(&quot;商品库存总金额: &quot;+totalMoney);    }    /*      定义方法,实现用户的选择功能,功能的需要返回来      返回值, int      参数, 没有    */    public static int chooseFunction(){        System.out.println(&quot;-------------库存管理------------&quot;);        System.out.println(&quot;1.查看库存清单&quot;);        System.out.println(&quot;2.修改商品库存数量&quot;);        System.out.println(&quot;3.退出&quot;);        System.out.println(&quot;请输入要执行的操作序号：&quot;);        //接受键盘输入        Scanner sc = new Scanner(System.in);        int chooseNumber = sc.nextInt();        return chooseNumber;    }}</code></pre><h3 id="15库存案例代码实现-2"><a href="#15库存案例代码实现-2" class="headerlink" title="15库存案例代码实现_2"></a>15库存案例代码实现_2</h3><pre><code>* A: 案例代码    /*      定义方法,修改所有商品的库存        用户输入1个,修改1个        返回值,没有        参数, 库存数的数组, 品名数组    */    public static void update(String[] brand, int[] count){        //遍历数组,遍历到一个,修改一个        //接受键盘输入        Scanner sc = new Scanner(System.in);        //遍历数组        for(int i = 0; i &lt; brand.length ; i++){            System.out.println(&quot;请输入&quot;+brand[i]+&quot;的库存数&quot;);            //键盘输入,录入库存, 存储到库存的数组中            int newCount = sc.nextInt();            count[i] = newCount;        }        //int chooseNumber = sc.nextInt();    }</code></pre><h3 id="16库存案例代码测试"><a href="#16库存案例代码测试" class="headerlink" title="16库存案例代码测试"></a>16库存案例代码测试</h3><pre><code>* A: 案例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   实现商品的库存管理</span></span><br><span class="line"><span class="comment">     功能:</span></span><br><span class="line"><span class="comment">    1.展示用户选择功能清单</span></span><br><span class="line"><span class="comment">2.根据选择的功能编号,进行不同的操作</span></span><br><span class="line"><span class="comment">   A. 展示所有库存</span></span><br><span class="line"><span class="comment">   B. 修改库存数量</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">  分析:</span></span><br><span class="line"><span class="comment">    1.展示用户清单:</span></span><br><span class="line"><span class="comment">   输出语句, 用户输入, 选择功能序号</span></span><br><span class="line"><span class="comment">2.根据选择,调用不同的方法</span></span><br><span class="line"><span class="comment">    switch语句</span></span><br><span class="line"><span class="comment">  case 1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   A  展示库存</span></span><br><span class="line"><span class="comment">     将存储商品的数组,遍历</span></span><br><span class="line"><span class="comment">   B  修改库存</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">  修改所有的库存数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopp</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//使用数组,保存商品的信息</span></span><br><span class="line"><span class="comment">//品名,尺寸,价格,库存数, 定义5个数组</span></span><br><span class="line">String[] brand = &#123;<span class="string">"MacBookAir"</span>,<span class="string">"ThinkpadT450"</span>&#125;;</span><br><span class="line"><span class="keyword">double</span>[] size = &#123;<span class="number">13.3</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line"><span class="keyword">double</span>[] price = &#123;<span class="number">9998.97</span>,<span class="number">6789.56</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] count = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> choose = chooseFunction();</span><br><span class="line"><span class="keyword">switch</span>(choose)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="comment">//调用查看库存清单方法</span></span><br><span class="line">  printStore(brand,size,price,count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="comment">//调用修改库存的方法</span></span><br><span class="line">  update(brand,count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  System.out.println(<span class="string">"没有这个功能"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,修改所有商品的库存</span></span><br><span class="line"><span class="comment">    用户输入1个,修改1个</span></span><br><span class="line"><span class="comment">返回值,没有</span></span><br><span class="line"><span class="comment">参数, 库存数的数组, 品名数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String[] brand, <span class="keyword">int</span>[] count)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历数组,遍历到一个,修改一个</span></span><br><span class="line"><span class="comment">//接受键盘输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; brand.length ; i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入"</span>+brand[i]+<span class="string">"的库存数"</span>);</span><br><span class="line"><span class="comment">//键盘输入,录入库存, 存储到库存的数组中</span></span><br><span class="line"><span class="keyword">int</span> newCount = sc.nextInt();</span><br><span class="line">count[i] = newCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int chooseNumber = sc.nextInt();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   定义方法,展示所有的库存清单,遍历</span></span><br><span class="line"><span class="comment">   返回值,没有</span></span><br><span class="line"><span class="comment">   参数, 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStore</span><span class="params">(String[] brand,<span class="keyword">double</span>[] size,<span class="keyword">double</span>[] price,<span class="keyword">int</span>[] count)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"----------商场库存清单----------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号     尺寸    价格    库存数"</span>);</span><br><span class="line"><span class="comment">//定义变量,计算总库存数,和总价格</span></span><br><span class="line"><span class="keyword">int</span> totalCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> totalMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历数组,将数组中所有的商品信息打印出来</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; brand.length ; i++)&#123;</span><br><span class="line">System.out.println(brand[i]+<span class="string">"   "</span>+size[i]+<span class="string">"    "</span>+price[i]+<span class="string">"   "</span>+count[i]);</span><br><span class="line">totalCount += count[i];</span><br><span class="line">totalMoney += count[i]*price[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总库存数: "</span>+totalCount);</span><br><span class="line">System.out.println(<span class="string">"商品库存总金额: "</span>+totalMoney);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义方法,实现用户的选择功能,功能的需要返回来</span></span><br><span class="line"><span class="comment">  返回值, int</span></span><br><span class="line"><span class="comment">  参数, 没有</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------库存管理------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1.查看库存清单"</span>);</span><br><span class="line">System.out.println(<span class="string">"2.修改商品库存数量"</span>);</span><br><span class="line">System.out.println(<span class="string">"3.退出"</span>);</span><br><span class="line">System.out.println(<span class="string">"请输入要执行的操作序号："</span>);</span><br><span class="line"><span class="comment">//接受键盘输入</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> chooseNumber = sc.nextInt();</span><br><span class="line"><span class="keyword">return</span> chooseNumber;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280034/samples/java%20files/ChMkJ1or0PmIahOGABoj0mukBisAAi_rwBK9FkAGiPq398.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、方法基础知识&lt;br&gt;2、方法高级内容&lt;br&gt;3、方法案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础4</title>
    <link href="https://leesen998.github.io/2016/10/04/day04%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day04笔记/</id>
    <published>2016-10-04T08:41:53.000Z</published>
    <updated>2018-11-05T09:01:44.197Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280255/samples/java%20files/photo-1537967371577-a17d31d7035f.jpg" alt="" style="width:100%"></p><p>1、流程控制语句switch<br>2、数组<br>3、随机点名器案例</p><a id="more"></a><h3 id="01switch语句解构"><a href="#01switch语句解构" class="headerlink" title="01switch语句解构"></a>01switch语句解构</h3><pre><code>* A:switch语句解构      * a:switch只能针对某个表达式的值作出判断，从而决定程序执行哪一段代码。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* b:格式如下:</span><br><span class="line">      swtich(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">1</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">2</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">3</span> :</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    要执行的语句;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* c: 执行流程:  表达式,和<span class="keyword">case</span>后面的常量进行比较和哪个<span class="keyword">case</span>后的常量相同,就执行哪个<span class="keyword">case</span>后面的程序,遇到<span class="keyword">break</span>,就全结束</span><br><span class="line"></span><br><span class="line">* d: 关键字: <span class="keyword">switch</span> <span class="keyword">case</span> <span class="keyword">default</span> <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">* e:举例</span><br><span class="line">如果等于<span class="number">1</span>，则输出星期一</span><br><span class="line">如果等于<span class="number">2</span>，则输出星期二</span><br><span class="line">如果等于<span class="number">3</span>，则输出星期三</span><br><span class="line">如果等于<span class="number">4</span>，则输出星期四</span><br><span class="line">如果等于<span class="number">5</span>，则输出星期五</span><br><span class="line">如果等于<span class="number">6</span>，则输出星期六</span><br><span class="line">如果等于<span class="number">7</span>，则输出星期天</span><br></pre></td></tr></table></figure><h3 id="02switch语句的星期判断"><a href="#02switch语句的星期判断" class="headerlink" title="02switch语句的星期判断"></a>02switch语句的星期判断</h3><pre><code>* A: switch语句的星期判断</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* a: 明确需求</span><br><span class="line">需求:初始化<span class="keyword">int</span>类型变量(<span class="number">1</span>-<span class="number">7</span>)代表星期几,使用<span class="keyword">switch</span>语句进行判断,并打印出该整数对应的星期.</span><br><span class="line"></span><br><span class="line">* b: 代码实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> week = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入的数字不正确..."</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03switch语句接受的数据类型"><a href="#03switch语句接受的数据类型" class="headerlink" title="03switch语句接受的数据类型"></a>03switch语句接受的数据类型</h3><pre><code>* A: switch语句接受的数据类型    * a:注意事项        switch语句中的表达式的数据类型,是有要求的        JDK1.0 - 1.4  数据类型接受 byte short int char        JDK1.5   数据类型接受 byte short int char enum(枚举)        JDK1.7   数据类型接受 byte short int char enum(枚举), String    </code></pre><h3 id="04case穿透"><a href="#04case穿透" class="headerlink" title="04case穿透"></a>04case穿透</h3><pre><code>* A:case穿透</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* a: 在使用<span class="keyword">switch</span>语句的过程中，如果多个<span class="keyword">case</span>条件后面的执行语句是一样的，则该执行语句只需书写一次即可，这是一种简写的方式。</span><br><span class="line">* b: 例如，要判断一周中的某一天是否为工作日，同样使用数字<span class="number">1</span>~<span class="number">7</span>来表示星期一到星期天，当输入的数字为<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>时就视为工作日，否则就视为休息日。</span><br><span class="line">* 注意：<span class="keyword">case</span> 语句后面 没有<span class="keyword">break</span> 就会一直穿透下去。</span><br></pre></td></tr></table></figure><h3 id="05数组的概述"><a href="#05数组的概述" class="headerlink" title="05数组的概述"></a>05数组的概述</h3><pre><code>* A: 数组的概述    * a:数组的需求        现在需要统计某公司员工的工资情况，例如计算平均工资、最高工资等。假设该公司有50名员工，用前面所学的知识完成，        那么程序首先需要声明50个变量来分别记住每位员工的工资，这样做会显得很麻烦.     * b:数组的概述         数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。</code></pre><h3 id="06数组的定义"><a href="#06数组的定义" class="headerlink" title="06数组的定义"></a>06数组的定义</h3><pre><code>* A：数组的定义</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* b:格式:</span><br><span class="line"> 数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[元素个数或数组长度];</span><br><span class="line"></span><br><span class="line">* c:举例:</span><br><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">* c:要点说明</span><br><span class="line">  <span class="number">1</span>)数据类型: 数组中存储元素的数据类型</span><br><span class="line"><span class="number">2</span>) [] 表示数组的意思</span><br><span class="line"><span class="number">3</span>) 变量名  自定义标识符  </span><br><span class="line"><span class="number">4</span>) <span class="keyword">new</span>  创建容器关键字</span><br><span class="line"><span class="number">5</span>)数据类型: 数组中存储元素的数据类型</span><br><span class="line"><span class="number">6</span>)[]  表示数组的意思</span><br><span class="line"><span class="number">7</span>)元素个数,就是数组中,可以存储多少个数据 (恒定, 定长)</span><br><span class="line">  </span><br><span class="line">数组是一个容器: 存储到数组中的每个元素,都有自己的自动编号</span><br><span class="line">自动编号,最小值是<span class="number">0</span>, 最大值,长度-<span class="number">1</span></span><br><span class="line">自动编号专业名次, 索引(index), 下标, 角标</span><br><span class="line">访问数组存储的元素,必须依赖于索引, 公式 数组名[索引]</span><br><span class="line"></span><br><span class="line">Java提供一个属性,操作索引的</span><br><span class="line">数组的一个属性,就是数组的长度, 属性的名字 length</span><br><span class="line">使用属性:  数组名.length  数据类型 <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">数组的最小索引是<span class="number">0</span>, 最大索引数组.length-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="07JVM内存划分"><a href="#07JVM内存划分" class="headerlink" title="07JVM内存划分"></a>07JVM内存划分</h3><pre><code>* A：内存划分* JVM对自己的内存划分为5个区域      * a: 寄存器:内存和CUP之间      * b: 本地方法栈: JVM调用了系统中的功能      * c: 方法和数据共享: 运行时期class文件进入的地方      * d: 方法栈:所有的方法运行的时候进入内存      * e: 堆:存储的是容器和对象</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/JVM%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.jpg" alt="&quot;JVM内存划分&quot;"></p><h3 id="08数组的内存"><a href="#08数组的内存" class="headerlink" title="08数组的内存"></a>08数组的内存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* A: 数组的内存</span><br><span class="line">* <span class="keyword">int</span>[] x;            <span class="comment">// 声明一个int[]类型的变量</span></span><br><span class="line">* x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];<span class="comment">// 创建一个长度为100的数组</span></span><br><span class="line">* 接下来，通过两张内存图来详细地说明数组在创建过程中内存的分配情况。</span><br><span class="line">* 第一行代码 <span class="keyword">int</span>[] x; 声明了一个变量x，该变量的类型为<span class="keyword">int</span>[]，即一个<span class="keyword">int</span>类型的数组。变量x会占用一块内存单元，它没有被分配初始值</span><br><span class="line">* 第二行代码 x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>]; 创建了一个数组，将数组的地址赋值给变量x。在程序运行期间可以使用变量x来引用数组，这时内存中的状态会发生变化</span><br><span class="line">* 引用数据类型 存的是变量的地址</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="数组的内存"></p><h3 id="09使用索引访问数组的元素"><a href="#09使用索引访问数组的元素" class="headerlink" title="09使用索引访问数组的元素"></a>09使用索引访问数组的元素</h3><pre><code>* A: 使用索引访问数组的元素    * 组中有100个元素，初始值都为0。数组中的每个元素都有一个索引(也可称为角标)，要想访问数组中的元素可以通过“x[0]、x[1]、……、x[98]、x[99]”的形式。    * 需要注意的是，数组中最小的索引是0，最大的索引是“数组的长度-1”</code></pre><h3 id="10数组的length属性"><a href="#10数组的length属性" class="headerlink" title="10数组的length属性"></a>10数组的length属性</h3><pre><code>* A: lenth属性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* a 在Java中，为了方便我们获得数组的长度，提供了一个length属性，在程序中可以通过“数组名.length”的方式来获得数组的长度，即元素的个数。</span><br><span class="line">* b 求数组的长度</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr; <span class="comment">// 声明变量</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 创建数组对象</span></span><br><span class="line">System.out.println(<span class="string">"arr[0]="</span> + arr[<span class="number">0</span>]); <span class="comment">// 访问数组中的第一个元素</span></span><br><span class="line">System.out.println(<span class="string">"arr[1]="</span> + arr[<span class="number">1</span>]); <span class="comment">// 访问数组中的第二个元素</span></span><br><span class="line">System.out.println(<span class="string">"arr[2]="</span> + arr[<span class="number">2</span>]); <span class="comment">// 访问数组中的第三个元素</span></span><br><span class="line">System.out.println(<span class="string">"数组的长度是："</span> + arr.length); <span class="comment">// 打印数组长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11为数组的元素赋值"><a href="#11为数组的元素赋值" class="headerlink" title="11为数组的元素赋值"></a>11为数组的元素赋值</h3><pre><code>* A: 为数组的元素赋值    * a: 如果在使用数组时，不想使用这些默认初始值，也可以显式地为这些元素赋值。    *     赋值过的元素已经变为新的数值,没有赋值的元素默认初始化的数值    * b: 案例</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>]; <span class="comment">// 定义可以存储4个整数的数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 为第1个元素赋值1</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">// 为第2个元素赋值2</span></span><br><span class="line"><span class="comment">// 下面的代码是打印数组中每个元素的值</span></span><br><span class="line">System.out.println(<span class="string">"arr[0]="</span> + arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[1]="</span> + arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[2]="</span> + arr[<span class="number">2</span>]);</span><br><span class="line">System.out.println(<span class="string">"arr[3]="</span> + arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12数组的定义-2"><a href="#12数组的定义-2" class="headerlink" title="12数组的定义_2"></a>12数组的定义_2</h3><pre><code>* A: 定义数组格式2</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* a: 数组初始化</span><br><span class="line">动态初始化 : 在定义数组时只指定数组的长度，由系统自动为元素赋初值的方式称作动态初始化。</span><br><span class="line"><span class="number">1</span>、类型[] 数组名 = <span class="keyword">new</span> 类型[长度];</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">静态初始化: 在初始化数组时还有一种方式叫做静态初始化，就是在定义数组的同时就为数组的每个元素赋值。</span><br><span class="line"><span class="number">2</span>、类型[] 数组名 = <span class="keyword">new</span> 类型[]&#123;元素，元素，……&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组。 例如：</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br><span class="line"><span class="number">3</span>、类型[] 数组名 = &#123;元素，元素，元素，……&#125;; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">* 数组拷贝</span><br><span class="line"><span class="keyword">int</span>[] smallPrimes = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] luckyNumbers = smallPrimes;</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>如果希望将一个数组的所有值拷贝到一个新的数组中去，<br>就要使用 Arrays 类的 copyOf方法：<br></font>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length) ;</span><br><span class="line"><span class="comment">//第 2 个参数是新数组的长度。这个方法通常用来增加数组的大小</span></span><br><span class="line">luckyNumbers = Arrays.copyOf(luckyNumbers, <span class="number">2</span> * luckyNumbers.length);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>如果数组元素是数值型，那么多余的元素将被赋值为 0 ; 如果数组元素是布尔型， 则将赋值<br>为 false。相反， 如果长度小于原始数组的长度，则只拷贝最前面的数据元素。<br></font>    <h3 id="13遍历数组"><a href="#13遍历数组" class="headerlink" title="13遍历数组"></a>13遍历数组</h3><pre><code>* A:遍历数组    * 在操作数组时，经常需要依次访问数组中的每个元素，这种操作称作数组的遍历* B:练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 定义数组</span></span><br><span class="line"><span class="comment">// 使用for循环遍历数组的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]); <span class="comment">// 通过索引访问元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">上述代码中，定义一个长度为<span class="number">5</span>的数组arr，数组的角标为<span class="number">0</span>~<span class="number">4</span>。由于<span class="keyword">for</span>循环中定义的变量i的值在循环过程中为<span class="number">0</span>~<span class="number">4</span>，因此可以作为索引，依次去访问数组中的元素，并将元素的值打印出来</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each 循环 =&gt; 遍历数组</span><br><span class="line"><span class="keyword">for</span> (variable : collection) &#123;statement&#125;</span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element : a)</span><br><span class="line">   System.out.println(element);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>提示：有个更加简单的方式打印数组中的所有值， 即利用 Arrays 类的 toString 方法。 调用 Arrays.toString(a), 返回一个包含数组元素的字符串， 这些元素被放置在括号内， 并用逗号分隔， 例如，“ [2, 3, 5,7，11 ，13]”、 要想打印数组， 可以调用<br>System.out.println(Arrays.toString(a));<br></font><h3 id="14数组中常见的异常"><a href="#14数组中常见的异常" class="headerlink" title="14数组中常见的异常"></a>14数组中常见的异常</h3><pre><code>* A: 数组操作中,常见的两个异常     数组的索引越界异常      空指针异常* B: 练习</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo_4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//数组的索引越界异常</span></span><br><span class="line"><span class="comment">//int[] arr = &#123;5,2,1&#125;;</span></span><br><span class="line"><span class="comment">//数组中3个元素,索引 0,1,2</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);//java.lang.ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空指针异常</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);</span><br><span class="line">arr2 = <span class="keyword">null</span>; <span class="comment">// arr2 不在保存数组的地址了</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);<span class="comment">//java.lang.NullPointerException</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15数组最值和排序"><a href="#15数组最值和排序" class="headerlink" title="15数组最值和排序"></a>15数组最值和排序</h3><pre><code>* A: 数组获取最值的原理思想    * 定义数组的第一个元素arr[0]为最大值;循环arr数组,判断如果有比arr[0] 大的就交换,直到arr数组遍历完毕,那么arr[0]中就保存了最大的元素* B: 数组排序    * 要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：    int[] a = new int[10000];    Arrays.sort(a)</code></pre><h3 id="16数组获取最值代码实现"><a href="#16数组获取最值代码实现" class="headerlink" title="16数组获取最值代码实现"></a>16数组获取最值代码实现</h3><pre><code>* A: 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo05</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span> &#125;; <span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>]; <span class="comment">// 定义变量max用于记住最大数，首先假设第一个元素为最大值</span></span><br><span class="line"><span class="comment">// 下面通过一个for循环遍历数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[x] &gt; max) &#123; <span class="comment">// 比较 arr[x]的值是否大于max</span></span><br><span class="line">max = arr[x]; <span class="comment">// 条件成立，将arr[x]的值赋给max</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"max="</span> + max); <span class="comment">// 打印最大值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17二维数组的定义"><a href="#17二维数组的定义" class="headerlink" title="17二维数组的定义"></a>17二维数组的定义</h3><pre><code>* A 二维数组的作用    * 要统计一个学校各个班级学生的考试成绩，又该如何实现呢？    * 这时就需要用到多维数组，多维数组可以简单地理解为在数组中嵌套数组。* B 定义格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a 第一种定义格式:</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">*  上面的代码相当于定义了一个<span class="number">3</span>*<span class="number">4</span>的二维数组，即二维数组的长度为<span class="number">3</span>，二维数组中的每个元素又是一个长度为<span class="number">4</span>的数组</span><br><span class="line">* b 第二种定义格式</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">*  第二种方式和第一种类似，只是数组中每个元素的长度不确定</span><br><span class="line">* c 第三种定义格式</span><br><span class="line">*  <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">*  二维数组中定义了三个元素，这三个元素都是数组，分别为&#123;<span class="number">1</span>,<span class="number">2</span>&#125;、&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;、&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="18二维数组元素的访问"><a href="#18二维数组元素的访问" class="headerlink" title="18二维数组元素的访问"></a>18二维数组元素的访问</h3><pre><code>* A: 二维数组的访问* 案例:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二维数组的方式</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">System.out.println( arr );</span><br><span class="line">System.out.println(<span class="string">"二维数组的长度: "</span> + arr.length);</span><br><span class="line"><span class="comment">//获取二维数组的3个元素</span></span><br><span class="line">System.out.println( arr[<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第一个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">1</span>] );<span class="comment">//访问的为二维数组中第1个一维数组的第2个元素</span></span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">0</span>][<span class="number">3</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第二个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">1</span>][<span class="number">3</span>] );</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"打印第三个一维数组的元素值"</span>);</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">0</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">1</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">2</span>] );</span><br><span class="line">System.out.println( arr[<span class="number">2</span>][<span class="number">3</span>] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19二维数组内存图"><a href="#19二维数组内存图" class="headerlink" title="19二维数组内存图"></a>19二维数组内存图</h3><pre><code>* A: 二维数组内存图* 举例:int[][] arr = new int[3][2];* 外层数组长在内存开辟连续的3个大的内存空间,每一个内存空间都对应的有地址值* 每一个大内存空间里又开辟连续的两个小的内存空间.</code></pre><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540278233/samples/java%20files/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.jpg" alt="数组的内存"></p><h3 id="20二维数组的定义和访问"><a href="#20二维数组的定义和访问" class="headerlink" title="20二维数组的定义和访问"></a>20二维数组的定义和访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* A: 二维数组的定义和访问</span><br><span class="line"> * 格式<span class="number">1</span>: </span><br><span class="line"> * <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; 不推荐</span><br><span class="line"> * 格式<span class="number">2</span></span><br><span class="line"> *  <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"> *  </span><br><span class="line">* B: 二维数组的访问</span><br><span class="line"> 举例:<span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;  </span><br><span class="line">  想要打印数组中<span class="number">7</span>这个元素需要先找到大的元素索引&#123;<span class="number">5</span>,<span class="number">7</span>&#125; 索引为<span class="number">2</span> ,在找<span class="number">7</span>在&#123;<span class="number">5</span>,<span class="number">7</span>&#125;中的索引<span class="number">2</span></span><br><span class="line">  那么结果为 arr[<span class="number">2</span>][<span class="number">2</span>]  第一个[<span class="number">2</span>]代表大数组中&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;这个元素索引</span><br><span class="line">  第二个[<span class="number">2</span>]代表&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>&#125;中<span class="number">7</span>元素的索引</span><br></pre></td></tr></table></figure><h3 id="21二维数组的遍历"><a href="#21二维数组的遍历" class="headerlink" title="21二维数组的遍历"></a>21二维数组的遍历</h3><pre><code>* A:二维数组遍历</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"> 先使用<span class="keyword">for</span>循环遍历arr这个二维数组,得到每一个元素为arr[i]为一维数组</span><br><span class="line"> 再外层<span class="keyword">for</span>循环中嵌套一个<span class="keyword">for</span>循环遍历每一个一维数组arr[i],得到每一元素</span><br><span class="line"></span><br><span class="line"> *B:举例:遍历二维数组</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayArrayDemo_2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外循环,遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ;i++)&#123;</span><br><span class="line"><span class="comment">//内循环,遍历每个一维数组 arr[0] arr[1] arr[i]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* C:二维数组累加求和</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo09</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[][] arr2 = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr2.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr2[i].length; j++) &#123;</span><br><span class="line">                 <span class="comment">//System.out.println(arr2[i][j])</span></span><br><span class="line">sum2 += arr2[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sum2= "</span>+ sum2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>for each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维数组处理的要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：<br></font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> [] row : a)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> value : row)</span><br><span class="line"><span class="comment">//do something with value</span></span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure><font color="#DD66" size=""><br>提示： 要想快速地打印一个二维数组的数据元素列表， 可以调用：<br>System.out.println(Arrays.deepToString(a)) ;<br>输出格式为：<br>[[16, B, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]<br></font><h3 id="22二维数组的求和练习"><a href="#22二维数组的求和练习" class="headerlink" title="22二维数组的求和练习"></a>22二维数组的求和练习</h3><pre><code>* A 例如要统计一个公司三个销售小组中每个小组的总销售额以及整个公司的销售额。如下所示   * 第一小组销售额为{11, 12}万元   * 第二小组销售额为{21, 22, 23}万元   * 第三小组销售额为{31, 32, 33, 34}万元。 * B 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo10</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; <span class="comment">// 定义一个长度为3的二维数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">12</span> &#125;; <span class="comment">// 为数组的元素赋值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span> &#125;;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 定义变量记录总销售额</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 遍历数组元素</span></span><br><span class="line"><span class="keyword">int</span> groupSum = <span class="number">0</span>; <span class="comment">// 定义变量记录小组销售总额</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123; <span class="comment">// 遍历小组内每个人的销售额</span></span><br><span class="line">groupSum = groupSum + arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">sum = sum + groupSum; <span class="comment">// 累加小组销售额</span></span><br><span class="line">System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"小组销售额为："</span> + groupSum + <span class="string">" 万元"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"总销售额为: "</span> + sum + <span class="string">" 万元"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23随机点名器案例分析"><a href="#23随机点名器案例分析" class="headerlink" title="23随机点名器案例分析"></a>23随机点名器案例分析</h3><pre><code>* A 随机点名器案例分析* B: 需求    * 随机点名器，即在全班同学中随机的打印出一名同学名字。* C:分析:    * 1)定义数组存数全班同学    * 2)生成随机数范围0 到 数组长度-1    * 3)根据这个索引找到数组中的同学名称</code></pre><h3 id="24随机点名器代码实现"><a href="#24随机点名器代码实现" class="headerlink" title="24随机点名器代码实现"></a>24随机点名器代码实现</h3><pre><code>* A: 分析       随机点名器:    1  存储姓名    2. 预览所有人的姓名    3. 随机出一个人的姓名* B 代码实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//存储姓名,姓名存储到数组中</span></span><br><span class="line"><span class="comment">//数组存储姓名,姓名的数据类型,String</span></span><br><span class="line">String[] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"李蕾"</span>,<span class="string">"韩梅梅"</span>,<span class="string">"小名"</span>,<span class="string">"老王"</span>,<span class="string">"小华"</span>,<span class="string">"约翰逊"</span>,<span class="string">"爱丽丝"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预览: 遍历数组,打印所有姓名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ; i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"============="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机出一个人的名</span></span><br><span class="line"><span class="comment">//利用随机数,生成一个整数,作为索引,到数组中找到对应的元素</span></span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//随机数,范围必须是0-数组的最大索引</span></span><br><span class="line"><span class="keyword">int</span> index = ran.nextInt(names.length);<span class="comment">//index 就是随机数,作为索引</span></span><br><span class="line">System.out.println(names[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25随机点名器代码实现-2"><a href="#25随机点名器代码实现-2" class="headerlink" title="25随机点名器代码实现_2"></a>25随机点名器代码实现_2</h3><pre><code>* A 代码优化:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallName</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String[] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"李蕾"</span>,<span class="string">"韩梅梅"</span>,<span class="string">"小名"</span>,<span class="string">"老王"</span>,<span class="string">"小华"</span>,<span class="string">"约翰逊"</span>,<span class="string">"爱丽丝"</span>&#125;;</span><br><span class="line">System.out.println(names[<span class="keyword">new</span> Random().nextInt(names.length)]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280255/samples/java%20files/photo-1537967371577-a17d31d7035f.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、流程控制语句switch&lt;br&gt;2、数组&lt;br&gt;3、随机点名器案例&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记——基础3</title>
    <link href="https://leesen998.github.io/2016/10/04/day03%E7%AC%94%E8%AE%B0/"/>
    <id>https://leesen998.github.io/2016/10/04/day03笔记/</id>
    <published>2016-10-04T02:41:53.000Z</published>
    <updated>2018-11-05T09:31:10.049Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1539609413529-1166774c3954.jpg" alt="" style="width:100%"></p><p>1、引用类型变量的创建及使用<br>2、流程控制语句之选择语句<br>3、流程控制语句之循环语句<br>4、循环高级<br><a id="more"></a></p><h3 id="01创建引用类型变量公式"><a href="#01创建引用类型变量公式" class="headerlink" title="01创建引用类型变量公式"></a>01创建引用类型变量公式</h3><ul><li>A: 创建引用类型变量公式</li><li>a: 我们要学的Scanner类是属于引用数据类型，我们先了解下引用数据类型。</li><li><p>b: 引用数据类型的定义格式</p><ul><li>与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式。</li><li><font color="#D66" size="">数据类型  变量名  =  new 数据类型();</font></li></ul></li><li><p>c: 引用数据类型的使用</p><ul><li>每种引用数据类型都有其功能，我们可以调用该类型实例的功能。</li><li><font color="#D66" size="">变量名.方法名();</font></li></ul></li></ul><h3 id="02Scanner类的使用"><a href="#02Scanner类的使用" class="headerlink" title="02Scanner类的使用"></a>02Scanner类的使用</h3><pre><code>* A: Scanner类的使用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* a: 导包<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">* b：创建键盘录入对象 Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">* c: 读取键盘录入的一个整数</span><br><span class="line">* <span class="keyword">int</span> enterNumber = sc.nextInt();</span><br><span class="line">* d: 读取键盘录入的字符串</span><br><span class="line">* String enterString = sc.next();</span><br></pre></td></tr></table></figure><pre><code>* B: 案例代码    import java.util.Scanner;    public class Demo05Scanner{        public static void main(String[] args)         {            Scanner sc = new Scanner(System.in);            int enterNumber = sc.nextInt();            System.out.println(&quot;用户输入的整数为&quot;+enterNumber);            String enterString = sc.next();            System.out.println(&quot;用户输入的字符串为&quot;+enterString);        }    }</code></pre><h3 id="03Random随机数类的使用-1"><a href="#03Random随机数类的使用-1" class="headerlink" title="03Random随机数类的使用_1"></a>03Random随机数类的使用_1</h3><pre><code>* A: Random随机数类的使用_1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* a: 功能</span><br><span class="line">* 生成随机数需要使用到引用类型随机数Random类</span><br><span class="line">* b: 使用方式</span><br><span class="line">* <span class="keyword">import</span>导包：所属包java.util. Random</span><br><span class="line">* 创建实例格式：Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line">* 调用方法</span><br><span class="line">* nextInt(<span class="keyword">int</span> maxValue)产生[<span class="number">0</span>,maxValue)范围的随机数,包含<span class="number">0</span>不包含maxValue</span><br><span class="line">* nextDouble()  产生[<span class="number">0</span>,<span class="number">1</span>)范围的随机数</span><br><span class="line">如：</span><br><span class="line">Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line"><span class="keyword">int</span>  myNumber = random.nextInt(<span class="number">100</span>);<span class="comment">//结果为0-99的一个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">   <span class="comment">// Random类中的,产生随机数的功能</span></span><br><span class="line">   <span class="keyword">int</span> i = ran.nextInt(<span class="number">100</span>);</span><br><span class="line">   System.out.println(i);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//问题? 产生随机数,范围 1-100之间</span></span><br><span class="line">   <span class="comment">// nextInt(100) 0-99 + 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04Random随机数类的使用-2"><a href="#04Random随机数类的使用-2" class="headerlink" title="04Random随机数类的使用_2"></a>04Random随机数类的使用_2</h3><pre><code>* A: Random随机数类的使用_2</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* a: 调用方法</span><br><span class="line">* nextDouble()  产生[<span class="number">0</span>,<span class="number">1</span>)范围的随机数</span><br><span class="line">如：</span><br><span class="line">Random  random = <span class="keyword">new</span> Random ();</span><br><span class="line"><span class="keyword">int</span>  myNumber = random.nextDouble();<span class="comment">//结果为0.0-1.0之间的数(包括0.0不包括1.0)</span></span><br></pre></td></tr></table></figure><h3 id="05if语句格式第一种"><a href="#05if语句格式第一种" class="headerlink" title="05if语句格式第一种"></a>05if语句格式第一种</h3><pre><code>* A: if语句格式第一种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 先计算比较表达式的值，看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>。</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体；</span><br><span class="line">* 如果是<span class="keyword">false</span>，就不执行语句体；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">5</span> ;</span><br><span class="line">  <span class="comment">//对变量i进行if判断</span></span><br><span class="line">  <span class="keyword">if</span>(i &gt; <span class="number">5</span>)&#123;</span><br><span class="line">  System.out.println(<span class="string">"if中的条件是true"</span>);</span><br><span class="line">  i++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06if语句格式第二种"><a href="#06if语句格式第二种" class="headerlink" title="06if语句格式第二种"></a>06if语句格式第二种</h3><pre><code>* A: if语句格式第二种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 首先计算比较表达式的值，看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>。</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">1</span>；</span><br><span class="line">* 如果是<span class="keyword">false</span>，就执行语句体<span class="number">2</span>；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">16</span> ;</span><br><span class="line"> <span class="comment">//判断变量,是奇偶数, 除以2,看余数是0还是1</span></span><br><span class="line"> <span class="keyword">if</span>( i % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line"> System.out.println(i+<span class="string">" 是偶数"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> System.out.println(i+<span class="string">" 是奇数"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07if语句格式第三种"><a href="#07if语句格式第三种" class="headerlink" title="07if语句格式第三种"></a>07if语句格式第三种</h3><pre><code>* A: if语句格式第三种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* a: 书写格式</span><br><span class="line"><span class="keyword">if</span>(比较表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">3</span>) &#123;</span><br><span class="line">语句体<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">* b：执行流程：</span><br><span class="line">* 首先计算比较表达式<span class="number">1</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">1</span>，<span class="keyword">if</span>语句结束。</span><br><span class="line">* 如果是<span class="keyword">false</span>，接着计算比较表达式<span class="number">2</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line"></span><br><span class="line">* 如果是<span class="keyword">true</span>，就执行语句体<span class="number">2</span>，<span class="keyword">if</span>语句结束。</span><br><span class="line">* 如果是<span class="keyword">false</span>，接着计算比较表达式<span class="number">3</span>看其返回值是<span class="keyword">true</span>还是<span class="keyword">false</span>，</span><br><span class="line"></span><br><span class="line">* 如果都是<span class="keyword">false</span>，就执行语句体n+<span class="number">1</span>。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseIfDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//成绩判断要求 ,成绩&gt;80  成绩&gt;70  成绩&gt;60  不及格</span></span><br><span class="line"><span class="comment">//定义变量,保存成绩</span></span><br><span class="line"><span class="keyword">int</span> grade = <span class="number">75</span>;</span><br><span class="line"><span class="comment">//使用if else if 语句对成绩判断</span></span><br><span class="line"><span class="keyword">if</span>( grade &gt; <span class="number">80</span> )&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是优"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">70</span>)&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是良"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( grade &gt; <span class="number">60</span>)&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是中"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(grade+<span class="string">" 成绩是差"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08if语句和三元运算符的互换"><a href="#08if语句和三元运算符的互换" class="headerlink" title="08if语句和三元运算符的互换"></a>08if语句和三元运算符的互换</h3><pre><code>* A: 三元运算符</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a: 概念</span><br><span class="line">* 用来完成简单的选择逻辑，即根据条件判断，从两个选择中选择一种执行</span><br><span class="line">* b: 使用格式</span><br><span class="line">* (条件表达式)？表达式<span class="number">1</span>：表达式<span class="number">2</span>；</span><br><span class="line">* c: 运算规则</span><br><span class="line">* <span class="number">1</span>: 判断条件表达式，结果为一个布尔值</span><br><span class="line">* <span class="number">2</span>: <span class="keyword">true</span>，运算结果为表达式<span class="number">1</span></span><br><span class="line">* <span class="number">3</span>: <span class="keyword">false</span>，运算结果为表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line"><span class="comment">//使用if语句,判断出最大值</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;j)&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">System.out.println(i+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(j+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用三元运算实现</span></span><br><span class="line"><span class="keyword">int</span> k = i&gt;j ? i : j;</span><br><span class="line">System.out.println(k+<span class="string">" 是最大值"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">* C: 使用<span class="keyword">if</span>语句还是三元表达式</span><br><span class="line">* 判断条件多,使用<span class="keyword">if</span></span><br><span class="line"> * 三元,必须有结果的, <span class="keyword">if</span> 可以没有结果的</span><br></pre></td></tr></table></figure><h3 id="09while循环"><a href="#09while循环" class="headerlink" title="09while循环"></a>09while循环</h3><pre><code>* A: while循环结构</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line">初始化表达式；</span><br><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br><span class="line">* b: 执行顺序</span><br><span class="line">  当条件是<span class="keyword">true</span>,就执行循环体,执行完循环体后</span><br><span class="line">  程序再次执行<span class="keyword">while</span>中的条件,如果条件还是<span class="keyword">true</span>,继续执行循环体</span><br><span class="line">  直到条件是<span class="keyword">false</span>的时候,循环就结束</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//输出 1-4之间的整数</span></span><br><span class="line"><span class="comment">//定义变量,整数类型, 循环的条件</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>( i &lt; <span class="number">5</span> )&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10for循环-1"><a href="#10for循环-1" class="headerlink" title="10for循环_1"></a>10for循环_1</h3><pre><code>* A: for循环_1</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line"> <span class="keyword">for</span>(初始化变量 ; 条件 ; 增量)&#123;</span><br><span class="line"> 循环体;</span><br><span class="line"> &#125;</span><br><span class="line">* b: 各模块解释</span><br><span class="line">初始化变量: 定义变量,作用是用来控制循环的次数</span><br><span class="line">    条件: 当条件是<span class="keyword">true</span>,执行循环体,条件是<span class="keyword">false</span>,结束循环</span><br><span class="line">    增量: 变量自增情况 </span><br><span class="line"></span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//for循环,输出0-10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">11</span> ; i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11for循环-2"><a href="#11for循环-2" class="headerlink" title="11for循环_2"></a>11for循环_2</h3><pre><code>* A: for循环的执行流程    for（①1 ; ②2 ; ③3）{        ④4    }    第一步，执行①1    第二步，执行②2，如果判断结果为true，执行第三步，如果判断结果为false，执行第五步    第三步，执行④4    第四步，执行③3，然后重复执行第二步    第五步，退出循环</code></pre><h3 id="12for循环-3"><a href="#12for循环-3" class="headerlink" title="12for循环_3"></a>12for循环_3</h3><pre><code>* A: 案例    * a: 利用for循环,计算1+4的结果* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo_1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义变量,记录求和后的数据</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 利用循环,将变量从1变化到4</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">4</span> ; i++)&#123;</span><br><span class="line"><span class="comment">//对变量进行求和</span></span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13do-while循环"><a href="#13do-while循环" class="headerlink" title="13do_while循环"></a>13do_while循环</h3><pre><code>* A: do_while循环</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* a: 使用格式</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   循环体;</span><br><span class="line">    &#125;<span class="keyword">while</span>(条件);</span><br><span class="line">* b: 执行顺序</span><br><span class="line">先执行一次循环体，然后再判断条件，如果条件为<span class="keyword">true</span>，继续执行循环体，</span><br><span class="line">如果条件为<span class="keyword">false</span>，循环结束。</span><br><span class="line">* c: 特点</span><br><span class="line">* 无条件先执行一次</span><br><span class="line">* B: 案例代码</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>( i &lt;  <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14死循环"><a href="#14死循环" class="headerlink" title="14死循环"></a>14死循环</h3><pre><code>* A: 死循环概述    * 无限循环存在的原因是并不知道循环多少次，而是根据某些条件，来控制循环* B: 死循环格式    * while(true){}    * for(;;){}</code></pre><h3 id="15嵌套for循环-1"><a href="#15嵌套for循环-1" class="headerlink" title="15嵌套for循环_1"></a>15嵌套for循环_1</h3><pre><code>* A: 嵌套循环的概述</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 嵌套循环是指在一个循环语句的循环体中再定义一个循环语句的语法结构。</span><br><span class="line">* <span class="keyword">while</span>、<span class="keyword">do</span>…<span class="keyword">while</span>、<span class="keyword">for</span>循环语句都可以进行嵌套，并且它们之间也可以互相嵌套，</span><br><span class="line">* 如最常见的在<span class="keyword">for</span>循环中嵌套<span class="keyword">for</span>循环。</span><br></pre></td></tr></table></figure><pre><code>* B: 嵌套循环的格式</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 循环条件; 操作表达式) &#123;</span><br><span class="line">………</span><br><span class="line"><span class="keyword">for</span>(初始化表达式; 循环条件; 操作表达式) &#123;</span><br><span class="line">执行语句</span><br><span class="line">………</span><br><span class="line">&#125;</span><br><span class="line">………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* C: 各模块解释</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 总的循环次数 =  内循环次数 * 外循环的次数</span><br><span class="line">* 内循环,是外循环的循环体</span><br><span class="line">   </span><br><span class="line">* 外循环,控制的是行数</span><br><span class="line">* 内循环,控制的是每行的个数</span><br></pre></td></tr></table></figure><h3 id="16嵌套for循环-2"><a href="#16嵌套for循环-2" class="headerlink" title="16嵌套for循环_2"></a>16嵌套for循环_2</h3><pre><code>* A: 案例    * a: 打印正三角形* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span> ;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17break语句"><a href="#17break语句" class="headerlink" title="17break语句"></a>17break语句</h3><pre><code>* A: break语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 跳出所在的循环体</span><br><span class="line">* b: 书写位置</span><br><span class="line">* 必须出现在循环或选择结构内</span><br><span class="line">* c: 举例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(“我爱Java”+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会从0-5输出6次“我爱Java”</span></span><br></pre></td></tr></table></figure><pre><code>* B: break详细解释</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 在loop/<span class="keyword">switch</span>选择或者循环过程中，我们总是满足布尔表达条件才能执行对应的代码，然而在这些逻辑过程中，</span><br><span class="line">可以使用一些关键字直接跳出正在执行的代码，去执行后边或者指定位置的代码，</span><br><span class="line">这些关键字一旦出现就可以跳转语句执行顺序。</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 无法单独使用，必须将<span class="keyword">break</span>关键字置于<span class="keyword">switch</span>或循环语句中</span><br><span class="line">* c: 运行规律</span><br><span class="line">* 不需要判断任何条件，只要遇到<span class="keyword">break</span>变直接跳出执行后续代码。会完全跳出选择或者循环结构</span><br><span class="line">* 只能跳出最近的代码块，不能跨越多级代码块</span><br></pre></td></tr></table></figure><pre><code>* C：循环标号</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* a: 为什么使用循环标号</span><br><span class="line">* 当在双层循环或者循环内有<span class="keyword">switch</span>选择语句时，我们发现，使用<span class="keyword">break</span>或者<span class="keyword">continue</span>所作用的对象均是内层语句，无法直接跳出外层循环，这时就需要使用标号语句跳转了.</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 在外层循环外的某行前边，使用后边跟有冒号”:”的标识符，即定义完毕。</span><br><span class="line">  使用时当在内层循环使用<span class="keyword">break</span>或<span class="keyword">continue</span>时后边紧跟之前定义的标号即可</span><br><span class="line">* c: 运行规律</span><br><span class="line">* 当外层循环外定义了标号</span><br><span class="line">* 内层使用<span class="keyword">break</span>，终止内外双层循环。</span><br><span class="line">* 内层使用<span class="keyword">continue</span>，终止内层循环，继续外层循环。</span><br></pre></td></tr></table></figure><h3 id="18continue语句"><a href="#18continue语句" class="headerlink" title="18continue语句"></a>18continue语句</h3><pre><code>* A: continue语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* a: 作用</span><br><span class="line">* 提前结束本次循环，继续进行下次循环</span><br><span class="line">* b: 使用方式</span><br><span class="line">* 无法单独使用，必须将<span class="keyword">continue</span>关键字置于循环语句中</span><br><span class="line">* c：运行规律</span><br><span class="line">* 不需要判断任何条件，只要遇到<span class="keyword">continue</span>变直接跳出本轮循环进行下次循环</span><br><span class="line">* d：案例代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会把0-9之间所有的奇数打印到控制台上</span></span><br></pre></td></tr></table></figure><h3 id="19猜数字小游戏"><a href="#19猜数字小游戏" class="headerlink" title="19猜数字小游戏"></a>19猜数字小游戏</h3><pre><code>* A: 猜数字小游戏            * a: 分析        * 用户给的数可能大于、小于、或等于被猜的数，这样就会出现三种情况，用前面讲的三元运算符可以实现，            但是得用三元运算符的嵌套，比较麻烦！可以用更简单的方式if条件判断，可以有三个以上的条件    * b: 需求分析        * 后台预先生成一个随机数1-100，用户键盘录入猜数字        * 如果猜对了，打印“恭喜您，答对了”        * 如果猜错了        * 猜大了：打印“sorry，您猜大了!”        * 猜小了：打印“sorry，您猜小了!”                直到数字猜到为止                最多只能猜5次，否则提示“sorry，您没有机会了!”* B: 案例代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">猜数字小游戏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">完成猜数字小游戏：</span></span><br><span class="line"><span class="comment">1、产生随机数</span></span><br><span class="line"><span class="comment">后台预先生成一个随机数1-100，用户键盘录入猜数字</span></span><br><span class="line"><span class="comment">2、通过if语句对用户猜的数与随机数进行比较</span></span><br><span class="line"><span class="comment">如果猜对了，打印“恭喜您，答对了”</span></span><br><span class="line"><span class="comment">如果猜错了</span></span><br><span class="line"><span class="comment">猜大了：打印“sorry，您猜大了!”</span></span><br><span class="line"><span class="comment">猜小了：打印“sorry，您猜小了!”</span></span><br><span class="line"><span class="comment">3、通过for循环完成用户猜数的循环</span></span><br><span class="line"><span class="comment">直到数字猜到为止</span></span><br><span class="line"><span class="comment">最多只能猜5次，否则提示“sorry，您没有机会了!”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//通过*的方式可以一次导入该包下所有的类，但是不建议使用。建议使用哪个导哪个。</span></span><br><span class="line"><span class="comment">//import java.util.*;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessNumber</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、产生随机数</span></span><br><span class="line"><span class="comment">//后台预先生成一个随机数1-100，用户键盘录入猜数字</span></span><br><span class="line"><span class="comment">//创建随机数对象</span></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//产生一个1-100的随机数</span></span><br><span class="line"><span class="keyword">int</span> randomNumber = random.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//System.out.println("我产生的随机数是："+randomNumber+"你猜猜是多少？");  作弊专用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//产生控制台录入的Scanner对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//3、通过for循环完成用户猜数的循环</span></span><br><span class="line"><span class="comment">//通过for循环完成猜数字逻辑</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="comment">//提示用户输入要猜的数，用变量接收</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"请您输入一个1-100的数："</span>);</span><br><span class="line"><span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过if语句对用户猜的数与随机数进行比较</span></span><br><span class="line"><span class="comment">//如果猜对了</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber==randomNumber) &#123;</span><br><span class="line"><span class="comment">//打印猜对后的提示</span></span><br><span class="line">System.out.println(<span class="string">"恭喜您，猜对了！"</span>);</span><br><span class="line"><span class="comment">//跳出循环，不用再猜了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果猜错了</span></span><br><span class="line"><span class="comment">//如果猜大了</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber&gt;randomNumber) &#123;</span><br><span class="line">System.out.println(<span class="string">"sorry，您猜大了!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//如果猜小了</span></span><br><span class="line">System.out.println(<span class="string">"sorry，您猜小了!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果猜到了最后的第5次仍然没有猜对就跳出循环</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"对不起，点太背，下次再来吧！"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次猜错后，都提示还有多少次机会</span></span><br><span class="line">System.out.println(<span class="string">"请注意，您还有"</span>+(<span class="number">5</span>-i)+<span class="string">"次机会，请慎重作答！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1539609413529-1166774c3954.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、引用类型变量的创建及使用&lt;br&gt;2、流程控制语句之选择语句&lt;br&gt;3、流程控制语句之循环语句&lt;br&gt;4、循环高级&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AS环境配置踩坑经历</title>
    <link href="https://leesen998.github.io/2016/10/03/AS%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <id>https://leesen998.github.io/2016/10/03/AS环境配置踩坑经历/</id>
    <published>2016-10-03T02:41:53.000Z</published>
    <updated>2018-10-23T07:41:31.702Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1538150096488-cda7e455f3ee.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a><font color="#551A8B" size="">遇到的bug</font></h2><pre><code>Unable to resolve dependency for &apos;:app@debug/compileClasspath&apos;</code></pre><p>这是由于配置文件的依赖是通过Google下载的，然而该下载被墙了！<br>[解决办法]：</p><h3 id="在整个工程的build-gradle中添加以下框内代码："><a href="#在整个工程的build-gradle中添加以下框内代码：" class="headerlink" title="在整个工程的build.gradle中添加以下框内代码："></a>在整个工程的build.gradle中添加以下框内代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">        url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span></span><br><span class="line">        &#125;</span><br><span class="line">maven &#123; url <span class="string">'http://repo1.maven.org/maven2'</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="app下的build-gradle配置如下"><a href="#app下的build-gradle配置如下" class="headerlink" title="app下的build.gradle配置如下:"></a>app下的build.gradle配置如下:</h3><p>buildToolsVersion 需要和你的sdk安装目录 ~\sdk\build-tools文件里面已有的版本对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 26</span><br><span class="line">    buildToolsVersion <span class="string">'27.0.3'</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.administrator.myapplication"</span></span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 22</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>implementation ‘com.android.support:appcompat-v7:26.+’ 中v7:26.+表示使用的sdk版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:26.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:0.4'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">//    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="若配置后还没解决问题，依然报错"><a href="#若配置后还没解决问题，依然报错" class="headerlink" title="若配置后还没解决问题，依然报错"></a>若配置后还没解决问题，依然报错</h3><p><font color="#FF00FF" size="">打开 C:/Users/(用户名)/.gradle/gradle.properties</font><br>把http代理的配置注释掉，例如：</p><pre><code>## For more details on how to configure your build environment visit# http://www.gradle.org/docs/current/userguide/build_environment.html## Specifies the JVM arguments used for the daemon process.# The setting is particularly useful for tweaking memory settings.# Default value: -Xmx1024m -XX:MaxPermSize=256m# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8## When configured, Gradle will run in incubating parallel mode.# This option should only be used with decoupled projects. More details, visit# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects# org.gradle.parallel=true#Sat Sep 29 23:37:12 CST 2018#systemProp.http.proxyHost=mirrors.neusoft.edu.cn#systemProp.https.proxyPort=80#systemProp.https.proxyHost=mirrors.neusoft.edu.cn#systemProp.http.proxyPort=80</code></pre><p>More info: <a href="https://blog.csdn.net/magicbaby810/article/details/79848425" target="_blank" rel="noopener">参考该问题的csdn博客</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/leesen/image/upload/v1540280253/samples/java%20files/photo-1538150096488-cda7e455f3ee.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装" scheme="https://leesen998.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="AS" scheme="https://leesen998.github.io/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>java入门</title>
    <link href="https://leesen998.github.io/2016/10/02/java%E5%85%A5%E9%97%A8/"/>
    <id>https://leesen998.github.io/2016/10/02/java入门/</id>
    <published>2016-10-02T03:59:18.000Z</published>
    <updated>2018-11-05T07:26:50.857Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg" alt="" style="width:100%"><br>java入门笔记<br><a id="more"></a></p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a><font color="#551A8B" size="">第一个Java程序</font></h2><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a><font color="#00CD66" size="">Java代码</font></h3><p>Java程序是大小写敏感的 对格式没有严格要求，但用空格或Tab键缩进会比较好看</p><h3 id="Hello-java"><a href="#Hello-java" class="headerlink" title="Hello.java"></a><font color="#D66" size="">Hello.java</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名必须是Hello.java，文件名也要注意大小写，必须与程序的类名完全一致，扩展名是.java。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><font color="#DD66" size="">编译</font></h3><p>切换到Hello.java所在目录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure></p><p>无任何输出表示成功，可查看编译出的Hello.class文件。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a><font color="#3D66" size="">执行</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Hello</span><br></pre></td></tr></table></figure><p>代码格式：public 和 static 是修饰符static表示静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数) &#123;</span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line">你的程序代码;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class定义结束</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font color="#551A8B" size="">变量</font></h2><h3 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h3><p>A: 什么是变量?<br>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 变量是一个内存中的小盒子（小容器），容器是什么？生活中也有很多容器，例如水杯是容器，用来装载水；你家里的大衣柜是容器，用来装载衣裤；饭盒是容器，用来装载饭菜。那么变量是装载什么的呢？</span><br><span class="line">答案是数据！结论：变量是内存中装载数据的小盒子，你只能用它来存数据和取数据。</span><br></pre></td></tr></table></figure></p><h3 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h3><p>A: 计算机中储存和运算的最小单位是?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a: 一个字节,也就是一个<span class="keyword">byte</span>.</span><br><span class="line"> win+r--cmd--回车</span><br><span class="line">b: 常用储存单位</span><br><span class="line">*<span class="number">1</span>B（字节） = <span class="number">8</span>bit</span><br><span class="line">*<span class="number">1</span>KB = <span class="number">1024</span>B</span><br><span class="line">*<span class="number">1</span>MB = <span class="number">1024</span>KB</span><br><span class="line">*<span class="number">1</span>GB = <span class="number">1024</span>MB</span><br><span class="line">*<span class="number">1</span>TB = <span class="number">1024</span>GB</span><br><span class="line">*<span class="number">1</span>PB = <span class="number">1024</span>TB</span><br></pre></td></tr></table></figure></p><h3 id="Java中数据类型四类八种"><a href="#Java中数据类型四类八种" class="headerlink" title="Java中数据类型四类八种"></a>Java中数据类型四类八种</h3><p> A: 数据类型四类八种<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*四类八种字节数数据表示范围</span><br><span class="line">*整型<span class="keyword">byte</span><span class="number">1</span>-<span class="number">128</span>～<span class="number">127</span></span><br><span class="line"><span class="keyword">short</span><span class="number">2</span>-<span class="number">32768</span>～<span class="number">32767</span></span><br><span class="line"><span class="keyword">int</span><span class="number">4</span>-<span class="number">2147483648</span>～<span class="number">2147483648</span></span><br><span class="line"><span class="keyword">long</span><span class="number">8</span>-<span class="number">263</span>～<span class="number">263</span>-<span class="number">1</span></span><br><span class="line">*浮点型<span class="keyword">float</span><span class="number">4</span>-<span class="number">3.403E38</span>～<span class="number">3.403E38</span></span><br><span class="line"><span class="keyword">double</span><span class="number">8</span>-<span class="number">1.798E308</span>～<span class="number">1.798E308</span></span><br><span class="line">*字符型<span class="keyword">char</span><span class="number">2</span>表示一个字符，如(<span class="string">'a'</span>，<span class="string">'A'</span>，<span class="string">'0'</span>，<span class="string">'家'</span>)</span><br><span class="line">*布尔型<span class="keyword">boolean</span><span class="number">1</span>只有两个值<span class="keyword">true</span>与<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p><h3 id="常量和数据类型"><a href="#常量和数据类型" class="headerlink" title="常量和数据类型"></a>常量和数据类型</h3><p> A:常量的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* a: 整形常量默认是int类型</span><br><span class="line">* b: 小数常量默认是double类型</span><br><span class="line">* c: 定义长整形数据如果值超过int取值范围后面要+<span class="string">"L"</span></span><br><span class="line">* d: 定义<span class="built_in">float</span>类型的数据后面要+<span class="string">"f"</span> 否则默认是double</span><br></pre></td></tr></table></figure></p><h3 id="变量创建的三要素"><a href="#变量创建的三要素" class="headerlink" title="变量创建的三要素"></a>变量创建的三要素</h3><p>A: 定义变量的语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">数据类型  变量名  =  变量值;</span><br><span class="line">* <span class="keyword">int</span>         a    =  <span class="number">100</span>;</span><br><span class="line">      * B:代码:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'z'</span>;</span><br><span class="line">String s = <span class="string">"i love java"</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义所有的基本数据类型变量"><a href="#定义所有的基本数据类型变量" class="headerlink" title="定义所有的基本数据类型变量"></a>定义所有的基本数据类型变量</h3><ul><li><p>A: 案例演示</p><ul><li>a: 八种基本类型数据的创建</li></ul></li></ul><h3 id="定义字符串变量"><a href="#定义字符串变量" class="headerlink" title="定义字符串变量"></a>定义字符串变量</h3><ul><li>A：案例演示<ul><li>创建字符串数据类型变量</li><li>String 是引用数据类型<h3 id="变量定义使用注意事项"><a href="#变量定义使用注意事项" class="headerlink" title="变量定义使用注意事项"></a>变量定义使用注意事项</h3></li></ul></li><li>A：变量使用的注意事项<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* a: 变量定义后可以不赋值，使用时再赋值。不赋值不能使用。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">x = <span class="number">20</span>; <span class="comment">//为x赋值20</span></span><br><span class="line">System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* c:变量使用时有作用域的限制。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">System.out.println(y);<span class="comment">//读取y变量中的值失败，失败原因，找不到y变量，因为超出了y变量作用范围，所以不能使用y变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-自动转换"><a href="#数据类型转换-自动转换" class="headerlink" title="数据类型转换_自动转换"></a>数据类型转换_自动转换</h3><ul><li>A:     自动类型转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* a:表示范围小的数据类型转换成范围大的数据类型，这种方式称为自动类型转换</span><br><span class="line">自动类型转换格式：</span><br><span class="line">范围大的数据类型 变量 = 范围小的数据类型值；</span><br><span class="line">如：</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1000</span>;</span><br><span class="line">或</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">double</span> d2 = i;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型转换-强制转换"><a href="#数据类型转换-强制转换" class="headerlink" title="数据类型转换_强制转换"></a>数据类型转换_强制转换</h3><ul><li>A: 强制类型转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*a: 表示范围大的数据类型转换成范围小的数据类型，这种方式称为强制类型转换</span><br><span class="line">*b: 强制类型转换格式：</span><br><span class="line">范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">int</span>  i = (<span class="keyword">int</span>)<span class="number">6.718</span>;   <span class="comment">//i的值为6</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">double</span>  d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span>  i2 = (<span class="keyword">int</span>)d;     <span class="comment">//i2的值为3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><font color="#551A8B" size="">运算符</font></h2><h3 id="算数运算符-1"><a href="#算数运算符-1" class="headerlink" title="算数运算符_1"></a>算数运算符_1</h3><ul><li><p>A: 常见操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">+正号+<span class="number">3</span><span class="number">3</span></span><br><span class="line">+加<span class="number">2</span>+<span class="number">3</span><span class="number">5</span></span><br><span class="line">+连接字符串“中”+“国”“中国”</span><br><span class="line">-负号<span class="keyword">int</span> a=<span class="number">3</span>;-a-<span class="number">3</span></span><br><span class="line">-减<span class="number">3</span>-<span class="number">1</span><span class="number">2</span></span><br><span class="line">*乘<span class="number">2</span>*<span class="number">3</span><span class="number">6</span></span><br><span class="line">/除<span class="number">5</span>/<span class="number">2</span><span class="number">2</span></span><br><span class="line">%取模<span class="number">5</span>/<span class="number">2</span><span class="number">1</span></span><br><span class="line">++自增<span class="keyword">int</span> a=<span class="number">1</span>;a++/++a<span class="number">2</span></span><br><span class="line">--自减<span class="keyword">int</span> b=<span class="number">3</span>;a--/--a<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>B: 注意事项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*a:加法运算符在连接字符串时要注意，只有直接与字符串相加才会转成字符串。</span><br><span class="line">*b:除法“/”当两边为整数时，取整数部分，舍余数。当其中一边为浮点型时，按正常规则相除。 </span><br><span class="line">*c:“%”为整除取余符号，小数取余没有意义。结果符号与被取余符号相同。</span><br><span class="line">*d:整数做被除数，<span class="number">0</span>不能做除数，否则报错。</span><br><span class="line">*e:小数做被除数，整除<span class="number">0</span>结果为Infinity，对<span class="number">0</span>取模结果为NaN</span><br></pre></td></tr></table></figure></li><li><p>C:代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 常量使用算数运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(<span class="number">10</span>+<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 变量使用算数运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//"+"作为加法运算使用</span></span><br><span class="line"><span class="keyword">int</span> z = x + y; </span><br><span class="line"><span class="comment">//"+"作为连接字符串使用</span></span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">System.out.println(<span class="string">"z="</span>+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算数运算符-2"><a href="#算数运算符-2" class="headerlink" title="算数运算符_2"></a>算数运算符_2</h3><ul><li>算数运算符++、–<pre><code>* A:算数运算符++、--的使用    * a: ++运算符，会在原有值的基础上自增1    * b: --运算符，会在原有值的基础上自减1。* B:++  -- 位置的使用    * a:++,--运算符后置时，先使用变量a原有值参与运算操作，运算操作完成后，变量a的值自增1或者自减1；    * b:++，--运算符前置时，先将变量a的值自增1或者自减1，然后使用更新后的新值参与运算操作。</code></pre></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>A: 赋值运算符的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符 运算规则范例结果</span><br><span class="line">=赋值<span class="keyword">int</span> a=<span class="number">2</span><span class="number">2</span></span><br><span class="line">+=加后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a+=<span class="number">2</span><span class="number">4</span></span><br><span class="line">-=减后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a-=<span class="number">2</span><span class="number">0</span></span><br><span class="line">*=乘后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a*=<span class="number">2</span><span class="number">4</span></span><br><span class="line">/=整除后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a/=<span class="number">2</span><span class="number">1</span></span><br><span class="line">%=取模后赋值<span class="keyword">int</span> a=<span class="number">2</span>，a%=<span class="number">2</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>B：案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> * 赋值运算符</span><br><span class="line"> * +=, -=, *=, /=, %= ： </span><br><span class="line"> * 上面的运算符作用：将等号左右两边计算，会将结果自动强转成等号左边的数据类型,再赋值给等号左边的</span><br><span class="line"> * 注意：赋值运算符左边必须是变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> x = <span class="number">10</span>;</span><br><span class="line">x += <span class="number">20</span>;<span class="comment">// 相当于 x = (byte)(x+20);</span></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>A:比较运算符的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">==相等于<span class="number">4</span>==<span class="number">3</span>False</span><br><span class="line">!=不等于<span class="number">4</span>!=<span class="number">3</span>True</span><br><span class="line">&lt;小于<span class="number">4</span>&lt;<span class="number">3</span>False</span><br><span class="line">&gt;大于<span class="number">4</span>&gt;<span class="number">3</span>True</span><br><span class="line">&lt;=小于等于<span class="number">4</span>&lt;=<span class="number">3</span>False</span><br><span class="line">&gt;=大于等于        <span class="number">4</span>&gt;=<span class="number">3</span>True</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>A: 逻辑运算符的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运算符运算规则范例结果</span><br><span class="line">&amp;与<span class="keyword">false</span>&amp;<span class="keyword">true</span>False</span><br><span class="line">|或<span class="keyword">false</span>|<span class="keyword">true</span>True</span><br><span class="line">^异或<span class="keyword">true</span>^flaseTrue</span><br><span class="line">!非!<span class="keyword">true</span>Flase</span><br><span class="line">&amp;&amp;短路与<span class="keyword">false</span>&amp;&amp;<span class="keyword">true</span>False</span><br><span class="line">||短路或<span class="keyword">false</span>||<span class="keyword">true</span>True</span><br><span class="line"></span><br><span class="line">规律小结:</span><br><span class="line">短路与&amp;&amp;:参与运算的两边数据，有<span class="keyword">false</span>，则运算结果为<span class="keyword">false</span>；</span><br><span class="line">短路或||:参与运算的两边数据，有<span class="keyword">true</span>，则运算结果为<span class="keyword">true</span>；</span><br><span class="line">逻辑非! : 参与运算的数据，原先是<span class="keyword">true</span>则变成<span class="keyword">false</span>，原先是<span class="keyword">false</span>则变成<span class="keyword">true</span>。</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>A: 格式:</p><pre><code>(条件表达式)？表达式1：表达式2；</code></pre><p>B: 代码案例</p><pre><code>方式一：System.out.println( 3&gt;2 ? “正确” : “错误” ); // 三元运算符运算后的结果为true，运算结果为表达式1的值“正确”，然后将结果“正确”，在控制台输出打印方式二：int a = 3;int b = 4;String result = (a==b) ? “相等” : “不相等”;  //三元运算符运算后的结果为false，运算结果为表达式2的值“不相等”，然后将结果赋值给了变量result方式三：int n = (3&gt;2 &amp;&amp; 4&gt;6) ? 100 : 200;//三元运算符运算后的结果为false，运算结果为表达式2的值200,然后将结果200赋值给了变量n</code></pre><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">优先级描述运算符</span><br><span class="line"><span class="number">1</span>括号()、[]</span><br><span class="line"><span class="number">2</span>正负号+、-</span><br><span class="line"><span class="number">3</span>自增自减，非++、--、!</span><br><span class="line"><span class="number">4</span>乘除，取余*、/、%</span><br><span class="line"><span class="number">5</span>加减+、-</span><br><span class="line"><span class="number">6</span>移位运算&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</span><br><span class="line"><span class="number">7</span>大小关系&gt;、&gt;=、&lt;、&lt;=</span><br><span class="line"><span class="number">8</span>相等关系==、!=</span><br><span class="line"><span class="number">9</span>按位与&amp;</span><br><span class="line"><span class="number">10</span>按位异或^</span><br><span class="line"><span class="number">11</span>按位或|</span><br><span class="line"><span class="number">12</span>逻辑与&amp;&amp;</span><br><span class="line"><span class="number">13</span>逻辑或||</span><br><span class="line"><span class="number">14</span>条件运算?:</span><br><span class="line"><span class="number">15</span>赋值运算=、+=、-=、*=、/=、%=</span><br><span class="line"><span class="number">16</span>位赋值运算&amp;=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</span><br></pre></td></tr></table></figure><h3 id="商场库存清单案例"><a href="#商场库存清单案例" class="headerlink" title="商场库存清单案例"></a>商场库存清单案例</h3><p>A: 案例分析.</p><ul><li>a:观察清单后，可将清单分解为三个部分（清单顶部、清单中部、清单底部）</li><li>b:清单顶部为固定的数据，直接打印即可</li><li><p>c:清单中部为商品，为变化的数据，需要记录商品信息后，打印<br>经过观察，我们确定一项商品应该有如下几个属性：<br>品牌型号: 即商品名称，String型<br>尺寸：物品大小，double型<br>价格：物品单价，double型<br>配置：这一项为每种商品的配置信息，String型<br>库存数：这一项为每种商品的库存个数，int型</p></li><li><p>d:清单底部包含了统计操作，需经过计算后，打印<br>我们发现两个单独的可变化量<br>总库存数：所有商品总个数，int型<br>库存商品总金额：所有商品金额，double型</p></li></ul><p>B: 案例代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤一:  创建Demo01库存清单.java文件，编写main主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span>库存清单 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤二:  记录每种库存商品信息</span></span><br><span class="line"><span class="comment">//苹果笔记本电脑</span></span><br><span class="line">String macBrand = <span class="string">"MacBookAir"</span>;</span><br><span class="line"><span class="keyword">double</span> macSize = <span class="number">13.3</span>;</span><br><span class="line"><span class="keyword">double</span> macPrice = <span class="number">6988.88</span>;</span><br><span class="line"><span class="keyword">int</span> macCount = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联想Thinkpad笔记本电脑</span></span><br><span class="line">String thinkpadBrand = <span class="string">"ThinkpadT450"</span>;</span><br><span class="line"><span class="keyword">double</span> thinkpadSize = <span class="number">14.0</span>;</span><br><span class="line"><span class="keyword">double</span> thinkpadPrice = <span class="number">5999.99</span>;</span><br><span class="line"><span class="keyword">int</span> thinkpadCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//华硕ASUS笔记本电脑</span></span><br><span class="line">String ASUSBrand = <span class="string">"ASUS-FL5800"</span>;</span><br><span class="line"><span class="keyword">double</span> ASUSSize = <span class="number">15.6</span>;</span><br><span class="line"><span class="keyword">double</span> ASUSPrice = <span class="number">4999.50</span>;</span><br><span class="line"><span class="keyword">int</span> ASUSCount = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤三: 统计库存总个数、库存总金额</span></span><br><span class="line"><span class="keyword">int</span> totalCount = macCount + thinkpadCount + ASUSCount;</span><br><span class="line"><span class="keyword">double</span> totalMoney = (macCount * macPrice) + (thinkpadCount * thinkpadPrice) + (ASUSCount * ASUSPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤四: 列表顶部</span></span><br><span class="line">System.out.println(<span class="string">"------------------------------商城库存清单-----------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"品牌型号尺寸价格库存数"</span>);</span><br><span class="line"></span><br><span class="line">步骤四:打印库存清单中部信息</span><br><span class="line"><span class="comment">//列表中部</span></span><br><span class="line">System.out.println(macBrand+<span class="string">""</span>+macSize+<span class="string">""</span>+macPrice+<span class="string">""</span>+macCount);</span><br><span class="line">System.out.println(thinkpadBrand+<span class="string">""</span>+thinkpadSize+<span class="string">""</span>+thinkpadPrice+<span class="string">""</span>+thinkpadCount);</span><br><span class="line">System.out.println(ASUSBrand+<span class="string">""</span>+ASUSSize+<span class="string">""</span>+ASUSPrice+<span class="string">""</span>ASUSCount);</span><br><span class="line">打印库存清单底部信息</span><br><span class="line"><span class="comment">//列表底部</span></span><br><span class="line">System.out.println(<span class="string">"-----------------------------------------------------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"总库存数："</span>+totalCount); </span><br><span class="line">System.out.println(<span class="string">"库存商品总金额："</span>+totalMoney);</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g5/M00/00/0C/ChMkJ1gF5IyIVpQZAAfWfSNJAuoAAXABwHjE1wAB9aV014.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;java入门笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://leesen998.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="https://leesen998.github.io/tags/java/"/>
    
  </entry>
  
</feed>
