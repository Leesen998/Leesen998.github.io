<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QJun</title>
  
  <subtitle>QJun&#39;s Homepage</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leesen998.github.io/"/>
  <updated>2019-03-15T10:00:06.257Z</updated>
  <id>https://leesen998.github.io/</id>
  
  <author>
    <name>QJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习算法优缺点对比及选择-小结</title>
    <link href="https://leesen998.github.io/2016/12/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94%E5%8F%8A%E9%80%89%E6%8B%A9/"/>
    <id>https://leesen998.github.io/2016/12/26/机器学习算法优缺点对比及选择/</id>
    <published>2016-12-26T11:48:29.000Z</published>
    <updated>2019-03-15T10:00:06.257Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g2/M00/0C/00/ChMlWVyA5JyIFsD7AArXsWw3WSoAAIp9gN0N1UACtfJ346.jpg" alt="" style="width:100%"></p><p>机器学习算法优缺点对比及选择</p><a id="more"></a><p>机器学习算法太多了，分类、回归、聚类、推荐、图像识别领域等等，要想找到一个合适算法真的不容易，所以在实际应用中，我们一般都是采用启发式学习方式来实验。通常最开始我们都会选择大家普遍认同的算法，诸如SVM，GBDT，Adaboost，现在深度学习很火热，神经网络也是一个不错的选择。</p><p>假如你在乎精度（accuracy）的话，最好的方法就是通过交叉验证（cross-validation）对各个算法一个个地进行测试，进行比较，然后调整参数确保每个算法达到最优解，最后选择最好的一个。但是如果你只是在寻找一个“足够好”的算法来解决你的问题，或者这里有些技巧可以参考，下面来分析下各个算法的优缺点，基于算法的优缺点，更易于我们去选择它。</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>在机器学习领域，一个基本的定理就是“没有免费的午餐”。<strong>换言之，就是没有算法能完美地解决所有问题，尤其是对监督学习而言（例如预测建模）</strong>。</p><p>举例来说，你不能去说神经网络任何情况下都能比决策树更有优势，反之亦然。它们要受很多因素的影响，比如你的数据集的规模或结构。</p><p>其结果是，在用给定的测试集来评估性能并挑选算法时，你应当根据具体的问题来采用不同的算法。</p><p>当然，<strong>所选的算法必须要适用于你自己的问题，这就要求选择正确的机器学习任务。</strong>作为类比，如果你需要打扫房子，你可能会用到吸尘器、扫帚或是拖把，但你绝对不该掏出铲子来挖地。</p><h3 id="2-偏差-amp-方差"><a href="#2-偏差-amp-方差" class="headerlink" title="**2. 偏差&amp;方差"></a>**2. 偏差&amp;方差</h3><p>在统计学中，一个模型好坏，是根据偏差和方差来衡量的，所以我们先来普及一下偏差(bias)和方差(variance)：</p><ul><li><p>偏差：描述的是预测值（估计值）的期望E’与真实值Y之间的差距。偏差越大，越偏离真实数据。</p></li><li><p>方差：描述的是预测值P的变化范围，离散程度，是预测值的方差，也就是离其期望值E的距离。方差越大，数据的分布越分散。</p></li></ul><p>模型的真实误差是两者之和，如公式：</p><p>通常情况下，如果是<strong>小训练集，高偏差/低方差的分类器（例如，朴素贝叶斯NB）要比低偏差/高方差大分类的优势大（例如，KNN）</strong>，<strong>因为后者会发生过拟合（overfiting）</strong>。<br>然而，<strong>随着你训练集的增长，模型对于原数据的预测能力就越好，偏差就会降低，此时低偏差/高方差的分类器就会渐渐的表现其优势（因为它们有较低的渐近误差），而高偏差分类器这时已经不足以提供准确的模型了。</strong></p><p><strong>为什么说朴素贝叶斯是高偏差低方差?</strong></p><p>以下内容引自知乎：</p><p>首先，假设你知道训练集和测试集的关系。简单来讲是我们要在训练集上学习一个模型，然后拿到测试集去用，效果好不好要根据测试集的错误率来衡量。但很多时候，我们只能假设测试集和训练集的是符合同一个数据分布的，但却拿不到真正的测试数据。这时候怎么在只看到训练错误率的情况下，去衡量测试错误率呢？</p><p>由于训练样本很少（至少不足够多），所以通过训练集得到的模型，总不是真正正确的。（就算在训练集上正确率100%，也不能说明它刻画了真实的数据分布，要知道刻画真实的数据分布才是我们的目的，而不是只刻画训练集的有限的数据点）。而且，实际中，训练样本往往还有一定的噪音误差，所以如果太追求在训练集上的完美而采用一个很复杂的模型，会使得模型把训练集里面的误差都当成了真实的数据分布特征，从而得到错误的数据分布估计。这样的话，到了真正的测试集上就错的一塌糊涂了（这种现象叫过拟合）。但是也不能用太简单的模型，否则在数据分布比较复杂的时候，模型就不足以刻画数据分布了（体现为连在训练集上的错误率都很高，这种现象较欠拟合）。过拟合表明采用的模型比真实的数据分布更复杂，而欠拟合表示采用的模型比真实的数据分布要简单。</p><p><strong>在统计学习框架下，大家刻画模型复杂度的时候，有这么个观点，认为Error = Bias +<br>Variance。这里的Error大概可以理解为模型的预测错误率，是有两部分组成的，一部分是由于模型太简单而带来的估计不准确的部分（Bias），另一部分是由于模型太复杂而带来的更大的变化空间和不确定性（Variance）。</strong></p><p>所以，这样就容易分析朴素贝叶斯了。它简单的假设了各个数据之间是无关的，是一个被<strong>严重简化了的模型</strong>。所以，<strong>对于这样一个简单模型，大部分场合都会Bias部分大于Variance部分，也就是说高偏差而低方差</strong>。</p><p>在实际中，为了让Error尽量小，我们在选择模型的时候需要平衡Bias和Variance所占的比例，也就是平衡over-fitting和under-fitting。</p><p>当模型复杂度上升的时候，偏差会逐渐变小，而方差会逐渐变大。</p><h3 id="3-常见算法优缺点"><a href="#3-常见算法优缺点" class="headerlink" title="**3. 常见算法优缺点"></a>**3. 常见算法优缺点</h3><h4 id="3-1-朴素贝叶斯"><a href="#3-1-朴素贝叶斯" class="headerlink" title="3.1 朴素贝叶斯"></a><strong>3.1 朴素贝叶斯</strong></h4><p>朴素贝叶斯属于生成式模型（<strong>关于生成模型和判别式模型，主要还是在于是否需要求联合分布</strong>），比较简单，你只需做一堆计数即可。<strong>如果注有条件独立性假设（一个比较严格的条件），朴素贝叶斯分类器的收敛速度将快于判别模型，比如逻辑回归</strong>，所以你只需要较少的训练数据即可。即使NB条件独立假设不成立，NB分类器在实践中仍然表现的很出色。<strong>它的主要缺点是它不能学习特征间的相互作用</strong>——(<strong>不能处理冗余特征</strong>)，用mRMR中R来讲，就是<strong>特征冗余</strong>。引用一个比较经典的例子，比如，虽然你喜欢BradPitt和Tom Cruise的电影，但是它不能学习出你不喜欢他们在一起演的电影。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点</strong>：</h4><ul><li><p>朴素贝叶斯模型发源于古典数学理论，有着坚实的数学基础，以及<strong>稳定的分类效率。</strong></p></li><li><p>对<strong>大数量训练和查询时具有较高的速度</strong>。即使使用超大规模的训练集，针对每个项目通常也只会有相对较少的特征数，并且对项目的训练和分类也仅仅是特征概率的数学运算而已；</p></li><li><p>对<strong>小规模的数据表现很好</strong>，<strong>能处理多分类任务</strong>，<strong>适合增量式训练（即可以实时的对新增的样本进行训练）</strong>；</p></li><li><p><strong>对缺失数据不太敏感，</strong>算法也比较简单，常用于文本分类；</p></li><li><p>朴素贝叶斯对结果解释容易理解；</p></li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点</strong>：</h4><ul><li><p>需要计算先验概率；</p></li><li><p><strong> 分类决策存在错误率；</strong></p></li><li><p>对输入数据的表达形式很敏感；</p></li><li><p>由于<strong>使用了样本属性独立性的假设，所以如果样本属性有关联时其效果不好</strong>；</p></li></ul><h4 id="朴素贝叶斯应用领域"><a href="#朴素贝叶斯应用领域" class="headerlink" title="朴素贝叶斯应用领域"></a><strong>朴素贝叶斯应用领域</strong></h4><ul><li><p><strong> 欺诈检测中使用较多</strong></p></li><li><p>一封电子邮件是否是垃圾邮件</p></li><li><p>一篇文章应该分到科技、政治，还是体育类</p></li><li><p>一段文字表达的是积极的情绪还是消极的情绪？</p></li><li><p>人脸识别</p></li></ul><h3 id="3-2-Logistic-Regression（逻辑回归）"><a href="#3-2-Logistic-Regression（逻辑回归）" class="headerlink" title="**3.2 Logistic Regression（逻辑回归）"></a>**3.2 Logistic Regression（逻辑回归）</h3><p>逻辑回归属于判别式模型，同时伴有很多模型正则化的方法（L0，<br>L1，L2，etc），而且你不必像在用朴素贝叶斯那样担心你的特征是否相关。与决策树、SVM相比，你还会得到一个不错的概率解释，你甚至可以轻松地利用新数据来更新模型（使用在线梯度下降算法-online gradient descent）。如果你需要一个概率架构（比如，简单地调节分类阈值，指明不确定性，或者是要获得置信区间），或者你希望以后将更多的训练数据快速整合到模型中去，那么使用它吧。</p><p><strong>Sigmoid函数</strong>：表达式如下:</p><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a><strong>优点：</strong></h4><ul><li><p>实现简单，广泛的应用于工业问题上；</p></li><li><p>分类时计算量非常小，速度很快，存储资源低；</p></li><li><p>便利的观测样本概率分数；</p></li><li><p>对逻辑回归而言，多重共线性并不是问题，它可以结合L2正则化来解决该问题；</p></li><li><p>计算代价不高，易于理解和实现；</p></li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a><strong>缺点</strong>：</h4><ul><li><p>当特征空间很大时，逻辑回归的性能不是很好；</p></li><li><p>容易<strong>欠拟合</strong>，一般准确度不太高</p></li><li><p>不能很好地处理大量多类特征或变量；</p></li><li><p>只能处理两分类问题（在此基础上衍生出来的softmax可以用于多分类），且必须<strong>线性可分</strong>；</p></li><li><p>对于非线性特征，需要进行转换；</p></li></ul><h4 id="logistic回归应用领域："><a href="#logistic回归应用领域：" class="headerlink" title="logistic回归应用领域："></a><strong>logistic回归应用领域：</strong></h4><ul><li><p>用于二分类领域，可以得出概率值，适用于根据分类概率排名的领域，如搜索排名等。</p></li><li><p>Logistic回归的扩展softmax可以应用于多分类领域，如手写字识别等。</p></li><li><p>信用评估</p></li><li><p>测量市场营销的成功度</p></li><li><p>预测某个产品的收益</p></li><li><p>特定的某天是否会发生地震</p></li></ul><h3 id="3-3-线性回归"><a href="#3-3-线性回归" class="headerlink" title="**3.3 线性回归"></a>**3.3 线性回归</h3><p>线性回归是用于回归的，它不像Logistic回归那样用于分类，其基本思想是用<strong>梯度下降法</strong>对最小二乘法形式的误差函数进行优化，当然也可以用normal equation直接求得参数的解，结果为： </p><p>而在LWLR（局部加权线性回归）中，参数的计算表达式为: </p><p>由此可见LWLR与LR不同，LWLR是一个非参数模型，因为每次进行回归计算都要遍历训练样本至少一次。</p><p><strong>优点</strong>： 实现简单，计算简单；</p><p><strong>缺点</strong>： 不能拟合非线性数据.</p><h3 id="3-4-最近邻算法——KNN"><a href="#3-4-最近邻算法——KNN" class="headerlink" title="**3.4 最近邻算法——KNN"></a>**3.4 最近邻算法——KNN</h3><p>KNN即最近邻算法，其主要过程为：</p><p>1.<br>计算训练样本和测试样本中每个样本点的距离（常见的距离度量有欧式距离，马氏距离等）；</p><ol start="2"><li><p>对上面所有的距离值进行排序(升序)；</p></li><li><p>选前k个最小距离的样本；</p></li><li><p>根据这k个样本的标签进行投票，得到最后的分类类别；</p></li></ol><p>如何选择一个最佳的K值，这取决于数据。一般情况下，在分类时较大的K值能够减小噪声的影响，但会使类别之间的界限变得模糊。一个较好的K值可通过各种启发式技术来获取，比如，交叉验证。另外噪声和非相关性特征向量的存在会使K近邻算法的准确性减小。近邻算法具有较强的一致性结果，<strong>随着数据趋于无限，算法保证错误率不会超过贝叶斯算法错误率的两倍。</strong>对于一些好的K值，K近邻保证错误率不会超过贝叶斯理论误差率。</p><h4 id="KNN算法的优点"><a href="#KNN算法的优点" class="headerlink" title="KNN算法的优点"></a><strong>KNN算法的优点</strong></h4><ul><li><p>理论成熟，思想简单，既可以<strong>用来做分类也可以用来做回归</strong>；</p></li><li><p>可用于非线性分类；</p></li><li><p>训练时间复杂度为O(n)；</p></li><li><p>对<strong>数据没有假设，准确度高，对outlier不敏感</strong>；</p></li><li><p>KNN是一种<strong>在线技术</strong>，新数据可以直接加入数据集而不必进行重新训练；</p></li><li><p>KNN理论简单，容易实现；</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li><p><strong>样本不平衡问题（即有些类别的样本数量很多，而其它样本的数量很少）效果差</strong>；</p></li><li><p><strong>需要大量内存</strong>；</p></li><li><p>对于样本容量大的数据集计算量比较大（体现在距离计算上）；</p></li><li><p>样本不平衡时，预测偏差比较大。如：某一类的样本比较少，而其它类样本比较多；</p></li><li><p><strong>KNN每一次分类都会重新进行一次全局运算</strong>；</p></li><li><p><strong> k值大小的选择没有理论选择最优，往往是结合K-折交叉验证得到最优k值选择；</strong></p></li></ul><h4 id="KNN算法应用领域"><a href="#KNN算法应用领域" class="headerlink" title="KNN算法应用领域"></a><strong>KNN算法应用领域</strong></h4><p>文本分类、模式识别、聚类分析，多分类领域</p><h3 id="3-5-决策树"><a href="#3-5-决策树" class="headerlink" title="**3.5 决策树"></a>**3.5 决策树</h3><p>决策树的一大优势就是易于解释。它可以毫无压力地处理特征间的交互关系并且是非参数化的，因此你不必担心异常值或者数据是否线性可分（举个例子，决策树能轻松处理好类别A在某个特征维度x的末端，类别B在中间，然后类别A又出现在特征维度x前端的情况）。它的缺点之一就是不支持在线学习，于是在新样本到来后，决策树需要全部重建。另一个缺点就是容易出现过拟合，但这也就是诸如随机森林RF（或提升树boosted<br>tree）之类的集成方法的切入点。另外，随机森林经常是很多分类问题的赢家（通常比支持向量机好上那么一丁点），它训练快速并且可调，同时你无须担心要像支持向量机那样调一大堆参数，所以在以前都一直很受欢迎。</p><p>决策树中很重要的一点就是选择一个属性进行分枝，因此要注意一下信息增益的计算公式，并深入理解它。</p><p>信息熵的计算公式如下:</p><p>其中的n代表有n个分类类别（比如假设是二类问题，那么n=2）。分别计算这2类样本在总样本中出现的概率  和  ，这样就可以计算出未选中属性分枝前的信息熵。</p><p>现在选中一个属性  用来进行分枝，此时分枝规则是：如果  的话，将样本分到树的一个分支；如果不相等则进入另一个分支。很显然，分支中的样本很有可能包括2个类别，分别计算这2个分支的熵  和  ,计算出分枝后的总信息熵  ，则此时的信息增益  。以信息增益为原则，把所有的属性都测试一边，选择一个使增益最大的属性作为本次分枝属性。</p><h4 id="决策树自身的优点"><a href="#决策树自身的优点" class="headerlink" title="决策树自身的优点"></a><strong>决策树自身的优点</strong></h4><ul><li><p>决策树易于理解和解释，可以可视化分析，容易提取出规则；</p></li><li><p>可以同时处理标称型和数值型数据；</p></li><li><p>比较适合处理有缺失属性的样本；</p></li><li><p>能够处理不相关的特征；</p></li><li><p>测试数据集时，运行速度比较快；</p></li><li><p>在相对短的时间内能够对大型数据源做出可行且效果良好的结果。</p></li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li><p>容易发生过拟合（随机森林可以很大程度上减少过拟合）；</p></li><li><p>容易忽略数据集中属性的相互关联；</p></li><li><p>对于那些各类别样本数量不一致的数据，在决策树中，进行属性划分时，不同的判定准则会带来不同的属性选择倾向；信息增益准则对可取数目较多的属性有所偏好（典型代表ID3算法），而增益率准则（CART）则对可取数目较少的属性有所偏好，但CART进行属性划分时候不再简单地直接利用增益率尽心划分，而是采用一种启发式规则）（只要是使用了信息增益，都有这个缺点，如RF）。</p></li><li><p>ID3算法计算信息增益时结果偏向数值比较多的特征。</p></li></ul><h4 id="改进措施"><a href="#改进措施" class="headerlink" title="改进措施"></a><strong>改进措施</strong></h4><ul><li><p>对决策树进行剪枝。可以采用交叉验证法和加入正则化的方法。</p></li><li><p>使用基于决策树的combination算法，如bagging算法，randomforest算法，可以解决过拟合的问题；</p></li></ul><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a><strong>应用领域</strong></h4><p>企业管理实践，企业投资决策，由于决策树很好的分析能力，在决策过程应用较多。</p><h3 id="3-5-1-ID3、C4-5算法"><a href="#3-5-1-ID3、C4-5算法" class="headerlink" title="**3.5.1 ID3、C4.5算法"></a>**3.5.1 ID3、C4.5算法</h3><p>ID3算法是以信息论为基础，以信息熵和信息增益度为衡量标准，从而实现对数据的归纳分类。ID3算法计算每个属性的信息增益，并选取具有最高增益的属性作为给定的测试属性。C4.5算法核心思想是ID3算法，是ID3算法的改进，改进方面有：</p><ul><li>用信息增益率来选择属性，克服了用信息增益选择属性时偏向选择取值多的属性的不足；</li><li>在树构造过程中进行剪枝； - 能处理非离散的数据； - 能处理不完整的数据。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>产生的分类规则易于理解，准确率较高。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li><p>在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效；</p></li><li><p>C4.5只适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。</p></li></ul><h3 id="3-5-2-CART分类与回归树"><a href="#3-5-2-CART分类与回归树" class="headerlink" title="**3.5.2 CART分类与回归树"></a>**3.5.2 CART分类与回归树</h3><p>是一种决策树分类方法，采用基于最小距离的基尼指数估计函数，用来决定由该子数据集生成的决策树的拓展形。如果目标变量是标称的，称为分类树；如果目标变量是连续的，称为回归树。分类树是使用树结构算法将数据分成离散类的方法。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h4><p>1）非常灵活，可以允许有部分错分成本，还可指定先验概率分布，可使用自动的成本复杂性剪枝来得到归纳性更强的树。<br>2）在面对诸如存在缺失值、变量数多等问题时CART 显得非常稳健。</p><h3 id="3-6-Adaboosting"><a href="#3-6-Adaboosting" class="headerlink" title="**3.6 Adaboosting"></a>**3.6 Adaboosting</h3><p>Adaboost是一种加和模型，每个模型都是基于上一次模型的错误率来建立的，过分关注分错的样本，而对正确分类的样本减少关注度，逐次迭代之后，可以得到一个相对较好的模型。该算法是一种典型的boosting算法，其加和理论的优势可以使用Hoeffding不等式得以解释。有兴趣的同学可以阅读下自己之前写的这篇文章<em>AdaBoost算法详述</em>.下面总结下它的优缺点。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li><p>Adaboost是一种有很高精度的分类器。</p></li><li><p>可以使用各种方法构建子分类器，Adaboost算法提供的是框架。</p></li><li><p>当使用简单分类器时，计算出的结果是可以理解的，并且弱分类器的构造极其简单。</p></li><li><p>简单，不用做特征筛选。</p></li><li><p>不易发生overfitting。</p></li></ul><p>关于Adaboost, GBDT 及 XGBoost<br>算法区别，参考这篇文章：<em>Adaboost、GBDT与XGBoost的区别</em></p><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>对outlier比较敏感</li></ul><h3 id="3-7-SVM支持向量机"><a href="#3-7-SVM支持向量机" class="headerlink" title="**3.7 SVM支持向量机"></a>**3.7 SVM支持向量机</h3><p>支持向量机，一个经久不衰的算法，高准确率，为避免过拟合提供了很好的理论保证，而且就算数据在原特征空间线性不可分，只要给个合适的核函数，它就能运行得很好。在动辄超高维的文本分类问题中特别受欢迎。可惜内存消耗大，难以解释，运行和调参也有些烦人，而随机森林却刚好避开了这些缺点，比较实用。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li><p>可以解决高维问题，即大型特征空间；</p></li><li><p>解决小样本下机器学习问题；</p></li><li><p>能够处理非线性特征的相互作用；</p></li><li><p>无局部极小值问题；（相对于神经网络等算法）</p></li><li><p>无需依赖整个数据；</p></li><li><p>泛化能力比较强；</p></li></ul><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li><p>当观测样本很多时，效率并不是很高；</p></li><li><p>对非线性问题没有通用解决方案，有时候很难找到一个合适的核函数；</p></li><li><p>对于核函数的高维映射解释力不强，尤其是径向基函数；</p></li><li><p>常规SVM只支持二分类；</p></li><li><p><strong>对缺失数据敏感</strong>；</p></li></ul><p>对于核的选择也是有技巧的（libsvm中自带了四种核函数：线性核、多项式核、RBF以及sigmoid核）：</p><ul><li><p>第一，如果样本数量小于特征数，那么就没必要选择非线性核，简单的使用线性核就可以了；</p></li><li><p>第二，如果样本数量大于特征数目，这时可以使用非线性核，将样本映射到更高维度，一般可以得到更好的结果；</p></li><li><p>第三，如果样本数目和特征数目相等，该情况可以使用非线性核，原理和第二种一样。</p></li></ul><p>对于第一种情况，也可以先对数据进行降维，然后使用非线性核，这也是一种方法。</p><h4 id="SVM应用领域"><a href="#SVM应用领域" class="headerlink" title="SVM应用领域"></a><strong>SVM应用领域</strong></h4><p>文本分类、图像识别（主要二分类领域，毕竟常规SVM只能解决二分类问题）</p><h3 id="3-8-人工神经网络的优缺点"><a href="#3-8-人工神经网络的优缺点" class="headerlink" title="**3.8 人工神经网络的优缺点"></a>**3.8 人工神经网络的优缺点</h3><h4 id="人工神经网络的优点："><a href="#人工神经网络的优点：" class="headerlink" title="人工神经网络的优点："></a><strong>人工神经网络的优点：</strong></h4><ul><li><p>分类的准确度高；</p></li><li><p>并行分布处理能力强,分布存储及学习能力强，</p></li><li><p>对噪声神经有较强的鲁棒性和容错能力；</p></li><li><p>具备联想记忆的功能，能充分逼近复杂的非线性关系；</p></li></ul><h4 id="人工神经网络的缺点："><a href="#人工神经网络的缺点：" class="headerlink" title="人工神经网络的缺点："></a><strong>人工神经网络的缺点：</strong></h4><ul><li><p>神经网络需要大量的参数，如网络拓扑结构、权值和阈值的初始值；</p></li><li><p>黑盒过程，不能观察之间的学习过程，输出结果难以解释，会影响到结果的可信度和可接受程度；</p></li><li><p>学习时间过长，有可能陷入局部极小值，甚至可能达不到学习的目的。</p></li></ul><p><strong>人工神经网络应用领域：</strong></p><p>目前深度神经网络已经应用与计算机视觉，自然语言处理，语音识别等领域并取得很好的效果。</p><h3 id="3-9-K-Means聚类"><a href="#3-9-K-Means聚类" class="headerlink" title="**3.9 K-Means聚类"></a>**3.9 K-Means聚类</h3><p>是一个简单的聚类算法，把n的对象根据他们的属性分为k个分割，k\&lt; n。<br>算法的核心就是要优化失真函数J,使其收敛到局部最小值但不是全局最小值。</p><p>关于K-Means聚类的文章，参见<em>机器学习算法-K-means聚类</em>。关于K-Means的推导，里面可是有大学问的，蕴含着强大的EM思想。</p><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li><p>算法简单，容易实现 ；</p></li><li><p>算法速度很快；</p></li><li><p>对处理大数据集，该算法是相对可伸缩的和高效率的，因为它的复杂度大约是O(nkt)，其中n是所有对象的数目，k是簇的数目,t是迭代的次数。通常k\&lt;\&lt;n。这个算法<strong>通常局部收敛</strong>。</p></li><li><p>算法尝试找出使平方误差函数值最小的k个划分。当簇是密集的、球状或团状的，且簇与簇之间区别明显时，聚类效果较好。</p></li></ul><h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li><p>对数据类型要求较高，适合数值型数据；</p></li><li><p>可能收敛到局部最小值，在大规模数据上收敛较慢</p></li><li><p>分组的数目k是一个输入参数，不合适的k可能返回较差的结果。</p></li><li><p>对初值的簇心值敏感，对于不同的初始值，可能会导致不同的聚类结果；</p></li><li><p>不适合于发现非凸面形状的簇，或者大小差别很大的簇。</p></li><li><p>对于”噪声”和孤立点数据敏感，少量的该类数据能够对平均值产生极大影响。</p></li></ul><h3 id="3-10-EM最大期望算法"><a href="#3-10-EM最大期望算法" class="headerlink" title="**3.10 EM最大期望算法"></a>**3.10 EM最大期望算法</h3><p>EM算法是基于模型的聚类方法，是在概率模型中寻找参数最大似然估计的算法，其中概率模型依赖于无法观测的隐藏变量。E步估计隐含变量，M步估计其他参数，交替将极值推向最大。</p><p>EM算法比K-means算法计算复杂，收敛也较慢，不适于大规模数据集和高维数据，但比K-means算法计算结果稳定、准确。EM经常用在机器学习和计算机视觉的数据集聚（Data<br>Clustering）领域。</p><h3 id="3-11-集成算法（AdaBoost算法）"><a href="#3-11-集成算法（AdaBoost算法）" class="headerlink" title="**3.11 集成算法（AdaBoost算法）"></a>**3.11 集成算法（AdaBoost算法）</h3><h4 id="AdaBoost算法优点："><a href="#AdaBoost算法优点：" class="headerlink" title="AdaBoost算法优点："></a><strong>AdaBoost算法优点：</strong></h4><ul><li><p>很好的利用了弱分类器进行级联；</p></li><li><p>可以将不同的分类算法作为弱分类器；</p></li><li><p>AdaBoost具有很高的精度；</p></li><li><p>相对于bagging算法和Random Forest算法，AdaBoost充分考虑的每个分类器的权重；</p></li></ul><h4 id="Adaboost算法缺点："><a href="#Adaboost算法缺点：" class="headerlink" title="Adaboost算法缺点："></a><strong>Adaboost算法缺点：</strong></h4><ul><li><p>AdaBoost迭代次数也就是弱分类器数目不太好设定，可以使用交叉验证来进行确定；</p></li><li><p>数据不平衡导致分类精度下降；</p></li><li><p>训练比较耗时，每次重新选择当前分类器最好切分点；</p></li></ul><h4 id="AdaBoost应用领域："><a href="#AdaBoost应用领域：" class="headerlink" title="AdaBoost应用领域："></a><strong>AdaBoost应用领域：</strong></h4><p>模式识别、计算机视觉领域，用于二分类和多分类场景</p><h3 id="3-12-排序算法（PageRank）"><a href="#3-12-排序算法（PageRank）" class="headerlink" title="**3.12 排序算法（PageRank）"></a>**3.12 排序算法（PageRank）</h3><p>PageRank是google的页面排序算法，是基于从许多优质的网页链接过来的网页，必定还是优质网页的回归关系，来判定所有网页的重要性。（也就是说，一个人有着越多牛X朋友的人，他是牛X的概率就越大。）</p><h4 id="PageRank优点"><a href="#PageRank优点" class="headerlink" title="PageRank优点"></a><strong>PageRank优点</strong></h4><ul><li>完全独立于查询，只依赖于网页链接结构，可以离线计算。</li></ul><h4 id="PageRank缺点"><a href="#PageRank缺点" class="headerlink" title="PageRank缺点"></a><strong>PageRank缺点</strong></h4><ul><li><p>PageRank算法忽略了网页搜索的时效性。</p></li><li><p>旧网页排序很高，存在时间长，积累了大量的in-links，拥有最新资讯的新网页排名却很低，因为它们几乎没有in-links。</p></li></ul><h3 id="3-13-关联规则算法（Apriori算法）"><a href="#3-13-关联规则算法（Apriori算法）" class="headerlink" title="**3.13 关联规则算法（Apriori算法）"></a>**3.13 关联规则算法（Apriori算法）</h3><p>Apriori算法是一种挖掘关联规则的算法，用于挖掘其内含的、未知的却又实际存在的数据关系，其核心是基于两阶段频集思想的递推算法<br>。</p><h4 id="Apriori算法分为两个阶段："><a href="#Apriori算法分为两个阶段：" class="headerlink" title="Apriori算法分为两个阶段："></a><strong>Apriori算法分为两个阶段：</strong></h4><ul><li><p>寻找频繁项集</p></li><li><p>由频繁项集找关联规则</p></li></ul><h4 id="算法缺点："><a href="#算法缺点：" class="headerlink" title="算法缺点："></a><strong>算法缺点：</strong></h4><ul><li><p>在每一步产生侯选项目集时循环产生的组合过多，没有排除不应该参与组合的元素；</p></li><li><p>每次计算项集的支持度时，都对数据库中<br>的全部记录进行了一遍扫描比较，需要很大的I/O负载。</p></li></ul><h3 id="4-算法选择参考"><a href="#4-算法选择参考" class="headerlink" title="**4. 算法选择参考"></a>**4. 算法选择参考</h3><p>之前笔者翻译过一些国外的文章，其中有一篇文章中给出了一个简单的算法选择技巧：</p><ol><li><p>首当其冲应该选择的就是逻辑回归，如果它的效果不怎么样，那么可以将它的结果作为基准来参考，在基础上与其他算法进行比较；</p></li><li><p>然后试试决策树（随机森林）看看是否可以大幅度提升你的模型性能。即便最后你并没有把它当做为最终模型，你也可以使用随机森林来移除噪声变量，做特征选择；</p></li><li><p>如果特征的数量和观测样本特别多，那么当资源和时间充足时（这个前提很重要），使用SVM不失为一种选择。</p></li></ol><p>通常情况下：【GBDT>=SVM>=RF>=Adaboost>=Other…】，现在深度学习很热门，很多领域都用到，它是以神经网络为基础的，目前笔者自己也在学习，只是理论知识不扎实，理解的不够深入，这里就不做介绍了，希望以后可以写一片抛砖引玉的文章。</p><p>算法固然重要，<strong>但好的数据却要优于好的算法</strong>，设计优良特征是大有裨益的。假如你有一个超大数据集，那么无论你使用哪种算法可能对分类性能都没太大影响（此时就可以根据速度和易用性来进行抉择）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g2/M00/0C/00/ChMlWVyA5JyIFsD7AArXsWw3WSoAAIp9gN0N1UACtfJ346.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;机器学习算法优缺点对比及选择&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础问题</title>
    <link href="https://leesen998.github.io/2016/12/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <id>https://leesen998.github.io/2016/12/21/第二章_机器学习基础/</id>
    <published>2016-12-21T11:48:29.000Z</published>
    <updated>2019-03-21T13:15:10.065Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="2-1-各种常见算法图示"><a href="#2-1-各种常见算法图示" class="headerlink" title="2.1 各种常见算法图示"></a>2.1 各种常见算法图示</h2><table><thead><tr><th style="text-align:center">回归算法</th><th style="text-align:center">基于实例的算法</th><th style="text-align:center">正则化方法</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/1.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/2.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/3.jpg" alt=""></td></tr></tbody></table><table><thead><tr><th style="text-align:center">决策树学习</th><th style="text-align:center">贝叶斯方法</th><th style="text-align:center">基于核的算法</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/4.png" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/5.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/6.jpg" alt=""></td></tr></tbody></table><table><thead><tr><th style="text-align:center">聚类算法</th><th style="text-align:center">关联规则学习</th><th style="text-align:center">人工神经网络</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/7.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/8.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/9.png" alt=""></td></tr></tbody></table><table><thead><tr><th style="text-align:center">深度学习</th><th style="text-align:center">降低维度算法</th><th style="text-align:center">集成算法</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/10.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/11.jpg" alt=""></td><td style="text-align:center"><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.1/12.jpg" alt=""></td></tr></tbody></table><h2 id="2-2-监督学习、非监督学习、半监督学习、弱监督学习？"><a href="#2-2-监督学习、非监督学习、半监督学习、弱监督学习？" class="headerlink" title="2.2 监督学习、非监督学习、半监督学习、弱监督学习？"></a>2.2 监督学习、非监督学习、半监督学习、弱监督学习？</h2><p>根据数据类型的不同，对一个问题的建模有不同的方式。依据不同的学习方式和输入数据，机器学习主要分为以下四种学习方式。</p><p><strong>监督学习</strong>：</p><ol><li>监督学习是使用已知正确答案的示例来训练网络。已知数据和其一一对应的标签，训练一个智能算法，将输入数据映射到标签的过程。</li><li>监督式学习的常见应用场景如分类问题和回归问题。</li><li>常见算法有逻辑回归（Logistic Regression）和反向传递神经网络（Back Propagation Neural Network）</li></ol><p><strong>非监督式学习</strong>：</p><ol><li>在非监督式学习中，数据并不被特别标识，适用于你具有数据集但无标签的情况。学习模型是为了推断出数据的一些内在结构。</li><li>常见的应用场景包括关联规则的学习以及聚类等。</li><li>常见算法包括Apriori算法以及k-Means算法。</li></ol><p><strong>半监督式学习</strong>：</p><ol><li>在此学习方式下，输入数据部分被标记，部分没有被标记，这种学习模型可以用来进行预测。</li><li>应用场景包括分类和回归，算法包括一些对常用监督式学习算法的延伸，通过对已标记数据建模，在此基础上，对未标记数据进行预测。</li><li>常见算法如图论推理算法（Graph Inference）或者拉普拉斯支持向量机（Laplacian SVM）等。</li></ol><p><strong>弱监督学习</strong>：</p><ol><li>弱监督学习可以看做是有多个标记的数据集合，次集合可以是空集，单个元素，或包含多种情况（没有标记，有一个标记，和有多个标记）的多个元素。 </li><li>数据集的标签是不可靠的，这里的不可靠可以是标记不正确，多种标记，标记不充分，局部标记等。</li><li>已知数据和其一一对应的弱标签，训练一个智能算法，将输入数据映射到一组更强的标签的过程。标签的强弱指的是标签蕴含的信息量的多少，比如相对于分割的标签来说，分类的标签就是弱标签。</li><li>举例，告诉一张包含气球的图片，需要得出气球在图片中的位置及气球和背景的分割线，这就是已知弱标签学习强标签的问题。</li></ol><p>在企业数据应用的场景下， 人们最常用的可能就是监督式学习和非监督式学习的模型。 在图像识别等领域，由于存在大量的非标识的数据和少量的可标识数据， 目前半监督式学习是一个很热的话题。</p><h2 id="2-3-监督学习有哪些步骤"><a href="#2-3-监督学习有哪些步骤" class="headerlink" title="2.3 监督学习有哪些步骤"></a>2.3 监督学习有哪些步骤</h2><p><strong>监督式学习</strong>：<br>监督学习是使用已知正确答案的示例来训练网络。每组训练数据有一个明确的标识或结果，想象一下，我们可以训练一个网络，让其从照片库中（其中包含气球的照片）识别出气球的照片。以下就是我们在这个假设场景中所要采取的步骤。<br><strong>步骤1：数据集的创建和分类</strong><br>首先，浏览你的照片（数据集），确定所有包含气球的照片，并对其进行标注。然后，将所有照片分为训练集和验证集。目标就是在深度网络中找一函数，这个函数输入是任意一张照片，当照片中包含气球时，输出1，否则输出0。<br><strong>步骤2：训练</strong><br>选择合适的模型，模型可通过以下激活函数对每张照片进行预测。既然我们已经知道哪些是包含气球的图片，那么我们就可以告诉模型它的预测是对还是错。然后我们会将这些信息反馈（feed back）给网络。<br>该算法使用的这种反馈，就是一个量化“真实答案与模型预测有多少偏差”的函数的结果。这个函数被称为成本函数（cost function），也称为目标函数（objective function），效用函数（utility function）或适应度函数（fitness function）。然后，该函数的结果用于修改一个称为反向传播（backpropagation）过程中节点之间的连接强度和偏差。<br>我们会为每个图片都重复一遍此操作，而在每种情况下，算法都在尽量最小化成本函数。<br>其实，我们有多种数学技术可以用来验证这个模型是正确还是错误的，但我们常用的是一个非常常见的方法，我们称之为梯度下降（gradient descent）。<br><strong>步骤3：验证</strong><br>当处理完训练集所有照片，接着要去测试该模型。利用验证集来来验证训练有素的模型是否可以准确地挑选出含有气球在内的照片。<br>在此过程中，通常会通过调整和模型相关的各种事物（超参数）来重复步骤2和3，诸如里面有多少个节点，有多少层，哪些数学函数用于决定节点是否亮起，如何在反向传播阶段积极有效地训练权值等等。<br><strong>步骤4：测试及应用</strong><br>当有了一个准确的模型，就可以将该模型部署到你的应用程序中。你可以将模型定义为API调用，并且你可以从软件中调用该方法，从而进行推理并给出相应的结果。</p><h2 id="2-4-多实例学习？"><a href="#2-4-多实例学习？" class="headerlink" title="2.4 多实例学习？"></a>2.4 多实例学习？</h2><p>多示例学习(multiple instance learning) ：已知包含多个数据的数据包和数据包的标签，训练智能算法，将数据包映射到标签的过程，在有的问题中也同时给出包内每个数据的标签。<br>比如说一段视频由很多张图组成，假如10000张，那么我们要判断视频里是否包含某一物体，比如气球。单张标注每一帧是否有气球太耗时，通常人们看一遍说这个视频里是否有气球，就得到了多示例学习的数据。10000帧的数据不是每一个都有气球出现，只要有一帧有气球，那么我们就认为这个数据包是有气球的。只有当所有的视频帧都没有气球，才是没有气球的。从这里面学习哪一段视频（10000张）是否有气球出现就是多实例学习的问题。</p><h2 id="2-5-分类网络和回归的区别？"><a href="#2-5-分类网络和回归的区别？" class="headerlink" title="2.5 分类网络和回归的区别？"></a>2.5 分类网络和回归的区别？</h2><p>2.3小节介绍了包含气球照片的数据集整理。当照片中包含气球时，输出1，否则输出0。此步骤通常称为分类任务（categorization task）。在这种情况下，我们进行的通常是一个结果为yes or no的训练。<br>但事实上，监督学习也可以用于输出一组值，而不仅仅是0或1。例如，我们可以训练一个网络，用它来输出一张图片上有气球的概率，那么在这种情况下，输出值就是0到1之间的任意值。这些任务我们称之为回归。</p><h2 id="2-6-什么是神经网络？"><a href="#2-6-什么是神经网络？" class="headerlink" title="2.6 什么是神经网络？"></a>2.6 什么是神经网络？</h2><p>神经网络就是按照一定规则将多个神经元连接起来的网络。不同的神经网络，具有不同的连接规则。<br>例如全连接(full connected, FC)神经网络，它的规则包括：</p><ol><li>有三种层：输入层，输出层，隐藏层。</li><li>同一层的神经元之间没有连接。</li><li>full connected的含义：第 N 层的每个神经元和第 N-1 层的所有神经元相连，第 N-1 层神经元的输出就是第 N 层神经元的输入。</li><li>每个连接都有一个权值。<br><strong>神经网络架构</strong><br>下面这张图就是一个神经网络系统，它由很多层组成。输入层负责接收信息，比如一只猫的图片。输出层是计算机对这个输入信息的判断结果，它是不是猫。隐藏层就是对输入信息的传递和加工处理。</li></ol><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.6/1.png" alt=""></p><h2 id="2-7-理解局部最优与全局最优"><a href="#2-7-理解局部最优与全局最优" class="headerlink" title="2.7 理解局部最优与全局最优"></a>2.7 理解局部最优与全局最优</h2><p>笑谈局部最优和全局最优</p><blockquote><p>柏拉图有一天问老师苏格拉底什么是爱情？苏格拉底叫他到麦田走一次，摘一颗最大的麦穗回来，不许回头，只可摘一次。柏拉图空着手出来了，他的理由是，看见不错的，却不知道是不是最好的，一次次侥幸，走到尽头时，才发现还不如前面的，于是放弃。苏格拉底告诉他：“这就是爱情。”这故事让我们明白了一个道理，因为生命的一些不确定性，所以全局最优解是很难寻找到的，或者说根本就不存在，我们应该设置一些限定条件，然后在这个范围内寻找最优解，也就是局部最优解——有所斩获总比空手而归强，哪怕这种斩获只是一次有趣的经历。<br>柏拉图有一天又问什么是婚姻？苏格拉底叫他到彬树林走一次,选一棵最好的树做圣诞树，也是不许回头，只许选一次。这次他一身疲惫地拖了一棵看起来直挺、翠绿，却有点稀疏的杉树回来，他的理由是，有了上回的教训，好不容易看见一棵看似不错的，又发现时间、体力已经快不够用了，也不管是不是最好的，就拿回来了。苏格拉底告诉他：“这就是婚姻。</p></blockquote><p>优化问题一般分为局部最优和全局最优。</p><ol><li>局部最优，就是在函数值空间的一个有限区域内寻找最小值；而全局最优，是在函数值空间整个区域寻找最小值问题。</li><li>函数局部最小点是那种它的函数值小于或等于附近点的点。但是有可能大于较远距离的点。</li><li>全局最小点是那种它的函数值小于或等于所有的可行点。</li></ol><h2 id="2-8-分类算法"><a href="#2-8-分类算法" class="headerlink" title="2.8 分类算法"></a>2.8 分类算法</h2><h3 id="2-8-1-常用分类算法的优缺点？"><a href="#2-8-1-常用分类算法的优缺点？" class="headerlink" title="2.8.1 常用分类算法的优缺点？"></a>2.8.1 常用分类算法的优缺点？</h3><table><thead><tr><th style="text-align:left">算法</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">Bayes 贝叶斯分类法</td><td style="text-align:left">1）所需估计的参数少，对于缺失数据不敏感。2）有着坚实的数学基础，以及稳定的分类效率。</td><td style="text-align:left">1）假设属性之间相互独立，这往往并不成立。（喜欢吃番茄、鸡蛋，却不喜欢吃番茄炒蛋）。2）需要知道先验概率。3）分类决策存在错误率。</td></tr><tr><td style="text-align:left">Decision Tree决策树</td><td style="text-align:left">1）不需要任何领域知识或参数假设。2）适合高维数据。3）简单易于理解。4）短时间内处理大量数据，得到可行且效果较好的结果。5）能够同时处理数据型和常规性属性。</td><td style="text-align:left">1）对于各类别样本数量不一致数据，信息增益偏向于那些具有更多数值的特征。2）易于过拟合。3）忽略属性之间的相关性。4）不支持在线学习。</td></tr><tr><td style="text-align:left">SVM支持向量机</td><td style="text-align:left">1）可以解决小样本下机器学习的问题。2）提高泛化性能。3）可以解决高维、非线性问题。超高维文本分类仍受欢迎。4）避免神经网络结构选择和局部极小的问题。</td><td style="text-align:left">1）对缺失数据敏感。2）内存消耗大，难以解释。3）运行和调差略烦人。</td></tr><tr><td style="text-align:left">KNN K近邻</td><td style="text-align:left">1）思想简单，理论成熟，既可以用来做分类也可以用来做回归； 2）可用于非线性分类； 3）训练时间复杂度为O(n)； 4）准确度高，对数据没有假设，对outlier不敏感；</td><td style="text-align:left">1）计算量太大2）对于样本分类不均衡的问题，会产生误判。3）需要大量的内存。4）输出的可解释性不强。</td></tr><tr><td style="text-align:left">Logistic Regression逻辑回归</td><td style="text-align:left">1）速度快。2）简单易于理解，直接看到各个特征的权重。3）能容易地更新模型吸收新的数据。4）如果想要一个概率框架，动态调整分类阀值。</td><td style="text-align:left">特征处理复杂。需要归一化和较多的特征工程。</td></tr><tr><td style="text-align:left">Neural Network 神经网络</td><td style="text-align:left">1）分类准确率高。2）并行处理能力强。3）分布式存储和学习能力强。4）鲁棒性较强，不易受噪声影响。</td><td style="text-align:left">1）需要大量参数（网络拓扑、阀值、阈值）。2）结果难以解释。3）训练时间过长。</td></tr><tr><td style="text-align:left">Adaboosting</td><td style="text-align:left">1）adaboost是一种有很高精度的分类器。2）可以使用各种方法构建子分类器，Adaboost算法提供的是框架。3）当使用简单分类器时，计算出的结果是可以理解的。而且弱分类器构造极其简单。4）简单，不用做特征筛选。5）不用担心overfitting。</td><td style="text-align:left">对outlier比较敏感</td></tr></tbody></table><h3 id="2-8-2-正确率能很好的评估分类算法吗？"><a href="#2-8-2-正确率能很好的评估分类算法吗？" class="headerlink" title="2.8.2 正确率能很好的评估分类算法吗？"></a>2.8.2 正确率能很好的评估分类算法吗？</h3><p>不同算法有不同特点，在不同数据集上有不同的表现效果，根据特定的任务选择不同的算法。如何评价分类算法的好坏，要做具体任务具体分析。对于决策树，主要用正确率去评估，但是其他算法，只用正确率能很好的评估吗？<br>答案是否定的。<br>正确率确实是一个很直观很好的评价指标，但是有时候正确率高并不能完全代表一个算法就好。比如对某个地区进行地震预测，地震分类属性分为0：不发生地震、1发生地震。我们都知道，不发生的概率是极大的，对于分类器而言，如果分类器不加思考，对每一个测试样例的类别都划分为0，达到99%的正确率，但是，问题来了，如果真的发生地震时，这个分类器毫无察觉，那带来的后果将是巨大的。很显然，99%正确率的分类器并不是我们想要的。出现这种现象的原因主要是数据分布不均衡，类别为1的数据太少，错分了类别1但达到了很高的正确率缺忽视了研究者本身最为关注的情况。</p><h3 id="2-8-3-分类算法的评估方法？"><a href="#2-8-3-分类算法的评估方法？" class="headerlink" title="2.8.3 分类算法的评估方法？"></a>2.8.3 分类算法的评估方法？</h3><ol><li><strong>几个常用的术语</strong><br>这里首先介绍几个<em>常见</em>的 模型评价术语，现在假设我们的分类目标只有两类，计为正例（positive）和负例（negative）分别是：<br>1) True positives(TP):  被正确地划分为正例的个数，即实际为正例且被分类器划分为正例的实例数（样本数）；<br>2) False positives(FP): 被错误地划分为正例的个数，即实际为负例但被分类器划分为正例的实例数；<br>3) False negatives(FN):被错误地划分为负例的个数，即实际为正例但被分类器划分为负例的实例数；<br>4) True negatives(TN): 被正确地划分为负例的个数，即实际为负例且被分类器划分为负例的实例数。　</li></ol><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.9/1.png" alt=""></p><p>上图是这四个术语的混淆矩阵。<br>1）P=TP+FN表示实际为正例的样本个数。<br>2）True、False描述的是分类器是否判断正确。<br>3）Positive、Negative是分类器的分类结果，如果正例计为1、负例计为-1，即positive=1、negative=-1。用1表示True，-1表示False，那么实际的类标=TF*PN，TF为true或false，PN为positive或negative。<br>4）例如True positives(TP)的实际类标=1*1=1为正例，False positives(FP)的实际类标=(-1)*1=-1为负例，False negatives(FN)的实际类标=(-1)*(-1)=1为正例，True negatives(TN)的实际类标=1*(-1)=-1为负例。</p><ol start="2"><li><strong>评价指标</strong><br> 1) 正确率（accuracy）<br> 正确率是我们最常见的评价指标，accuracy = (TP+TN)/(P+N)，正确率是被分对的样本数在所有样本数中的占比，通常来说，正确率越高，分类器越好。<br> 2) 错误率（error rate)<br> 错误率则与正确率相反，描述被分类器错分的比例，error rate = (FP+FN)/(P+N)，对某一个实例来说，分对与分错是互斥事件，所以accuracy =1 -  error rate。<br> 3) 灵敏度（sensitive）<br> sensitive = TP/P，表示的是所有正例中被分对的比例，衡量了分类器对正例的识别能力。<br> 4) 特效度（specificity)<br> specificity = TN/N，表示的是所有负例中被分对的比例，衡量了分类器对负例的识别能力。<br> 5) 精度（precision）<br> 精度是精确性的度量，表示被分为正例的示例中实际为正例的比例，precision=TP/(TP+FP)。<br> 6) 召回率（recall）<br> 召回率是覆盖面的度量，度量有多个正例被分为正例，recall=TP/(TP+FN)=TP/P=sensitive，可以看到召回率与灵敏度是一样的。<br> 7) 其他评价指标<br> 计算速度：分类器训练和预测需要的时间；<br> 鲁棒性：处理缺失值和异常值的能力；<br> 可扩展性：处理大数据集的能力；<br> 可解释性：分类器的预测标准的可理解性，像决策树产生的规则就是很容易理解的，而神经网络的一堆参数就不好理解，我们只好把它看成一个黑盒子。<br> 8) 查准率和查全率反映了分类器分类性能的两个方面。如果综合考虑查准率与查全率，可以得到新的评价指标F1测试值，也称为综合分类率：$F1=\frac{2 \times precision \times recall}{precision + recall}$<br>  为了综合多个类别的分类情况，评测系统整体性能，经常采用的还有微平均F1（micro-averaging）和宏平均F1（macro-averaging ）两种指标。宏平均F1与微平均F1是以两种不同的平均方式求的全局的F1指标。其中宏平均F1的计算方法先对每个类别单独计算F1值，再取这些F1值的算术平均值作为全局指标。而微平均F1的计算方法是先累加计算各个类别的a、b、c、d的值，再由这些值求出F1值。由两种平均F1的计算方式不难看出，宏平均F1平等对待每一个类别，所以它的值主要受到稀有类别的影响，而微平均F1平等考虑文档集中的每一个文档，所以它的值受到常见类别的影响比较大。<br> <strong>ROC曲线和PR曲线</strong></li></ol><p>References<br>[1] 李航. 统计学习方法[M]. 北京:清华大学出版社,2012.</p><h3 id="2-8-4-什么样的分类器是最好的？"><a href="#2-8-4-什么样的分类器是最好的？" class="headerlink" title="2.8.4 什么样的分类器是最好的？"></a>2.8.4 什么样的分类器是最好的？</h3><p>对某一个任务，某个具体的分类器不可能同时满足或提高所有上面介绍的指标。<br>如果一个分类器能正确分对所有的实例，那么各项指标都已经达到最优，但这样的分类器往往不存在。比如之前说的地震预测，既然不能百分百预测地震的发生，但实际情况中能容忍一定程度的误报。假设在1000次预测中，共有5次预测发生了地震，真实情况中有一次发生了地震，其他4次则为误报。正确率由原来的999/1000=99.9下降为996/10000=99.6。召回率由0/1=0%上升为1/1=100%。对此解释为，虽然预测失误了4次，但真的地震发生前，分类器能预测对，没有错过，这样的分类器实际意义更为重大，正是我们想要的。在这种情况下，在一定正确率前提下，要求分类器的召回率尽量高。</p><h2 id="2-9-逻辑回归"><a href="#2-9-逻辑回归" class="headerlink" title="2.9 逻辑回归"></a>2.9 逻辑回归</h2><h3 id="2-9-1-理解逻辑回归"><a href="#2-9-1-理解逻辑回归" class="headerlink" title="2.9.1 理解逻辑回归"></a>2.9.1 理解逻辑回归</h3><p><strong>回归划分</strong>：<br>广义线性模型家族里，依据因变量不同，可以有如下划分：</p><ol><li>如果是连续的，就是多重线性回归；</li><li>如果是二项分布，就是Logistic回归；</li><li>如果是Poisson分布，就是Poisson回归；</li><li>如果是负二项分布，就是负二项回归。<br>Logistic回归的因变量可以是二分类的，也可以是多分类的，但是二分类的更为常用，也更加容易解释。所以实际中最常用的就是二分类的Logistic回归。</li></ol><p><strong>Logistic回归的适用性</strong>：</p><ol><li>用于概率预测。用于可能性预测时，得到的结果有可比性。比如根据模型进而预测在不同的自变量情况下，发生某病或某种情况的概率有多大；</li><li>用于分类。实际上跟预测有些类似，也是根据模型，判断某人属于某病或属于某种情况的概率有多大，也就是看一下这个人有多大的可能性是属于某病。进行分类时，仅需要设定一个阈值即可，可能性高于阈值是一类，低于阈值是另一类。</li><li>寻找危险因素。寻找某一疾病的危险因素等。</li><li>仅能用于线性问题。只有当目标和特征是线性关系时，才能用逻辑回归。在应用逻辑回归时注意两点：一是当知道模型是非线性时，不适用逻辑回归；二是当使用逻辑回归时，应注意选择和目标为线性关系的特征。</li><li>各特征之间不需要满足条件独立假设，但各个特征的贡献独立计算。</li></ol><h3 id="2-9-2-逻辑回归与朴素贝叶斯有什么区别？"><a href="#2-9-2-逻辑回归与朴素贝叶斯有什么区别？" class="headerlink" title="2.9.2 逻辑回归与朴素贝叶斯有什么区别？"></a>2.9.2 逻辑回归与朴素贝叶斯有什么区别？</h3><ol><li>逻辑回归是判别模型， 朴素贝叶斯是生成模型，所以生成和判别的所有区别它们都有。</li><li>朴素贝叶斯属于贝叶斯，逻辑回归是最大似然，两种概率哲学间的区别。</li><li>朴素贝叶斯需要独立假设。</li><li>逻辑回归需要求特征参数间是线性的。</li></ol><h3 id="2-9-3线性回归与逻辑回归的区别？（贡献者：黄钦建－华南理工大学）"><a href="#2-9-3线性回归与逻辑回归的区别？（贡献者：黄钦建－华南理工大学）" class="headerlink" title="2.9.3线性回归与逻辑回归的区别？（贡献者：黄钦建－华南理工大学）"></a>2.9.3线性回归与逻辑回归的区别？（贡献者：黄钦建－华南理工大学）</h3><p>线性回归的样本的输出，都是连续值，$ y\in (-\infty ,+\infty )$，而逻辑回归中$y\in (0,1)$，只能取0和1。</p><p>对于拟合函数也有本质上的差别： </p><p>线性回归：$f(x)=\theta ^{T}x=\theta _{1}x _{1}+\theta _{2}x _{2}+…+\theta _{n}x _{n}$</p><p>逻辑回归：$f(x)=P(y=1|x;\theta )=g(\theta ^{T}x)$，其中，$g(z)=\frac{1}{1+e^{-z}}$</p><p>可以看出，线性回归的拟合函数，是对f(x)的输出变量y的拟合，而逻辑回归的拟合函数是对为1类的样本的概率的拟合。</p><p>那么，为什么要以1类样本的概率进行拟合呢，为什么可以这样拟合呢？ </p><p>$\theta ^{T}x=0$就相当于是1类和0类的决策边界： </p><p>当$\theta ^{T}x&gt;0$，则y&gt;0.5；若$\theta ^{T}x\rightarrow +\infty $，则$y \rightarrow  1 $，即y为1类; </p><p>当$\theta ^{T}x&lt;0$，则y&lt;0.5；若$\theta ^{T}x\rightarrow -\infty $，则$y \rightarrow  0 $，即y为0类; </p><p>这个时候就能看出区别来了，在线性回归中$\theta ^{T}x$为预测值的拟合函数；而在逻辑回归中$\theta ^{T}x$为决策边界。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">线性回归</th><th style="text-align:center">逻辑回归</th></tr></thead><tbody><tr><td style="text-align:center">目的</td><td style="text-align:center">预测</td><td style="text-align:center">分类</td></tr><tr><td style="text-align:center">$y^{(i)}$</td><td style="text-align:center">未知</td><td style="text-align:center">（0,1）</td></tr><tr><td style="text-align:center">函数</td><td style="text-align:center">拟合函数</td><td style="text-align:center">预测函数</td></tr><tr><td style="text-align:center">参数计算方式</td><td style="text-align:center">最小二乘法</td><td style="text-align:center">极大似然估计</td></tr></tbody></table><p>下面具体解释一下： </p><ol><li>拟合函数和预测函数什么关系呢？其实就是将拟合函数做了一个逻辑函数的转换，转换后使得$y^{(i)} \in (0,1)$;</li><li>最小二乘和最大似然估计可以相互替代吗？回答当然是不行了。我们来看看两者依仗的原理：最大似然估计是计算使得数据出现的可能性最大的参数，依仗的自然是Probability。而最小二乘是计算误差损失。</li></ol><h3 id="2-9-4-Factorization-Machines-FM-模型原理"><a href="#2-9-4-Factorization-Machines-FM-模型原理" class="headerlink" title="2.9.4 Factorization Machines(FM)模型原理"></a>2.9.4 Factorization Machines(FM)模型原理</h3><p>1.FM旨在解决稀疏数据的特征组合问题,某些特征经过关联之后,就会与label之间的相关性就会提高,例如设备id与ip地址之间的特征交叉就会更好的与label之间有相关性.<br>2.FM为二阶多项式模型<br>􏰠􏰡􏱔􏰼􏰝􏱗􏱞􏰨􏱈􏱣􏱤􏱥􏰠􏰡􏰼􏰝􏱕􏱗􏱁􏰇<br>• 假设有D维特征，𝑥 , … , 𝑥 ，若采用线性模型，则<br>$y = w_{0} +\sum_{j = 1}^{D} w_{i}x_{j}$<br>• 若考虑二阶特征组合，得到模型<br>$y = w_{0} +\sum_{j = 1}^{D} w_{i}x_{j} + \sum_{i = 1}^{D}\sum_{j = i + 1}^{D}w_{ij}x_{i}x_{j}$􏰃􏰇􏰠􏰡􏰤􏰥􏱿􏰃􏰝􏰶􏰙􏰩 􏱂􏰨􏰐􏲀􏰠􏰡􏰰<br>– 组合特征的参数一共有D(D-1)/2个，任意两个参数都是独立的<br>– 􏲇数􏱜据􏱜稀􏲈疏􏲉使􏰨得􏱈二􏱣􏲊次􏲋项􏰽参􏰾数􏰿的􏰇训􏲌练􏲍很􏰪􏱂困􏰠难:<br>. 每个样本都需要大量非0的$x_{j}$和$x_{i}$样本<br>. 训练样本不足会导致$w_{ij}$不准确<br>FM采用类似model-based协同过滤中的矩阵分解方式对二次 􏱽􏱩􏱪􏰗􏰹􏰺􏱓􏱀􏱁􏰹􏰺􏱕􏱾􏰇􏱩􏱣􏰠􏰡􏰤􏰥􏰝􏱿􏰃􏰇􏰠多项式的系数进行有效表示:<br>$y = w_{0} +\sum_{j = 1}^{D} w_{i}x_{j} + \sum_{i = 1}^{D}\sum_{j = i + 1}^{D}&lt;v_{i}, v_{j}&gt;x_{i}x_{j}$􏰃􏰇􏰠􏰡􏰤􏰥􏱿􏰃􏰝􏰶􏰙􏰩<br>– 􏲇FM为进一步对隐含向量只􏲎取􏲏K􏲐维􏲑<br>从而$&lt;v_{i}, v_{j}&gt; = \sum_{k = 1}^{K} v_{i,k}v_{j,k}$<br>– 二项式参数之前的D(D-1)/2变成了KD个 大大降低了计算量.<br>􏰱􏰛􏰜􏲁􏲂􏰿􏲃􏲄􏰝􏲅􏰇􏰹􏰺􏰽􏰾􏰿􏲆􏰻</p><h2 id="2-10-代价函数"><a href="#2-10-代价函数" class="headerlink" title="2.10 代价函数"></a>2.10 代价函数</h2><h3 id="2-10-1-为什么需要代价函数？"><a href="#2-10-1-为什么需要代价函数？" class="headerlink" title="2.10.1 为什么需要代价函数？"></a>2.10.1 为什么需要代价函数？</h3><ol><li>为了得到训练逻辑回归模型的参数，需要一个代价函数，通过训练代价函数来得到参数。</li><li>用于找到最优解的目的函数。</li></ol><h3 id="2-10-2-代价函数作用原理"><a href="#2-10-2-代价函数作用原理" class="headerlink" title="2.10.2 代价函数作用原理"></a>2.10.2 代价函数作用原理</h3><p>在回归问题中，通过代价函数来求解最优解，常用的是平方误差代价函数。有如下假设函数：</p><p>$$<br>h(x) = A + Bx<br>$$</p><p>假设函数中有$A$和$B$两个参数，当参数发生变化时，假设函数状态也会随着变化。<br>如下图所示</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.16/1.jpg" alt=""></p><p>想要你和图中的离散点，我们需要尽可能找到最优的$A$和$B$来使这条直线更能代表所有数据。如何找到最优解呢，这就需要使用代价函数来求解，以平方误差代价函数为例，假设函数为$h(x)=\theta_0x$。<br>平方误差代价函数的主要思想<br>平方误差代价函数的主要思想就是将实际数据给出的值与拟合出的线的对应值做差，求出拟合出的直线与实际的差距。在实际应用中，为了避免因个别极端数据产生的影响，采用类似方差再取二分之一的方式来减小个别数据的影响。因此，引出代价函数：</p><p>$$<br>J(\theta_0, \theta_1) = \frac{1}{m}\sum_{i=1}^m(h(x^{(i)})-y^{(i)})^2<br>$$</p><p><strong>最优解即为代价函数的最小值</strong>$\min J(\theta_0, \theta_1)$。如果是1个参数，代价函数一般通过二维曲线便可直观看出。如果是2个参数，代价函数通过三维图像可看出效果，参数越多，越复杂。<br>当参数为2个时，代价函数是三维图像。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.16/2.jpg" alt=""></p><h3 id="2-10-3-为什么代价函数要非负？"><a href="#2-10-3-为什么代价函数要非负？" class="headerlink" title="2.10.3 为什么代价函数要非负？"></a>2.10.3 为什么代价函数要非负？</h3><p>目标函数存在一个下界，在优化过程当中，如果优化算法能够使目标函数不断减小，根据单调有界准则，这个优化算法就能证明是收敛有效的。<br>只要设计的目标函数有下界，基本上都可以，代价函数非负更为方便。</p><h3 id="2-10-4-常见代价函数？"><a href="#2-10-4-常见代价函数？" class="headerlink" title="2.10.4 常见代价函数？"></a>2.10.4 常见代价函数？</h3><ol><li><strong>二次代价函数(quadratic cost)</strong>：</li></ol><p>$$<br>J = \frac{1}{2n}\sum_x\Vert y(x)-a^L(x)\Vert^2<br>$$</p><p>其中，$J$表示代价函数，$x$表示样本，$y$示实际值，$a$表示输出值，$n$表示样本的总数。使用一个样本为例简单说明，此时二次代价函数为：</p><p>$$J = \frac{(y-a)^2}{2}$$</p><p>假如使用梯度下降法(Gradient descent)来调整权值参数的大小，权值$w$和偏置$b$的梯度推导如下：</p><p>$$\frac{\delta J}{\delta w}=(a-y)\delta’(z)x$$，$$\frac{\delta J}{\delta b}=(a-y)\delta’(z)$$</p><p>其中，$z$表示神经元的输入，$\theta$表示激活函数。权值$w$和偏置$b$的梯度跟激活函数的梯度成正比，激活函数的梯度越大，权值$w$和偏置$b$的大小调整得越快，训练收敛得就越快。</p><p><em>注</em>：神经网络常用的激活函数为sigmoid函数，该函数的曲线如下所示：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.18/1.jpg" alt=""></p><p>假设目标是收敛到1.0。0.82离目标比较远，梯度比较大，权值调整比较大。0.98离目标比较近，梯度比较小，权值调整比较小。调整方案合理。<br>假如目标是收敛到0。0.82目标比较近，梯度比较大，权值调整比较大。0.98离目标比较远，梯度比较小，权值调整比较小。调整方案不合理。<br>原因：初始的代价（误差）越大，导致训练越慢。</p><ol start="2"><li><strong>交叉熵代价函数(cross-entropy)</strong>：<br>交叉熵代价函数：</li></ol><p>$$<br>J = \frac{1}{n}\sum_x[y\ln a + (1-y)\ln{(1-a)}]<br>$$</p><p>其中，$J$表示代价函数，$x$表示样本，$y$表示实际值，$a$表示输出值，$n$表示样本的总数。<br>权值$w$和偏置$b$的梯度推导如下：</p><p>$$<br>\frac{\delta J}{\delta w_j}=\frac{1}{n}\sum_{x}(\delta{(a)}-y)\;，<br>\frac{\delta J}{\delta b}=\frac{1}{n}\sum_{x}(\delta{(z)}-y)<br>$$</p><p>当误差越大时，梯度就越大，权值$w$和偏置$b$调整就越快，训练的速度也就越快。<br><strong>二次代价函数适合输出神经元是线性的情况，交叉熵代价函数适合输出神经元是S型函数的情况。</strong></p><ol start="3"><li><strong>对数释然代价函数(log-likelihood cost)</strong>：<br>对数释然函数常用来作为softmax回归的代价函数。深度学习中普遍的做法是将softmax作为最后一层，此时常用的代价函数是对数释然代价函数。<br> 对数似然代价函数与softmax的组合和交叉熵与sigmoid函数的组合非常相似。对数释然代价函数在二分类时可以化简为交叉熵代价函数的形式。<br>在tensorflow中：<br> 与sigmoid搭配使用的交叉熵函数：<code>tf.nn.sigmoid_cross_entropy_with_logits()</code>。<br> 与softmax搭配使用的交叉熵函数：<code>tf.nn.softmax_cross_entropy_with_logits()</code>。</li></ol><h3 id="2-10-5-为什么用交叉熵代替二次代价函数"><a href="#2-10-5-为什么用交叉熵代替二次代价函数" class="headerlink" title="2.10.5 为什么用交叉熵代替二次代价函数"></a>2.10.5 为什么用交叉熵代替二次代价函数</h3><ol><li><p><strong>为什么不用二次方代价函数</strong><br>由2.18节可知，权值$w$和偏置$b$的偏导数为$\frac{\delta J}{\delta w}=(a-y)\delta’(z)x$，$\frac{\delta J}{\delta b}=(a-y)\delta’(z)$， 偏导数受激活函数的导数影响，sigmoid函数导数在输出接近0和1时非常小，会导致一些实例在刚开始训练时学习得非常慢。</p></li><li><p><strong>为什么要用交叉熵</strong><br>交叉熵函数权值$w$和偏置$b$的梯度推导为：</p></li></ol><p>$$<br>\frac{\delta J}{\delta w_j}=\frac{1}{n}\sum_{x}(\delta{(a)}-y)\;，<br>\frac{\delta J}{\delta b}=\frac{1}{n}\sum_{x}(\delta{(z)}-y)<br>$$</p><p>由以上公式可知，权重学习的速度受到$\delta{(z)}-y$影响，更大的误差，就有更快的学习速度，避免了二次代价函数方程中因$\delta’{(z)}$导致的学习缓慢的情况。</p><h2 id="2-11-损失函数"><a href="#2-11-损失函数" class="headerlink" title="2.11 损失函数"></a>2.11 损失函数</h2><h3 id="2-11-1-什么是损失函数？"><a href="#2-11-1-什么是损失函数？" class="headerlink" title="2.11.1 什么是损失函数？"></a>2.11.1 什么是损失函数？</h3><p>损失函数（Loss function）又叫做误差函数，用来衡量算法的运行情况，估量模型的预测值 与真实值 的不一致程度，是一个非负实值函数,通常使用 来表示，损失函数越小，模型的鲁棒性就越好。<br>损失函数是经验风险函数的核心部分，也是结构风险函数重要组成部分。</p><h3 id="2-11-2-常见的损失函数"><a href="#2-11-2-常见的损失函数" class="headerlink" title="2.11.2 常见的损失函数"></a>2.11.2 常见的损失函数</h3><p>机器学习通过对算法中的目标函数进行不断求解优化，得到最终想要的结果。分类和回归问题中，通常使用损失函数或代价函数作为目标函数。<br>损失函数用来评价预测值和真实值不一样的程度。通常损失函数越好，模型的性能也越好。<br>损失函数可分为经验风险损失函数和结构风险损失函数。经验风险损失函数指预测结果和实际结果的差别，结构风险损失函数是在经验风险损失函数上加上正则项。<br>下面介绍常用的损失函数：</p><ol><li>0-1损失函数<br>如果预测值和目标值相等，值为0，如果不相等，值为1.</li></ol><p>$$<br>L(Y, f(x)) =<br>\begin{cases}<br>1,&amp; Y\ne f(x)\<br>0,&amp; Y = f(x)<br>\end{cases}<br>$$</p><p>一般的在实际使用中，相等的条件过于严格，可适当放宽条件：</p><p>$$<br>L(Y, f(x)) =<br>\begin{cases}<br>1,&amp; |Y-f(x)|\ge T\<br>0,&amp; |Y-f(x)|&lt; T<br>\end{cases}<br>$$</p><ol start="2"><li>绝对值损失函数<br>和0-1损失函数相似，绝对值损失函数表示为：</li></ol><p>$$<br>L(Y, f(x)) = |Y-f(x)|​<br>$$</p><ol start="3"><li>平方损失函数</li></ol><p>$$<br>L(Y, f(x)) = \sum_N{(Y-f(x))}^2<br>$$</p><p>这点可从最小二乘法和欧几里得距离角度理解。最小二乘法的原理是，最优拟合曲线应该使所有点到回归直线的距离和最小。</p><ol start="4"><li>log对数损失函数</li></ol><p>$$<br>L(Y, P(Y|X)) = -\log{P(Y|X)}<br>$$</p><p>常见的逻辑回归使用的就是对数损失函数，有很多人认为逻辑回归的损失函数式平方损失，其实不然。逻辑回归它假设样本服从伯努利分布，进而求得满足该分布的似然函数，接着取对数求极值等。逻辑回归推导出的经验风险函数是最小化负的似然函数，从损失函数的角度看，就是log损失函数。</p><ol start="5"><li>指数损失函数<br>指数损失函数的标准形式为：</li></ol><p>$$<br>L(Y, f(x)) = \exp{-yf(x)}<br>$$</p><p>例如AdaBoost就是以指数损失函数为损失函数。</p><ol start="6"><li>Hinge损失函数<br>Hinge损失函数的标准形式如下：</li></ol><p>$$<br>L(Y) = \max{(0, 1-ty)}<br>$$</p><p>其中y是预测值，范围为(-1,1),t为目标值，其为-1或1.</p><p>在线性支持向量机中，最优化问题可等价于</p><p>$$<br>\underset{\min}{w,b}\sum_{i=1}^N (1-y_i(wx_i+b))+\lambda\Vert w^2\Vert<br>$$</p><p>上式相似于下式</p><p>$$<br>\frac{1}{m}\sum_{i=1}^{N}l(wx_i+by_i) + \Vert w^2\Vert<br>$$</p><p>其中$l(wx_i+by_i)$是Hinge损失函数，$\Vert w^2\Vert$可看做为正则化项。</p><h3 id="2-11-3-逻辑回归为什么使用对数损失函数？"><a href="#2-11-3-逻辑回归为什么使用对数损失函数？" class="headerlink" title="2.11.3 逻辑回归为什么使用对数损失函数？"></a>2.11.3 逻辑回归为什么使用对数损失函数？</h3><p>假设逻辑回归模型<br>TODO<br>假设逻辑回归模型的概率分布是伯努利分布，其概率质量函数为<br>TODO<br>其似然函数为<br>TODO<br>对数似然函数为<br>TODO<br>对数函数在单个数据点上的定义为<br>TODO<br>则全局样本损失函数为：<br>TODO<br>由此可看出，对数损失函数与极大似然估计的对数似然函数本质上是相同的。所以逻辑回归直接采用对数损失函数。</p><h3 id="2-11-4-对数损失函数是如何度量损失的？"><a href="#2-11-4-对数损失函数是如何度量损失的？" class="headerlink" title="2.11.4 对数损失函数是如何度量损失的？"></a>2.11.4 对数损失函数是如何度量损失的？</h3><p>举例：<br>高斯分布中，我们需要确定均值 和标注差 。<br>如何确定这两个参数？最大似然估计是比较常用的方法。最大似然的目标是找到一些参数值，这些参数值对应的分布可以最大化观测到数据的概率。<br>因为需要计算观测到所有数据的全概率，即所有观测到的数据点的联合概率。现考虑如下简化情况：</p><ol><li>假设观测到每个数据点的概率和其他数据点的概率是独立的。</li><li>取自然对数。<br>假设观测到单个数据点TODO的概率为：<br>TODO<br>其联合概率为<br>TODO<br>对上式取自然对数，可得：<br>TODO<br>根据对数定律，上式可以化简为：<br>TODO<br>求导：<br>TODO<br>上式左半部分为对数损失函数。损失函数越小越好，因此我们令对数损失函数为0，可得：<br>TODO<br>同理，可计算TODO。</li></ol><h2 id="2-12-梯度下降"><a href="#2-12-梯度下降" class="headerlink" title="2.12 梯度下降"></a>2.12 梯度下降</h2><h3 id="2-12-1-机器学习中为什么需要梯度下降？"><a href="#2-12-1-机器学习中为什么需要梯度下降？" class="headerlink" title="2.12.1 机器学习中为什么需要梯度下降？"></a>2.12.1 机器学习中为什么需要梯度下降？</h3><ol><li>梯度下降是迭代法的一种,可以用于求解最小二乘问题。</li><li>在求解机器学习算法的模型参数，即无约束优化问题时，主要有梯度下降法（Gradient Descent）和最小二乘法。</li><li>在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。</li><li>如果我们需要求解损失函数的最大值，可通过梯度上升法来迭代。梯度下降法和梯度上升法可相互转换。</li><li>在机器学习中，梯度下降法主要有随机梯度下降法和批量梯度下降法。</li></ol><h3 id="2-12-2-梯度下降法缺点？"><a href="#2-12-2-梯度下降法缺点？" class="headerlink" title="2.12.2 梯度下降法缺点？"></a>2.12.2 梯度下降法缺点？</h3><ol><li>靠近极小值时收敛速度减慢。</li><li>直线搜索时可能会产生一些问题。</li><li>可能会“之字形”地下降。</li></ol><p>梯度概念需注意：</p><ol><li>梯度是一个向量，即有方向有大小； </li><li>梯度的方向是最大方向导数的方向； </li><li>梯度的值是最大方向导数的值。</li></ol><h3 id="2-12-3-梯度下降法直观理解？"><a href="#2-12-3-梯度下降法直观理解？" class="headerlink" title="2.12.3 梯度下降法直观理解？"></a>2.12.3 梯度下降法直观理解？</h3><p>梯度下降法经典图示:</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.25/1.png" alt=""></p><p>形象化举例：</p><blockquote><p>由上图，假如最开始，我们在一座大山上的某处位置，因为到处都是陌生的，不知道下山的路，所以只能摸索着根据直觉，走一步算一步，在此过程中，每走到一个位置的时候，都会求解当前位置的梯度，沿着梯度的负方向，也就是当前最陡峭的位置向下走一步，然后继续求解当前位置梯度，向这一步所在位置沿着最陡峭最易下山的位置走一步。不断循环求梯度，就这样一步步的走下去，一直走到我们觉得已经到了山脚。当然这样走下去，有可能我们不能走到山脚，而是到了某一个局部的山峰低处。<br>由此，从上面的解释可以看出，梯度下降不一定能够找到全局的最优解，有可能是一个局部最优解。当然，如果损失函数是凸函数，梯度下降法得到的解就一定是全局最优解。</p></blockquote><p>核心思想归纳：</p><ol><li>初始化参数，随机选取取值范围内的任意数；</li><li>迭代操作：<br>a) 计算当前梯度；<br>b）修改新的变量；<br>c）计算朝最陡的下坡方向走一步；<br>d）判断是否需要终止，如否，返回a)；</li><li>得到全局最优解或者接近全局最优解。</li></ol><h3 id="2-12-4-梯度下降法算法描述？"><a href="#2-12-4-梯度下降法算法描述？" class="headerlink" title="2.12.4 梯度下降法算法描述？"></a>2.12.4 梯度下降法算法描述？</h3><ol><li>确定优化模型的假设函数及损失函数。<br>举例，对于线性回归，假设函数为：<br>TODO<br>其中，TODO分别为模型参数、每个样本的特征值。<br>对于假设函数，损失函数为：<br>TODO</li><li>相关参数初始化。<br>主要初始化TODO、算法迭代步长TODO、终止距离TODO。初始化时可以根据经验初始化，即TODO初始化为0，步长TODO初始化为1。当前步长记为TODO。当然，也可随机初始化。</li><li>迭代计算。</li></ol><p>1) 计算当前位置时损失函数的梯度，对TODO，其梯度表示为：TODO</p><p>2) 计算当前位置下降的距离。TODO</p><p>3) 判断是否终止。<br>确定是否所有TODO梯度下降的距离TODO都小于终止距离TODO，如果都小于TODO，则算法终止，当然的值即为最终结果，否则进入下一步。<br>4) 更新所有的TODO，更新后的表达式为：TODO<br>5) 更新完毕后转入1)。</p><p><strong>举例</strong>。以线性回归为例。<br>假设样本是<br>TODO<br>损失函数为<br>TODO<br>在计算中，TODO的偏导数计算如下：<br>TODO<br>令上式 。4)中TODO的更新表达式为：<br> TODO<br>由此，可看出，当前位置的梯度方向由所有样本决定，上式中TODO的目的是为了便于理解。</p><h3 id="2-12-5-如何对梯度下降法进行调优？"><a href="#2-12-5-如何对梯度下降法进行调优？" class="headerlink" title="2.12.5 如何对梯度下降法进行调优？"></a>2.12.5 如何对梯度下降法进行调优？</h3><p>实际使用梯度下降法时，各项参数指标不能一步就达到理想状态，对梯度下降法调优主要体现在以下几个方面：</p><ol><li><strong>算法迭代步长$\alpha$选择。</strong><br>在算法参数初始化时，有时根据经验将步长 初始化为1。实际取值取决于数据样本。可以从大到小，多取一些值，分别运行算法看迭代效果，如果损失函数在变小，则取值有效。如果取值无效，说明要增大步长。但步长太大，有时会导致迭代速度过快，错过最优解。步长太小，迭代速度慢，算法运行时间长。</li><li><strong>参数的初始值选择。</strong><br>初始值不同，获得的最小值也有可能不同，梯度下降有可能得到的是局部最小值。如果损失函数是凸函数，则一定是最优解。由于有局部最优解的风险，需要多次用不同初始值运行算法，关键损失函数的最小值，选择损失函数最小化的初值。</li><li><strong>标准化处理。</strong><br>由于样本不同，特征取值范围也不同，导致迭代速度慢。为了减少特征取值的影响，可对特征数据标准化，使新期望为0，新方差为1，可节省算法运行时间。</li></ol><h3 id="2-12-7-随机梯度和批量梯度区别？"><a href="#2-12-7-随机梯度和批量梯度区别？" class="headerlink" title="2.12.7 随机梯度和批量梯度区别？"></a>2.12.7 随机梯度和批量梯度区别？</h3><p>随机梯度下降和批量梯度下降是两种主要梯度下降法，其目的是增加某些限制来加速运算求解。<br>引入随机梯度下降法与mini-batch梯度下降法是为了应对大数据量的计算而实现一种快速的求解。<br>下面通过介绍两种梯度下降法的求解思路，对其进行比较。<br>假设函数为<br>TODO<br>损失函数为<br>TODO<br>其中，TODO为样本个数，TODO为参数个数。</p><p>1、 <strong>批量梯度下降的求解思路如下：</strong></p><p>a) 得到每个TODO对应的梯度：<br>TODO</p><p>b) 由于是求最小化风险函数，所以按每个参数TODO的梯度负方向更新TODO：<br>TODO</p><p>c) 从上式可以注意到，它得到的虽然是一个全局最优解，但每迭代一步，都要用到训练集所有的数据，如果样本数据 很大，这种方法迭代速度就很慢。<br>相比而言，随机梯度下降可避免这种问题。</p><p>2、<strong>随机梯度下降的求解思路如下：</strong><br>a) 相比批量梯度下降对应所有的训练样本，随机梯度下降法中损失函数对应的是训练集中每个样本的粒度。<br>损失函数可以写成如下这种形式，<br> TODO</p><p>b）对每个参数TODO按梯度方向更新 ：<br> TODO</p><p>c) 随机梯度下降是通过每个样本来迭代更新一次。<br>随机梯度下降伴随的一个问题是噪音较批量梯度下降要多，使得随机梯度下降并不是每次迭代都向着整体最优化方向。</p><p><strong>小结：</strong><br>随机梯度下降法、批量梯度下降法相对来说都比较极端，简单对比如下：<br>批量梯度下降：<br>a）采用所有数据来梯度下降。<br>b) 批量梯度下降法在样本量很大的时候，训练速度慢。</p><p>随机梯度下降：<br>a) 随机梯度下降用一个样本来梯度下降。<br>b) 训练速度很快。<br>c) 随机梯度下降法仅仅用一个样本决定梯度方向，导致解有可能不是最优。<br>d) 收敛速度来说，随机梯度下降法一次迭代一个样本，导致迭代方向变化很大，不能很快的收敛到局部最优解。</p><p>下面介绍能结合两种方法优点的小批量梯度下降法。</p><p>3、 <strong>小批量（mini-batch）梯度下降的求解思路如下</strong><br>对于总数为$m$个样本的数据，根据样本的数据，选取其中的$n(1&lt; n&lt; m)$个子样本来迭代。其参数$\theta$按梯度方向更新$\theta_i$公式如下：<br>TODO</p><h3 id="2-12-8-各种梯度下降法性能比较"><a href="#2-12-8-各种梯度下降法性能比较" class="headerlink" title="2.12.8 各种梯度下降法性能比较"></a>2.12.8 各种梯度下降法性能比较</h3><p>下表简单对比随机梯度下降(SGD)、批量梯度下降（BGD）、小批量梯度下降（mini-batch GD）、和online GD的区别，主要区别在于如何选取训练数据：</p><table><thead><tr><th style="text-align:center">BGD</th><th style="text-align:center">SGD</th><th style="text-align:center">GD</th><th style="text-align:center">Mini-batch GD</th><th style="text-align:center">Online GD</th></tr></thead><tbody><tr><td style="text-align:center">训练集</td><td style="text-align:center">固定</td><td style="text-align:center">固定</td><td style="text-align:center">固定</td><td style="text-align:center">实时更新</td></tr><tr><td style="text-align:center">单次迭代样本数</td><td style="text-align:center">整个训练集</td><td style="text-align:center">单个样本</td><td style="text-align:center">训练集的子集</td><td style="text-align:center">根据具体算法定</td></tr><tr><td style="text-align:center">算法复杂度</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">一般</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">时效性</td><td style="text-align:center">低</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">收敛性</td><td style="text-align:center">稳定</td><td style="text-align:center">不稳定</td><td style="text-align:center">较稳定</td><td style="text-align:center">不稳定</td></tr></tbody></table><p>BGD、SGD、Mini-batch GD,前面均已讨论过，这里介绍一下Online GD。</p><p>Online GD于mini-batch GD/SGD的区别在于，所有训练数据只用一次，然后丢弃。这样做的优点在于可预测最终模型的变化趋势。</p><p>Online GD在互联网领域用的较多，比如搜索广告的点击率(CTR)预估模型，网民的点击行为会随着时间改变。用普通的BGD算法（每天更新一次）一方面耗时较长（需要对所有历史数据重新训练）；另一方面，无法及时反馈用户的点击行为迁移。而Online GD算法可以实时的依据网民的点击行为进行迁移。</p><h2 id="2-13-计算图的导数计算图解？"><a href="#2-13-计算图的导数计算图解？" class="headerlink" title="2.13 计算图的导数计算图解？"></a>2.13 计算图的导数计算图解？</h2><p>​    计算图导数计算是反向传播，利用链式法则和隐式函数求导。</p><p>​    假设TODO在点TODO处偏导连续，TODO是关于TODO的函数，在TODO点可导，求TODO在TODO点的导数。</p><p>根据链式法则有<br>TODO</p><p>​    为了便于理解，下面举例说明。<br>假设$f(x)$是关于a,b,c的函数。链式求导法则如下：</p><p>$$<br>\frac{dJ}{du}=\frac{dJ}{dv}\frac{dv}{du},\frac{dJ}{db}=\frac{dJ}{du}\frac{du}{db},\frac{dJ}{da}=\frac{dJ}{du}\frac{du}{da}<br>$$</p><p>链式法则用文字描述:“由两个函数凑起来的复合函数，其导数等于里边函数代入外边函数的值之导数，乘以里边函数的导数。</p><p>例：</p><p>$$<br>f(x)=x^2,g(x)=2x+1<br>$$</p><p>则</p><p>$$<br>{f[g(x)]}’=2[g(x)]<em>g’(x)=2[2x+1]</em>2=8x+1<br>$$</p><h2 id="2-14-线性判别分析（LDA）"><a href="#2-14-线性判别分析（LDA）" class="headerlink" title="2.14 线性判别分析（LDA）"></a>2.14 线性判别分析（LDA）</h2><h3 id="2-14-1-线性判别分析（LDA）思想总结"><a href="#2-14-1-线性判别分析（LDA）思想总结" class="headerlink" title="2.14.1 线性判别分析（LDA）思想总结"></a>2.14.1 线性判别分析（LDA）思想总结</h3><p>线性判别分析（Linear Discriminant Analysis，LDA）是一种经典的降维方法。</p><p>和PCA不考虑样本类别输出的无监督降维技术不同，LDA是一种监督学习的降维技术，数据集的每个样本有类别输出。</p><p>LDA分类思想简单总结如下：</p><ol><li>多维空间中，数据处理分类问题较为复杂，LDA算法将多维空间中的数据投影到一条直线上，将d维数据转化成1维数据进行处理。</li><li>对于训练数据，设法将多维数据投影到一条直线上，同类数据的投影点尽可能接近，异类数据点尽可能远离。</li><li>对数据进行分类时，将其投影到同样的这条直线上，再根据投影点的位置来确定样本的类别。<br>如果用一句话概括LDA思想，即“投影后类内方差最小，类间方差最大”。</li></ol><h3 id="2-14-2-图解LDA核心思想"><a href="#2-14-2-图解LDA核心思想" class="headerlink" title="2.14.2 图解LDA核心思想"></a>2.14.2 图解LDA核心思想</h3><p>假设有红、蓝两类数据，这些数据特征均为二维，如下图所示。我们的目标是将这些数据投影到一维，让每一类相近的数据的投影点尽可能接近，不同类别数据尽可能远，即图中红色和蓝色数据中心之间的距离尽可能大。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.29/1.png" alt=""></p><p>左图和右图是两种不同的投影方式。</p><p>左图思路：让不同类别的平均点距离最远的投影方式。</p><p>右图思路：让同类别的数据挨得最近的投影方式。</p><p>从上图直观看出，右图红色数据和蓝色数据在各自的区域来说相对集中，根据数据分布直方图也可看出，所以右图的投影效果好于左图，左图中间直方图部分有明显交集。</p><p>以上例子是基于数据是二维的，分类后的投影是一条直线。如果原始数据是多维的，则投影后的分类面是一低维的超平面。</p><h3 id="2-14-3-二类LDA算法原理？"><a href="#2-14-3-二类LDA算法原理？" class="headerlink" title="2.14.3 二类LDA算法原理？"></a>2.14.3 二类LDA算法原理？</h3><p>输入：数据集TODO，其中样本TODO是n维向量，TODO，TODO降维后的目标维度TODO。定义</p><p>TODO为第TODO类样本个数；</p><p>TODO为第TODO类样本的集合；</p><p>TODO为第TODO类样本的均值向量；</p><p>TODO为第TODO类样本的协方差矩阵。</p><p>其中TODO，TODO。</p><p>假设投影直线是向量TODO，对任意样本TODO，它在直线TODO上的投影为TODO，两个类别的中心点TODO在直线TODO的投影分别为TODO、TODO。</p><p>LDA的目标是让两类别的数据中心间的距离TODO尽量大，与此同时，希望同类样本投影点的协方差TODO、TODO尽量小，最小化TODO。<br>定义<br>类内散度矩阵TODO</p><p>类间散度矩阵TODO</p><p>据上分析，优化目标为TODO</p><p>根据广义瑞利商的性质，矩阵TODO的最大特征值为TODO的最大值，矩阵TODO的最大特征值对应的特征向量即为TODO。</p><h3 id="2-14-4-LDA算法流程总结？"><a href="#2-14-4-LDA算法流程总结？" class="headerlink" title="2.14.4 LDA算法流程总结？"></a>2.14.4 LDA算法流程总结？</h3><p>LDA算法降维流程如下：</p><p>输入：数据集TODO，其中样本TODO是n维向量，TODO，降维后的目标维度TODO。</p><p>输出：降维后的数据集TODO。</p><p>步骤：</p><ol><li>计算类内散度矩阵 。</li><li>计算类间散度矩阵 。</li><li>计算矩阵 。</li><li>计算矩阵 的最大的d个特征值。</li><li>计算d个特征值对应的d个特征向量，记投影矩阵为 。</li><li>转化样本集的每个样本，得到新样本 。</li><li>输出新样本集 </li></ol><h3 id="2-14-5-LDA和PCA区别？"><a href="#2-14-5-LDA和PCA区别？" class="headerlink" title="2.14.5 LDA和PCA区别？"></a>2.14.5 LDA和PCA区别？</h3><table><thead><tr><th style="text-align:center">异同点</th><th style="text-align:left">LDA</th><th style="text-align:left">PCA</th></tr></thead><tbody><tr><td style="text-align:center">相同点</td><td style="text-align:left">1. 两者均可以对数据进行降维；2. 两者在降维时均使用了矩阵特征分解的思想；3. 两者都假设数据符合高斯分布；</td></tr><tr><td style="text-align:center">不同点</td><td style="text-align:left">有监督的降维方法</td><td style="text-align:left">无监督的降维方法</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">降维最多降到k-1维</td><td style="text-align:left">降维多少没有限制</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">可以用于降维，还可以用于分类</td><td style="text-align:left">只用于降维</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">选择分类性能最好的投影方向</td><td style="text-align:left">选择样本点投影具有最大方差的方向</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">更明确，更能反映样本间差异</td><td style="text-align:left">目的较为模糊</td></tr></tbody></table><h3 id="2-14-6-LDA优缺点？"><a href="#2-14-6-LDA优缺点？" class="headerlink" title="2.14.6 LDA优缺点？"></a>2.14.6 LDA优缺点？</h3><table><thead><tr><th style="text-align:center">优缺点</th><th style="text-align:left">简要说明</th></tr></thead><tbody><tr><td style="text-align:center">优点</td><td style="text-align:left">1. 可以使用类别的先验知识；2. 以标签，类别衡量差异性的有监督降维方式，相对于PCA的模糊性，其目的更明确，更能反映样本间的差异；</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:left">1. LDA不适合对非高斯分布样本进行降维；2. LDA降维最多降到k-1维；3. LDA在样本分类信息依赖方差而不是均值时，降维效果不好；4. LDA可能过度拟合数据。</td></tr></tbody></table><h2 id="2-15-主成分分析（PCA）"><a href="#2-15-主成分分析（PCA）" class="headerlink" title="2.15  主成分分析（PCA）"></a>2.15  主成分分析（PCA）</h2><h3 id="2-15-1-主成分分析（PCA）思想总结"><a href="#2-15-1-主成分分析（PCA）思想总结" class="headerlink" title="2.15.1 主成分分析（PCA）思想总结"></a>2.15.1 主成分分析（PCA）思想总结</h3><ol><li>PCA就是将高维的数据通过线性变换投影到低维空间上去。</li><li>投影思想：找出最能够代表原始数据的投影方法。被PCA降掉的那些维度只能是那些噪声或是冗余的数据。</li><li>去冗余：去除可以被其他向量代表的线性相关向量，这部分信息量是多余的。</li><li>去噪声，去除较小特征值对应的特征向量，特征值的大小反映了变换后在特征向量方向上变换的幅度，幅度越大，说明这个方向上的元素差异也越大，要保留。</li><li>对角化矩阵，寻找极大线性无关组，保留较大的特征值，去除较小特征值，组成一个投影矩阵，对原始样本矩阵进行投影，得到降维后的新样本矩阵。</li><li>完成PCA的关键是——协方差矩阵。<br>协方差矩阵，能同时表现不同维度间的相关性以及各个维度上的方差。<br>协方差矩阵度量的是维度与维度之间的关系，而非样本与样本之间。</li><li>之所以对角化，因为对角化之后非对角上的元素都是0，达到去噪声的目的。对角化后的协方差矩阵，对角线上较小的新方差对应的就是那些该去掉的维度。所以我们只取那些含有较大能量(特征值)的维度，其余的就舍掉，即去冗余。</li></ol><h3 id="2-15-2-图解PCA核心思想"><a href="#2-15-2-图解PCA核心思想" class="headerlink" title="2.15.2 图解PCA核心思想"></a>2.15.2 图解PCA核心思想</h3><p>PCA可解决训练数据中存在数据特征过多或特征累赘的问题。核心思想是将m维特征映射到n维（n &lt; m），这n维形成主元，是重构出来最能代表原始数据的正交特征。</p><p>假设数据集是m个n维，$(x^{(1)}, x^{(2)}, \cdots, x^{(m)})$。如果n=2,需要降维到$n’=1$，现在想找到某一维度方向代表这两个维度的数据。下图有$u_1, u_2$两个向量方向，但是哪个向量才是我们所想要的，可以更好代表原始数据集的呢？</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.34/1.png" alt=""></p><p>从图可看出，$u_1$比$u_2$好，为什么呢？有以下两个主要评价指标：</p><ol><li>样本点到这个直线的距离足够近。</li><li>样本点在这个直线上的投影能尽可能的分开。</li></ol><p>如果我们需要降维的目标维数是其他任意维，则：</p><ol><li>样本点到这个超平面的距离足够近。</li><li>样本点在这个超平面上的投影能尽可能的分开。</li></ol><h3 id="2-15-3-PCA算法推理"><a href="#2-15-3-PCA算法推理" class="headerlink" title="2.15.3 PCA算法推理"></a>2.15.3 PCA算法推理</h3><p>下面以基于最小投影距离为评价指标推理：</p><p>假设数据集是m个n维，TODO，且数据进行了中心化。经过投影变换得到新坐标为TODO，其中TODO是标准正交基，即TODO，TODO。经过降维后，新坐标为TODO，其中TODO是降维后的目标维数。样本点TODO在新坐标系下的投影为TODO，其中TODO是TODO在低维坐标系里第j维的坐标。如果用TODO去恢复TODO，则得到的恢复数据为TODO，其中TODO为标准正交基组成的矩阵。</p><p>考虑到整个样本集，样本点到这个超平面的距离足够近，目标变为最小化TODO。对此式进行推理，可得：<br>TODO</p><p>在推导过程中，分别用到了TODO，矩阵转置公式TODO，TODO，TODO以及矩阵的迹，最后两步是将代数和转为矩阵形式。<br>由于TODO的每一个向量TODO是标准正交基，TODO是数据集的协方差矩阵，TODO是一个常量。最小化TODO又可等价于</p><p>TODO</p><p>利用拉格朗日函数可得到<br>TODO</p><p>对TODO求导，可得TODO，也即TODO。 是TODO个特征向量组成的矩阵， 为TODO的特征值。TODO即为我们想要的矩阵。<br>对于原始数据，只需要TODO，就可把原始数据集降维到最小投影距离的TODO维数据集。</p><p>基于最大投影方差的推导，这里就不再赘述，有兴趣的同仁可自行查阅资料。</p><h3 id="2-15-4-PCA算法流程总结"><a href="#2-15-4-PCA算法流程总结" class="headerlink" title="2.15.4 PCA算法流程总结"></a>2.15.4 PCA算法流程总结</h3><p>输入：TODO维样本集TODO，目标降维的维数TODO。</p><p>输出：降维后的新样本集TODO。</p><p>主要步骤如下：</p><ol><li>对所有的样本进行中心化，TODO。</li><li>计算样本的协方差矩阵TODO。</li><li>对协方差矩阵TODO进行特征值分解。</li><li>取出最大的TODO个特征值对应的特征向量TODO。</li><li>标准化特征向量，得到特征向量矩阵TODO。</li><li>转化样本集中的每个样本TODO。</li><li>得到输出矩阵TODO。<br><em>注</em>：在降维时，有时不明确目标维数，而是指定降维到的主成分比重阈值TODO。假设TODO个特征值为TODO，则TODO可从TODO得到。</li></ol><h3 id="2-15-5-PCA算法主要优缺点"><a href="#2-15-5-PCA算法主要优缺点" class="headerlink" title="2.15.5 PCA算法主要优缺点"></a>2.15.5 PCA算法主要优缺点</h3><table><thead><tr><th style="text-align:center">优缺点</th><th style="text-align:left">简要说明</th></tr></thead><tbody><tr><td style="text-align:center">优点</td><td style="text-align:left">1. 仅仅需要以方差衡量信息量，不受数据集以外的因素影响。　2.各主成分之间正交，可消除原始数据成分间的相互影响的因素。3. 计算方法简单，主要运算是特征值分解，易于实现。</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:left">1.主成分各个特征维度的含义具有一定的模糊性，不如原始样本特征的解释性强。2. 方差小的非主成分也可能含有对样本差异的重要信息，因降维丢弃可能对后续数据处理有影响。</td></tr></tbody></table><h3 id="2-15-6-降维的必要性及目的"><a href="#2-15-6-降维的必要性及目的" class="headerlink" title="2.15.6 降维的必要性及目的"></a>2.15.6 降维的必要性及目的</h3><p><strong>降维的必要性</strong>：</p><ol><li>多重共线性–预测变量之间相互关联。多重共线性会导致解空间的不稳定，从而可能导致结果的不连贯。</li><li>高维空间本身具有稀疏性。一维正态分布有68%的值落于正负标准差之间，而在十维空间上只有0.02%。</li><li>过多的变量，对查找规律造成冗余麻烦。</li><li>仅在变量层面上分析可能会忽略变量之间的潜在联系。例如几个预测变量可能落入仅反映数据某一方面特征的一个组内。</li></ol><p><strong>降维的目的</strong>：</p><ol><li>减少预测变量的个数。</li><li>确保这些变量是相互独立的。</li><li>提供一个框架来解释结果。关特征，特别是重要特征更能在数据中明确的显示出来；如果只有两维或者三维的话，更便于可视化展示。</li><li>数据在低维下更容易处理、更容易使用。</li><li>去除数据噪声。</li><li>降低算法运算开销。</li></ol><h3 id="2-15-7-KPCA与PCA的区别？"><a href="#2-15-7-KPCA与PCA的区别？" class="headerlink" title="2.15.7 KPCA与PCA的区别？"></a>2.15.7 KPCA与PCA的区别？</h3><p>应用PCA算法的前提是假设存在一个线性的超平面，进而投影。那如果数据不是线性的呢？该怎么办？这时候就需要KPCA，数据集从TODO维映射到线性可分的高维TODO，然后再从TODO维降维到一个低维度TODO。</p><p>KPCA用到了核函数思想，使用了核函数的主成分分析一般称为核主成分分析(Kernelized PCA, 简称KPCA）。</p><p>假设高维空间数据由TODO维空间的数据通过映射TODO产生。</p><p>TODO维空间的特征分解为：<br>TODO其映射为TODO</p><p>通过在高维空间进行协方差矩阵的特征值分解，然后用和PCA一样的方法进行降维。由于KPCA需要核函数的运算，因此它的计算量要比PCA大很多。</p><h2 id="2-16-模型评估"><a href="#2-16-模型评估" class="headerlink" title="2.16 模型评估"></a>2.16 模型评估</h2><h3 id="2-16-1-模型评估常用方法？"><a href="#2-16-1-模型评估常用方法？" class="headerlink" title="2.16.1 模型评估常用方法？"></a>2.16.1 模型评估常用方法？</h3><p>一般情况来说，单一评分标准无法完全评估一个机器学习模型。只用good和bad偏离真实场景去评估某个模型，都是一种欠妥的评估方式。下面介绍常用的分类模型和回归模型评估方法。</p><p><strong>分类模型常用评估方法：</strong></p><table><thead><tr><th style="text-align:center">指标</th><th style="text-align:center">描述</th><th style="text-align:left">Scikit-learn函数</th></tr></thead><tbody><tr><td style="text-align:center">Precision</td><td style="text-align:center">精准度</td><td style="text-align:left">from sklearn.metrics import precision_score</td></tr><tr><td style="text-align:center">Recall</td><td style="text-align:center">召回率</td><td style="text-align:left">from sklearn.metrics import recall_score</td></tr><tr><td style="text-align:center">F1</td><td style="text-align:center">F1值</td><td style="text-align:left">from sklearn.metrics import f1_score</td></tr><tr><td style="text-align:center">Confusion Matrix</td><td style="text-align:center">混淆矩阵</td><td style="text-align:left">from sklearn.metrics import confusion_matrix</td></tr><tr><td style="text-align:center">ROC</td><td style="text-align:center">ROC曲线</td><td style="text-align:left">from sklearn.metrics import roc</td></tr><tr><td style="text-align:center">AUC</td><td style="text-align:center">ROC曲线下的面积</td><td style="text-align:left">from sklearn.metrics import auc</td></tr><tr><td style="text-align:center">precision</td><td style="text-align:center">查准率</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">recall</td><td style="text-align:center">查全率</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">P-R曲线</td><td style="text-align:center">查准率为纵轴，查全率为横轴，作图</td></tr></tbody></table><p><strong>回归模型常用评估方法：</strong></p><table><thead><tr><th style="text-align:center">指标</th><th style="text-align:center">描述</th><th style="text-align:left">Scikit-learn函数</th></tr></thead><tbody><tr><td style="text-align:center">Mean Square Error (MSE, RMSE)</td><td style="text-align:center">平均方差</td><td style="text-align:left">from sklearn.metrics import mean_squared_error</td></tr><tr><td style="text-align:center">Absolute Error (MAE, RAE)</td><td style="text-align:center">绝对误差</td><td style="text-align:left">from sklearn.metrics import mean_absolute_error, median_absolute_error</td></tr><tr><td style="text-align:center">R-Squared</td><td style="text-align:center">R平方值</td><td style="text-align:left">from sklearn.metrics import r2_score</td></tr></tbody></table><h3 id="2-16-2-机器学习中的Bias，Error和Variance有什么区别和联系？"><a href="#2-16-2-机器学习中的Bias，Error和Variance有什么区别和联系？" class="headerlink" title="2.16.2 机器学习中的Bias，Error和Variance有什么区别和联系？"></a>2.16.2 机器学习中的Bias，Error和Variance有什么区别和联系？</h3><p><strong>（贡献者：黄钦建－华南理工大学）</strong></p><p>Bias(偏差)，Error(误差)，和Variance(方差)</p><p><strong>对于Bias：</strong></p><ul><li>Bias衡量模型拟合训练数据的能力（训练数据不一定是整个 training dataset，而是只用于训练它的那一部分数据，例如：mini-batch）。</li><li>Bias 越小，拟合能力越高（可能产生overfitting）；反之，拟合能力越低（可能产生underfitting）。</li></ul><p><strong>对于Variance：</strong></p><ul><li>Variance衡量模型的泛化的能力。</li><li>Variance越小，模型的泛化的能力越高；反之，模型的泛化的能力越低。</li></ul><blockquote><p>训练误差大，测试误差小 → Bias大</p><p>训练误差小，测试误差大→ Variance大 → 降VC维</p><p>训练误差大，测试误差大→ 升VC维</p></blockquote><h3 id="2-16-3-经验误差与泛化误差"><a href="#2-16-3-经验误差与泛化误差" class="headerlink" title="2.16.3 经验误差与泛化误差"></a>2.16.3 经验误差与泛化误差</h3><p>误差（error）：一般地，我们把学习器的实际预测输出与样本的真是输出之间的差异称为“误差”</p><p>经验误差（empirical error）：也叫训练误差（training error）。模型在训练集上的误差。 </p><p>泛化误差（generalization error）：模型在新样本集（测试集）上的误差称为“泛化误差”。</p><h3 id="2-16-4-图解欠拟合、过拟合"><a href="#2-16-4-图解欠拟合、过拟合" class="headerlink" title="2.16.4 图解欠拟合、过拟合"></a>2.16.4 图解欠拟合、过拟合</h3><p>根据不同的坐标方式，欠拟合与过拟合图解不同。</p><ol><li><strong>横轴为训练样本数量，纵轴为误差</strong></li></ol><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.3/1.png" alt=""></p><p>如上图所示，我们可以直观看出欠拟合和过拟合的区别：</p><p>模型欠拟合：在训练集以及测试集上同时具有较高的误差，此时模型的偏差较大；</p><p>模型过拟合：在训练集上具有较低的误差，在测试集上具有较高的误差，此时模型的方差较大。</p><p>模型正常：在训练集以及测试集上，同时具有相对较低的偏差以及方差。</p><ol start="2"><li><strong>横轴为模型复杂程度，纵轴为误差</strong></li></ol><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.3/2.png" alt=""></p><p>模型欠拟合：模型在点A处，在训练集以及测试集上同时具有较高的误差，此时模型的偏差较大。</p><p>模型过拟合：模型在点C处，在训练集上具有较低的误差，在测试集上具有较高的误差，此时模型的方差较大。 </p><p>模型正常：模型复杂程度控制在点B处为最优。</p><ol start="3"><li><strong>横轴为正则项系数，纵轴为误差</strong></li></ol><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.3/3.png" alt=""></p><p>模型欠拟合：模型在点C处，在训练集以及测试集上同时具有较高的误差，此时模型的偏差较大。</p><p>模型过拟合：模型在点A处，在训练集上具有较低的误差，在测试集上具有较高的误差，此时模型的方差较大。 它通常发生在模型过于复杂的情况下，如参数过多等，会使得模型的预测性能变弱，并且增加数据的波动性。虽然模型在训练时的效果可以表现的很完美，基本上记住了数据的全部特点，但这种模型在未知数据的表现能力会大减折扣，因为简单的模型泛化能力通常都是很弱的。</p><p>模型正常：模型复杂程度控制在点B处为最优。</p><h3 id="2-16-5-如何解决过拟合与欠拟合？"><a href="#2-16-5-如何解决过拟合与欠拟合？" class="headerlink" title="2.16.5 如何解决过拟合与欠拟合？"></a>2.16.5 如何解决过拟合与欠拟合？</h3><p><strong>如何解决欠拟合：</strong></p><ol><li>添加其他特征项。组合、泛化、相关性、上下文特征、平台特征等特征是特征添加的重要手段，有时候特征项不够会导致模型欠拟合。</li><li>添加多项式特征。例如将线性模型添加二次项或三次项使模型泛化能力更强。例如，FM模型、FFM模型，其实就是线性模型，增加了二阶多项式，保证了模型一定的拟合程度。</li><li>可以增加模型的复杂程度。</li><li>减小正则化系数。正则化的目的是用来防止过拟合的，但是现在模型出现了欠拟合，则需要减少正则化参数。</li></ol><p><strong>如何解决过拟合：</strong></p><ol><li>重新清洗数据，数据不纯会导致过拟合，此类情况需要重新清洗数据。 </li><li>增加训练样本数量。 </li><li>降低模型复杂程度。 </li><li>增大正则项系数。 </li><li>采用dropout方法，dropout方法，通俗的讲就是在训练的时候让神经元以一定的概率不工作。 </li><li>early stoping。 </li><li>减少迭代次数。 </li><li>增大学习率。 </li><li>添加噪声数据。 </li><li>树结构中，可以对树进行剪枝。 </li></ol><p>欠拟合和过拟合这些方法，需要根据实际问题，实际模型，进行选择。</p><h3 id="2-16-6-交叉验证的主要作用？"><a href="#2-16-6-交叉验证的主要作用？" class="headerlink" title="2.16.6 交叉验证的主要作用？"></a>2.16.6 交叉验证的主要作用？</h3><p>为了得到更为稳健可靠的模型，对模型的泛化误差进行评估，得到模型泛化误差的近似值。当有多个模型可以选择时，我们通常选择“泛化误差”最小的模型。 </p><p>交叉验证的方法有许多种，但是最常用的是：留一交叉验证、k折交叉验证</p><h3 id="2-16-7-k折交叉验证？"><a href="#2-16-7-k折交叉验证？" class="headerlink" title="2.16.7 k折交叉验证？"></a>2.16.7 k折交叉验证？</h3><ol><li>将含有N个样本的数据集，分成K份，每份含有N/K个样本。选择其中1份作为测试集，另外K-1份作为训练集，测试集就有K种情况。 </li><li>在每种情况中，用训练集训练模型，用测试集测试模型，计算模型的泛化误差。</li><li>交叉验证重复K次，每份验证一次，平均K次的结果或者使用其它结合方式，最终得到一个单一估测，得到模型最终的泛化误差。 </li><li>将K种情况下，模型的泛化误差取均值，得到模型最终的泛化误差。<br><strong>注</strong>：</li><li>一般2&lt;=K&lt;=10。 k折交叉验证的优势在于，同时重复运用随机产生的子样本进行训练和验证，每次的结果验证一次，10折交叉验证是最常用的。</li><li>训练集中样本数量要足够多，一般至少大于总样本数的50%。 </li><li>训练集和测试集必须从完整的数据集中均匀取样。均匀取样的目的是希望减少训练集、测试集与原数据集之间的偏差。当样本数量足够多时，通过随机取样，便可以实现均匀取样的效果。</li></ol><h3 id="2-16-8-混淆矩阵"><a href="#2-16-8-混淆矩阵" class="headerlink" title="2.16.8 混淆矩阵"></a>2.16.8 混淆矩阵</h3><p>第一种混淆矩阵:</p><table><thead><tr><th style="text-align:center">真实情况T or F</th><th style="text-align:left">预测为正例1，P</th><th style="text-align:left">预测为负例0，N</th></tr></thead><tbody><tr><td style="text-align:center">本来label标记为1，预测结果真为T、假为F</td><td style="text-align:left">TP(预测为1，实际为1)</td><td style="text-align:left">FN(预测为0，实际为1)</td></tr><tr><td style="text-align:center">本来label标记为0，预测结果真为T、假为F</td><td style="text-align:left">FP(预测为1，实际为0)</td><td style="text-align:left">TN(预测为0，实际也为0)</td></tr></tbody></table><p>第二种混淆矩阵:</p><table><thead><tr><th style="text-align:center">预测情况P or N</th><th style="text-align:left">实际label为1,预测对了为T</th><th style="text-align:left">实际label为0,预测对了为T</th></tr></thead><tbody><tr><td style="text-align:center">预测为正例1，P</td><td style="text-align:left">TP(预测为1，实际为1)</td><td style="text-align:left">FP(预测为1，实际为0)</td></tr><tr><td style="text-align:center">预测为负例0，N</td><td style="text-align:left">FN(预测为0，实际为1)</td><td style="text-align:left">TN(预测为0，实际也为0)</td></tr></tbody></table><h3 id="2-16-9-错误率及精度"><a href="#2-16-9-错误率及精度" class="headerlink" title="2.16.9 错误率及精度"></a>2.16.9 错误率及精度</h3><ol><li>错误率（Error Rate）：分类错误的样本数占样本总数的比例。</li><li>精度（accuracy）：分类正确的样本数占样本总数的比例。</li></ol><h3 id="2-16-10-查准率与查全率"><a href="#2-16-10-查准率与查全率" class="headerlink" title="2.16.10 查准率与查全率"></a>2.16.10 查准率与查全率</h3><p>将算法预测的结果分成四种情况： </p><ol><li>正确肯定（True Positive,TP）：预测为真，实际为真 </li><li>正确否定（True Negative,TN）：预测为假，实际为假 </li><li>错误肯定（False Positive,FP）：预测为真，实际为假 </li><li>错误否定（False Negative,FN）：预测为假，实际为真</li></ol><p>则： </p><p>查准率（Precision）=TP/（TP+FP）</p><p><strong>理解</strong>：预测出为阳性的样本中，正确的有多少。区别准确率（正确预测出的样本，包括正确预测为阳性、阴性，占总样本比例）。<br>例，在所有我们预测有恶性肿瘤的病人中，实际上有恶性肿瘤的病人的百分比，越高越好。 </p><p>查全率（Recall）=TP/（TP+FN）</p><p><strong>理解</strong>：正确预测为阳性的数量占总样本中阳性数量的比例。<br>例，在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。 </p><h3 id="2-16-11-ROC与AUC"><a href="#2-16-11-ROC与AUC" class="headerlink" title="2.16.11 ROC与AUC"></a>2.16.11 ROC与AUC</h3><p>ROC全称是“受试者工作特征”（Receiver Operating Characteristic）。</p><p>ROC曲线的面积就是AUC（Area Under the Curve）。</p><p>AUC用于衡量“二分类问题”机器学习算法性能（泛化能力）。</p><p>ROC曲线，通过将连续变量设定出多个不同的临界值，从而计算出一系列真正率和假正率，再以假正率为纵坐标、真正率为横坐标绘制成曲线，曲线下面积越大，诊断准确性越高。在ROC曲线上，最靠近坐标图左上方的点为假正率和真正率均较高的临界值。 </p><p>对于分类器，或者说分类算法，评价指标主要有precision，recall，F-score。下图是一个ROC曲线的示例。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.10/1.png" alt=""></p><p>ROC曲线的横坐标为false positive rate（FPR），纵坐标为true positive rate（TPR）。其中<br>TODO, TODO,<br>下面着重介绍ROC曲线图中的四个点和一条线。<br>第一个点，(0,1)，即FPR=0, TPR=1，这意味着FN（false negative）=0，并且FP（false positive）=0。意味着这是一个完美的分类器，它将所有的样本都正确分类。<br>第二个点，(1,0)，即FPR=1，TPR=0，意味着这是一个最糟糕的分类器，因为它成功避开了所有的正确答案。<br>第三个点，(0,0)，即FPR=TPR=0，即FP（false positive）=TP（true positive）=0，可以发现该分类器预测所有的样本都为负样本（negative）。<br>第四个点，（1,1），即FPR=TPR=1，分类器实际上预测所有的样本都为正样本。<br>经过以上分析，ROC曲线越接近左上角，该分类器的性能越好。</p><p>ROC曲线所覆盖的面积称为AUC（Area Under Curve），可以更直观的判断学习器的性能，AUC越大则性能越好。</p><h3 id="2-16-12-如何画ROC曲线？"><a href="#2-16-12-如何画ROC曲线？" class="headerlink" title="2.16.12 如何画ROC曲线？"></a>2.16.12 如何画ROC曲线？</h3><p><a href="http://blog.csdn.net/zdy0_2004/article/details/44948511" target="_blank" rel="noopener">http://blog.csdn.net/zdy0_2004/article/details/44948511</a><br>下图是一个示例，图中共有20个测试样本，“Class”一栏表示每个测试样本真正的标签（p表示正样本，n表示负样本），“Score”表示每个测试样本属于正样本的概率。</p><p>步骤：<br>1、假设已经得出一系列样本被划分为正类的概率，按照大小排序。<br>2、从高到低，依次将“Score”值作为阈值threshold，当测试样本属于正样本的概率大于或等于这个threshold时，我们认为它为正样本，否则为负样本。    举例来说，对于图中的第4个样本，其“Score”值为0.6，那么样本1，2，3，4都被认为是正样本，因为它们的“Score”值都大于等于0.6，而其他样本则都认为是负样本。<br>3、每次选取一个不同的threshold，得到一组FPR和TPR，即ROC曲线上的一点。以此共得到20组FPR和TPR的值。其中FPR和TPR简单理解如下：<br>4、根据3）中的每个坐标点点，画图。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.11/1.jpg" alt=""></p><h3 id="2-16-13-如何计算TPR，FPR？"><a href="#2-16-13-如何计算TPR，FPR？" class="headerlink" title="2.16.13 如何计算TPR，FPR？"></a>2.16.13 如何计算TPR，FPR？</h3><p>1、分析数据<br>y_true = [0, 0, 1, 1]；<br>scores = [0.1, 0.4, 0.35, 0.8]；<br>2、列表<br>样本    预测属于P的概率(score)    真实类别<br>y[0]    0.1    N<br>y[2]    0.35    P<br>y[1]    0.4    N<br>y[3]    0.8    P<br>3、将截断点依次取为score值，计算TPR和FPR。<br>当截断点为0.1时：<br>说明只要score&gt;=0.1，它的预测类别就是正例。 因为4个样本的score都大于等于0.1，所以，所有样本的预测类别都为P。<br>scores = [0.1, 0.4, 0.35, 0.8]；<br>y_true = [0, 0, 1, 1]；<br>y_pred = [1, 1, 1, 1]；<br>正例与反例信息如下：<br>真实值    预测值<br>​    正例    反例<br>正例    TP=2    FN=0<br>反例    FP=2    TN=0<br>由此可得：<br>TPR = TP/(TP+FN) = 1；<br>FPR = FP/(TN+FP) = 1；</p><p>当截断点为0.35时：<br>scores = [0.1, 0.4, 0.35, 0.8]<br>y_true = [0, 0, 1, 1]<br>y_pred = [0, 1, 1, 1]<br>正例与反例信息如下：<br>真实值    预测值<br>​    正例    反例<br>正例    TP=2    FN=0<br>反例    FP=1    TN=1<br>由此可得：<br>TPR = TP/(TP+FN) = 1；<br>FPR = FP/(TN+FP) = 0.5；</p><p>当截断点为0.4时：<br>scores = [0.1, 0.4, 0.35, 0.8]；<br>y_true = [0, 0, 1, 1]；<br>y_pred = [0, 1, 0, 1]；<br>正例与反例信息如下：<br>真实值    预测值<br>​    正例    反例<br>正例    TP=1    FN=1<br>反例    FP=1    TN=1<br>由此可得：<br>TPR = TP/(TP+FN) = 0.5；<br>FPR = FP/(TN+FP) = 0.5；</p><p>当截断点为0.8时：<br>scores = [0.1, 0.4, 0.35, 0.8]；<br>y_true = [0, 0, 1, 1]；<br>y_pred = [0, 0, 0, 1]；<br>正例与反例信息如下：<br>真实值    预测值<br>​    正例    反例<br>正例    TP=1    FN=1<br>反例    FP=0    TN=2<br>由此可得：<br>TPR = TP/(TP+FN) = 0.5；<br>FPR = FP/(TN+FP) = 0；<br>4、根据TPR、FPR值，以FPR为横轴，TPR为纵轴画图。</p><h3 id="2-16-14-如何计算Auc？"><a href="#2-16-14-如何计算Auc？" class="headerlink" title="2.16.14 如何计算Auc？"></a>2.16.14 如何计算Auc？</h3><p>a.将坐标点按照横着FPR排序<br>b.计算第i个坐标点和第i+1个坐标点的间距 dx；<br>c.获取第i（或者i+1）个坐标点的纵坐标y；<br>d.计算面积微元ds = ydx;<br>e.对面积微元进行累加，得到AUC。</p><h3 id="2-16-15-为什么使用Roc和Auc评价分类器？"><a href="#2-16-15-为什么使用Roc和Auc评价分类器？" class="headerlink" title="2.16.15 为什么使用Roc和Auc评价分类器？"></a>2.16.15 为什么使用Roc和Auc评价分类器？</h3><p>模型有很多评估方法，为什么还要使用ROC和AUC呢？<br>因为ROC曲线有个很好的特性：当测试集中的正负样本的分布变换的时候，ROC曲线能够保持不变。在实际的数据集中经常会出现样本类不平衡，即正负样本比例差距较大，而且测试数据中的正负样本也可能随着时间变化。</p><h3 id="2-16-17-直观理解AUC"><a href="#2-16-17-直观理解AUC" class="headerlink" title="2.16.17 直观理解AUC"></a>2.16.17 直观理解AUC</h3><p><a href="http://blog.csdn.net/cherrylvlei/article/details/52958720" target="_blank" rel="noopener">http://blog.csdn.net/cherrylvlei/article/details/52958720</a><br>AUC是ROC右下方的曲线面积。下图展现了三种AUC的值： </p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2.40.15/1.png" alt=""></p><p>AUC是衡量二分类模型优劣的一种评价指标，表示正例排在负例前面的概率。其他评价指标有精确度、准确率、召回率，而AUC比这三者更为常用。<br>因为一般在分类模型中，预测结果都是以概率的形式表现，如果要计算准确率，通常都会手动设置一个阈值来将对应的概率转化成类别，这个阈值也就很大程度上影响了模型准确率的计算。<br>我们不妨举一个极端的例子：一个二类分类问题一共10个样本，其中9个样本为正例，1个样本为负例，在全部判正的情况下准确率将高达90%，而这并不是我们希望的结果，尤其是在这个负例样本得分还是最高的情况下，模型的性能本应极差，从准确率上看却适得其反。而AUC能很好描述模型整体性能的高低。这种情况下，模型的AUC值将等于0（当然，通过取反可以解决小于50%的情况，不过这是另一回事了）。</p><h3 id="2-16-18-代价敏感错误率与代价曲线"><a href="#2-16-18-代价敏感错误率与代价曲线" class="headerlink" title="2.16.18 代价敏感错误率与代价曲线"></a>2.16.18 代价敏感错误率与代价曲线</h3><p><a href="http://blog.csdn.net/cug_lzt/article/details/78295140" target="_blank" rel="noopener">http://blog.csdn.net/cug_lzt/article/details/78295140</a></p><p>不同的错误会产生不同代价。<br>以二分法为例，设置代价矩阵如下：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-1.png" alt=""></p><p>当判断正确的时候，值为0，不正确的时候，分别为$Cost_{01}$和$Cost_{10}$ 。</p><p>$Cost_{10}$:表示实际为反例但预测成正例的代价。</p><p>$Cost_{01}$:表示实际为正例但是预测为反例的代价。</p><p><strong>代价敏感错误率</strong>：<br>$\frac{样本中由模型得到的错误值与代价乘积之和}{总样本}$</p><p>其数学表达式为：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-2.png" alt=""></p><p>$D^{+}、D^{-}$分别代表样例集 的正例子集和反例子集。</p><p>代价曲线：<br>在均等代价时，ROC曲线不能直接反应出模型的期望总体代价，而代价曲线可以。<br>代价曲线横轴为[0,1]的正例函数代价：</p><p>$P(+)Cost=\frac{p<em>Cost_{01}}{p</em>Cost_{01}+(1-p)*Cost_{10}}$</p><p>其中p是样本为正例的概率。</p><p>代价曲线纵轴维[0,1]的归一化代价：<br>$Cost_{norm}=\frac{FNR<em>p</em>Cost_{01}+FNR<em>(1-p)</em>Cost_{10}}{p<em>Cost_{01}+(1-p)</em>Cost_{10}}$</p><p>其中FPR为假正例率，FNR=1-TPR为假反利率。</p><p>注：ROC每个点，对应代价平面上一条线。</p><p>例如，ROC上(TPR,FPR),计算出FNR=1-TPR，在代价平面上绘制一条从(0,FPR)到(1,FNR)的线段，面积则为该条件下期望的总体代价。所有线段下界面积，所有条件下学习器的期望总体代价。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-3.png" alt=""></p><h3 id="2-16-19-模型有哪些比较检验方法"><a href="#2-16-19-模型有哪些比较检验方法" class="headerlink" title="2.16.19 模型有哪些比较检验方法"></a>2.16.19 模型有哪些比较检验方法</h3><p><a href="http://wenwen.sogou.com/z/q721171854.htm" target="_blank" rel="noopener">http://wenwen.sogou.com/z/q721171854.htm</a><br>正确性分析：模型稳定性分析，稳健性分析，收敛性分析，变化趋势分析，极值分析等。<br>有效性分析：误差分析，参数敏感性分析，模型对比检验等。<br>有用性分析：关键数据求解，极值点，拐点，变化趋势分析，用数据验证动态模拟等。<br>高效性分析：时空复杂度分析与现有进行比较等。</p><h3 id="2-16-20-偏差与方差"><a href="#2-16-20-偏差与方差" class="headerlink" title="2.16.20 偏差与方差"></a>2.16.20 偏差与方差</h3><p><a href="http://blog.csdn.net/zhihua_oba/article/details/78684257" target="_blank" rel="noopener">http://blog.csdn.net/zhihua_oba/article/details/78684257</a></p><p>方差公式为：</p><p>$S_{N}^{2}=\frac{1}{N}\sum_{i=1}^{N}(x_{i}-\bar{x})^{2}$</p><p>泛化误差可分解为偏差、方差与噪声之和，即<br>generalization error=bias+variance+noise。</p><p>噪声：描述了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题本身的难度。<br>假定期望噪声为零，则泛化误差可分解为偏差、方差之和，即<br>generalization error=bias+variance。 </p><p>偏差（bias）：描述的是预测值（估计值）的期望与真实值之间的差距。偏差越大，越偏离真实数据，如下图第二行所示。</p><p>方差（variance）：描述的是预测值的变化范围，离散程度，也就是离其期望值的距离。方差越大，数据的分布越分散，模型的稳定程度越差。如果模型在训练集上拟合效果比较优秀，但是在测试集上拟合效果比较差劣，则方差较大，说明模型的稳定程度较差，出现这种现象可能是由于模型对训练集过拟合造成的。 如下图右列所示。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-4.png" alt=""></p><p>简单的总结一下：<br>偏差大，会造成模型欠拟合；<br>方差大，会造成模型过拟合。</p><h3 id="2-16-21为什么使用标准差？"><a href="#2-16-21为什么使用标准差？" class="headerlink" title="2.16.21为什么使用标准差？"></a>2.16.21为什么使用标准差？</h3><p>标准差公式为：$S_{N}=\sqrt{\frac{1}{N}\sum_{i=1}^{N}(x_{i}-\bar{x})^{2}}$</p><p>样本标准差公式为：$S_{N}=\sqrt{\frac{1}{N-1}\sum_{i=1}^{N}(x_{i}-\bar{x})^{2}}$</p><p>与方差相比，使用标准差来表示数据点的离散程度有3个好处：<br>1、表示离散程度的数字与样本数据点的数量级一致，更适合对数据样本形成感性认知。</p><p>2、表示离散程度的数字单位与样本数据的单位一致，更方便做后续的分析运算。</p><p>3、在样本数据大致符合正态分布的情况下，标准差具有方便估算的特性：66.7%的数据点落在平均值前后1个标准差的范围内、95%的数据点落在平均值前后2个标准差的范围内，而99%的数据点将会落在平均值前后3个标准差的范围内。</p><h3 id="2-16-22点估计思想"><a href="#2-16-22点估计思想" class="headerlink" title="2.16.22点估计思想"></a>2.16.22点估计思想</h3><p>点估计：用实际样本的一个指标来估计总体的一个指标的一种估计方法。</p><p>点估计举例：比如说，我们想要了解中国人的平均身高，那么在大街上随便找了一个人，通过测量这个人的身高来估计中国人的平均身高水平；或者在淘宝上买东西的时候随便一次买到假货就说淘宝上都是假货等；这些都属于点估计。</p><p>点估计主要思想：在样本数据中得到一个指标，通过这个指标来估计总体指标；比如我们用样本均数来估计总体均数，样本均数就是我们要找到的指标。</p><h3 id="2-16-23-点估计优良性原则？"><a href="#2-16-23-点估计优良性原则？" class="headerlink" title="2.16.23 点估计优良性原则？"></a>2.16.23 点估计优良性原则？</h3><p>获取样本均数指标相对来说比较简单，但是并不是总体的所有指标都很容易在样本中得到，比如说总体的标准差用样本的哪个指标来估计呢？</p><p>优良性准则有两大类：一类是小样本准则，即在样本大小固定时的优良性准则；另一类是大样本准则，即在样本大小趋于无穷时的优良性准则。最重要的小样本优良性准则是无偏性及与此相关的一致最小方差无偏计。</p><p>样本中用来估计总体的指标要符合以下规则：</p><p>1.首先必须是无偏统计量。<br>所谓无偏性，即数学期望等于总体相应的统计量的样本估计量。</p><p>2.最小方差准则<br>针对总体样本的无偏估计量不唯一的情况，需选用其他准则，例如最小方差准则。如果一个统计量具有最小方差，也就是说所有的样本点与此统计量的离差平方和最小，则这个统计量被称为最小平方无偏估计量。<br>最大概率准则</p><p>4、缺一交叉准则<br>在非参数回归中好像用的是缺一交叉准则</p><p>要明白一个原则：计算样本的任何分布、均数、标准差都是没有任何意义的，如果样本的这种计算不能反映总体的某种特性。</p><h3 id="2-16-24-点估计、区间估计、中心极限定理之间的联系？"><a href="#2-16-24-点估计、区间估计、中心极限定理之间的联系？" class="headerlink" title="2.16.24 点估计、区间估计、中心极限定理之间的联系？"></a>2.16.24 点估计、区间估计、中心极限定理之间的联系？</h3><p><a href="https://www.zhihu.com/question/21871331#answer-4090464" target="_blank" rel="noopener">https://www.zhihu.com/question/21871331#answer-4090464</a><br>点估计：是用样本统计量来估计总体参数，因为样本统计量为数轴上某一点值，估计的结果也以一个点的数值表示，所以称为点估计。</p><p>区间估计：通过从总体中抽取的样本，根据一定的正确度与精确度的要求，构造出适当的区间，以作为总体的分布参数(或参数的函数)的真值所在范围的估计。<br>中心极限定理：设从均值为、方差为;（有限）的任意一个总体中抽取样本量为n的样本，当n充分大时，样本均值的抽样分布近似服从均值为、方差为的正态分布。</p><p>三者之间联系：</p><p>1、中心极限定理是推断统计的理论基础，推断统计包括参数估计和假设检验，其中参数估计包括点估计和区间估计，所以说，中心极限定理也是点估计和区间估计的理论基础。</p><p>2、参数估计有两种方法：点估计和区间估计，区间估计包含了点估计。</p><p>相同点：都是基于一个样本作出；</p><p>不同点：点估计只提供单一的估计值，而区间估计基于点估计还提供误差界限，给出了置信区间，受置信度的影响。</p><h3 id="2-16-25-类别不平衡产生原因？"><a href="#2-16-25-类别不平衡产生原因？" class="headerlink" title="2.16.25 类别不平衡产生原因？"></a>2.16.25 类别不平衡产生原因？</h3><p>类别不平衡（class-imbalance）是指分类任务中不同类别的训练样例数目差别很大的情况。 </p><p>产生原因：</p><p>通常分类学习算法都会假设不同类别的训练样例数目基本相同。如果不同类别的训练样例数目差别很大，则会影响学习结果，测试结果变差。例如二分类问题中有998个反例，正例有2个，那学习方法只需返回一个永远将新样本预测为反例的分类器，就能达到99.8%的精度；然而这样的分类器没有价值。</p><h3 id="2-16-26-常见的类别不平衡问题解决方法"><a href="#2-16-26-常见的类别不平衡问题解决方法" class="headerlink" title="2.16.26 常见的类别不平衡问题解决方法"></a>2.16.26 常见的类别不平衡问题解决方法</h3><p><a href="http://blog.csdn.net/u013829973/article/details/77675147" target="_blank" rel="noopener">http://blog.csdn.net/u013829973/article/details/77675147</a></p><p>  防止类别不平衡对学习造成的影响，在构建分类模型之前，需要对分类不平衡性问题进行处理。主要解决方法有：</p><p>1、扩大数据集</p><p>增加包含小类样本数据的数据，更多的数据能得到更多的分布信息。</p><p>2、对大类数据欠采样</p><p>减少大类数据样本个数，使与小样本个数接近。<br>缺点：欠采样操作时若随机丢弃大类样本，可能会丢失重要信息。<br>代表算法：EasyEnsemble。利用集成学习机制，将大类划分为若干个集合供不同的学习器使用。相当于对每个学习器都进行了欠采样，但在全局来看却不会丢失重要信息。</p><p>3、对小类数据过采样</p><p>过采样：对小类的数据样本进行采样来增加小类的数据样本个数。 </p><p>代表算法：SMOTE和ADASYN。 </p><p>SMOTE：通过对训练集中的小类数据进行插值来产生额外的小类样本数据。</p><p>新的少数类样本产生的策略：对每个少数类样本a，在a的最近邻中随机选一个样本b，然后在a、b之间的连线上随机选一点作为新合成的少数类样本。<br>ADASYN：根据学习难度的不同，对不同的少数类别的样本使用加权分布，对于难以学习的少数类的样本，产生更多的综合数据。 通过减少类不平衡引入的偏差和将分类决策边界自适应地转移到困难的样本两种手段，改善了数据分布。</p><p>4、使用新评价指标</p><p>如果当前评价指标不适用，则应寻找其他具有说服力的评价指标。比如准确度这个评价指标在类别不均衡的分类任务中并不适用，甚至进行误导。因此在类别不均衡分类任务中，需要使用更有说服力的评价指标来对分类器进行评价。</p><p>5、选择新算法</p><p>不同的算法适用于不同的任务与数据，应该使用不同的算法进行比较。</p><p>6、数据代价加权</p><p>例如当分类任务是识别小类，那么可以对分类器的小类样本数据增加权值，降低大类样本的权值，从而使得分类器将重点集中在小类样本身上。</p><p>7、转化问题思考角度</p><p>例如在分类问题时，把小类的样本作为异常点，将问题转化为异常点检测或变化趋势检测问题。 异常点检测即是对那些罕见事件进行识别。变化趋势检测区别于异常点检测在于其通过检测不寻常的变化趋势来识别。</p><p>8、将问题细化分析</p><p>对问题进行分析与挖掘，将问题划分成多个更小的问题，看这些小问题是否更容易解决。 </p><h2 id="2-17-决策树"><a href="#2-17-决策树" class="headerlink" title="2.17 决策树"></a>2.17 决策树</h2><h3 id="2-17-1-决策树的基本原理"><a href="#2-17-1-决策树的基本原理" class="headerlink" title="2.17.1 决策树的基本原理"></a>2.17.1 决策树的基本原理</h3><p>决策树是一种分而治之(Divide and Conquer)的决策过程。一个困难的预测问题, 通过树的分支节点, 被划分成两个或多个较为简单的子集，从结构上划分为不同的子问题。将依规则分割数据集的过程不断递归下去(Recursive Partitioning)。随着树的深度不断增加，分支节点的子集越来越小，所需要提的问题数也逐渐简化。当分支节点的深度或者问题的简单程度满足一定的停止规则(Stopping Rule)时, 该分支节点会停止劈分，此为自上而下的停止阈值(Cutoff Threshold)法；有些决策树也使用自下而上的剪枝(Pruning)法。</p><h3 id="2-17-2-决策树的三要素？"><a href="#2-17-2-决策树的三要素？" class="headerlink" title="2.17.2 决策树的三要素？"></a>2.17.2 决策树的三要素？</h3><p>一棵决策树的生成过程主要分为以下3个部分:  </p><p>特征选择：从训练数据中众多的特征中选择一个特征作为当前节点的分裂标准，如何选择特征有着很多不同量化评估标准标准，从而衍生出不同的决策树算法。 </p><p>决策树生成：根据选择的特征评估标准，从上至下递归地生成子节点，直到数据集不可分则停止决策树停止生长。树结构来说，递归结构是最容易理解的方式。 </p><p>剪枝：决策树容易过拟合，一般来需要剪枝，缩小树结构规模、缓解过拟合。剪枝技术有预剪枝和后剪枝两种。</p><h3 id="2-17-3-决策树学习基本算法"><a href="#2-17-3-决策树学习基本算法" class="headerlink" title="2.17.3 决策树学习基本算法"></a>2.17.3 决策树学习基本算法</h3><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-5.png" alt=""></p><h3 id="2-17-4-决策树算法优缺点"><a href="#2-17-4-决策树算法优缺点" class="headerlink" title="2.17.4 决策树算法优缺点"></a>2.17.4 决策树算法优缺点</h3><p>决策树算法的优点：  </p><p>1、理解和解释起来简单，决策树模型易想象。 </p><p>2、相比于其他算法需要大量数据集而已，决策树算法要求的数据集不大。</p><p>3、决策树算法的时间复杂度较小，为用于训练决策树的数据点的对数。</p><p>4、相比于其他算法智能分析一种类型变量，决策树算法可处理数字和数据的类别。</p><p>5、能够处理多输出的问题。 </p><p>6、对缺失值不敏感。</p><p>7、可以处理不相关特征数据。</p><p>8、效率高，决策树只需要一次构建，反复使用，每一次预测的最大计算次数不超过决策树的深度。</p><p>决策树算法的缺点： </p><p>1、对连续性的字段比较难预测。</p><p>2、容易出现过拟合。</p><p>3、当类别太多时，错误可能就会增加的比较快。</p><p>4、信息缺失时处理起来比较困难，忽略了数据集中属性之间的相关性。</p><p>5、在处理特征关联性比较强的数据时表现得不是太好。</p><p>6、对于各类别样本数量不一致的数据，在决策树当中,信息增益的结果偏向于那些具有更多数值的特征。</p><h3 id="2-17-5熵的概念以及理解"><a href="#2-17-5熵的概念以及理解" class="headerlink" title="2.17.5熵的概念以及理解"></a>2.17.5熵的概念以及理解</h3><p>熵：度量随机变量的不确定性。</p><p>定义：假设随机变量X的可能取值有$x_{1},x_{2},…,x_{n}$，对于每一个可能的取值$x_{i}$，其概率为$P(X=x_{i})=p_{i},i=1,2…,n$。随机变量的熵为：</p><p>$H(X)=-\sum_{i=1}^{n}p_{i}log_{2}p_{i}$</p><p>对于样本集合 ，假设样本有k个类别，每个类别的概率为$\frac{|C_{k}|}{|D|}$,其中 ${|C_{k}|}{|D|}$为类别为k的样本个数,$|D|$为样本总数。样本集合D的熵为：<br>$H(D)=-\sum_{k=1}^{k}\frac{|C_{k}|}{|D|}log_{2}\frac{|C_{k}|}{|D|}$</p><h3 id="2-17-6-信息增益的理解"><a href="#2-17-6-信息增益的理解" class="headerlink" title="2.17.6 信息增益的理解"></a>2.17.6 信息增益的理解</h3><p>定义：以某特征划分数据集前后的熵的差值。<br>熵可以表示样本集合的不确定性，熵越大，样本的不确定性就越大。因此可以使用划分前后集合熵的差值来衡量使用当前特征对于样本集合D划分效果的好坏。<br>假设划分前样本集合D的熵为H(D)。使用某个特征A划分数据集D，计算划分后的数据子集的熵为H(D|A)。</p><p>则信息增益为：</p><p>$g(D,A)=H(D)-H(D|A)$</p><p>注：在决策树构建的过程中我们总是希望集合往最快到达纯度更高的子集合方向发展，因此我们总是选择使得信息增益最大的特征来划分当前数据集D。</p><p>思想：计算所有特征划分数据集D，得到多个特征划分数据集D的信息增益，从这些信息增益中选择最大的，因而当前结点的划分特征便是使信息增益最大的划分所使用的特征。</p><p>另外这里提一下信息增益比相关知识：</p><p>信息增益比=惩罚参数X信息增益。</p><p>信息增益比本质：在信息增益的基础之上乘上一个惩罚参数。特征个数较多时，惩罚参数较小；特征个数较少时，惩罚参数较大。</p><p>惩罚参数：数据集D以特征A作为随机变量的熵的倒数。</p><h3 id="2-17-7-剪枝处理的作用及策略？"><a href="#2-17-7-剪枝处理的作用及策略？" class="headerlink" title="2.17.7 剪枝处理的作用及策略？"></a>2.17.7 剪枝处理的作用及策略？</h3><p>剪枝处理是决策树学习算法用来解决过拟合的一种办法。</p><p>在决策树算法中，为了尽可能正确分类训练样本， 节点划分过程不断重复， 有时候会造成决策树分支过多，以至于将训练样本集自身特点当作泛化特点， 而导致过拟合。 因此可以采用剪枝处理来去掉一些分支来降低过拟合的风险。 </p><p>剪枝的基本策略有预剪枝(prepruning)和后剪枝(postprunint)。</p><p>预剪枝：在决策树生成过程中，在每个节点划分前先估计其划分后的泛化性能， 如果不能提升，则停止划分，将当前节点标记为叶结点。 </p><p>后剪枝：生成决策树以后，再自下而上对非叶结点进行考察， 若将此节点标记为叶结点可以带来泛化性能提升，则修改之。</p><h2 id="2-18-支持向量机"><a href="#2-18-支持向量机" class="headerlink" title="2.18 支持向量机"></a>2.18 支持向量机</h2><h3 id="2-18-1-什么是支持向量机"><a href="#2-18-1-什么是支持向量机" class="headerlink" title="2.18.1 什么是支持向量机"></a>2.18.1 什么是支持向量机</h3><p>SVM - Support Vector Machine。支持向量机，其含义是通过支持向量运算的分类器。其中“机”的意思是机器，可以理解为分类器。</p><p>什么是支持向量呢？在求解的过程中，会发现只根据部分数据就可以确定分类器，这些数据称为支持向量。</p><p>见下图，在一个二维环境中，其中点R，S，G点和其它靠近中间黑线的点可以看作为支持向量，它们可以决定分类器，也就是黑线的具体参数。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-6.png" alt=""></p><h3 id="2-18-2-支持向量机解决的问题？"><a href="#2-18-2-支持向量机解决的问题？" class="headerlink" title="2.18.2 支持向量机解决的问题？"></a>2.18.2 支持向量机解决的问题？</h3><p><a href="https://www.cnblogs.com/steven-yang/p/5658362.html" target="_blank" rel="noopener">https://www.cnblogs.com/steven-yang/p/5658362.html</a><br>解决的问题：</p><p>线性分类</p><p>在训练数据中，每个数据都有n个的属性和一个二类类别标志，我们可以认为这些数据在一个n维空间里。我们的目标是找到一个n-1维的超平面（hyperplane），这个超平面可以将数据分成两部分，每部分数据都属于同一个类别。</p><p>其实这样的超平面有很多，我们要找到一个最佳的。因此，增加一个约束条件：这个超平面到每边最近数据点的距离是最大的。也成为最大间隔超平面（maximum-margin hyperplane）。这个分类器也成为最大间隔分类器（maximum-margin classifier）。</p><p>支持向量机是一个二类分类器。</p><p>非线性分类</p><p>SVM的一个优势是支持非线性分类。它结合使用拉格朗日乘子法和KKT条件，以及核函数可以产生非线性分类器。</p><p>分类器1 - 线性分类器</p><p>是一个线性函数，可以用于线性分类。一个优势是不需要样本数据。</p><p>classifier 1:<br>f(x)=xwT+b(1)<br>(1)f(x)=xwT+b</p><p>ww 和 bb 是训练数据后产生的值。</p><p>分类器2 - 非线性分类器</p><p>支持线性分类和非线性分类。需要部分样本数据（支持向量），也就是$\alpha_i \ne 0$ 的数据。</p><p>$$<br>w=∑ni=1αiyixiw=∑i=1nαiyixi<br>$$</p><p>classifier 2:</p><p>f(x)=∑ni=1αiyiK(xi,x)+bherexi : training data iyi : label value of training data iαi : Lagrange multiplier of training data iK(x1,x2)=exp(−∥x1−x2∥22σ2) : kernel function(2)<br>(2)f(x)=∑i=1nαiyiK(xi,x)+bherexi : training data iyi : label value of training data iαi : Lagrange multiplier of training data iK(x1,x2)=exp(−‖x1−x2‖22σ2) : kernel function</p><p>αα, σσ 和 bb 是训练数据后产生的值。<br>可以通过调节σσ来匹配维度的大小，σσ越大，维度越低。</p><h3 id="2-18-3-核函数作用？"><a href="#2-18-3-核函数作用？" class="headerlink" title="2.18.3 核函数作用？"></a>2.18.3 核函数作用？</h3><p>核函数目的：把原坐标系里线性不可分的数据用Kernel投影到另一个空间，尽量使得数据在新的空间里线性可分。</p><p>核函数方法的广泛应用,与其特点是分不开的：</p><p>1）核函数的引入避免了“维数灾难”,大大减小了计算量。而输入空间的维数n对核函数矩阵无影响，因此，核函数方法可以有效处理高维输入。</p><p>2）无需知道非线性变换函数Φ的形式和参数.</p><p>3）核函数的形式和参数的变化会隐式地改变从输入空间到特征空间的映射，进而对特征空间的性质产生影响，最终改变各种核函数方法的性能。</p><p>4）核函数方法可以和不同的算法相结合，形成多种不同的基于核函数技术的方法，且这两部分的设计可以单独进行，并可以为不同的应用选择不同的核函数和算法。</p><h3 id="2-18-4-对偶问题"><a href="#2-18-4-对偶问题" class="headerlink" title="2.18.4 对偶问题"></a>2.18.4 对偶问题</h3><h3 id="2-18-5-理解支持向量回归"><a href="#2-18-5-理解支持向量回归" class="headerlink" title="2.18.5 理解支持向量回归"></a>2.18.5 理解支持向量回归</h3><p><a href="http://blog.csdn.net/liyaohhh/article/details/51077082" target="_blank" rel="noopener">http://blog.csdn.net/liyaohhh/article/details/51077082</a></p><h3 id="2-18-6-理解SVM（核函数）"><a href="#2-18-6-理解SVM（核函数）" class="headerlink" title="2.18.6 理解SVM（核函数）"></a>2.18.6 理解SVM（核函数）</h3><p><a href="http://blog.csdn.net/Love_wanling/article/details/69390047" target="_blank" rel="noopener">http://blog.csdn.net/Love_wanling/article/details/69390047</a></p><h3 id="2-18-7-常见的核函数有哪些？"><a href="#2-18-7-常见的核函数有哪些？" class="headerlink" title="2.18.7 常见的核函数有哪些？"></a>2.18.7 常见的核函数有哪些？</h3><p><a href="http://blog.csdn.net/Love_wanling/article/details/69390047" target="_blank" rel="noopener">http://blog.csdn.net/Love_wanling/article/details/69390047</a></p><p>本文将遇到的核函数进行收集整理，分享给大家。<br><a href="http://blog.csdn.net/wsj998689aa/article/details/47027365" target="_blank" rel="noopener">http://blog.csdn.net/wsj998689aa/article/details/47027365</a></p><p>1.Linear Kernel<br>线性核是最简单的核函数，核函数的数学公式如下：</p><p>$k(x,y)=xy$</p><p>如果我们将线性核函数应用在KPCA中，我们会发现，推导之后和原始PCA算法一模一样，很多童鞋借此说“kernel is shit！！！”，这是不对的，这只是线性核函数偶尔会出现等价的形式罢了。</p><p>2.Polynomial Kernel</p><p>多项式核实一种非标准核函数，它非常适合于正交归一化后的数据，其具体形式如下：</p><p>$k(x,y)=(ax^{t}y+c)^{d}$</p><p>这个核函数是比较好用的，就是参数比较多，但是还算稳定。</p><p>3.Gaussian Kernel</p><p>这里说一种经典的鲁棒径向基核，即高斯核函数，鲁棒径向基核对于数据中的噪音有着较好的抗干扰能力，其参数决定了函数作用范围，超过了这个范围，数据的作用就“基本消失”。高斯核函数是这一族核函数的优秀代表，也是必须尝试的核函数，其数学形式如下：</p><p>$k(x,y)=exp(-\frac{\left | x-y \right |^{2}}{2\sigma ^{2}})$</p><p>虽然被广泛使用，但是这个核函数的性能对参数十分敏感，以至于有一大把的文献专门对这种核函数展开研究，同样，高斯核函数也有了很多的变种，如指数核，拉普拉斯核等。</p><p>4.Exponential Kernel</p><p>指数核函数就是高斯核函数的变种，它仅仅是将向量之间的L2距离调整为L1距离，这样改动会对参数的依赖性降低，但是适用范围相对狭窄。其数学形式如下：</p><p>$k(x,y)=exp(-\frac{\left | x-y \right |}{2\sigma ^{2}})$</p><p>5.Laplacian Kernel</p><p>拉普拉斯核完全等价于指数核，唯一的区别在于前者对参数的敏感性降低，也是一种径向基核函数。</p><p>$k(x,y)=exp(-\frac{\left | x-y \right |}{\sigma })$</p><p>6.ANOVA Kernel</p><p>ANOVA 核也属于径向基核函数一族，其适用于多维回归问题，数学形式如下：</p><p>$k(x,y)=exp(-\sigma(x^{k}-y^{k})^{2})^{d}$</p><p>7.Sigmoid Kernel</p><p>Sigmoid 核来源于神经网络，现在已经大量应用于深度学习，是当今机器学习的宠儿，它是S型的，所以被用作于“激活函数”。关于这个函数的性质可以说好几篇文献，大家可以随便找一篇深度学习的文章看看。</p><p>$k(x,y)=tanh(ax^{t}y+c)$</p><p>8.Rational Quadratic Kernel<br>二次有理核完完全全是作为高斯核的替代品出现，如果你觉得高斯核函数很耗时，那么不妨尝试一下这个核函数，顺便说一下，这个核函数作用域虽广，但是对参数十分敏感，慎用！！！！</p><p>$k(x,y)=1-\frac{\left | x-y \right |^{2}}{\left | x-y \right |^{2}+c}$</p><h3 id="2-18-8-软间隔与正则化"><a href="#2-18-8-软间隔与正则化" class="headerlink" title="2.18.8 软间隔与正则化"></a>2.18.8 软间隔与正则化</h3><h3 id="2-18-9-SVM主要特点及缺点？"><a href="#2-18-9-SVM主要特点及缺点？" class="headerlink" title="2.18.9 SVM主要特点及缺点？"></a>2.18.9 SVM主要特点及缺点？</h3><p><a href="http://www.elecfans.com/emb/fpga/20171118582139_2.html" target="_blank" rel="noopener">http://www.elecfans.com/emb/fpga/20171118582139_2.html</a></p><p>3.3.2.1 SVM有如下主要几个特点：</p><p>(1)非线性映射是SVM方法的理论基础,SVM利用内积核函数代替向高维空间的非线性映射；<br>(2)对特征空间划分的最优超平面是SVM的目标,最大化分类边际的思想是SVM方法的核心；<br>(3)支持向量是SVM的训练结果,在SVM分类决策中起决定作用的是支持向量。<br>(4)SVM 是一种有坚实理论基础的新颖的小样本学习方法。它基本上不涉及概率测度及大数定律等,因此不同于现有的统计方法。从本质上看,它避开了从归纳到演绎的传统过程,实现了高效的从训练样本到预报样本的“转导推理”,大大简化了通常的分类和回归等问题。<br>(5)SVM 的最终决策函数只由少数的支持向量所确定,计算的复杂性取决于支持向量的数目,而不是样本空间的维数,这在某种意义上避免了“维数灾难”。<br>(6)少数支持向量决定了最终结果,这不但可以帮助我们抓住关键样本、“剔除”大量冗余样本,而且注定了该方法不但算法简单,而且具有较好的“鲁棒”性。这种“鲁棒”性主要体现在:<br>①增、删非支持向量样本对模型没有影响;<br>②支持向量样本集具有一定的鲁棒性;<br>③有些成功的应用中,SVM 方法对核的选取不敏感</p><p>3.3.2.2 SVM的两个不足：<br>(1) SVM算法对大规模训练样本难以实施<br>由 于SVM是借助二次规划来求解支持向量，而求解二次规划将涉及m阶矩阵的计算（m为样本的个数），当m数目很大时该矩阵的存储和计算将耗费大量的机器内存 和运算时间。针对以上问题的主要改进有有J.Platt的SMO算法、T.Joachims的SVM、C.J.C.Burges等的PCGC、张学工的 CSVM以及O.L.Mangasarian等的SOR算法。<br>(2) 用SVM解决多分类问题存在困难<br>经典的支持向量机算法只给出了二类分类的算法，而在数据挖掘的实际应用中，一般要解决多类的分类问题。可以通过多个二类支持向量机的组合来解决。主要有一对多组合模式、一对一组合模式和SVM决策树；再就是通过构造多个分类器的组合来解决。主要原理是克服SVM固有的缺点，结合其他算法的优势，解决多类问题的分类精度。如：与粗集理论结合，形成一种优势互补的多类问题的组合分类器。</p><h2 id="2-19-贝叶斯"><a href="#2-19-贝叶斯" class="headerlink" title="2.19 贝叶斯"></a>2.19 贝叶斯</h2><h3 id="2-19-1-图解极大似然估计"><a href="#2-19-1-图解极大似然估计" class="headerlink" title="2.19.1 图解极大似然估计"></a>2.19.1 图解极大似然估计</h3><p>极大似然估计 <a href="http://blog.csdn.net/zengxiantao1994/article/details/72787849" target="_blank" rel="noopener">http://blog.csdn.net/zengxiantao1994/article/details/72787849</a></p><p>极大似然估计的原理，用一张图片来说明，如下图所示：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-7.png" alt=""></p><p>总结起来，最大似然估计的目的就是：利用已知的样本结果，反推最有可能（最大概率）导致这样结果的参数值。</p><p>原理：极大似然估计是建立在极大似然原理的基础上的一个统计方法，是概率论在统计学中的应用。极大似然估计提供了一种给定观察数据来评估模型参数的方法，即：“模型已定，参数未知”。通过若干次试验，观察其结果，利用试验结果得到某个参数值能够使样本出现的概率为最大，则称为极大似然估计。</p><p>由于样本集中的样本都是独立同分布，可以只考虑一类样本集D，来估计参数向量θ。记已知的样本集为：</p><p>$D=x_{1},x_{2},…,x_{n}$</p><p>似然函数（linkehood function）：联合概率密度函数$P(D|\theta )$称为相对于$x_{1},x_{2},…,x_{n}$的θ的似然函数。</p><p>$l(\theta )=p(D|\theta ) =p(x_{1},x_{2},…,x_{N}|\theta )=\prod_{i=1}^{N}p(x_{i}|\theta )$</p><p>如果$\hat{\theta}$是参数空间中能使似然函数$l(\theta)$最大的θ值，则$\hat{\theta}$应该是“最可能”的参数值，那么$\hat{\theta}$就是θ的极大似然估计量。它是样本集的函数，记作：</p><p>$\hat{\theta}=d(x_{1},x_{2},…,x_{N})=d(D)$</p><p>$\hat{\theta}(x_{1},x_{2},…,x_{N})$称为极大似然函数估计值。</p><h3 id="2-19-2-朴素贝叶斯分类器和一般的贝叶斯分类器有什么区别？"><a href="#2-19-2-朴素贝叶斯分类器和一般的贝叶斯分类器有什么区别？" class="headerlink" title="2.19.2 朴素贝叶斯分类器和一般的贝叶斯分类器有什么区别？"></a>2.19.2 朴素贝叶斯分类器和一般的贝叶斯分类器有什么区别？</h3><h3 id="2-19-3-朴素与半朴素贝叶斯分类器"><a href="#2-19-3-朴素与半朴素贝叶斯分类器" class="headerlink" title="2.19.3 朴素与半朴素贝叶斯分类器"></a>2.19.3 朴素与半朴素贝叶斯分类器</h3><h3 id="2-19-4-贝叶斯网三种典型结构"><a href="#2-19-4-贝叶斯网三种典型结构" class="headerlink" title="2.19.4 贝叶斯网三种典型结构"></a>2.19.4 贝叶斯网三种典型结构</h3><h3 id="2-19-5-什么是贝叶斯错误率"><a href="#2-19-5-什么是贝叶斯错误率" class="headerlink" title="2.19.5 什么是贝叶斯错误率"></a>2.19.5 什么是贝叶斯错误率</h3><h3 id="2-19-6-什么是贝叶斯最优错误率"><a href="#2-19-6-什么是贝叶斯最优错误率" class="headerlink" title="2.19.6 什么是贝叶斯最优错误率"></a>2.19.6 什么是贝叶斯最优错误率</h3><h2 id="2-20-EM算法解决问题及实现流程"><a href="#2-20-EM算法解决问题及实现流程" class="headerlink" title="2.20 EM算法解决问题及实现流程"></a>2.20 EM算法解决问题及实现流程</h2><p>1.EM算法要解决的问题</p><p>　我们经常会从样本观察数据中，找出样本的模型参数。 最常用的方法就是极大化模型分布的对数似然函数。</p><p>但是在一些情况下，我们得到的观察数据有未观察到的隐含数据，此时我们未知的有隐含数据和模型参数，因而无法直接用极大化对数似然函数得到模型分布的参数。怎么办呢？这就是EM算法可以派上用场的地方了。</p><p>EM算法解决这个的思路是使用启发式的迭代方法，既然我们无法直接求出模型分布参数，那么我们可以先猜想隐含数据（EM算法的E步），接着基于观察数据和猜测的隐含数据一起来极大化对数似然，求解我们的模型参数（EM算法的M步)。由于我们之前的隐藏数据是猜测的，所以此时得到的模型参数一般还不是我们想要的结果。不过没关系，我们基于当前得到的模型参数，继续猜测隐含数据（EM算法的E步），然后继续极大化对数似然，求解我们的模型参数（EM算法的M步)。以此类推，不断的迭代下去，直到模型分布参数基本无变化，算法收敛，找到合适的模型参数。</p><p>从上面的描述可以看出，EM算法是迭代求解最大值的算法，同时算法在每一次迭代时分为两步，E步和M步。一轮轮迭代更新隐含数据和模型分布参数，直到收敛，即得到我们需要的模型参数。</p><p>一个最直观了解EM算法思路的是K-Means算法，见之前写的K-Means聚类算法原理。</p><p>在K-Means聚类时，每个聚类簇的质心是隐含数据。我们会假设KK个初始化质心，即EM算法的E步；然后计算得到每个样本最近的质心，并把样本聚类到最近的这个质心，即EM算法的M步。重复这个E步和M步，直到质心不再变化为止，这样就完成了K-Means聚类。</p><p>当然，K-Means算法是比较简单的，实际中的问题往往没有这么简单。上面对EM算法的描述还很粗糙，我们需要用数学的语言精准描述。</p><p>2.EM算法流程</p><p>现在我们总结下EM算法的流程。</p><p>输入：观察数据x=(x(1),x(2),…x(m))x=(x(1),x(2),…x(m))，联合分布p(x,z|θ)p(x,z|θ), 条件分布p(z|x,θ)p(z|x,θ), 最大迭代次数JJ。</p><p>1) 随机初始化模型参数θθ的初值θ0θ0。</p><p>2） for j  from 1 to J开始EM算法迭代：</p><p>a) E步：计算联合分布的条件概率期望：<br>Qi(z(i))=P(z(i)|x(i)，θj))Qi(z(i))=P(z(i)|x(i)，θj))<br>L(θ,θj)=∑i=1m∑z(i)Qi(z(i))logP(x(i)，z(i)|θ)L(θ,θj)=∑i=1m∑z(i)Qi(z(i))logP(x(i)，z(i)|θ)</p><p>b) M步：极大化L(θ,θj)L(θ,θj),得到θj+1θj+1:<br>θj+1=argmaxθL(θ,θj)θj+1=argmaxθL(θ,θj)</p><p>c) 如果θj+1θj+1已收敛，则算法结束。否则继续回到步骤a)进行E步迭代。</p><p>输出：模型参数θθ。</p><h2 id="2-21-降维和聚类"><a href="#2-21-降维和聚类" class="headerlink" title="2.21 降维和聚类"></a>2.21 降维和聚类</h2><h3 id="2-21-1-为什么会产生维数灾难？"><a href="#2-21-1-为什么会产生维数灾难？" class="headerlink" title="2.21.1 为什么会产生维数灾难？"></a>2.21.1 为什么会产生维数灾难？</h3><p><a href="http://blog.csdn.net/chenjianbo88/article/details/52382943" target="_blank" rel="noopener">http://blog.csdn.net/chenjianbo88/article/details/52382943</a></p><p>假设地球上猫和狗的数量是无限的。由于有限的时间和计算能力，我们仅仅选取了10张照片作为训练样本。我们的目的是基于这10张照片来训练一个线性分类器，使得这个线性分类器可以对剩余的猫或狗的照片进行正确分类。我们从只用一个特征来辨别猫和狗开始：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-8.png" alt=""></p><p>从图2可以看到，如果仅仅只有一个特征的话，猫和狗几乎是均匀分布在这条线段上，很难将10张照片线性分类。那么，增加一个特征后的情况会怎么样：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-9.png" alt=""></p><p>增加一个特征后，我们发现仍然无法找到一条直线将猫和狗分开。所以，考虑需要再增加一个特征：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-10.png" alt=""></p><p>此时，我们终于找到了一个平面将猫和狗分开。需要注意的是，只有一个特征时，假设特征空间是长度为5的线段，则样本密度是10/5=2。有两个特征时，特征空间大小是5<em>5=25，样本密度是10/25=0.4。有三个特征时，特征空间大小是5</em>5*5=125，样本密度是10/125=0.08。如果继续增加特征数量，样本密度会更加稀疏，也就更容易找到一个超平面将训练样本分开。因为随着特征数量趋向于无限大，样本密度非常稀疏，训练样本被分错的可能性趋向于零。当我们将高维空间的分类结果映射到低维空间时，一个严重的问题出现了：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-11.png" alt=""></p><p>从图5可以看到将三维特征空间映射到二维特征空间后的结果。尽管在高维特征空间时训练样本线性可分，但是映射到低维空间后，结果正好相反。事实上，增加特征数量使得高维空间线性可分，相当于在低维空间内训练一个复杂的非线性分类器。不过，这个非线性分类器太过“聪明”，仅仅学到了一些特例。如果将其用来辨别那些未曾出现在训练样本中的测试样本时，通常结果不太理想。这其实就是我们在机器学习中学过的过拟合问题。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-12.png" alt=""></p><p>尽管图6所示的只采用2个特征的线性分类器分错了一些训练样本，准确率似乎没有图4的高，但是，采用2个特征的线性分类器的泛化能力比采用3个特征的线性分类器要强。因为，采用2个特征的线性分类器学习到的不只是特例，而是一个整体趋势，对于那些未曾出现过的样本也可以比较好地辨别开来。换句话说，通过减少特征数量，可以避免出现过拟合问题，从而避免“维数灾难”。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-13.png" alt=""></p><p>图7从另一个角度诠释了“维数灾难”。假设只有一个特征时，特征的值域是0到1，每一只猫和狗的特征值都是唯一的。如果我们希望训练样本覆盖特征值值域的20%，那么就需要猫和狗总数的20%。我们增加一个特征后，为了继续覆盖特征值值域的20%就需要猫和狗总数的45%(0.45^2=0.2)。继续增加一个特征后，需要猫和狗总数的58%(0.58^3=0.2)。随着特征数量的增加，为了覆盖特征值值域的20%，就需要更多的训练样本。如果没有足够的训练样本，就可能会出现过拟合问题。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-14.png" alt=""></p><p>通过上述例子，我们可以看到特征数量越多，训练样本就会越稀疏，分类器的参数估计就会越不准确，更加容易出现过拟合问题。“维数灾难”的另一个影响是训练样本的稀疏性并不是均匀分布的。处于中心位置的训练样本比四周的训练样本更加稀疏。</p><p>假设有一个二维特征空间，如图8所示的矩形，在矩形内部有一个内切的圆形。由于越接近圆心的样本越稀疏，因此，相比于圆形内的样本，那些位于矩形四角的样本更加难以分类。那么，随着特征数量的增加，圆形的面积会不会变化呢？这里我们假设超立方体(hypercube)的边长d=1，那么计算半径为0.5的超球面(hypersphere)的体积(volume)的公式为：<br>$V(d)=\frac{\pi ^{\frac{d}{2}}}{\Gamma (\frac{d}{2}+1)}0.5^{d}$</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-15.png" alt=""></p><p>从图9可以看出随着特征数量的增加，超球面的体积逐渐减小直至趋向于零，然而超立方体的体积却不变。这个结果有点出乎意料，但部分说明了分类问题中的“维数灾难”：在高维特征空间中，大多数的训练样本位于超立方体的角落。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-16.png" alt=""></p><p>　图10显示了不同维度下，样本的分布情况。在8维特征空间中，共有2^8=256个角落，而98%的样本分布在这些角落。随着维度的不断增加，公式2将趋向于0，其中dist_max和dist_min分别表示样本到中心的最大与最小距离。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-17.png" alt=""></p><p>因此，在高维特征空间中对于样本距离的度量失去意义。由于分类器基本都依赖于如Euclidean距离，Manhattan距离等，所以在特征数量过大时，分类器的性能就会出现下降。</p><p>所以，我们如何避免“维数灾难”？图1显示了分类器的性能随着特征个数的变化不断增加，过了某一个值后，性能不升反降。这里的某一个值到底是多少呢？目前，还没有方法来确定分类问题中的这个阈值是多少，这依赖于训练样本的数量，决策边界的复杂性以及分类器的类型。理论上，如果训练样本的数量无限大，那么就不会存在“维数灾难”，我们可以采用任意多的特征来训练分类器。事实上，训练样本的数量是有限的，所以不应该采用过多的特征。此外，那些需要精确的非线性决策边界的分类器，比如neural network，knn，decision trees等的泛化能力往往并不是很好，更容易发生过拟合问题。因此，在设计这些分类器时应当慎重考虑特征的数量。相反，那些泛化能力较好的分类器，比如naive Bayesian，linear classifier等，可以适当增加特征的数量。</p><p>如果给定了N个特征，我们该如何从中选出M个最优的特征？最简单粗暴的方法是尝试所有特征的组合，从中挑出M个最优的特征。事实上，这是非常花时间的，或者说不可行的。其实，已经有许多特征选择算法(feature selection algorithms)来帮助我们确定特征的数量以及选择特征。此外，还有许多特征抽取方法(feature extraction methods)，比如PCA等。交叉验证(cross-validation)也常常被用于检测与避免过拟合问题。</p><p>参考资料：<br>[1] Vincent Spruyt. The Curse of Dimensionality in classification. Computer vision for dummies. 2014. [Link]</p><h3 id="2-21-2-怎样避免维数灾难"><a href="#2-21-2-怎样避免维数灾难" class="headerlink" title="2.21.2 怎样避免维数灾难"></a>2.21.2 怎样避免维数灾难</h3><p>解决维度灾难问题：</p><p>主成分分析法PCA，线性判别法LDA</p><p>奇异值分解简化数据、拉普拉斯特征映射</p><p>Lassio缩减系数法、小波分析法、</p><h3 id="2-21-3-聚类和降维有什么区别与联系？"><a href="#2-21-3-聚类和降维有什么区别与联系？" class="headerlink" title="2.21.3 聚类和降维有什么区别与联系？"></a>2.21.3 聚类和降维有什么区别与联系？</h3><p>聚类用于找寻数据内在的分布结构,既可以作为一个单独的过程，比如异常检测等等。也可作为分类等其他学习任务的前驱过程。聚类是标准的无监督学习。</p><p>1) 在一些推荐系统中需确定新用户的类型，但定义“用户类型”却可能不太容易,此时往往可先对原油的用户数据进行聚类,根据聚类结果将每个簇定义为一个类,然后再基于这些类训练分类模型,用于判别新用户的类型。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-18.jpg" alt=""></p><p>2）而降维则是为了缓解维数灾难的一个重要方法，就是通过某种数学变换将原始高维属性空间转变为一个低维“子空间”。其基于的假设就是，虽然人们平时观测到的数据样本虽然是高维的，但是实际上真正与学习任务相关的是个低维度的分布。从而通过最主要的几个特征维度就可以实现对数据的描述，对于后续的分类很有帮助。比如对于Kaggle上的泰坦尼克号生还问题。通过给定一个人的许多特征如年龄、姓名、性别、票价等，来判断其是否能在海难中生还。这就需要首先进行特征筛选，从而能够找出主要的特征，让学习到的模型有更好的泛化性。</p><p>聚类和降维都可以作为分类等问题的预处理步骤。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-19.jpg" alt=""></p><p>但是他们虽然都能实现对数据的约减。但是二者适用的对象不同，聚类针对的是数据点，而降维则是对于数据的特征。另外它们着很多种实现方法。聚类中常用的有K-means、层次聚类、基于密度的聚类等；降维中常用的则PCA、Isomap、LLE等。</p><h3 id="2-21-4-四种聚类方法之比较"><a href="#2-21-4-四种聚类方法之比较" class="headerlink" title="2.21.4 四种聚类方法之比较"></a>2.21.4 四种聚类方法之比较</h3><p><a href="http://www.cnblogs.com/William_Fire/archive/2013/02/09/2909499.html" target="_blank" rel="noopener">http://www.cnblogs.com/William_Fire/archive/2013/02/09/2909499.html</a></p><p> 聚类分析是一种重要的人类行为，早在孩提时代，一个人就通过不断改进下意识中的聚类模式来学会如何区分猫狗、动物植物。目前在许多领域都得到了广泛的研究和成功的应用，如用于模式识别、数据分析、图像处理、市场研究、客户分割、Web文档分类等[1]。</p><p>聚类就是按照某个特定标准(如距离准则)把一个数据集分割成不同的类或簇，使得同一个簇内的数据对象的相似性尽可能大，同时不在同一个簇中的数据对象的差异性也尽可能地大。即聚类后同一类的数据尽可能聚集到一起，不同数据尽量分离。</p><p>聚类技术[2]正在蓬勃发展，对此有贡献的研究领域包括数据挖掘、统计学、机器学习、空间数据库技术、生物学以及市场营销等。各种聚类方法也被不断提出和改进，而不同的方法适合于不同类型的数据，因此对各种聚类方法、聚类效果的比较成为值得研究的课题。</p><p>1 聚类算法的分类</p><p>目前，有大量的聚类算法[3]。而对于具体应用，聚类算法的选择取决于数据的类型、聚类的目的。如果聚类分析被用作描述或探查的工具，可以对同样的数据尝试多种算法，以发现数据可能揭示的结果。<br>​<br>主要的聚类算法可以划分为如下几类：划分方法、层次方法、基于密度的方法、基于网格的方法以及基于模型的方法[4-6]。</p><p>每一类中都存在着得到广泛应用的算法，例如：划分方法中的k-means[7]聚类算法、层次方法中的凝聚型层次聚类算法[8]、基于模型方法中的神经网络[9]聚类算法等。<br>​    目前,聚类问题的研究不仅仅局限于上述的硬聚类，即每一个数据只能被归为一类，模糊聚类[10]也是聚类分析中研究较为广泛的一个分支。模糊聚类通过隶 属函数来确定每个数据隶属于各个簇的程度，而不是将一个数据对象硬性地归类到某一簇中。目前已有很多关于模糊聚类的算法被提出，如著名的FCM算法等。<br>​    本文主要对k-means聚类算法、凝聚型层次聚类算法、神经网络聚类算法之SOM,以及模糊聚类的FCM算法通过通用测试数据集进行聚类效果的比较和分析。</p><p>2 四种常用聚类算法研究</p><p>2.1 k-means聚类算法</p><pre><code>k-means是划分方法中较经典的聚类算法之一。由于该算法的效率高，所以在对大规模数据进行聚类时被广泛应用。目前，许多算法均围绕着该算法进行扩展和改进。k-means算法以k为参数，把n个对象分成k个簇，使簇内具有较高的相似度，而簇间的相似度较低。k-means算法的处理过程如下：首先，随机地 选择k个对象，每个对象初始地代表了一个簇的平均值或中心;对剩余的每个对象，根据其与各簇中心的距离，将它赋给最近的簇;然后重新计算每个簇的平均值。 这个过程不断重复，直到准则函数收敛。通常，采用平方误差准则，其定义如下：</code></pre><p>　 $E=\sum_{i=1}^{k}\sum_{p\subset C}|p-m_{i}|^{2}$</p><p>　这里E是数据库中所有对象的平方误差的总和，p是空间中的点，mi是簇Ci的平均值[9]。该目标函数使生成的簇尽可能紧凑独立，使用的距离度量是欧几里得距离,当然也可以用其他距离度量。k-means聚类算法的算法流程如下：<br>​    输入：包含n个对象的数据库和簇的数目k；<br>​    输出：k个簇，使平方误差准则最小。<br>​    步骤：<br>　　(1) 任意选择k个对象作为初始的簇中心；<br>　　(2) repeat；<br>　　(3) 根据簇中对象的平均值，将每个对象(重新)赋予最类似的簇；<br>　　(4) 更新簇的平均值，即计算每个簇中对象的平均值；<br>　　(5) until不再发生变化。</p><p>2.2  层次聚类算法<br>​    根据层次分解的顺序是自底向上的还是自上向下的，层次聚类算法分为凝聚的层次聚类算法和分裂的层次聚类算法。<br>　凝聚型层次聚类的策略是先将每个对象作为一个簇，然后合并这些原子簇为越来越大的簇，直到所有对象都在一个簇中，或者某个终结条件被满足。绝大多数层次聚类属于凝聚型层次聚类，它们只是在簇间相似度的定义上有所不同。四种广泛采用的簇间距离度量方法如下：</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-20.gif" alt=""></p><p>这里给出采用最小距离的凝聚层次聚类算法流程：</p><p>　(1) 将每个对象看作一类，计算两两之间的最小距离；<br>　(2) 将距离最小的两个类合并成一个新类；<br>　(3) 重新计算新类与所有类之间的距离；<br>　(4) 重复(2)、(3)，直到所有类最后合并成一类。</p><h3 id="2-21-5-SOM聚类算法"><a href="#2-21-5-SOM聚类算法" class="headerlink" title="2.21.5 SOM聚类算法"></a>2.21.5 SOM聚类算法</h3><p>SOM神经网络[11]是由芬兰神经网络专家Kohonen教授提出的，该算法假设在输入对象中存在一些拓扑结构或顺序，可以实现从输入空间(n维)到输出平面(2维)的降维映射，其映射具有拓扑特征保持性质,与实际的大脑处理有很强的理论联系。</p><p>SOM网络包含输入层和输出层。输入层对应一个高维的输入向量，输出层由一系列组织在2维网格上的有序节点构成，输入节点与输出节点通过权重向量连接。 学习过程中，找到与之距离最短的输出层单元，即获胜单元，对其更新。同时，将邻近区域的权值更新，使输出节点保持输入向量的拓扑特征。</p><p>算法流程：</p><p>(1) 网络初始化，对输出层每个节点权重赋初值；<br>(2) 将输入样本中随机选取输入向量，找到与输入向量距离最小的权重向量；<br>(3) 定义获胜单元，在获胜单元的邻近区域调整权重使其向输入向量靠拢；<br>(4) 提供新样本、进行训练；<br>(5) 收缩邻域半径、减小学习率、重复，直到小于允许值，输出聚类结果。</p><h3 id="2-21-6-FCM聚类算法"><a href="#2-21-6-FCM聚类算法" class="headerlink" title="2.21.6 FCM聚类算法"></a>2.21.6 FCM聚类算法</h3><p>1965年美国加州大学柏克莱分校的扎德教授第一次提出了‘集合’的概念。经过十多年的发展，模糊集合理论渐渐被应用到各个实际应用方面。为克服非此即彼的分类缺点，出现了以模糊集合论为数学基础的聚类分析。用模糊数学的方法进行聚类分析，就是模糊聚类分析[12]。</p><p>FCM算法是一种以隶属度来确定每个数据点属于某个聚类程度的算法。该聚类算法是传统硬聚类算法的一种改进。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-21.gif" alt=""></p><p>算法流程：</p><p>　(1) 标准化数据矩阵；<br>　(2) 建立模糊相似矩阵，初始化隶属矩阵；<br>　(3) 算法开始迭代，直到目标函数收敛到极小值；<br>　(4) 根据迭代结果，由最后的隶属矩阵确定数据所属的类，显示最后的聚类结果。</p><p>3 四种聚类算法试验</p><p>3.1 试验数据</p><p>实验中，选取专门用于测试分类、聚类算法的国际通用的UCI数据库中的IRIS[13]数据集，IRIS数据集包含150个样本数据，分别取自三种不同 的莺尾属植物setosa、versicolor和virginica的花朵样本,每个数据含有4个属性，即萼片长度、萼片宽度、花瓣长度，单位为cm。 在数据集上执行不同的聚类算法，可以得到不同精度的聚类结果。</p><p>3.2 试验结果说明</p><p>文中基于前面所述各算法原理及算法流程，用matlab进行编程运算，得到表1所示聚类结果。</p><p><img src="/2016/12/21/第二章_机器学习基础/img/ch2/2-22.gif" alt=""></p><p>如表1所示，对于四种聚类算法，按三方面进行比较：</p><p>(1)聚错样本数：总的聚错的样本数，即各类中聚错的样本数的和；</p><p>(2)运行时间：即聚类整个 过程所耗费的时间，单位为s；</p><p>(3)平均准确度：设原数据集有k个类,用ci表示第i类，ni为ci中样本的个数，mi为聚类正确的个数,则mi/ni为 第i类中的精度，则平均精度为：</p><p>$avg=\frac{1}{k}\sum_{i=1}^{k}\frac{m_{i}}{n_{i}}$</p><h2 id="2-22-GBDT和随机森林的区别"><a href="#2-22-GBDT和随机森林的区别" class="headerlink" title="2.22 GBDT和随机森林的区别"></a>2.22 GBDT和随机森林的区别</h2><p>GBDT和随机森林的相同点：<br>1、都是由多棵树组成<br>2、最终的结果都是由多棵树一起决定</p><p>GBDT和随机森林的不同点：<br>1、组成随机森林的树可以是分类树，也可以是回归树；而GBDT只由回归树组成<br>2、组成随机森林的树可以并行生成；而GBDT只能是串行生成<br>3、对于最终的输出结果而言，随机森林采用多数投票等；而GBDT则是将所有结果累加起来，或者加权累加起来<br>4、随机森林对异常值不敏感，GBDT对异常值非常敏感<br>5、随机森林对训练集一视同仁，GBDT是基于权值的弱分类器的集成<br>6、随机森林是通过减少模型方差提高性能，GBDT是通过减少模型偏差提高性能</p><h2 id="2-23-大数据与深度学习之间的关系"><a href="#2-23-大数据与深度学习之间的关系" class="headerlink" title="2.23 大数据与深度学习之间的关系"></a>2.23 大数据与深度学习之间的关系</h2><p>大数据<strong>通常被定义为“超出常用软件工具捕获，管理和处理能力”的数据集。 </strong>机器学习<strong>关心的问题是如何构建计算机程序使用经验自动改进。</strong>数据挖掘**是从数据中提取模式的特定算法的应用。<br>在数据挖掘中，重点在于算法的应用，而不是算法本身。</p><p><strong>机器学习和数据挖掘</strong>之间的关系如下：<br>数据挖掘是一个过程，在此过程中机器学习算法被用作提取数据集中的潜在有价值模式的工具。<br>大数据与深度学习关系总结如下：</p><ol><li>深度学习是一种模拟大脑的行为。可以从所学习对象的机制以及行为等等很多相关联的方面进行学习，模仿类型行为以及思维。</li><li>深度学习对于大数据的发展有帮助。深度学习对于大数据技术开发的每一个阶段均有帮助，不管是数据的分析还是挖掘还是建模，只有深度学习，这些工作才会有可能一一得到实现。</li><li>深度学习转变了解决问题的思维。很多时候发现问题到解决问题，走一步看一步不是一个主要的解决问题的方式了，在深度学习的基础上，要求我们从开始到最后都要基于哦那个一个目标，为了需要优化的那个最终目的去进行处理数据以及将数据放入到数据应用平台上去。</li><li>大数据的深度学习需要一个框架。在大数据方面的深度学习都是从基础的角度出发的，深度学习需要一个框架或者一个系统总而言之，将你的大数据通过深度分析变为现实这就是深度学习和大数据的最直接关系。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础问题</title>
    <link href="https://leesen998.github.io/2016/12/21/%E7%AC%AC%E4%B8%89%E7%AB%A0_%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <id>https://leesen998.github.io/2016/12/21/第三章_深度学习基础/</id>
    <published>2016-12-21T11:48:29.000Z</published>
    <updated>2019-03-21T13:06:37.650Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1 基本概念"></a>3.1 基本概念</h2><h3 id="3-1-1-神经网络组成？"><a href="#3-1-1-神经网络组成？" class="headerlink" title="3.1.1 神经网络组成？"></a>3.1.1 神经网络组成？</h3><p>为了描述神经网络，我们先从最简单的神经网络说起。</p><p><strong>感知机</strong></p><p>简单的感知机如下图所示：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-1.png" alt=""></p><p>其输出为：</p><p>$$ </p><p>output =<br>\left{<br>\begin{aligned}<br>0, \quad if \sum_i w_i x_i \le threshold \<br>1, \quad if \sum_i w_i x_i &gt; threshold<br>\end{aligned}<br>\right.<br>$$ </p><p>假如把感知机想象成一个加权投票机制，比如 3 位评委给一个歌手打分，打分分别为 4 分、1 分、-3 分，这 3 位评分的权重分别是 1、3、2，则该歌手最终得分为  $ 4 <em> 1 + 1 </em> 3 + (-3) * 2 = 1 $。按照比赛规则，选取的 threshold 为 3，说明只有歌手的综合评分大于 3 时，才可顺利晋级。对照感知机，该选手被淘汰，因为</p><p>$$<br>\sum_i w_i x_i &lt; threshold=3, output = 0<br>$$</p><p>用 $ -b $ 代替 threshold。输出变为：</p><p>$$</p><p>output = \left{<br>\begin{aligned}<br>0, \quad if w \cdot x + b \le threshold \<br>1, \quad if w \cdot x + b &gt; threshold<br>\end{aligned}<br>\right.<br>$$</p><p>设置合适的 $ x $ 和 $ b $，一个简单的感知机单元的与非门表示如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-2.png" alt=""></p><p>当输入为 $ 0,1 $ 时，感知机输出为 $ 0 <em> (-2) + 1 </em> (-2) + 3 = 1 $。</p><p>复杂一些的感知机由简单的感知机单元组合而成：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-3.png" alt=""></p><p><strong>Sigmoid单元</strong></p><p>感知机单元的输出只有 0 和 1，实际情况中，更多的输出类别不止 0 和 1，而是 $ [0, 1] $ 上的概率值，这时候就需要 sigmoid 函数把任意实数映射到 $ [0, 1] $ 上。</p><p>神经元的输入</p><p>$$<br>z = \sum_i w_i x_i + b<br>$$</p><p>假设神经元的输出采用 sigmoid 激活函数</p><p>$$<br>\sigma(z) = \frac{1}{1+e^{-z}}<br>$$</p><p>sigmoid 激活函数图像如下图所示： </p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-4.png" alt=""></p><p>全连接神经网络<br>即第 $ i $ 层的每个神经元和第 $ i-1 $ 层的每个神经元都有连接。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-5.png" alt=""></p><p>输出层可以不止有 1 个神经元。隐藏层可以只有 1 层，也可以有多层。输出层为多个神经元的神经网络例如下图：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-6.png" alt=""></p><h3 id="3-1-2神经网络有哪些常用模型结构？"><a href="#3-1-2神经网络有哪些常用模型结构？" class="headerlink" title="3.1.2神经网络有哪些常用模型结构？"></a>3.1.2神经网络有哪些常用模型结构？</h3><p>答案来源：<a href="https://blog.csdn.net/nicholas_liu2017/article/details/73694666" target="_blank" rel="noopener">25张图让你读懂神经网络架构</a></p><p>下图包含了大部分常用的模型：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-7.jpg" alt=""></p><h3 id="3-1-3如何选择深度学习开发平台？"><a href="#3-1-3如何选择深度学习开发平台？" class="headerlink" title="3.1.3如何选择深度学习开发平台？"></a>3.1.3如何选择深度学习开发平台？</h3><p>现有的深度学习开源平台主要有 Caffe, Torch, MXNet, CNTK, Theano, TensorFlow, Keras 等。那如何选择一个适合自己的平台呢，下面列出一些衡量做参考。</p><p><strong>参考1：与现有编程平台、技能整合的难易程度</strong></p><p>主要是前期积累的开发经验和资源，比如编程语言，前期数据集存储格式等。</p><p><strong>参考2: 与相关机器学习、数据处理生态整合的紧密程度</strong></p><p>深度学习研究离不开各种数据处理、可视化、统计推断等软件包。考虑建模之前，是否具有方便的数据预处理工具？建模之后，是否具有方便的工具进行可视化、统计推断、数据分析？  </p><p><strong>参考3：对数据量及硬件的要求和支持</strong></p><p>深度学习在不同应用场景的数据量是不一样的，这也就导致我们可能需要考虑分布式计算、多 GPU 计算的问题。例如，对计算机图像处理研究的人员往往需要将图像文件和计算任务分部到多台计算机节点上进行执行。当下每个深度学习平台都在快速发展，每个平台对分布式计算等场景的支持也在不断演进。</p><p><strong>参考4：深度学习平台的成熟程度</strong></p><p>成熟程度的考量是一个比较主观的考量因素，这些因素可包括：社区的活跃程度；是否容易和开发人员进行交流；当前应用的势头。</p><p><strong>参考5：平台利用是否多样性？</strong></p><p>有些平台是专门为深度学习研究和应用进行开发的，有些平台对分布式计算、GPU 等构架都有强大的优化，能否用这些平台/软件做其他事情？比如有些深度学习软件是可以用来求解二次型优化；有些深度学习平台很容易被扩展，被运用在强化学习的应用中。</p><h3 id="3-1-4为什么使用深层表示"><a href="#3-1-4为什么使用深层表示" class="headerlink" title="3.1.4为什么使用深层表示?"></a>3.1.4为什么使用深层表示?</h3><ol><li><p>深度神经网络的多层隐藏层中，前几层能学习一些低层次的简单特征，后几层能把前面简单的特征结合起来，去学习更加复杂的东西。比如刚开始检测到的是边缘信息，而后检测更为细节的信息。</p></li><li><p>深层的网络隐藏单元数量相对较少，隐藏层数目较多，如果浅层的网络想要达到同样的计算结果则需要指数级增长的单元数量才能达到。</p></li></ol><h3 id="3-1-5为什么深层神经网络难以训练？"><a href="#3-1-5为什么深层神经网络难以训练？" class="headerlink" title="3.1.5为什么深层神经网络难以训练？"></a>3.1.5为什么深层神经网络难以训练？</h3><p>答案来源：</p><p><a href="https://blog.csdn.net/BinChasing/article/details/50300069" target="_blank" rel="noopener">为什么深层神经网络难以训练</a></p><p><a href="http://mini.eastday.com/mobile/180116023302833.html" target="_blank" rel="noopener">为什么很难训练深度神经网络</a></p><ol><li>梯度消失<br> 梯度消失是指通过隐藏层从后向前看，梯度会变的越来越小，说明前面层的学习会显著慢于后面层的学习，所以学习会卡住，除非梯度变大。下图是不同隐含层的学习速率；</li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-8.png" alt=""></p><ol start="2"><li><p>梯度爆炸<br> 又称exploding gradient problem，在深度网络或循环神经网络（RNN）等网络结构中，梯度可在网络更新的过程中不断累积，变成非常大的梯度，导致网络权重值的大幅更新，使得网络不稳定；在极端情况下，权重值甚至会溢出，变为NaN值，再也无法更新。 具体可参考文献：<a href="https://machinelearningmastery.com/exploding-gradients-in-neural-networks/" target="_blank" rel="noopener">A Gentle Introduction to Exploding Gradients in Neural Networks</a></p></li><li><p>权重矩阵的退化导致模型的有效自由度减少。参数空间中学习的退化速度减慢，导致减少了模型的有效维数，网络的可用自由度对学习中梯度范数的贡献不均衡，随着相乘矩阵的数量（即网络深度）的增加，矩阵的乘积变得越来越退化；</p></li></ol><p>在有硬饱和边界的非线性网络中（例如 ReLU 网络），随着深度增加，退化过程会变得越来越快。Duvenaud 等人 2014 年的论文里展示了关于该退化过程的可视化：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-9.jpg" alt=""></p><p>随着深度的增加，输入空间（左上角所示）会在输入空间中的每个点处被扭曲成越来越细的单丝，只有一个与细丝正交的方向影响网络的响应。沿着这个方向，网络实际上对变化变得非常敏感。</p><h3 id="3-1-6-深度学习和机器学习有什么不同？"><a href="#3-1-6-深度学习和机器学习有什么不同？" class="headerlink" title="3.1.6 深度学习和机器学习有什么不同？"></a>3.1.6 深度学习和机器学习有什么不同？</h3><p>机器学习：利用计算机、概率论、统计学等知识，输入数据，让计算机学会新知识。机器学习的过程，就是通过训练数据寻找目标函数。</p><p>深度学习是机器学习的一种，现在深度学习比较火爆。在传统机器学习中，手工设计特征对学习效果很重要，但是特征工程非常繁琐。而深度学习能够从大数据中自动学习特征，这也是深度学习在大数据时代受欢迎的一大原因。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-10.jpg" alt=""></p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-11.jpg" alt=""></p><h2 id="3-2-网络操作与计算"><a href="#3-2-网络操作与计算" class="headerlink" title="3.2 网络操作与计算"></a>3.2 网络操作与计算</h2><h3 id="3-2-1前向传播与反向传播？"><a href="#3-2-1前向传播与反向传播？" class="headerlink" title="3.2.1前向传播与反向传播？"></a>3.2.1前向传播与反向传播？</h3><p>答案来源：<a href="https://blog.csdn.net/lhanchao/article/details/51419150" target="_blank" rel="noopener">神经网络中前向传播和反向传播解析</a></p><p>在神经网络的计算中，主要由前向传播(foward propagation，FP)和反向传播(backward propagation，BP)。</p><p><strong>前向传播</strong></p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-12.png" alt=""></p><p>假设上一层结点 $ i,j,k,… $ 等一些结点与本层的结点 $ w $ 有连接，那么结点 $ w $ 的值怎么算呢？就是通过上一层的 $ i,j,k,… $ 等结点以及对应的连接权值进行加权和运算，最终结果再加上一个偏置项（图中为了简单省略了），最后在通过一个非线性函数（即激活函数），如 ReLu，sigmoid 等函数，最后得到的结果就是本层结点 $ w $ 的输出。 </p><p>最终不断的通过这种方法一层层的运算，得到输出层结果。</p><p><strong>反向传播</strong></p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-13.png" alt=""></p><p>由于我们前向传播最终得到的结果，以分类为例，最终总是有误差的，那么怎么减少误差呢，当前应用广泛的一个算法就是梯度下降算法，但是求梯度就要求偏导数，下面以图中字母为例讲解一下：</p><p>设最终中误差为 $ E $，对于输出那么 $ E $ 对于输出节点 $ y_l $ 的偏导数是 $ y_l - t_l $，其中 $ t_l $ 是真实值，$ \frac{\partial y_l}{\partial z_l} $ 是指上面提到的激活函数，$ z_l $ 是上面提到的加权和，那么这一层的 $ E $ 对于 $ z_l $ 的偏导数为 $ \frac{\partial E}{\partial z_l} = \frac{\partial E}{\partial y_l} \frac{\partial y_l}{\partial z_l} $。同理，下一层也是这么计算，只不过 $ \frac{\partial E}{\partial y_k} $ 计算方法变了，一直反向传播到输入层，最后有 $ \frac{\partial E}{\partial x_i} = \frac{\partial E}{\partial y_j} \frac{\partial y_j}{\partial z_j} $，且 $ \frac{\partial z_j}{\partial x_i} = w_i j $。然后调整这些过程中的权值，再不断进行前向传播和反向传播的过程，最终得到一个比较好的结果；</p><h3 id="3-2-2如何计算神经网络的输出？"><a href="#3-2-2如何计算神经网络的输出？" class="headerlink" title="3.2.2如何计算神经网络的输出？"></a>3.2.2如何计算神经网络的输出？</h3><p>答案来源：<a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="noopener">零基础入门深度学习(3) - 神经网络和反向传播算法</a></p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-14.png" alt=""></p><p>如上图，输入层有三个节点，我们将其依次编号为 1、2、3；隐藏层的 4 个节点，编号依次为 4、5、6、7；最后输出层的两个节点编号为 8、9。比如，隐藏层的节点 4，它和输入层的三个节点 1、2、3 之间都有连接，其连接上的权重分别为是 $ w_{41}, w_{42}, w_{43} $。</p><p>为了计算节点 4 的输出值，我们必须先得到其所有上游节点（也就是节点 1、2、3）的输出值。节点 1、2、3 是输入层的节点，所以，他们的输出值就是输入向量本身。按照上图画出的对应关系，可以看到节点 1、2、3 的输出值分别是 $ x_1, x_2, x_3 $。</p><p>$$<br>a_4 = \sigma(w^T \cdot a) = \sigma(w_{41}x_4 + w_{42}x_2 + w_{43}a_3 + w_{4b})<br>$$</p><p>其中 $ w_{4b} $ 是节点 4 的偏置项</p><p>同样，我们可以继续计算出节点 5、6、7 的输出值 $ a_5, a_6, a_7 $。</p><p>计算输出层的节点 8 的输出值 $ y_1 $：</p><p>$$<br>y_1 = \sigma(w^T \cdot a) = \sigma(w_{84}a_4 + w_{85}a_5 + w_{86}a_6 + w_{87}a_7 + w_{8b})<br>$$</p><p>其中 $ w_{8b} $ 是节点 8 的偏置项。</p><p>同理，我们还可以计算出 $ y_2 $。这样输出层所有节点的输出值计算完毕，我们就得到了在输入向量 $ x_1, x_2, x_3, x_4 $ 时，神经网络的输出向量 $ y_1, y_2 $， 。这里我们也看到，输出向量的维度和输出层神经元个数相同。</p><h3 id="3-2-3如何计算卷积神经网络输出值？"><a href="#3-2-3如何计算卷积神经网络输出值？" class="headerlink" title="3.2.3如何计算卷积神经网络输出值？"></a>3.2.3如何计算卷积神经网络输出值？</h3><p>答案来源：<a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="noopener">零基础入门深度学习(4) - 卷积神经网络</a></p><p>假设有一个 5*5 的图像，使用一个 3*3 的 filter 进行卷积，想得到一个 3*3 的 Feature Map，如下所示：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-15.png" alt=""></p><p>$ x_{i,j} $ 表示图像第  $ i $ 行第 $ j $ 列元素。$ w_{m,n} $ 表示 filter 第 $ m $ 行第 $ n $ 列权重。 $ w_b $ 表示 filter 的偏置项。 表示 feature map 第 $ i $ 行第 $ j $ 列元素。 $ f $ 表示激活函数，这里以 relu 函数为例。</p><p>卷积计算公式如下：</p><p>$$<br>a_{i,j} = f(\sum_{m=0}^2 \sum_{n=0}^2 w_{m,n} x_{i+m, j+n} + w_b )<br>$$</p><p>当步长为 1 时，计算 feature map 元素 $ a_{0,0} $ 如下：</p><p>$$<br>a_{0,0} = f(\sum_{m=0}^2 \sum_{n=0}^2 w_{m,n} x_{0+m, 0+n} + w_b )</p><p>= relu(w_{0,0} x_{0,0} + w_{0,1} x_{0,1} + w_{0,2} x_{0,2} + w_{1,0} x_{1,0} + w_{1,1} x_{1,1} + w_{1,2} x_{1,2} + w_{2,0} x_{2,0} + w_{2,1} x_{2,1} + w_{2,2} x_{2,2}) \</p><p>= 1 + 0 + 1 + 0 + 1 + 0 + 0 + 0 + 1 \</p><p>= 4<br>$$</p><p>结果如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-16.png" alt=""></p><p>其计算过程图示如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-17.gif" alt=""></p><p>以此类推，计算出全部的Feature Map。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-18.png" alt=""></p><p>当步幅为 2 时，Feature Map计算如下</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-19.png" alt=""></p><p>注：图像大小、步幅和卷积后的Feature Map大小是有关系的。它们满足下面的关系：</p><p>$$<br>W_2 = (W_1 - F + 2P)/S + 1<br>H_2 = (H_1 - F + 2P)/S + 1<br>$$</p><p>其中 $ W_2 $， 是卷积后 Feature Map 的宽度；$ W_1 $ 是卷积前图像的宽度；$ F $ 是 filter 的宽度；$ P $ 是 Zero Padding 数量，Zero Padding 是指在原始图像周围补几圈 0，如果 P 的值是 1，那么就补 1 圈 0；S 是步幅；$ H_2 $ 卷积后 Feature Map 的高度；$ H_1 $ 是卷积前图像的宽度。</p><p>举例：假设图像宽度 $ W_1 = 5 $，filter 宽度 $ F=3 $，Zero Padding $ P=0 $，步幅 $ S=2 $，$ Z $ 则</p><p>$$<br>W_2 = (W_1 - F + 2P)/S + 1</p><p>= (5-3+0)/2 + 1</p><p>= 2<br>$$</p><p>说明 Feature Map 宽度是2。同样，我们也可以计算出 Feature Map 高度也是 2。</p><p>如果卷积前的图像深度为 $ D $，那么相应的 filter 的深度也必须为 $ D $。深度大于 1 的卷积计算公式：</p><p>$$<br>a_{i,j} = f(\sum_{d=0}^{D-1} \sum_{m=0}^{F-1} \sum_{n=0}^{F-1} w_{d,m,n} x_{d,i+m,j+n} + w_b)<br>$$</p><p>其中，$ D $ 是深度；$ F $ 是 filter 的大小；$ w_{d,m,n} $ 表示 filter 的第 $ d $ 层第 $ m $ 行第 $ n $ 列权重；$ a_{d,i,j} $ 表示 feature map 的第 $ d $ 层第 $ i $ 行第 $ j $ 列像素；其它的符号含义前面相同，不再赘述。</p><p>每个卷积层可以有多个 filter。每个 filter 和原始图像进行卷积后，都可以得到一个 Feature Map。卷积后 Feature Map 的深度(个数)和卷积层的 filter 个数是相同的。下面的图示显示了包含两个 filter 的卷积层的计算。7*7*3 输入，经过两个 3*3*3 filter 的卷积(步幅为 2)，得到了 3*3*2 的输出。图中的 Zero padding 是 1，也就是在输入元素的周围补了一圈 0。Zero padding 对于图像边缘部分的特征提取是很有帮助的。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-20.gif" alt=""></p><p>以上就是卷积层的计算方法。这里面体现了局部连接和权值共享：每层神经元只和上一层部分神经元相连(卷积计算规则)，且 filter 的权值对于上一层所有神经元都是一样的。对于包含两个 $ 3 <em> 3 </em> 3 $ 的 fitler 的卷积层来说，其参数数量仅有 $ (3 <em> 3 </em> 3+1) * 2 = 56 $ 个，且参数数量与上一层神经元个数无关。与全连接神经网络相比，其参数数量大大减少了。</p><h3 id="3-2-4-如何计算-Pooling-层输出值输出值？"><a href="#3-2-4-如何计算-Pooling-层输出值输出值？" class="headerlink" title="3.2.4 如何计算 Pooling 层输出值输出值？"></a>3.2.4 如何计算 Pooling 层输出值输出值？</h3><p>Pooling 层主要的作用是下采样，通过去掉 Feature Map 中不重要的样本，进一步减少参数数量。Pooling 的方法很多，最常用的是 Max Pooling。Max Pooling 实际上就是在 n*n 的样本中取最大值，作为采样后的样本值。下图是 2*2 max pooling：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-21.png" alt=""></p><p>除了 Max Pooing 之外，常用的还有 Mean Pooling ——取各样本的平均值。<br>对于深度为 $ D $ 的 Feature Map，各层独立做 Pooling，因此 Pooling 后的深度仍然为 $ D $。</p><h3 id="3-2-5-实例理解反向传播"><a href="#3-2-5-实例理解反向传播" class="headerlink" title="3.2.5 实例理解反向传播"></a>3.2.5 实例理解反向传播</h3><p>答案来源：<a href="http://www.cnblogs.com/charlotte77/p/5629865.html" target="_blank" rel="noopener">一文弄懂神经网络中的反向传播法——BackPropagation</a></p><p>一个典型的三层神经网络如下所示：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-22.png" alt=""></p><p>其中 Layer $ L_1 $ 是输入层，Layer $ L_2 $ 是隐含层，Layer $ L_3 $ 是输出层。</p><p>假设输入数据集为 $ D={x_1, x_2, …, x_n} $，输出数据集为 $ y_1, y_2, …, y_n $。</p><p>如果输入和输出是一样，即为自编码模型。如果原始数据经过映射，会得到不同与输入的输出。</p><p>假设有如下的网络层：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-23.png" alt=""></p><p>输入层包含神经元 $ i_1, i_2 $，偏置 $ b_1 $；隐含层包含神经元 $ h_1, h_2 $，偏置 $ b_2 $，输出层为  $ o_1, o_2 $，$ w_i $ 为层与层之间连接的权重，激活函数为 sigmoid 函数。对以上参数取初始值，如下图所示：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-24.png" alt=""></p><p>其中：</p><ul><li>输入数据 $ i1=0.05, i2 = 0.10 $</li><li>输出数据 $ o1=0.01, o2=0.99 $;</li><li>初始权重 $ w1=0.15, w2=0.20, w3=0.25,w4=0.30, w5=0.40, w6=0.45, w7=0.50, w8=0.55 $</li><li>目标：给出输入数据 $ i1,i2 $ (0.05和0.10)，使输出尽可能与原始输出 $ o1,o2 $，(0.01和0.99)接近。</li></ul><p><strong>前向传播</strong></p><ol><li>输入层 –&gt; 输出层</li></ol><p>计算神经元 $ h1 $ 的输入加权和：</p><p>$$<br>net_{h1} = w_1 <em> i_1 + w_2 </em> i_2 + b_1 * 1</p><p>net_{h1} = 0.15 <em> 0.05 + 0.2 </em> 0.1 + 0.35 * 1 = 0.3775<br>$$</p><p>神经元 $ h1 $ 的输出 $ o1 $ ：（此处用到激活函数为 sigmoid 函数）：</p><p>$$<br>out_{h1} = \frac{1}{1 + e^{-net_{h1}}} = \frac{1}{1 + e^{-0.3775}} = 0.593269992<br>$$</p><p>同理，可计算出神经元 $ h2 $ 的输出 $ o1 $：</p><p>$$<br>out_{h2} = 0.596884378<br>$$</p><ol start="2"><li>隐含层–&gt;输出层：  　　</li></ol><p>计算输出层神经元 $ o1 $ 和 $ o2 $ 的值：</p><p>$$<br>net_{o1} = w_5 <em> out_{h1} + w_6 </em> out_{h2} + b_2 * 1</p><p>net_{o1} = 0.4 <em> 0.593269992 + 0.45 </em> 0.596884378 + 0.6 * 1 = 1.105905967</p><p>out_{o1} = \frac{1}{1 + e^{-net_{o1}}} = \frac{1}{1 + e^{1.105905967}} = 0.75136079<br>$$</p><p>这样前向传播的过程就结束了，我们得到输出值为 $ [0.75136079 , 0.772928465] $，与实际值 $ [0.01 , 0.99] $ 相差还很远，现在我们对误差进行反向传播，更新权值，重新计算输出。</p><p><strong>反向传播 </strong></p><ol><li>计算总误差</li></ol><p>总误差：(square error)</p><p>$$<br>E_{total} = \sum \frac{1}{2}(target - output)^2<br>$$</p><p>但是有两个输出，所以分别计算 $ o1 $ 和 $ o2 $ 的误差，总误差为两者之和：</p><p>$E_{o1} = \frac{1}{2}(target_{o1} - out_{o1})^2<br>= \frac{1}{2}(0.01 - 0.75136507)^2 = 0.274811083$</p><p>$E_{o2} = 0.023560026$</p><p>$E_{total} = E_{o1} + E_{o2} = 0.274811083 + 0.023560026 = 0.298371109$</p><ol start="2"><li>隐含层 –&gt; 输出层的权值更新：</li></ol><p>以权重参数 $ w5 $ 为例，如果我们想知道 $ w5 $ 对整体误差产生了多少影响，可以用整体误差对 $ w5 $ 求偏导求出：（链式法则）</p><p>$$<br>\frac{\partial E_{total}}{\partial w5} = \frac{\partial E_{total}}{\partial out_{o1}} <em> \frac{\partial out_{o1}}{\partial net_{o1}} </em> \frac{\partial net_{o1}}{\partial w5}<br>$$</p><p>下面的图可以更直观的看清楚误差是怎样反向传播的：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-25.png" alt=""></p><h3 id="3-2-6-神经网络更“深”有什么意义？"><a href="#3-2-6-神经网络更“深”有什么意义？" class="headerlink" title="3.2.6 神经网络更“深”有什么意义？"></a>3.2.6 神经网络更“深”有什么意义？</h3><p>前提：在一定范围内。</p><ul><li>在神经元数量相同的情况下，深层网络结构具有更大容量，分层组合带来的是指数级的表达空间，能够组合成更多不同类型的子结构，这样可以更容易地学习和表示各种特征。</li><li>隐藏层增加则意味着由激活函数带来的非线性变换的嵌套层数更多，就能构造更复杂的映射关系。</li></ul><h2 id="3-3-超参数"><a href="#3-3-超参数" class="headerlink" title="3.3 超参数"></a>3.3 超参数</h2><h3 id="3-3-1-什么是超参数？"><a href="#3-3-1-什么是超参数？" class="headerlink" title="3.3.1 什么是超参数？"></a>3.3.1 什么是超参数？</h3><p>超参数:比如算法中的 learning rate （学习率）、iterations (梯度下降法循环的数量)、（隐藏层数目）、（隐藏层单元数目）、choice of activation function（激活函数的选择）都需要根据实际情况来设置，这些数字实际上控制了最后的参数和的值，所以它们被称作超参数。</p><h3 id="3-3-2-如何寻找超参数的最优值？"><a href="#3-3-2-如何寻找超参数的最优值？" class="headerlink" title="3.3.2 如何寻找超参数的最优值？"></a>3.3.2 如何寻找超参数的最优值？</h3><p>在使用机器学习算法时，总有一些难搞的超参数。例如权重衰减大小，高斯核宽度等等。算法不会设置这些参数，而是需要你去设置它们的值。设置的值对结果产生较大影响。常见设置超参数的做法有：</p><ol><li>猜测和检查：根据经验或直觉，选择参数，一直迭代。</li><li>网格搜索：让计算机尝试在一定范围内均匀分布的一组值。</li><li>随机搜索：让计算机随机挑选一组值。</li><li>贝叶斯优化：使用贝叶斯优化超参数，会遇到贝叶斯优化算法本身就需要很多的参数的困难。</li><li>在良好初始猜测的前提下进行局部优化：这就是 MITIE 的方法，它使用 BOBYQA 算法，并有一个精心选择的起始点。由于 BOBYQA 只寻找最近的局部最优解，所以这个方法是否成功很大程度上取决于是否有一个好的起点。在 MITIE 的情况下，我们知道一个好的起点，但这不是一个普遍的解决方案，因为通常你不会知道好的起点在哪里。从好的方面来说，这种方法非常适合寻找局部最优解。稍后我会再讨论这一点。</li><li>最新提出的 LIPO 的全局优化方法。这个方法没有参数，而且经验证比随机搜索方法好。</li></ol><h3 id="3-3-3-超参数搜索一般过程？"><a href="#3-3-3-超参数搜索一般过程？" class="headerlink" title="3.3.3 超参数搜索一般过程？"></a>3.3.3 超参数搜索一般过程？</h3><p>超参数搜索一般过程：</p><ol><li>将数据集划分成训练集、验证集及测试集。</li><li>在训练集上根据模型的性能指标对模型参数进行优化。</li><li>在验证集上根据模型的性能指标对模型的超参数进行搜索。</li><li>步骤 2 和步骤 3 交替迭代，最终确定模型的参数和超参数，在测试集中验证评价模型的优劣。</li></ol><p>其中，搜索过程需要搜索算法，一般有：网格搜索、随机搜过、启发式智能搜索、贝叶斯搜索。</p><h2 id="3-4-激活函数"><a href="#3-4-激活函数" class="headerlink" title="3.4 激活函数"></a>3.4 激活函数</h2><h3 id="3-4-1-为什么需要非线性激活函数？"><a href="#3-4-1-为什么需要非线性激活函数？" class="headerlink" title="3.4.1 为什么需要非线性激活函数？"></a>3.4.1 为什么需要非线性激活函数？</h3><p><strong>为什么需要激活函数？</strong></p><ol><li>激活函数对模型学习、理解非常复杂和非线性的函数具有重要作用。</li><li>激活函数可以引入非线性因素。如果不使用激活函数，则输出信号仅是一个简单的线性函数。线性函数一个一级多项式，线性方程的复杂度有限，从数据中学习复杂函数映射的能力很小。没有激活函数，神经网络将无法学习和模拟其他复杂类型的数据，例如图像、视频、音频、语音等。</li><li>激活函数可以把当前特征空间通过一定的线性映射转换到另一个空间，让数据能够更好的被分类。</li></ol><p><strong>为什么激活函数需要非线性函数？</strong></p><ol><li>假若网络中全部是线性部件，那么线性的组合还是线性，与单独一个线性分类器无异。这样就做不到用非线性来逼近任意函数。</li><li>使用非线性激活函数 ，以便使网络更加强大，增加它的能力，使它可以学习复杂的事物，复杂的表单数据，以及表示输入输出之间非线性的复杂的任意函数映射。使用非线性激活函数，能够从输入输出之间生成非线性映射。</li></ol><h3 id="3-4-2-常见的激活函数及图像"><a href="#3-4-2-常见的激活函数及图像" class="headerlink" title="3.4.2 常见的激活函数及图像"></a>3.4.2 常见的激活函数及图像</h3><ol><li><p>sigmoid 激活函数</p><p>函数的定义为：$ f(x) = \frac{1}{1 + e^{-x}} $，其值域为 $ (0,1) $。</p><p>函数图像如下：</p></li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-26.png" alt=""></p><ol start="2"><li><p>tanh激活函数</p><p>函数的定义为：$ f(x) = tanh(x) = \frac{e^x - e^{-x}}{e^x + e^{-x}} $，值域为 $ (-1,1) $。</p><p>函数图像如下：</p></li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-27.png" alt=""></p><ol start="3"><li><p>Relu激活函数</p><p>函数的定义为：$ f(x) = max(0, x) $  ，值域为 $ [0,+∞) $；</p><p>函数图像如下：</p></li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-28.png" alt=""></p><ol start="4"><li><p>Leak Relu 激活函数 </p><p>函数定义为： $ f(x) =  \left{<br>\begin{aligned}<br>ax, \quad x<0 \\="" x,="" \quad="" x="">0<br>\end{aligned}<br>\right. $，值域为 $ (-∞,+∞) $。 </0></p><p>图像如下（$ a = 0.5 $）：</p></li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-29.png" alt=""></p><ol start="5"><li><p>SoftPlus 激活函数</p><p>函数的定义为：$ f(x) = ln( 1 + e^x) $，值域为 $ (0,+∞) $。</p><p>函数图像如下:</p></li></ol><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-30.png" alt=""></p><ol start="6"><li><p>softmax 函数</p><p>函数定义为： $ \sigma(z)_j = \frac{e^{z_j}}{\sum_{k=1}^K e^{z_k}} $。</p><p>Softmax 多用于多分类神经网络输出。</p></li></ol><h3 id="3-4-3-常见激活函数的导数计算？"><a href="#3-4-3-常见激活函数的导数计算？" class="headerlink" title="3.4.3 常见激活函数的导数计算？"></a>3.4.3 常见激活函数的导数计算？</h3><p>对常见激活函数，导数计算如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-31.png" alt=""></p><h3 id="3-4-4-激活函数有哪些性质？"><a href="#3-4-4-激活函数有哪些性质？" class="headerlink" title="3.4.4 激活函数有哪些性质？"></a>3.4.4 激活函数有哪些性质？</h3><ol><li>非线性： 当激活函数是线性的，一个两层的神经网络就可以基本上逼近所有的函数。但如果激活函数是恒等激活函数的时候，即 $ f(x)=x $，就不满足这个性质，而且如果 MLP 使用的是恒等激活函数，那么其实整个网络跟单层神经网络是等价的；</li><li>可微性： 当优化方法是基于梯度的时候，就体现了该性质；</li><li>单调性： 当激活函数是单调的时候，单层网络能够保证是凸函数；</li><li>$ f(x)≈x $： 当激活函数满足这个性质的时候，如果参数的初始化是随机的较小值，那么神经网络的训练将会很高效；如果不满足这个性质，那么就需要详细地去设置初始值；</li><li>输出值的范围： 当激活函数输出值是有限的时候，基于梯度的优化方法会更加稳定，因为特征的表示受有限权值的影响更显著；当激活函数的输出是无限的时候，模型的训练会更加高效，不过在这种情况小，一般需要更小的 Learning Rate。</li></ol><h3 id="3-4-5-如何选择激活函数？"><a href="#3-4-5-如何选择激活函数？" class="headerlink" title="3.4.5 如何选择激活函数？"></a>3.4.5 如何选择激活函数？</h3><p>选择一个适合的激活函数并不容易，需要考虑很多因素，通常的做法是，如果不确定哪一个激活函数效果更好，可以把它们都试试，然后在验证集或者测试集上进行评价。然后看哪一种表现的更好，就去使用它。</p><p>以下是常见的选择情况：</p><ol><li>如果输出是 0、1 值（二分类问题），则输出层选择 sigmoid 函数，然后其它的所有单元都选择 Relu 函数。</li><li>如果在隐藏层上不确定使用哪个激活函数，那么通常会使用 Relu 激活函数。有时，也会使用 tanh 激活函数，但 Relu 的一个优点是：当是负值的时候，导数等于 0。</li><li>sigmoid 激活函数：除了输出层是一个二分类问题基本不会用它。</li><li>tanh 激活函数：tanh 是非常优秀的，几乎适合所有场合。</li><li>ReLu 激活函数：最常用的默认函数，如果不确定用哪个激活函数，就使用 ReLu 或者 Leaky ReLu，再去尝试其他的激活函数。</li><li>如果遇到了一些死的神经元，我们可以使用 Leaky ReLU 函数。</li></ol><h3 id="3-4-6-使用-ReLu-激活函数的优点？"><a href="#3-4-6-使用-ReLu-激活函数的优点？" class="headerlink" title="3.4.6 使用 ReLu 激活函数的优点？"></a>3.4.6 使用 ReLu 激活函数的优点？</h3><ol><li>在区间变动很大的情况下，ReLu 激活函数的导数或者激活函数的斜率都会远大于 0，在程序实现就是一个 if-else 语句，而 sigmoid 函数需要进行浮点四则运算，在实践中，使用 ReLu 激活函数神经网络通常会比使用 sigmoid 或者 tanh 激活函数学习的更快。</li><li>sigmoid 和 tanh 函数的导数在正负饱和区的梯度都会接近于 0，这会造成梯度弥散，而 Relu 和Leaky ReLu 函数大于 0 部分都为常数，不会产生梯度弥散现象。</li><li>需注意，Relu 进入负半区的时候，梯度为 0，神经元此时不会训练，产生所谓的稀疏性，而 Leaky ReLu 不会产生这个问题。</li></ol><h3 id="3-4-7什么时候可以用线性激活函数？"><a href="#3-4-7什么时候可以用线性激活函数？" class="headerlink" title="3.4.7什么时候可以用线性激活函数？"></a>3.4.7什么时候可以用线性激活函数？</h3><ol><li>输出层，大多使用线性激活函数。</li><li>在隐含层可能会使用一些线性激活函数。</li><li>一般用到的线性激活函数很少。</li></ol><h3 id="3-4-8-怎样理解-Relu（-lt-0-时）是非线性激活函数？"><a href="#3-4-8-怎样理解-Relu（-lt-0-时）是非线性激活函数？" class="headerlink" title="3.4.8 怎样理解 Relu（&lt; 0 时）是非线性激活函数？"></a>3.4.8 怎样理解 Relu（&lt; 0 时）是非线性激活函数？</h3><p>Relu 激活函数图像如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-32.png" alt=""></p><p>根据图像可看出具有如下特点：</p><ol><li>单侧抑制；</li><li>相对宽阔的兴奋边界；</li><li>稀疏激活性；</li></ol><p>ReLU 函数从图像上看，是一个分段线性函数，把所有的负值都变为 0，而正值不变，这样就成为单侧抑制。</p><p>因为有了这单侧抑制，才使得神经网络中的神经元也具有了稀疏激活性。</p><p><strong>稀疏激活性</strong>：从信号方面来看，即神经元同时只对输入信号的少部分选择性响应，大量信号被刻意的屏蔽了，这样可以提高学习的精度，更好更快地提取稀疏特征。当 $ x<0 $="" 时，relu="" 硬饱和，而当="" x="">0 $ 时，则不存在饱和问题。ReLU 能够在 $ x&gt;0 $ 时保持梯度不衰减，从而缓解梯度消失问题。</0></p><h3 id="3-4-9-Softmax-函数如何应用于多分类？"><a href="#3-4-9-Softmax-函数如何应用于多分类？" class="headerlink" title="3.4.9 Softmax 函数如何应用于多分类？"></a>3.4.9 Softmax 函数如何应用于多分类？</h3><p>​    softmax 用于多分类过程中，它将多个神经元的输出，映射到 $ (0,1) $ 区间内，可以看成概率来理解，从而来进行多分类！</p><p>​    假设我们有一个数组，$ V_i $ 表示 $ V $  中的第 $ i $ 个元素，那么这个元素的 softmax 值就是</p><p>$$<br>S_i = \frac{e^{V_i}}{\sum_j e^{V_j}}<br>$$</p><p>​    从下图看，神经网络中包含了输入层，然后通过两个特征层处理，最后通过 softmax 分析器就能得到不同条件下的概率，这里需要分成三个类别，最终会得到 $ y=0, y=1, y=2 $ 的概率值。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-33.png" alt=""></p><p>继续看下面的图，三个输入通过 softmax 后得到一个数组 $ [0.05 , 0.10 , 0.85] $，这就是 soft 的功能。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-34.png" alt=""></p><p>更形象的映射过程如下图所示：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-35.jpg" alt=""></p><p>​    softmax 直白来说就是将原来输出是 $ 3,1,-3 $ 通过 softmax 函数一作用，就映射成为 $ (0,1) $ 的值，而这些值的累和为 $ 1 $（满足概率的性质），那么我们就可以将它理解成概率，在最后选取输出结点的时候，我们就可以选取概率最大（也就是值对应最大的）结点，作为我们的预测目标！</p><h3 id="3-4-10-交叉熵代价函数定义及其求导推导。"><a href="#3-4-10-交叉熵代价函数定义及其求导推导。" class="headerlink" title="3.4.10 交叉熵代价函数定义及其求导推导。"></a>3.4.10 交叉熵代价函数定义及其求导推导。</h3><p>​    神经元的输出就是 a = σ(z)，其中$z=\sum w_{j}i_{j}+b$是输⼊的带权和。</p><p>$C=-\frac{1}{n}\sum[ylna+(1-y)ln(1-a)]$</p><p>​    其中 n 是训练数据的总数，求和是在所有的训练输⼊ x 上进⾏的， y 是对应的⽬标输出。</p><p>​    表达式是否解决学习缓慢的问题并不明显。实际上，甚⾄将这个定义看做是代价函数也不是显⽽易⻅的！在解决学习缓慢前，我们来看看交叉熵为何能够解释成⼀个代价函数。</p><p>​    将交叉熵看做是代价函数有两点原因。</p><p>​    第⼀，它是⾮负的， C &gt; 0。可以看出：式子中的求和中的所有独⽴的项都是负数的，因为对数函数的定义域是 (0，1)，并且求和前⾯有⼀个负号，所以结果是非负。</p><p>​    第⼆，如果对于所有的训练输⼊ x，神经元实际的输出接近⽬标值，那么交叉熵将接近 0。</p><p>​    假设在这个例⼦中， y = 0 ⽽ a ≈ 0。这是我们想到得到的结果。我们看到公式中第⼀个项就消去了，因为 y = 0，⽽第⼆项实际上就是 − ln(1 − a) ≈ 0。反之， y = 1 ⽽ a ≈ 1。所以在实际输出和⽬标输出之间的差距越⼩，最终的交叉熵的值就越低了。（这里假设输出结果不是0，就是1，实际分类也是这样的）</p><p>​    综上所述，交叉熵是⾮负的，在神经元达到很好的正确率的时候会接近 0。这些其实就是我们想要的代价函数的特性。其实这些特性也是⼆次代价函数具备的。所以，交叉熵就是很好的选择了。但是交叉熵代价函数有⼀个⽐⼆次代价函数更好的特性就是它避免了学习速度下降的问题。为了弄清楚这个情况，我们来算算交叉熵函数关于权重的偏导数。我们将$a={\varsigma}(z)$代⼊到 公式中应⽤两次链式法则，得到：</p><p>$\begin{eqnarray}\frac{\partial C}{\partial w_{j}}&amp;=&amp;-\frac{1}{n}\sum \frac{\partial }{\partial w_{j}}[ylna+(1-y)ln(1-a)]\&amp;=&amp;-\frac{1}{n}\sum \frac{\partial }{\partial a}[ylna+(1-y)ln(1-a)]<em>\frac{\partial a}{\partial w_{j}}\&amp;=&amp;-\frac{1}{n}\sum (\frac{y}{a}-\frac{1-y}{1-a})</em>\frac{\partial a}{\partial w_{j}}\&amp;=&amp;-\frac{1}{n}\sum (\frac{y}{\varsigma(z)}-\frac{1-y}{1-\varsigma(z)})\frac{\partial \varsigma(z)}{\partial w_{j}}\&amp;=&amp;-\frac{1}{n}\sum (\frac{y}{\varsigma(z)}-\frac{1-y}{1-\varsigma(z)}){\varsigma}’(z)x_{j}\end{eqnarray}$</p><p>​    根据$\varsigma(z)=\frac{1}{1+e^{-z}}$ 的定义，和⼀些运算，我们可以得到 ${\varsigma}’(z)=\varsigma(z)(1-\varsigma(z))$。化简后可得：</p><p>$\frac{\partial C}{\partial w_{j}}=\frac{1}{n}\sum x_{j}({\varsigma}(z)-y)$</p><p>​    这是⼀个优美的公式。它告诉我们权重学习的速度受到$\varsigma(z)-y$，也就是输出中的误差的控制。更⼤的误差，更快的学习速度。这是我们直觉上期待的结果。特别地，这个代价函数还避免了像在⼆次代价函数中类似⽅程中${\varsigma}’(z)$导致的学习缓慢。当我们使⽤交叉熵的时候，${\varsigma}’(z)$被约掉了，所以我们不再需要关⼼它是不是变得很⼩。这种约除就是交叉熵带来的特效。实际上，这也并不是⾮常奇迹的事情。我们在后⾯可以看到，交叉熵其实只是满⾜这种特性的⼀种选择罢了。</p><p>​    根据类似的⽅法，我们可以计算出关于偏置的偏导数。我这⾥不再给出详细的过程，你可以轻易验证得到：</p><p>$\frac{\partial C}{\partial b}=\frac{1}{n}\sum ({\varsigma}(z)-y)$</p><p>​    再⼀次, 这避免了⼆次代价函数中类似${\varsigma}’(z)$项导致的学习缓慢。</p><h3 id="3-4-11-为什么Tanh收敛速度比Sigmoid快？"><a href="#3-4-11-为什么Tanh收敛速度比Sigmoid快？" class="headerlink" title="3.4.11 为什么Tanh收敛速度比Sigmoid快？"></a>3.4.11 为什么Tanh收敛速度比Sigmoid快？</h3><p>$tanh^{,}(x)=1-tanh(x)^{2}\in (0,1)$</p><p>$s^{,}(x)=s(x)*(1-s(x))\in (0,\frac{1}{4}]$</p><p>由上面两个公式可知tanh(x)梯度消失的问题比sigmoid轻，所以Tanh收敛速度比Sigmoid快。</p><h2 id="3-5-Batch-Size"><a href="#3-5-Batch-Size" class="headerlink" title="3.5 Batch_Size"></a>3.5 Batch_Size</h2><h3 id="3-5-1-为什么需要-Batch-Size？"><a href="#3-5-1-为什么需要-Batch-Size？" class="headerlink" title="3.5.1 为什么需要 Batch_Size？"></a>3.5.1 为什么需要 Batch_Size？</h3><p>Batch的选择，首先决定的是下降的方向。</p><p>如果数据集比较小，可采用全数据集的形式，好处是：</p><ol><li>由全数据集确定的方向能够更好地代表样本总体，从而更准确地朝向极值所在的方向。</li><li>由于不同权重的梯度值差别巨大，因此选取一个全局的学习率很困难。 Full Batch Learning 可以使用 Rprop 只基于梯度符号并且针对性单独更新各权值。</li></ol><p>对于更大的数据集，假如采用全数据集的形式，坏处是：</p><ol><li>随着数据集的海量增长和内存限制，一次性载入所有的数据进来变得越来越不可行。</li><li>以 Rprop 的方式迭代，会由于各个 Batch 之间的采样差异性，各次梯度修正值相互抵消，无法修正。这才有了后来 RMSProp 的妥协方案。 </li></ol><h3 id="3-5-2-Batch-Size-值的选择"><a href="#3-5-2-Batch-Size-值的选择" class="headerlink" title="3.5.2 Batch_Size 值的选择"></a>3.5.2 Batch_Size 值的选择</h3><p>假如每次只训练一个样本，即 Batch_Size = 1。线性神经元在均方误差代价函数的错误面是一个抛物面，横截面是椭圆。对于多层神经元、非线性网络，在局部依然近似是抛物面。此时，每次修正方向以各自样本的梯度方向修正，横冲直撞各自为政，难以达到收敛。</p><p>既然 Batch_Size 为全数据集或者Batch_Size = 1都有各自缺点，可不可以选择一个适中的Batch_Size值呢？</p><p>此时，可采用批梯度下降法（Mini-batches Learning）。因为如果数据集足够充分，那么用一半（甚至少得多）的数据训练算出来的梯度与用全部数据训练出来的梯度是几乎一样的。</p><h3 id="3-5-3-在合理范围内，增大Batch-Size有何好处？"><a href="#3-5-3-在合理范围内，增大Batch-Size有何好处？" class="headerlink" title="3.5.3 在合理范围内，增大Batch_Size有何好处？"></a>3.5.3 在合理范围内，增大Batch_Size有何好处？</h3><ol><li>内存利用率提高了，大矩阵乘法的并行化效率提高。</li><li>跑完一次 epoch（全数据集）所需的迭代次数减少，对于相同数据量的处理速度进一步加快。</li><li>在一定范围内，一般来说 Batch_Size 越大，其确定的下降方向越准，引起训练震荡越小。</li></ol><h3 id="3-5-4-盲目增大-Batch-Size-有何坏处？"><a href="#3-5-4-盲目增大-Batch-Size-有何坏处？" class="headerlink" title="3.5.4 盲目增大 Batch_Size 有何坏处？"></a>3.5.4 盲目增大 Batch_Size 有何坏处？</h3><ol><li>内存利用率提高了，但是内存容量可能撑不住了。</li><li>跑完一次 epoch（全数据集）所需的迭代次数减少，要想达到相同的精度，其所花费的时间大大增加了，从而对参数的修正也就显得更加缓慢。</li><li>Batch_Size 增大到一定程度，其确定的下降方向已经基本不再变化。</li></ol><h3 id="3-5-5-调节-Batch-Size-对训练效果影响到底如何？"><a href="#3-5-5-调节-Batch-Size-对训练效果影响到底如何？" class="headerlink" title="3.5.5 调节 Batch_Size 对训练效果影响到底如何？"></a>3.5.5 调节 Batch_Size 对训练效果影响到底如何？</h3><ol><li>Batch_Size 太小，模型表现效果极其糟糕(error飙升)。</li><li>随着 Batch_Size 增大，处理相同数据量的速度越快。</li><li>随着 Batch_Size 增大，达到相同精度所需要的 epoch 数量越来越多。</li><li>由于上述两种因素的矛盾， Batch_Size 增大到某个时候，达到时间上的最优。</li><li>由于最终收敛精度会陷入不同的局部极值，因此 Batch_Size 增大到某些时候，达到最终收敛精度上的最优。 </li></ol><h3 id="3-5-6-受限于客观条件无法给足够的Batch-Size怎么办？"><a href="#3-5-6-受限于客观条件无法给足够的Batch-Size怎么办？" class="headerlink" title="3.5.6 受限于客观条件无法给足够的Batch Size怎么办？"></a>3.5.6 受限于客观条件无法给足够的Batch Size怎么办？</h3><p>在极小的情况下（低于十），建议使用<a href="https://arxiv.org/abs/1803.08494" target="_blank" rel="noopener">Group Norm</a>。</p><h2 id="3-6-归一化"><a href="#3-6-归一化" class="headerlink" title="3.6 归一化"></a>3.6 归一化</h2><h3 id="3-6-1-归一化含义？"><a href="#3-6-1-归一化含义？" class="headerlink" title="3.6.1 归一化含义？"></a>3.6.1 归一化含义？</h3><p>归一化的具体作用是归纳统一样本的统计分布性。归一化在 $ 0-1$ 之间是统计的概率分布，归一化在$ -1–+1$ 之间是统计的坐标分布。归一化有同一、统一和合一的意思。无论是为了建模还是为了计算，首先基本度量单位要同一，神经网络是以样本在事件中的统计分别几率来进行训练（概率计算）和预测的，且 sigmoid 函数的取值是 0 到 1 之间的，网络最后一个节点的输出也是如此，所以经常要对样本的输出归一化处理。归一化是统一在 $ 0-1 $ 之间的统计概率分布，当所有样本的输入信号都为正值时，与第一隐含层神经元相连的权值只能同时增加或减小，从而导致学习速度很慢。另外在数据中常存在奇异样本数据，奇异样本数据存在所引起的网络训练时间增加，并可能引起网络无法收敛。为了避免出现这种情况及后面数据处理的方便，加快网络学习速度，可以对输入信号进行归一化，使得所有样本的输入信号其均值接近于 0 或与其均方差相比很小。</p><h3 id="3-6-2-为什么要归一化？"><a href="#3-6-2-为什么要归一化？" class="headerlink" title="3.6.2 为什么要归一化？"></a>3.6.2 为什么要归一化？</h3><ol><li>为了后面数据处理的方便，归一化的确可以避免一些不必要的数值问题。</li><li>为了程序运行时收敛加快。 下面图解。</li><li>同一量纲。样本数据的评价标准不一样，需要对其量纲化，统一评价标准。这算是应用层面的需求。</li><li>避免神经元饱和。啥意思？就是当神经元的激活在接近 0 或者 1 时会饱和，在这些区域，梯度几乎为 0，这样，在反向传播过程中，局部梯度就会接近 0，这会有效地“杀死”梯度。</li><li>保证输出数据中数值小的不被吞食。 </li></ol><h3 id="3-6-3-为什么归一化能提高求解最优解速度？"><a href="#3-6-3-为什么归一化能提高求解最优解速度？" class="headerlink" title="3.6.3 为什么归一化能提高求解最优解速度？"></a>3.6.3 为什么归一化能提高求解最优解速度？</h3><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-36.png" alt=""></p><p>上图是代表数据是否均一化的最优解寻解过程（圆圈可以理解为等高线）。左图表示未经归一化操作的寻解过程，右图表示经过归一化后的寻解过程。</p><p>当使用梯度下降法寻求最优解时，很有可能走“之字型”路线（垂直等高线走），从而导致需要迭代很多次才能收敛；而右图对两个原始特征进行了归一化，其对应的等高线显得很圆，在梯度下降进行求解时能较快的收敛。</p><p>因此如果机器学习模型使用梯度下降法求最优解时，归一化往往非常有必要，否则很难收敛甚至不能收敛。</p><h3 id="3-6-4-3D-图解未归一化"><a href="#3-6-4-3D-图解未归一化" class="headerlink" title="3.6.4 3D 图解未归一化"></a>3.6.4 3D 图解未归一化</h3><p>例子：</p><p>假设 $ w1 $ 的范围在 $ [-10, 10] $，而 $ w2 $ 的范围在 $ [-100, 100] $，梯度每次都前进 1 单位，那么在 $ w1 $ 方向上每次相当于前进了 $ 1/20 $，而在 $ w2 $ 上只相当于 $ 1/200 $！某种意义上来说，在 $ w2 $ 上前进的步长更小一些,而 $ w1 $ 在搜索过程中会比 $ w2 $ “走”得更快。</p><p>这样会导致，在搜索过程中更偏向于 $ w1 $ 的方向。走出了“L”形状，或者成为“之”字形。</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-37.png" alt=""></p><h3 id="3-6-5-归一化有哪些类型？"><a href="#3-6-5-归一化有哪些类型？" class="headerlink" title="3.6.5 归一化有哪些类型？"></a>3.6.5 归一化有哪些类型？</h3><ol><li>线性归一化</li></ol><p>$$<br>x^{\prime} = \frac{x-min(x)}{max(x) - min(x)}<br>$$</p><p>适用范围：比较适用在数值比较集中的情况。</p><p>缺点：如果 max 和 min 不稳定，很容易使得归一化结果不稳定，使得后续使用效果也不稳定。</p><ol start="2"><li>标准差标准化</li></ol><p>$$<br>x^{\prime} = \frac{x-\mu}{\sigma}<br>$$</p><p>含义：经过处理的数据符合标准正态分布，即均值为 0，标准差为 1 其中 $ \mu $ 为所有样本数据的均值，$ \sigma $ 为所有样本数据的标准差。</p><ol start="3"><li>非线性归一化</li></ol><p>适用范围：经常用在数据分化比较大的场景，有些数值很大，有些很小。通过一些数学函数，将原始值进行映射。该方法包括 $ log $、指数，正切等。</p><h3 id="3-6-6-局部响应归一化作用"><a href="#3-6-6-局部响应归一化作用" class="headerlink" title="3.6.6 局部响应归一化作用"></a>3.6.6 局部响应归一化作用</h3><p>LRN 是一种提高深度学习准确度的技术方法。LRN 一般是在激活、池化函数后的一种方法。</p><p>在 ALexNet 中，提出了 LRN 层，对局部神经元的活动创建竞争机制，使其中响应比较大对值变得相对更大，并抑制其他反馈较小的神经元，增强了模型的泛化能力。</p><h3 id="3-6-7理解局部响应归一化公式"><a href="#3-6-7理解局部响应归一化公式" class="headerlink" title="3.6.7理解局部响应归一化公式"></a>3.6.7理解局部响应归一化公式</h3><p>答案来源：<a href="https://blog.csdn.net/yangdashi888/article/details/77918311" target="_blank" rel="noopener">深度学习的局部响应归一化LRN(Local Response Normalization)理解</a></p><p>局部响应归一化原理是仿造生物学上活跃的神经元对相邻神经元的抑制现象（侧抑制），根据论文其公式如下：</p><p>$$<br>b_{x,y}^i = a_{x,y}^i / (k + \alpha \sum_{j=max(0, i-n/2)}^{min(N-1, i+n/2)}(a_{x,y}^j)^2 )^\beta<br>$$</p><p>其中，<br>1) $ a $：表示卷积层（包括卷积操作和池化操作）后的输出结果，是一个四维数组[batch,height,width,channel]。</p><ul><li>batch：批次数(每一批为一张图片)。</li><li>height：图片高度。</li><li>width：图片宽度。</li><li>channel：通道数。可以理解成一批图片中的某一个图片经过卷积操作后输出的神经元个数，或理解为处理后的图片深度。</li></ul><p>2) $ a_{x,y}^i $ 表示在这个输出结构中的一个位置 $ [a,b,c,d] $，可以理解成在某一张图中的某一个通道下的某个高度和某个宽度位置的点，即第 $ a $ 张图的第 $ d $ 个通道下的高度为b宽度为c的点。</p><p>3) $ N $：论文公式中的 $ N $ 表示通道数 (channel)。</p><p>4) $ a $，$ n/2 $， $ k $ 分别表示函数中的 input,depth_radius,bias。参数 $ k, n, \alpha, \beta $ 都是超参数，一般设置 $ k=2, n=5, \alpha=1*e-4, \beta=0.75 $</p><p>5) $ \sum $：$ \sum $ 叠加的方向是沿着通道方向的，即每个点值的平方和是沿着 $ a $ 中的第 3 维 channel 方向的，也就是一个点同方向的前面 $ n/2 $ 个通道（最小为第 $ 0 $ 个通道）和后 $ n/2 $ 个通道（最大为第 $ d-1 $ 个通道）的点的平方和(共 $ n+1 $ 个点)。而函数的英文注解中也说明了把 input 当成是 $ d $ 个 3 维的矩阵，说白了就是把 input 的通道数当作 3 维矩阵的个数，叠加的方向也是在通道方向。 </p><p>简单的示意图如下：</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-38.png" alt=""></p><h3 id="3-6-8-什么是批归一化（Batch-Normalization）"><a href="#3-6-8-什么是批归一化（Batch-Normalization）" class="headerlink" title="3.6.8 什么是批归一化（Batch Normalization）"></a>3.6.8 什么是批归一化（Batch Normalization）</h3><p>以前在神经网络训练中，只是对输入层数据进行归一化处理，却没有在中间层进行归一化处理。要知道，虽然我们对输入数据进行了归一化处理，但是输入数据经过 $ \sigma(WX+b) $ 这样的矩阵乘法以及非线性运算之后，其数据分布很可能被改变，而随着深度网络的多层运算之后，数据分布的变化将越来越大。如果我们能在网络的中间也进行归一化处理，是否对网络的训练起到改进作用呢？答案是肯定的。 </p><p>这种在神经网络中间层也进行归一化处理，使训练效果更好的方法，就是批归一化Batch Normalization（BN）。</p><h3 id="3-6-9-批归一化（BN）算法的优点"><a href="#3-6-9-批归一化（BN）算法的优点" class="headerlink" title="3.6.9 批归一化（BN）算法的优点"></a>3.6.9 批归一化（BN）算法的优点</h3><p>下面我们来说一下BN算法的优点： </p><ol><li>减少了人为选择参数。在某些情况下可以取消 dropout 和 L2 正则项参数,或者采取更小的 L2 正则项约束参数； </li><li>减少了对学习率的要求。现在我们可以使用初始很大的学习率或者选择了较小的学习率，算法也能够快速训练收敛； </li><li>可以不再使用局部响应归一化。BN 本身就是归一化网络(局部响应归一化在 AlexNet 网络中存在) </li><li>破坏原来的数据分布，一定程度上缓解过拟合（防止每批训练中某一个样本经常被挑选到，文献说这个可以提高 1% 的精度）。 </li><li>减少梯度消失，加快收敛速度，提高训练精度。</li></ol><h3 id="3-6-10-批归一化（BN）算法流程"><a href="#3-6-10-批归一化（BN）算法流程" class="headerlink" title="3.6.10 批归一化（BN）算法流程"></a>3.6.10 批归一化（BN）算法流程</h3><p>下面给出 BN 算法在训练时的过程</p><p>输入：上一层输出结果 $ X = {x_1, x_2, …, x_m} $，学习参数 $ \gamma, \beta $</p><p>算法流程：</p><ol><li>计算上一层输出数据的均值</li></ol><p>$$<br>\mu_{\beta} = \frac{1}{m} \sum_{i=1}^m(x_i)<br>$$</p><p>其中，$ m $ 是此次训练样本 batch 的大小。</p><ol start="2"><li>计算上一层输出数据的标准差</li></ol><p>$$<br>\sigma_{\beta}^2 = \frac{1}{m} \sum_{i=1}^m (x_i - \mu_{\beta})^2<br>$$</p><ol start="3"><li>归一化处理，得到</li></ol><p>$$<br>\hat x_i = \frac{x_i + \mu_{\beta}}{\sqrt{\sigma_{\beta}^2} + \epsilon}<br>$$</p><p>其中 $ \epsilon $ 是为了避免分母为 0 而加进去的接近于 0 的很小值</p><ol start="4"><li>重构，对经过上面归一化处理得到的数据进行重构，得到</li></ol><p>$$<br>y_i = \gamma \hat x_i + \beta<br>$$</p><p>其中，$ \gamma, \beta $ 为可学习参数。</p><p>注：上述是 BN 训练时的过程，但是当在投入使用时，往往只是输入一个样本，没有所谓的均值 $ \mu_{\beta} $ 和标准差 $ \sigma_{\beta}^2 $。此时，均值 $ \mu_{\beta} $ 是计算所有 batch $ \mu_{\beta} $ 值的平均值得到，标准差 $ \sigma_{\beta}^2 $ 采用每个batch $ \sigma_{\beta}^2 $  的无偏估计得到。</p><h3 id="3-6-11-批归一化和群组归一化"><a href="#3-6-11-批归一化和群组归一化" class="headerlink" title="3.6.11 批归一化和群组归一化"></a>3.6.11 批归一化和群组归一化</h3><p>批量归一化（Batch Normalization，以下简称 BN）是深度学习发展中的一项里程碑式技术，可让各种网络并行训练。但是，批量维度进行归一化会带来一些问题——批量统计估算不准确导致批量变小时，BN 的误差会迅速增加。在训练大型网络和将特征转移到计算机视觉任务中（包括检测、分割和视频），内存消耗限制了只能使用小批量的 BN。</p><p>何恺明团队在<a href="http://tech.ifeng.com/a/20180324/44918599_0.shtml" target="_blank" rel="noopener">群组归一化（Group Normalization）</a> 中提出群组归一化 Group Normalization (简称 GN) 作为 BN 的替代方案。</p><p>GN 将通道分成组，并在每组内计算归一化的均值和方差。GN 的计算与批量大小无关，并且其准确度在各种批量大小下都很稳定。在 ImageNet 上训练的 ResNet-50上，GN 使用批量大小为 2 时的错误率比 BN 的错误率低 10.6％ ;当使用典型的批量时，GN 与 BN 相当，并且优于其他标归一化变体。而且，GN 可以自然地从预训练迁移到微调。在进行 COCO 中的目标检测和分割以及 Kinetics 中的视频分类比赛中，GN 可以胜过其竞争对手，表明 GN 可以在各种任务中有效地取代强大的 BN。</p><h3 id="3-6-12-Weight-Normalization和Batch-Normalization"><a href="#3-6-12-Weight-Normalization和Batch-Normalization" class="headerlink" title="3.6.12 Weight Normalization和Batch Normalization"></a>3.6.12 Weight Normalization和Batch Normalization</h3><p>答案来源：<a href="https://www.zhihu.com/question/55132852/answer/171250929" target="_blank" rel="noopener">Weight Normalization 相比batch Normalization 有什么优点呢？</a></p><p>Weight Normalization 和 Batch Normalization 都属于参数重写（Reparameterization）的方法，只是采用的方式不同，Weight Normalization 是对网络权值$  W $ 进行 normalization，因此也称为 Weight Normalization；Batch Normalization 是对网络某一层输入数据进行 normalization。Weight Normalization相比Batch Normalization有以下三点优势：</p><ol><li><p>Weight Normalization 通过重写深度学习网络的权重W的方式来加速深度学习网络参数收敛，没有引入 minbatch 的依赖，适用于 RNN（LSTM）网络（Batch Normalization 不能直接用于RNN，进行 normalization 操作，原因在于：1) RNN 处理的 Sequence 是变长的；2) RNN 是基于 time step 计算，如果直接使用 Batch Normalization 处理，需要保存每个 time step 下，mini btach 的均值和方差，效率低且占内存）。</p></li><li><p>Batch Normalization 基于一个 mini batch 的数据计算均值和方差，而不是基于整个 Training set 来做，相当于进行梯度计算式引入噪声。因此，Batch Normalization 不适用于对噪声敏感的强化学习、生成模型（Generative model：GAN，VAE）使用。相反，Weight Normalization 对通过标量 $ g $ 和向量 $ v $ 对权重 $ W $ 进行重写，重写向量 $ v $ 是固定的，因此，基于 Weight Normalization 的 Normalization 可以看做比 Batch Normalization 引入更少的噪声。    </p></li><li><p>不需要额外的存储空间来保存 mini batch 的均值和方差，同时实现 Weight Normalization 时，对深度学习网络进行正向信号传播和反向梯度计算带来的额外计算开销也很小。因此，要比采用 Batch Normalization 进行 normalization 操作时，速度快。  但是 Weight Normalization 不具备 Batch Normalization 把网络每一层的输出 Y 固定在一个变化范围的作用。因此，采用 Weight Normalization 进行 Normalization 时需要特别注意参数初始值的选择。</p></li></ol><h3 id="3-6-13-Batch-Normalization在什么时候用比较合适？"><a href="#3-6-13-Batch-Normalization在什么时候用比较合适？" class="headerlink" title="3.6.13 Batch Normalization在什么时候用比较合适？"></a>3.6.13 Batch Normalization在什么时候用比较合适？</h3><p>在CNN中，BN应作用在非线性映射前。在神经网络训练时遇到收敛速度很慢，或梯度爆炸等无法训练的状况时可以尝试BN来解决。另外，在一般使用情况下也可以加入BN来加快训练速度，提高模型精度。</p><p>BN比较适用的场景是：每个mini-batch比较大，数据分布比较接近。在进行训练之前，要做好充分的shuffle，否则效果会差很多。另外，由于BN需要在运行过程中统计每个mini-batch的一阶统计量和二阶统计量，因此不适用于动态的网络结构和RNN网络。</p><h2 id="3-7-预训练与微调-fine-tuning"><a href="#3-7-预训练与微调-fine-tuning" class="headerlink" title="3.7 预训练与微调(fine tuning)"></a>3.7 预训练与微调(fine tuning)</h2><h3 id="3-7-1-为什么无监督预训练可以帮助深度学习？"><a href="#3-7-1-为什么无监督预训练可以帮助深度学习？" class="headerlink" title="3.7.1 为什么无监督预训练可以帮助深度学习？"></a>3.7.1 为什么无监督预训练可以帮助深度学习？</h3><p>答案来源：<a href="http://blog.csdn.net/Richard_More/article/details/52334272?locationNum=3&amp;fps=1" target="_blank" rel="noopener">为什么无监督的预训练可以帮助深度学习</a></p><p>深度网络存在问题:</p><ol><li><p>网络越深，需要的训练样本数越多。若用监督则需大量标注样本，不然小规模样本容易造成过拟合。深层网络特征比较多，会出现的多特征问题主要有多样本问题、规则化问题、特征选择问题。</p></li><li><p>多层神经网络参数优化是个高阶非凸优化问题，经常得到收敛较差的局部解；</p></li><li><p>梯度扩散问题，BP算法计算出的梯度随着深度向前而显著下降，导致前面网络参数贡献很小，更新速度慢。</p></li></ol><p><strong>解决方法：</strong></p><p>逐层贪婪训练，无监督预训练（unsupervised pre-training）即训练网络的第一个隐藏层，再训练第二个…最后用这些训练好的网络参数值作为整体网络参数的初始值。</p><p>经过预训练最终能得到比较好的局部最优解。</p><h3 id="3-7-2-什么是模型微调fine-tuning"><a href="#3-7-2-什么是模型微调fine-tuning" class="headerlink" title="3.7.2 什么是模型微调fine tuning"></a>3.7.2 什么是模型微调fine tuning</h3><p>用别人的参数、修改后的网络和自己的数据进行训练，使得参数适应自己的数据，这样一个过程，通常称之为微调（fine tuning). </p><p><strong>模型的微调举例说明：</strong></p><p>我们知道，CNN 在图像识别这一领域取得了巨大的进步。如果想将 CNN 应用到我们自己的数据集上，这时通常就会面临一个问题：通常我们的 dataset 都不会特别大，一般不会超过 1 万张，甚至更少，每一类图片只有几十或者十几张。这时候，直接应用这些数据训练一个网络的想法就不可行了，因为深度学习成功的一个关键性因素就是大量带标签数据组成的训练集。如果只利用手头上这点数据，即使我们利用非常好的网络结构，也达不到很高的 performance。这时候，fine-tuning 的思想就可以很好解决我们的问题：我们通过对 ImageNet 上训练出来的模型（如CaffeNet,VGGNet,ResNet) 进行微调，然后应用到我们自己的数据集上。</p><h3 id="3-7-3-微调时候网络参数是否更新？"><a href="#3-7-3-微调时候网络参数是否更新？" class="headerlink" title="3.7.3 微调时候网络参数是否更新？"></a>3.7.3 微调时候网络参数是否更新？</h3><p>会更新。</p><ol><li>finetune 的过程相当于继续训练，跟直接训练的区别是初始化的时候。 </li><li>直接训练是按照网络定义指定的方式初始化。</li><li>finetune是用你已经有的参数文件来初始化。</li></ol><h3 id="3-7-4-fine-tuning-模型的三种状态"><a href="#3-7-4-fine-tuning-模型的三种状态" class="headerlink" title="3.7.4 fine-tuning 模型的三种状态"></a>3.7.4 fine-tuning 模型的三种状态</h3><ol><li><p>状态一：只预测，不训练。<br>特点：相对快、简单，针对那些已经训练好，现在要实际对未知数据进行标注的项目，非常高效；</p></li><li><p>状态二：训练，但只训练最后分类层。<br>特点：fine-tuning的模型最终的分类以及符合要求，现在只是在他们的基础上进行类别降维。</p></li><li><p>状态三：完全训练，分类层+之前卷积层都训练<br>特点：跟状态二的差异很小，当然状态三比较耗时和需要训练GPU资源，不过非常适合fine-tuning到自己想要的模型里面，预测精度相比状态二也提高不少。</p></li></ol><h2 id="3-8-权重偏差初始化"><a href="#3-8-权重偏差初始化" class="headerlink" title="3.8 权重偏差初始化"></a>3.8 权重偏差初始化</h2><h3 id="3-8-1-全都初始化为-0"><a href="#3-8-1-全都初始化为-0" class="headerlink" title="3.8.1 全都初始化为 0"></a>3.8.1 全都初始化为 0</h3><p><strong>偏差初始化陷阱</strong>： 都初始化为 0。</p><p><strong>产生陷阱原因</strong>：因为并不知道在训练神经网络中每一个权重最后的值，但是如果进行了恰当的数据归一化后，我们可以有理由认为有一半的权重是正的，另一半是负的。令所有权重都初始化为 0，如果神经网络计算出来的输出值是一样的，神经网络在进行反向传播算法计算出来的梯度值也一样，并且参数更新值也一样。更一般地说，如果权重初始化为同一个值，网络就是对称的。</p><p><strong>形象化理解</strong>：在神经网络中考虑梯度下降的时候，设想你在爬山，但身处直线形的山谷中，两边是对称的山峰。由于对称性，你所在之处的梯度只能沿着山谷的方向，不会指向山峰；你走了一步之后，情况依然不变。结果就是你只能收敛到山谷中的一个极大值，而走不到山峰上去。</p><h3 id="3-8-2-全都初始化为同样的值"><a href="#3-8-2-全都初始化为同样的值" class="headerlink" title="3.8.2 全都初始化为同样的值"></a>3.8.2 全都初始化为同样的值</h3><p>偏差初始化陷阱： 都初始化为一样的值。<br>以一个三层网络为例：<br>首先看下结构</p><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-39.jpg" alt=""></p><p>它的表达式为： </p><p>$$<br>a_1^{(2)} = f(W_{11}^{(1)} x_1 + W_{12}^{(1)} x_2 + W_{13}^{(1)} x_3 + b_1^{(1)})</p><p>a_2^{(2)} = f(W_{21}^{(1)} x_1 + W_{22}^{(1)} x_2 + W_{23}^{(1)} x_3 + b_2^{(1)})</p><p>a_3^{(2)} = f(W_{31}^{(1)} x_1 + W_{32}^{(1)} x_2 + W_{33}^{(1)} x_3 + b_3^{(1)})</p><p>h_{W,b}(x) = a_1^{(3)} = f(W_{11}^{(2)} a_1^{(2)} + W_{12}^{(2)} a_2^{(2)} + W_{13}^{(2)} a_3^{(2)} + b_1^{(2)})<br>$$</p><p>如果每个权重都一样，那么在多层网络中，从第二层开始，每一层的输入值都是相同的了也就是$ a1=a2=a3=…. $，既然都一样，就相当于一个输入了，为啥呢？？</p><p>如果是反向传递算法（如果这里不明白请看上面的连接），其中的偏置项和权重项的迭代的偏导数计算公式如下</p><p>$$<br>\frac{\partial}{\partial W_{ij}^{(l)}} J(W,b;x,y) = a_j^{(l)} \delta_i^{(l+1)}</p><p>\frac{\partial}{\partial b_{i}^{(l)}} J(W,b;x,y) = \delta_i^{(l+1)}<br>$$</p><p>$ \delta $ 的计算公式</p><p>$$<br>\delta_i^{(l)} = (\sum_{j=1}^{s_{t+1}} W_{ji}^{(l)} \delta_j^{(l+1)} ) f^{\prime}(z_i^{(l)})<br>$$</p><p>如果用的是 sigmoid 函数</p><p>$$<br>f^{\prime}(z_i^{(l)}) = a_i^{(l)}(1-a_i^{(l)})<br>$$</p><p>把后两个公式代入，可以看出所得到的梯度下降法的偏导相同，不停的迭代，不停的相同，不停的迭代，不停的相同……，最后就得到了相同的值（权重和截距）。</p><h3 id="3-8-3-初始化为小的随机数"><a href="#3-8-3-初始化为小的随机数" class="headerlink" title="3.8.3 初始化为小的随机数"></a>3.8.3 初始化为小的随机数</h3><p>将权重初始化为很小的数字是一个普遍的打破网络对称性的解决办法。这个想法是，神经元在一开始都是随机的、独一无二的，所以它们会计算出不同的更新，并将自己整合到整个网络的各个部分。一个权重矩阵的实现可能看起来像 $ W=0.01∗np.random.randn(D,H) $，其中 randn 是从均值为 0 的单位标准高斯分布进行取样。通过这个公式(函数)，每个神经元的权重向量初始化为一个从多维高斯分布取样的随机向量，所以神经元在输入空间中指向随机的方向(so the neurons point in random direction in the input space). 应该是指输入空间对于随机方向有影响)。其实也可以从均匀分布中来随机选取小数，但是在实际操作中看起来似乎对最后的表现并没有太大的影响。</p><p>备注：警告：并不是数字越小就会表现的越好。比如，如果一个神经网络层的权重非常小，那么在反向传播算法就会计算出很小的梯度(因为梯度 gradient 是与权重成正比的)。在网络不断的反向传播过程中将极大地减少“梯度信号”，并可能成为深层网络的一个需要注意的问题。</p><h3 id="3-8-4-用-1-sqrt-n-校准方差"><a href="#3-8-4-用-1-sqrt-n-校准方差" class="headerlink" title="3.8.4 用 $ 1/\sqrt n $ 校准方差"></a>3.8.4 用 $ 1/\sqrt n $ 校准方差</h3><p>上述建议的一个问题是，随机初始化神经元的输出的分布有一个随输入量增加而变化的方差。结果证明，我们可以通过将其权重向量按其输入的平方根(即输入的数量)进行缩放，从而将每个神经元的输出的方差标准化到 1。也就是说推荐的启发式方法 (heuristic) 是将每个神经元的权重向量按下面的方法进行初始化: $ w=np.random.randn(n)/\sqrt n $，其中 n 表示输入的数量。这保证了网络中所有的神经元最初的输出分布大致相同，并在经验上提高了收敛速度。</p><h3 id="3-8-5-稀疏初始化-Sparse-Initialazation"><a href="#3-8-5-稀疏初始化-Sparse-Initialazation" class="headerlink" title="3.8.5 稀疏初始化(Sparse Initialazation)"></a>3.8.5 稀疏初始化(Sparse Initialazation)</h3><p>另一种解决未校准方差问题的方法是把所有的权重矩阵都设为零，但是为了打破对称性，每个神经元都是随机连接地(从如上面所介绍的一个小的高斯分布中抽取权重)到它下面的一个固定数量的神经元。一个典型的神经元连接的数目可能是小到 10 个。</p><h3 id="3-8-6-初始化偏差"><a href="#3-8-6-初始化偏差" class="headerlink" title="3.8.6 初始化偏差"></a>3.8.6 初始化偏差</h3><p>将偏差初始化为零是可能的，也是很常见的，因为非对称性破坏是由权重的小随机数导致的。因为 ReLU 具有非线性特点，所以有些人喜欢使用将所有的偏差设定为小的常数值如 0.01，因为这样可以确保所有的 ReLU 单元在最开始就激活触发(fire)并因此能够获得和传播一些梯度值。然而，这是否能够提供持续的改善还不太清楚(实际上一些结果表明这样做反而使得性能更加糟糕)，所以更通常的做法是简单地将偏差初始化为 0.</p><h2 id="3-9-Softmax"><a href="#3-9-Softmax" class="headerlink" title="3.9 Softmax"></a>3.9 Softmax</h2><h3 id="3-9-1-Softmax-定义及作用"><a href="#3-9-1-Softmax-定义及作用" class="headerlink" title="3.9.1 Softmax 定义及作用"></a>3.9.1 Softmax 定义及作用</h3><p>Softmax 是一种形如下式的函数：</p><p>$$<br>P(i) = \frac{exp(\theta_i^T x)}{\sum_{k=1}^{K} exp(\theta_i^T x)}<br>$$</p><p>其中，$ \theta_i $ 和 $ x $ 是列向量，$ \theta_i^T x $ 可能被换成函数关于 $ x $ 的函数 $ f_i(x) $</p><p>通过 softmax 函数，可以使得 $ P(i) $ 的范围在 $ [0,1] $ 之间。在回归和分类问题中，通常 $ \theta $ 是待求参数，通过寻找使得 $ P(i) $ 最大的 $ \theta_i $ 作为最佳参数。</p><p>但是，使得范围在 $ [0,1] $  之间的方法有很多，为啥要在前面加上以 $ e $ 的幂函数的形式呢？参考 logistic 函数：</p><p>$$<br>P(i) = \frac{1}{1+exp(-\theta_i^T x)}<br>$$</p><p>这个函数的作用就是使得 $ P(i) $ 在负无穷到 0 的区间趋向于 0， 在 0 到正无穷的区间趋向 1,。同样 softmax 函数加入了 $ e $ 的幂函数正是为了两极化：正样本的结果将趋近于 1，而负样本的结果趋近于 0。这样为多类别提供了方便（可以把 $ P(i) $ 看做是样本属于类别的概率）。可以说，Softmax 函数是 logistic 函数的一种泛化。</p><p>softmax 函数可以把它的输入，通常被称为 logits 或者 logit scores，处理成 0 到 1 之间，并且能够把输出归一化到和为 1。这意味着 softmax 函数与分类的概率分布等价。它是一个网络预测多酚类问题的最佳输出激活函数。</p><h3 id="3-9-2-Softmax-推导"><a href="#3-9-2-Softmax-推导" class="headerlink" title="3.9.2 Softmax 推导"></a>3.9.2 Softmax 推导</h3><h2 id="3-10-理解-One-Hot-Encodeing-原理及作用？"><a href="#3-10-理解-One-Hot-Encodeing-原理及作用？" class="headerlink" title="3.10 理解 One Hot Encodeing 原理及作用？"></a>3.10 理解 One Hot Encodeing 原理及作用？</h2><p>问题由来</p><p>在很多<strong>机器学习</strong>任务中，特征并不总是连续值，而有可能是分类值。</p><p>例如，考虑一下的三个特征：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&quot;male&quot;, &quot;female&quot;] [&quot;from Europe&quot;, &quot;from US&quot;, &quot;from Asia&quot;]</span><br><span class="line">[&quot;uses Firefox&quot;, &quot;uses Chrome&quot;, &quot;uses Safari&quot;, &quot;uses Internet Explorer&quot;]</span><br></pre></td></tr></table></figure><p>如果将上述特征用数字表示，效率会高很多。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&quot;male&quot;, &quot;from US&quot;, &quot;uses Internet Explorer&quot;] 表示为 [0, 1, 3]</span><br><span class="line">[&quot;female&quot;, &quot;from Asia&quot;, &quot;uses Chrome&quot;] 表示为 [1, 2, 1]</span><br></pre></td></tr></table></figure><p>但是，即使转化为数字表示后，上述数据也不能直接用在我们的分类器中。因为，分类器往往默认数据数据是连续的（可以计算距离？），并且是有序的（而上面这个 0 并不是说比 1 要高级）。但是，按照我们上述的表示，数字并不是有序的，而是随机分配的。</p><p><strong>独热编码</strong></p><p>为了解决上述问题，其中一种可能的解决方法是采用独热编码（One-Hot Encoding）。独热编码即 One-Hot 编码，又称一位有效编码，其方法是使用N位状态寄存器来对 N 个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自然状态码为：000,001,010,011,100,101</span><br><span class="line">独热编码为：000001,000010,000100,001000,010000,100000</span><br></pre></td></tr></table></figure><p>可以这样理解，对于每一个特征，如果它有 m 个可能值，那么经过独热编码后，就变成了 m 个二元特征（如成绩这个特征有好，中，差变成 one-hot 就是 100, 010, 001）。并且，这些特征互斥，每次只有一个激活。因此，数据会变成稀疏的。</p><p>这样做的好处主要有：</p><ol><li>解决了分类器不好处理属性数据的问题；</li><li>在一定程度上也起到了扩充特征的作用。</li></ol><h2 id="3-11-常用的优化器有哪些"><a href="#3-11-常用的优化器有哪些" class="headerlink" title="3.11 常用的优化器有哪些"></a>3.11 常用的优化器有哪些</h2><p>分别列举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Optimizer：</span><br><span class="line">tf.train.GradientDescentOptimizer</span><br><span class="line">tf.train.AdadeltaOptimizer</span><br><span class="line">tf.train.AdagradOptimizer</span><br><span class="line">tf.train.AdagradDAOptimizer</span><br><span class="line">tf.train.MomentumOptimizer</span><br><span class="line">tf.train.AdamOptimizer</span><br><span class="line">tf.train.FtrlOptimizer</span><br><span class="line">tf.train.ProximalGradientDescentOptimizer</span><br><span class="line">tf.train.ProximalAdagradOptimizer</span><br><span class="line">tf.train.RMSPropOptimizer</span><br></pre></td></tr></table></figure><h2 id="3-12-Dropout-系列问题"><a href="#3-12-Dropout-系列问题" class="headerlink" title="3.12 Dropout 系列问题"></a>3.12 Dropout 系列问题</h2><h3 id="3-12-1-为什么要正则化？"><a href="#3-12-1-为什么要正则化？" class="headerlink" title="3.12.1 为什么要正则化？"></a>3.12.1 为什么要正则化？</h3><ol><li>深度学习可能存在过拟合问题——高方差，有两个解决方法，一个是正则化，另一个是准备更多的数据，这是非常可靠的方法，但你可能无法时时刻刻准备足够多的训练数据或者获取更多数据的成本很高，但正则化通常有助于避免过拟合或减少你的网络误差。  </li><li>如果你怀疑神经网络过度拟合了数据，即存在高方差问题，那么最先想到的方法可能是正则化，另一个解决高方差的方法就是准备更多数据，这也是非常可靠的办法，但你可能无法时时准备足够多的训练数据，或者，获取更多数据的成本很高，但正则化有助于避免过度拟合，或者减少网络误差。</li></ol><h3 id="3-12-2-为什么正则化有利于预防过拟合？"><a href="#3-12-2-为什么正则化有利于预防过拟合？" class="headerlink" title="3.12.2 为什么正则化有利于预防过拟合？"></a>3.12.2 为什么正则化有利于预防过拟合？</h3><p><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-40.png" alt=""><br><img src="/2016/12/21/第三章_深度学习基础/img/ch3/3-41.png" alt=""> </p><p>左图是高偏差，右图是高方差，中间是Just Right，这几张图我们在前面课程中看到过。  </p><h3 id="3-12-3-理解dropout正则化"><a href="#3-12-3-理解dropout正则化" class="headerlink" title="3.12.3 理解dropout正则化"></a>3.12.3 理解dropout正则化</h3><p>Dropout可以随机删除网络中的神经单元，它为什么可以通过正则化发挥如此大的作用呢？  </p><p>直观上理解：不要依赖于任何一个特征，因为该单元的输入可能随时被清除，因此该单元通过这种方式传播下去，并为单元的四个输入增加一点权重，通过传播所有权重，dropout将产生收缩权重的平方范数的效果，和之前讲的L2正则化类似；实施dropout的结果实它会压缩权重，并完成一些预防过拟合的外层正则化；L2对不同权重的衰减是不同的，它取决于激活函数倍增的大小。  </p><h3 id="3-12-4-dropout率的选择"><a href="#3-12-4-dropout率的选择" class="headerlink" title="3.12.4 dropout率的选择"></a>3.12.4 dropout率的选择</h3><ol><li>经过交叉验证，隐含节点 dropout 率等于 0.5 的时候效果最好，原因是 0.5 的时候 dropout 随机生成的网络结构最多。</li><li>dropout 也可以被用作一种添加噪声的方法，直接对 input 进行操作。输入层设为更接近 1 的数。使得输入变化不会太大（0.8） </li><li>对参数 $ w $ 的训练进行球形限制 (max-normalization)，对 dropout 的训练非常有用。</li><li>球形半径 $ c $ 是一个需要调整的参数，可以使用验证集进行参数调优。</li><li>dropout 自己虽然也很牛，但是 dropout、max-normalization、large decaying learning rates and high momentum 组合起来效果更好，比如 max-norm regularization 就可以防止大的learning rate 导致的参数 blow up。</li><li>使用 pretraining 方法也可以帮助 dropout 训练参数，在使用 dropout 时，要将所有参数都乘以 $ 1/p $。</li></ol><h3 id="3-12-5-dropout有什么缺点？"><a href="#3-12-5-dropout有什么缺点？" class="headerlink" title="3.12.5 dropout有什么缺点？"></a>3.12.5 dropout有什么缺点？</h3><p>dropout一大缺点就是代价函数J不再被明确定义，每次迭代，都会随机移除一些节点，如果再三检查梯度下降的性能，实际上是很难进行复查的。定义明确的代价函数J每次迭代后都会下降，因为我们所优化的代价函数J实际上并没有明确定义，或者说在某种程度上很难计算，所以我们失去了调试工具来绘制这样的图片。我通常会关闭dropout函数，将keep-prob的值设为1，运行代码，确保J函数单调递减。然后打开dropout函数，希望在dropout过程中，代码并未引入bug。我觉得你也可以尝试其它方法，虽然我们并没有关于这些方法性能的数据统计，但你可以把它们与dropout方法一起使用。  </p><h2 id="3-13-深度学习中常用的数据增强方法（Data-Augmentation）？（贡献者：黄钦建－华南理工大学）"><a href="#3-13-深度学习中常用的数据增强方法（Data-Augmentation）？（贡献者：黄钦建－华南理工大学）" class="headerlink" title="3.13 深度学习中常用的数据增强方法（Data Augmentation）？（贡献者：黄钦建－华南理工大学）"></a>3.13 深度学习中常用的数据增强方法（Data Augmentation）？（贡献者：黄钦建－华南理工大学）</h2><ul><li><p>Color Jittering：对颜色的数据增强：图像亮度、饱和度、对比度变化（此处对色彩抖动的理解不知是否得当）；</p></li><li><p>PCA  Jittering：首先按照RGB三个颜色通道计算均值和标准差，再在整个训练集上计算协方差矩阵，进行特征分解，得到特征向量和特征值，用来做PCA Jittering；</p></li><li><p>Random Scale：尺度变换；</p></li><li><p>Random Crop：采用随机图像差值方式，对图像进行裁剪、缩放；包括Scale Jittering方法（VGG及ResNet模型使用）或者尺度和长宽比增强变换；</p></li><li><p>Horizontal/Vertical Flip：水平/垂直翻转；</p></li><li><p>Shift：平移变换；</p></li><li><p>Rotation/Reflection：旋转/仿射变换；</p></li><li><p>Noise：高斯噪声、模糊处理；</p></li><li><p>Label Shuffle：类别不平衡数据的增广；</p></li></ul><h2 id="3-14-如何理解-Internal-Covariate-Shift？（贡献者：黄钦建－华南理工大学）"><a href="#3-14-如何理解-Internal-Covariate-Shift？（贡献者：黄钦建－华南理工大学）" class="headerlink" title="3.14 如何理解 Internal Covariate Shift？（贡献者：黄钦建－华南理工大学）"></a>3.14 如何理解 Internal Covariate Shift？（贡献者：黄钦建－华南理工大学）</h2><p>深度神经网络模型的训练为什么会很困难？其中一个重要的原因是，深度神经网络涉及到很多层的叠加，而每一层的参数更新会导致上层的输入数据分布发生变化，通过层层叠加，高层的输入分布变化会非常剧烈，这就使得高层需要不断去重新适应底层的参数更新。为了训好模型，我们需要非常谨慎地去设定学习率、初始化权重、以及尽可能细致的参数更新策略。</p><p>Google 将这一现象总结为 Internal Covariate Shift，简称 ICS。 什么是 ICS 呢？</p><p>大家都知道在统计机器学习中的一个经典假设是“源空间（source domain）和目标空间（target domain）的数据分布（distribution）是一致的”。如果不一致，那么就出现了新的机器学习问题，如 transfer learning / domain adaptation 等。而 covariate shift 就是分布不一致假设之下的一个分支问题，它是指源空间和目标空间的条件概率是一致的，但是其边缘概率不同。</p><p>大家细想便会发现，的确，对于神经网络的各层输出，由于它们经过了层内操作作用，其分布显然与各层对应的输入信号分布不同，而且差异会随着网络深度增大而增大，可是它们所能“指示”的样本标记（label）仍然是不变的，这便符合了covariate shift的定义。由于是对层间信号的分析，也即是“internal”的来由。</p><p><strong>那么ICS会导致什么问题？</strong></p><p>简而言之，每个神经元的输入数据不再是“独立同分布”。</p><p>其一，上层参数需要不断适应新的输入数据分布，降低学习速度。</p><p>其二，下层输入的变化可能趋向于变大或者变小，导致上层落入饱和区，使得学习过早停止。</p><p>其三，每层的更新都会影响到其它层，因此每层的参数更新策略需要尽可能的谨慎。</p><h2 id="3-15-什么时候用local-conv？什么时候用全卷积？-贡献者：梁志成-魅族科技"><a href="#3-15-什么时候用local-conv？什么时候用全卷积？-贡献者：梁志成-魅族科技" class="headerlink" title="3.15 什么时候用local-conv？什么时候用全卷积？(贡献者：梁志成-魅族科技)"></a>3.15 什么时候用local-conv？什么时候用全卷积？(贡献者：梁志成-魅族科技)</h2><p>1.当数据集具有全局的局部特征分布时，也就是说局部特征之间有较强的相关性，适合用全卷积。 </p><p>2.在不同的区域有不同的特征分布时，适合用local-Conv。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>强化学习</title>
    <link href="https://leesen998.github.io/2016/12/21/%E7%AC%AC%E5%8D%81%E7%AB%A0_%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://leesen998.github.io/2016/12/21/第十章_强化学习/</id>
    <published>2016-12-21T11:48:29.000Z</published>
    <updated>2019-03-21T12:46:32.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/</a></p><h1 id="第十章-强化学习"><a href="#第十章-强化学习" class="headerlink" title="第十章 强化学习"></a>第十章 强化学习</h1><h2 id="10-1-强化学习的主要特点？"><a href="#10-1-强化学习的主要特点？" class="headerlink" title="10.1 强化学习的主要特点？"></a>10.1 强化学习的主要特点？</h2><p>其他许多机器学习算法中学习器都是学得怎样做，而RL是在尝试的过程中学习到在特定的情境下选择哪种行动可以得到最大的回报。在很多场景中，当前的行动不仅会影响当前的rewards，还会影响之后的状态和一系列的rewards。RL最重要的3个特定在于：<br>(1)    基本是以一种闭环的形式；<br>(2)    不会直接指示选择哪种行动（actions）；<br>(3)    一系列的actions和奖励信号（reward signals）都会影响之后较长的时间。 </p><h3 id="10-1-1-定义"><a href="#10-1-1-定义" class="headerlink" title="10.1.1 定义"></a>10.1.1 定义</h3><p>强化学习是机器学习的一个重要分支，是多学科多领域交叉的一个产物，它的本质是解决 decision making 问题，即自动进行决策，并且可以做连续决策。<br>它主要包含四个元素，agent，环境状态，行动，奖励, 强化学习的目标就是获得最多的累计奖励。<br>我们列举几个形象的例子：<br>小孩想要走路，但在这之前，他需要先站起来，站起来之后还要保持平衡，接下来还要先迈出一条腿，是左腿还是右腿，迈出一步后还要迈出下一步。<br>小孩就是 agent，他试图通过采取行动（即行走）来操纵环境（行走的表面），并且从一个状态转变到另一个状态（即他走的每一步），当他完成任务的子任务（即走了几步）时，孩子得到奖励（给巧克力吃），并且当他不能走路时，就不会给巧克力。</p><p><img src="/2016/12/21/第十章_强化学习/img/ch10/10-1.png" alt=""></p><p>上图中agent代表自身，如果是自动驾驶，agent就是车；如果你玩游戏它就是你当前控制的游戏角色，如马里奥，马里奥往前走时环境就一直在发生变化，有小怪物或者障碍物出现，它需要通过跳跃来进行躲避，就是要做action（如向前走和跳起的动作）；无人驾驶的action就是车左转、右转或刹车等等，它无时无刻都在与环境产生交互，action会反馈给环境，进而改变环境，如果自动驾驶的车行驶目标是100米，它向前开了10米，那环境就发生了变化，所以每次产生action都会导致环境改变，环境的改变会反馈给自身（agent），就是这样的一个循环；反馈又两种方式：1、做的好（reward）即正反馈，2、做得不好（punishment惩罚）即负反馈。Agent可能做得好，也可能做的不好，环境始终都会给它反馈，agent会尽量去做对自身有利的决策，通过反反复复这样的一个循环，agent会越来越做的好，就像孩子在成长过程中会逐渐明辨是非，这就是强化学习。</p><h2 id="10-2-强化学习应用实例"><a href="#10-2-强化学习应用实例" class="headerlink" title="10.2 强化学习应用实例"></a>10.2 强化学习应用实例</h2><p>（1）Manufacturing</p><p>例如一家日本公司 Fanuc，工厂机器人在拿起一个物体时，会捕捉这个过程的视频，记住它每次操作的行动，操作成功还是失败了，积累经验，下一次可以更快更准地采取行动。</p><p><img src="/2016/12/21/第十章_强化学习/img/ch10/10-2.png" alt=""></p><p>（2）Inventory Management</p><p>在库存管理中，因为库存量大，库存需求波动较大，库存补货速度缓慢等阻碍使得管理是个比较难的问题，可以通过建立强化学习算法来减少库存周转时间，提高空间利用率。</p><p>（3）Dynamic pricing</p><p>强化学习中的 Q-learning 可以用来处理动态定价问题。</p><p>（4）Customer Delivery</p><p>制造商在向各个客户运输时，想要在满足客户的所有需求的同时降低车队总成本。通过 multi-agents 系统和 Q-learning，可以降低时间，减少车辆数量。</p><p>（5）ECommerce Personalization</p><p>在电商中，也可以用强化学习算法来学习和分析顾客行为，定制产品和服务以满足客户的个性化需求。</p><p>（6）Ad Serving</p><p>例如算法 LinUCB （属于强化学习算法 bandit 的一种算法），会尝试投放更广范围的广告，尽管过去还没有被浏览很多，能够更好地估计真实的点击率。<br>再如双 11 推荐场景中，阿里巴巴使用了深度强化学习与自适应在线学习，通过持续机器学习和模型优化建立决策引擎，对海量用户行为以及百亿级商品特征进行实时分析，帮助每一个用户迅速发现宝贝，提高人和商品的配对效率。还有，利用强化学习将手机用户点击率提升了 10-20%。</p><p>（7）Financial Investment Decisions</p><p>例如这家公司 Pit.ai，应用强化学习来评价交易策略，可以帮助用户建立交易策略，并帮助他们实现其投资目标。</p><p>（8）Medical Industry</p><p>动态治疗方案（DTR）是医学研究的一个主题，是为了给患者找到有效的治疗方法。 例如癌症这种需要长期施药的治疗，强化学习算法可以将患者的各种临床指标作为输入 来制定治疗策略。</p><h2 id="10-3-强化学习和监督式学习、非监督式学习的区别"><a href="#10-3-强化学习和监督式学习、非监督式学习的区别" class="headerlink" title="10.3 强化学习和监督式学习、非监督式学习的区别"></a>10.3 强化学习和监督式学习、非监督式学习的区别</h2><p>在机器学习中，我们比较熟知的是监督式学习，非监督学习，此外还有一个大类就是强化学习：<br>当前的机器学习算法可以分为3种：有监督的学习（Supervised Learning）、无监督的学习（Unsupervised Learning）和强化学习（Reinforcement Learning），结构图如下所示：</p><p> <img src="/2016/12/21/第十章_强化学习/img/ch10/10-3.png" alt=""></p><h3 id="10-3-1-强化学习和监督式学习的区别："><a href="#10-3-1-强化学习和监督式学习的区别：" class="headerlink" title="10.3.1 强化学习和监督式学习的区别："></a>10.3.1 强化学习和监督式学习的区别：</h3><p>监督式学习就好比你在学习的时候，有一个导师在旁边指点，他知道怎么是对的怎么是错的，但在很多实际问题中，例如 chess，go，这种有成千上万种组合方式的情况，不可能有一个导师知道所有可能的结果。</p><p>而这时，强化学习会在没有任何标签的情况下，通过先尝试做出一些行为得到一个结果，通过这个结果是对还是错的反馈，调整之前的行为，就这样不断的调整，算法能够学习到在什么样的情况下选择什么样的行为可以得到最好的结果。</p><p>就好比你有一只还没有训练好的小狗，每当它把屋子弄乱后，就减少美味食物的数量（惩罚），每次表现不错时，就加倍美味食物的数量（奖励），那么小狗最终会学到一个知识，就是把客厅弄乱是不好的行为。</p><p>两种学习方式都会学习出输入到输出的一个映射，监督式学习出的是之间的关系，可以告诉算法什么样的输入对应着什么样的输出，强化学习出的是给机器的反馈 reward function，即用来判断这个行为是好是坏。<br>另外强化学习的结果反馈有延时，有时候可能需要走了很多步以后才知道以前的某一步的选择是好还是坏，而监督学习做了比较坏的选择会立刻反馈给算法。</p><p>而且强化学习面对的输入总是在变化，每当算法做出一个行为，它影响下一次决策的输入，而监督学习的输入是独立同分布的。</p><p>通过强化学习，一个 agent 可以在探索和开发（exploration and exploitation）之间做权衡，并且选择一个最大的回报。 </p><p>exploration 会尝试很多不同的事情，看它们是否比以前尝试过的更好。 </p><p>exploitation 会尝试过去经验中最有效的行为。</p><p>一般的监督学习算法不考虑这种平衡，就只是是 exploitative。</p><h3 id="10-3-2-强化学习和非监督式学习的区别："><a href="#10-3-2-强化学习和非监督式学习的区别：" class="headerlink" title="10.3.2 强化学习和非监督式学习的区别："></a>10.3.2 强化学习和非监督式学习的区别：</h3><p>非监督式不是学习输入到输出的映射，而是模式。例如在向用户推荐新闻文章的任务中，非监督式会找到用户先前已经阅读过类似的文章并向他们推荐其一，而强化学习将通过向用户先推荐少量的新闻，并不断获得来自用户的反馈，最后构建用户可能会喜欢的文章的“知识图”。</p><p>对非监督学习来说，它通过对没有概念标记的训练例进行学习，以发现训练例中隐藏的结构性知识。这里的训练例的概念标记是不知道的，因此训练样本的歧义性最高。对强化学习来说，它通过对没有概念标记、但与一个延迟奖赏或效用（可视为延迟的概念标记）相关联的训练例进行学习，以获得某种从状态到行动的映射。这里本来没有概念标记的概<br>念，但延迟奖赏可被视为一种延迟概念标记，因此其训练样本的歧义性介于监督学习和非监督学习之间。</p><p>需要注意的是，监督学习和非监督学习从一开始就是相对的，而强化学习在提出时并没有从训练样本歧义性的角度考虑其与监督学习和非监督学习的区别，因此，一些早期的研究中把强化学习视为一种特殊的非监督学习。事实上，对强化学习的定位到目前仍然是有争议的，有的学者甚至认为它是与“从例子中学习”同一级别的概念。</p><p>从训练样本歧义性角度进行的分类体系，在近几年可望有一些扩展，例如多示例学习（multi-instancelearning）等从训练样本歧义性方面来看很特殊的新的学习框架有可能会进入该体系。但到目前为止，没有任何新的框架得到了公认的地位。另外，半监督学习（semi-supervisedlearning）也有一定希望，它的障碍是半监督学习中的歧义性并不是与生俱来的，而是人为的，即用户期望用未标记的样本来辅助对已标记样本的学习。这与监督学习、非监督学习、强化学习等天生的歧义性完全不同。半监督学习中人为的歧义性在解决工程问题上是需要的、有用的（对大量样本进行标记的代价可能是极为昂贵的），但可能不太会导致方法学或对学习问题视点的大的改变。</p><p><strong>强化学习和前二者的本质区别</strong>:没有前两者具有的明确数据概念，它不知道结果，只有目标。数据概念就是大量的数据，有监督学习、无监督学习需要大量数据去训练优化你建立的模型，就像猫狗识别，用n多张猫狗图片去训练模型，经过训练优化后，你用一张崭新的猫狗图片让模型作出判断，这个模型就知道是猫还是狗。</p><h2 id="10-4-强化学习主要有哪些算法？"><a href="#10-4-强化学习主要有哪些算法？" class="headerlink" title="10.4 强化学习主要有哪些算法？"></a>10.4 强化学习主要有哪些算法？</h2><p>强化学习不需要监督信号,可以在模型未知的环境中平衡探索和利用, 其主要算法有蒙特卡罗强化学习, 时间差分(temporal difference: TD)学习, 策略梯度等。典型的深度强化学习算法特点及性能比较如下图所示：</p><p><img src="/2016/12/21/第十章_强化学习/img/ch10/10-4.png" alt=""></p><p>除了上述深度强化学习算法，还有深度迁移强化学习、分层深度强化学习、深度记忆强化学习以及多智能体强化学习等算法。</p><h2 id="10-5-深度迁移强化学习算法"><a href="#10-5-深度迁移强化学习算法" class="headerlink" title="10.5 深度迁移强化学习算法"></a>10.5 深度迁移强化学习算法</h2><p>传统深度强化学习算法每次只能解决一种游戏任务, 无法在一次训练中完成多种任务. 迁移学习和强化学习的结合也是深度强化学习的一种主要思路。</p><p>Parisotto等提出了一种基于行为模拟的深度迁移强化学习算法. 该算法通过监督信号的指导, 使得单一的策略网络学习各自的策略, 并将知识迁移到新任务中. Rusa等提出策略蒸馏(policy distillation)深度迁移强化学习算法. 策略蒸馏算法中分为学习网络和指导网络, 通过这两个网络Q值的偏差来确定目标函数,引导学习网络逼近指导网络的值函数空间. 此后,Rusa等又提出了一种基于渐进神经网络(progressive neural networks, PNN)的深度迁移强化学习算法.PNN是一种把神经网络和神经网络连起来的算法. 它在一系列序列任务中, 通过渐进的方式来存储知识和提取特征, 完成了对知识的迁移. PNN最终实现多个独立任务的训练, 通过迁移加速学习过程, 避免灾难性遗忘. Fernando 等提出了路径网络(PathNet)[45].PathNet可以说是PNN的进阶版. PathNet把网络中每一层都看作一个模块, 把构建一个网络看成搭积木,也就是复用积木. 它跟PNN非常类似, 只是这里不再有列, 而是不同的路径. PathNet将智能体嵌入到神经网络中, 其中智能体的任务是为新任务发现网络中可以复用的部分. 智能体是网络之中的路径, 其决定了反向传播过程中被使用和更新的参数范围. 在一系列的Atari强化学习任务上, PathNet都实现了正迁移, 这表明PathNet在训练神经网络上具有通用性应用能力.PathNet也可以显著提高A3C算法超参数选择的鲁棒性. Schaul等提出了一种通用值函数逼近器(universalvalue function approximators, UVFAs)来泛化状态和目标空间．UVFAs可以将学习到的知识迁移到环境动态特性相同但目标不同的新任务中.</p><h2 id="10-6-分层深度强化学习算法"><a href="#10-6-分层深度强化学习算法" class="headerlink" title="10.6 分层深度强化学习算法"></a>10.6 分层深度强化学习算法</h2><p>分层强化学习可以将最终目标分解为多个子任务来学习层次化的策略, 并通过组合多个子任务的策略形成有效的全局策略. Kulkarni等提出了分层DQN(hierarchical deep Q-network, h–DQN) 算法. h–DQN基于时空抽象和内在激励分层, 通过在不同的时空尺度上设置子目标对值函数进行层次化处理. 顶层的值函数用于确定宏观决策, 底层的值函数用于确定具体行动．Krishnamurthy等在h–DQN的基础上提出了基于内部选择的分层深度强化学习算法. 该模型结合时空抽象和深度神经网络, 自动地完成子目标的学习, 避免了特定的内在激励和人工设定中间目标,加速了智能体的学习进程, 同时也增强了模型的泛化能力. Kulkarni等基于后续状态表示法提出了深度后续强化学习(deep successor reinforcement learning,DSRL)．DSRL通过阶段性地分解子目标和学习子目标策略, 增强了对未知状态空间的探索, 使得智能体更加适应那些存在延迟反馈的任务．Vezhnevets等受封建(feudal)强化学习算法的启发, 提出一种分层深度强化学习的架构FeUdal网络(FuNs)[49]. FuNs框架使用一个管理员模块和一个工人模块. 管理员模块在较低的时间分辨率下工作, 设置抽象目标并传递给工人模块去执行. FuNs框架创造了一个稳定的自然层次结构, 并且允许两个模块以互补的方式学习. 实验证明, FuNs有助于处理长期信用分配和记忆任务,在Atari视频游戏和迷宫游戏中都取得了不错的效果。</p><h2 id="10-7-深度记忆强化学习算法"><a href="#10-7-深度记忆强化学习算法" class="headerlink" title="10.7 深度记忆强化学习算法"></a>10.7 深度记忆强化学习算法</h2><p>传统的深度强化学习模型不具备记忆、认知、推理等高层次的能力, 尤其是在面对状态部分可观察和延迟奖赏的情形时. Junhyuk等通过在传统的深度强化学习模型中加入外部的记忆网络部件和反馈控制机制, 提出反馈递归记忆Q网络(feedback recurrent memory Q-network, FRMQN)). FRMQN模型具备了一定的记忆与推理功能, 通过反馈控制机制,FRMQN整合过去存储的有价值的记忆和当前时刻的上下文状态, 评估动作值函数并做出决策. FRMQN初步模拟了人类的主动认知与推理能力, 并完成了一些高层次的认知任务. 在一些未经过训练的任务中,FRMQN模型表现出了很强的泛化能力．Blundell等设计出一种模型无关的情节控制算法(model-free episode control, MFEC). MFEC可以快速存储和回放状态转移序列, 并将回放的序列整合到结构化知识系统中, 使得智能体在面对一些复杂的决策任务时, 能快速达到人类玩家的水平．MFEC通过反向经验回放, 使智能体拥有初步的情节记忆. 实验表明, 基于MFEC算法的深度强化学习不仅可以在Atari游戏中学习到有效策略, 还可以处理一些三维场景的复杂任务. Pritzel等在MFEC的基础上进一步提出了神经情节控制(neural episodic control, NEC),有效提高了深度强化学习智能体的记忆能力和学习效率[53]. NEC能快速吸收新经验并依据新经验来采取行动. 价值函数包括价值函数渐变状态表示和价值函数快速更新估计两部分. 大量场景下的研究表明,NEC的学习速度明显快于目前最先进的通用深度强化学习智能体.</p><h2 id="10-8-多智能体深度强化学习算法"><a href="#10-8-多智能体深度强化学习算法" class="headerlink" title="10.8 多智能体深度强化学习算法"></a>10.8 多智能体深度强化学习算法</h2><p>在一些复杂场景中, 涉及到多智能体的感知决策问题, 这时需要将单一模型扩展为多个智能体之间相互合作、通信及竞争的多智能体深度强化学习系统.Foerster等提出了一种称为分布式深度递归Q网络(deep distributed recurrent Q-networks, DDRQN) 的模型, 解决了状态部分可观测状态下的多智能体通信与合作的挑战性难题[54]. 实验表明, 经过训练的DDRQN模型最终在多智能体之间达成了一致的通信协1536 控制理论与应用第34 卷议, 成功解决了经典的红蓝帽子问题.让智能体学会合作与竞争一直以来都是人工智能领域内的一项重要研究课题, 也是实现通用人工智能的必要条件. Lowe等提出了一种用于合作–竞争混合环境的多智能体actor-critic 算法(multi-agent deepdeterministic policy gradient, MADDPG)[55]. MADDPG对DDPG强化学习算法进行了延伸, 可实现多智能体的集中式学习和分布式执行, 让智能体学习彼此合作和竞争. 在多项测试任务中, MADDPG的表现都优于DDPG. </p><h2 id="10-9-强化学习开源框架"><a href="#10-9-强化学习开源框架" class="headerlink" title="10.9 强化学习开源框架"></a>10.9 强化学习开源框架</h2><p>谷歌TensorFlow Agents —TensorFlow的加强版,它提供许多工具，通过强化学习可以实现各类智能应用程序的构建与训练。这个框架能够将OpoenAI Gym接口扩展至多个并行环境，并允许各代理立足TensorFlow之内实现以执行批量计算。其面向OpoenAI Gy环境的批量化接口可与TensorFlow实现全面集成，从而高效执行各类算法。该框架还结合有BatchPPO，一套经过优化的近端策略优化算法实现方案。其核心组件包括一个环境打包器，用于在外部过程中构建OpenAI Gym环境; 一套批量集成，用于实现TensorFlow图步并以强化学习运算的方式重置函数; 外加用于将TensorFlow图形批处理流程与强化学习算法纳入训练特内单一却步的组件。</p><p>Roboschool：Roboschool 提供开源软件以通过强化学习构建并训练机器人模拟。其有助于在同一环境当中对多个代理进行强化学习训练。通过多方训练机制，您可以训练同一代理分别作为两方玩家（因此能够自我对抗）、使用相同算法训练两套代理，或者设置两种算法进行彼此对抗。Roboschool由OpenAI开发完成，这一非营利性组织的背后赞助者包括Elon Musk、Sam Altman、Reid Hoffman以及Peter Thiel。其与OpenAI Gym相集成，后者是一套用于开发及评估强化学习算法的开源工具集。OpenAI Gym与TensorFlow、Theano以及其它多种深度学习库相兼容。OpenAI Gym当中包含用于数值计算、游戏以及物理引擎的相关代码。Roboschool基于Bullet物理引擎，这是一套开源许可物理库，并被其它多种仿真软件——例如Gazebo与Virtual Robot Experimentation Platform（简称V-REP）所广泛使用。其中包含多种强化学习算法，具体以怨报德 异步深度强化学习方法、Actor-Critic with Experience Replay、Actor- Critic using Kronecker-Factored Trust Region、深度确定性策略梯度、近端策略优化以及信任域策略优化等等。</p><p>Coach：英特尔公司的开源强化学习框架，可以对游戏、机器人以及其它基于代理的智能应用进行智能代理的建模、训练与评估。Coach 提供一套模块化沙箱、可复用组件以及用于组合新强化学习算法并在多种应用领域内训练新智能应用的Python API。该框架利用OpenAI Gym作为主工具，负责与不同强化学习环境进行交换。其还支持其它外部扩展，具体包括Roboschool、gym-extensions、PyBullet以及ViZDoom。Coach的环境打包器允许用户向其中添加自定义强化学习环境，从而解决其它学习问题。该框架能够在桌面计算机上高效训练强化学习代理，并利用多核CPU处理相关任务。其能够为一部分强化学习算法提供单线程与多线程实现能力，包括异步优势Actor-Critic、深度确定性策略梯度、近端策略优化、直接未来预测以及规范化优势函数。所有算法皆利用面向英特尔系统作出优化的TensorFLow完成，其中部分算法亦适用于英特尔的Neon深度学习框架。Coach 当中包含多种强化学习代理实现方案，具体包括从单线程实现到多线程实现的转换。其能够开发出支持单与多工作程序（同步或异步）强化学习实现方法的新代理。此外，其还支持连续与离散操作空间，以及视觉观察空间或仅包含原始测量指标的观察空间。</p><h2 id="10-10-深度强化学习算法小结"><a href="#10-10-深度强化学习算法小结" class="headerlink" title="10.10 深度强化学习算法小结"></a>10.10 深度强化学习算法小结</h2><p>基于值函数概念的DQN及其相应的扩展算法在离散状态、离散动作的控制任务中已经表现了卓越的性能, 但是受限于值函数离散型输出的影响, 在连续型控制任务上显得捉襟见肘. 基于策略梯度概念的,以DDPG, TRPO等为代表的策略型深度强化学习算法则更适用于处理基于连续状态空间的连续动作的控制输出任务, 并且算法在稳定性和可靠性上具有一定的理论保证, 理论完备性较强. 采用actor-critic架构的A3C算法及其扩展算法, 相比于传统DQN算法, 这类算法的数据利用效率更高, 学习速率更快, 通用性、可扩展应用性更强, 达到的表现性能更优, 但算法的稳定性无法得到保证. 而其他的如深度迁移强化学习、分层深度强化学习、深度记忆强化学习和多智能体深度强化学习等算法都是现在的研究热点, 通过这些算法能应对更为复杂的场景问题、系统环境及控制任务, 是目前深度强化学习算法研究的前沿领域.</p><p>展望未来，人工智能开发者们需要尽可能掌握上述框架以及其中所使用的各类强化学习算法。此外，还需要强化自身对于多代理强化学习架构的理解，因为其中多种框架都大量利用前沿博弈论研究成果。最后，还需要熟悉深度强化学习知识。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>迁移学习</title>
    <link href="https://leesen998.github.io/2016/12/21/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0_%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://leesen998.github.io/2016/12/21/第十一章_迁移学习/</id>
    <published>2016-12-21T11:48:29.000Z</published>
    <updated>2019-03-21T12:46:55.741Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="10-1-为什么需要迁移学习？（中科院计算所-王晋东）"><a href="#10-1-为什么需要迁移学习？（中科院计算所-王晋东）" class="headerlink" title="10.1 为什么需要迁移学习？（中科院计算所-王晋东）"></a>10.1 为什么需要迁移学习？（中科院计算所-王晋东）</h2><ol><li><strong>大数据与少标注的矛盾</strong>：虽然有大量的数据，但往往都是没有标注的，无法训练机器学习模型。人工进行数据标定太耗时。</li><li><strong>大数据与弱计算的矛盾</strong>：普通人无法拥有庞大的数据量与计算资源。因此需要借助于模型的迁移。</li><li><strong>普适化模型与个性化需求的矛盾</strong>：即使是在同一个任务上，一个模型也往往难以满足每个人的个性化需求，比如特定的隐私设置。这就需要在不同人之间做模型的适配。</li><li><strong>特定应用（如冷启动）的需求</strong>。</li></ol><h2 id="10-2-迁移学习的基本问题有哪些？（中科院计算所-王晋东）"><a href="#10-2-迁移学习的基本问题有哪些？（中科院计算所-王晋东）" class="headerlink" title="10.2 迁移学习的基本问题有哪些？（中科院计算所-王晋东）"></a>10.2 迁移学习的基本问题有哪些？（中科院计算所-王晋东）</h2><p>基本问题主要有3个：</p><ul><li><strong>How to transfer</strong>： 如何进行迁移学习？（设计迁移方法）</li><li><strong>What to transfer</strong>： 给定一个目标领域，如何找到相对应的源领域，然后进行迁移？（源领域选择）</li><li><strong>When to transfer</strong>： 什么时候可以进行迁移，什么时候不可以？（避免负迁移）</li></ul><h2 id="10-3-迁移学习有哪些常用概念？（KeyFoece）"><a href="#10-3-迁移学习有哪些常用概念？（KeyFoece）" class="headerlink" title="10.3 迁移学习有哪些常用概念？（KeyFoece）"></a>10.3 迁移学习有哪些常用概念？（KeyFoece）</h2><ul><li>基本定义<ul><li><strong>域(Domain)</strong>：数据特征和特征分布组成，是学习的主体<ul><li><strong>源域 (Source domain)</strong>：已有知识的域</li><li><strong>目标域 (Target domain)</strong>：要进行学习的域</li></ul></li><li><strong>任务 (Task)</strong>：由目标函数和学习结果组成，是学习的结果</li></ul></li><li>按特征空间分类<ul><li><strong>同构迁移学习（Homogeneous TL）</strong>： 源域和目标域的特征空间相同，$D_s=D_t$</li><li><strong>异构迁移学习（Heterogeneous TL）</strong>：源域和目标域的特征空间不同，$D_s\ne D_t$</li></ul></li><li>按迁移情景分类<ul><li><strong>归纳式迁移学习（Inductive TL）</strong>：源域和目标域的学习任务不同</li><li><strong>直推式迁移学习（Transductive TL)</strong>：源域和目标域不同，学习任务相同</li><li><strong>无监督迁移学习（Unsupervised TL)</strong>：源域和目标域均没有标签</li></ul></li><li>按迁移方法分类<ul><li><strong>基于实例的迁移 (Instance based TL)</strong>：通过权重重用源域和目标域的样例进行迁移</li><li><strong>基于特征的迁移 (Feature based TL)</strong>：将源域和目标域的特征变换到相同空间</li><li><strong>基于模型的迁移 (Parameter based TL)</strong>：利用源域和目标域的参数共享模型</li><li><strong>基于关系的迁移 (Relation based TL)</strong>：利用源域中的逻辑网络关系进行迁移</li></ul></li></ul><p><img src="/2016/12/21/第十一章_迁移学习/img/ch11/1542972502781.png" alt="1542972502781"></p><p><img src="/2016/12/21/第十一章_迁移学习/img/ch11/1542974131814.png" alt="1542974131814"></p><h2 id="10-4-迁移学习与传统机器学习有什么区别？（KeyFoece）"><a href="#10-4-迁移学习与传统机器学习有什么区别？（KeyFoece）" class="headerlink" title="10.4 迁移学习与传统机器学习有什么区别？（KeyFoece）"></a>10.4 迁移学习与传统机器学习有什么区别？（KeyFoece）</h2><table><thead><tr><th></th><th>迁移学习</th><th>传统机器学习</th></tr></thead><tbody><tr><td>数据分布</td><td>训练和测试数据不需要同分布</td><td>训练和测试数据同分布</td></tr><tr><td>数据标签</td><td>不需要足够的数据标注</td><td>足够的数据标注</td></tr><tr><td>建模</td><td>可以重用之前的模型</td><td>每个任务分别建模</td></tr></tbody></table><p><img src="/2016/12/21/第十一章_迁移学习/img/ch11/1542973960796.png" alt="1542973960796"></p><h2 id="10-5-迁移学习的基本思路？（中科院计算所-王晋东）"><a href="#10-5-迁移学习的基本思路？（中科院计算所-王晋东）" class="headerlink" title="10.5 迁移学习的基本思路？（中科院计算所-王晋东）"></a>10.5 迁移学习的基本思路？（中科院计算所-王晋东）</h2><p><strong>迁移学习的总体思路可以概括为</strong>：开发算法来最大限度地利用有标注的领域的知识，来辅助目标领域的知识获取和学习。</p><p><strong>迁移学习的核心是</strong>：找到源领域和目标领域之间的相似性，并加以合理利用。这种相似性非常普遍。比如，不同人的身体构造是相似的；自行车和摩托车的骑行方式是相似的；国际象棋和中国象棋是相似的；羽毛球和网球的打球方式是相似的。这种相似性也可以理解为不变量。以不变应万变，才能立于不败之地。</p><p><strong>有了这种相似性后，下一步工作就是， 如何度量和利用这种相似性。</strong>度量工作的目标有两点：一是很好地度量两个领域的相似性，不仅定性地告诉我们它们是否相似，更定量地给出相似程度。二是以度量为准则，通过我们所要采用的学习手段，增大两个领域之间的相似性，从而完成迁移学习。</p><p><strong>一句话总结： 相似性是核心，度量准则是重要手段。</strong></p><h2 id="10-6-迁移学习与其他概念的区别-Limber"><a href="#10-6-迁移学习与其他概念的区别-Limber" class="headerlink" title="10.6 迁移学习与其他概念的区别(Limber)"></a>10.6 迁移学习与其他概念的区别(Limber)</h2><ol><li>迁移学习与多任务学习关系：<ul><li><strong>多任务学习</strong>：多个相关任务一起协同学习；</li><li><strong>迁移学习</strong>：强调信息复用，从一个领域(domain)迁移到另一个领域。</li></ul></li><li>迁移学习与领域自适应：<strong>领域自适应</strong>：使两个特征分布不一致的domain一致。</li><li>迁移学习与协方差漂移：<strong>协方差漂移</strong>：数据的条件概率分布发生变化。</li></ol><h2 id="10-7-什么是多任务学习？"><a href="#10-7-什么是多任务学习？" class="headerlink" title="10.7 什么是多任务学习？"></a>10.7 什么是多任务学习？</h2><p>在迁移学习中，从<strong>任务A</strong>里学习只是然后迁移到<strong>任务B</strong>。<br>在多任务学习中，同时开始学习的，试图让<strong>单个神经网络</strong>同时做<strong>几件事情</strong>，然后希望这里每个任务都能帮到其他所有任务。</p><blockquote><p>指多个相关任务一起协同学习</p></blockquote><h2 id="10-8-多任务学习有什么意义？"><a href="#10-8-多任务学习有什么意义？" class="headerlink" title="10.8 多任务学习有什么意义？"></a>10.8 多任务学习有什么意义？</h2><ol><li>第一，如果你训练的一组任务，可以共用<strong>低层次特征</strong>。<br>对于无人驾驶的例子，同时识别交通灯、汽车和行人是有道理的，这些物体有相似的特征，也许能帮你识别停车标志，因为这些都是道路上的特征。</li><li>第二，这个<strong>准则没有那么绝对</strong>，所以不一定是对的。<br>但我从很多成功的多任务学习案例中看到，如果每个任务的数据量很接近，你还记得迁移学习时，你从任务学到知识然后迁移到任务，所以如果任务有<strong>1百万个样本</strong>，任务只有<strong>1000个样本</strong>，那么你从这<strong>1百万个样本</strong>学到的知识，真的可以帮你增强对更小数据集任务的训练。<br>那么多任务学习又怎么样呢？在多任务学习中，你通常有更多任务而不仅仅是两个，所以也许你有，以前我们有<strong>4个任务</strong>，但比如说你要完成<strong>100个任务</strong>，而你要做多任务学习，尝试同时识别<strong>100种不同类型的物体</strong>。你可能会发现，每个任务大概有<strong>1000个样本</strong>。<br>所以如果你专注加强单个任务的性能，比如我们专注加强第<strong>100个任务</strong>的表现，我们用表示，如果你试图单独去做这个最后的任务，你只有<strong>1000个样本</strong>去训练这个任务，这是<strong>100项任务</strong>之一，而通过在<strong>其他99项任务</strong>的训练，这些加起来可以一共有<strong>99000个样本</strong>，这可能大幅提升算法性能，可以提供很多知识来增强这个任务的性能。<br>不然对于任务，只有<strong>1000个样本</strong>的训练集，效果可能会很差。如果有对称性，这<strong>其他99个任务</strong>，也许能提供一些数据或提供一些知识来帮到这<strong>100个任务中</strong>的每一个任务。所以第二点不是绝对正确的准则，但我通常会看的是如果你专注于单项任务，如果想要从多任务学习得到很大性能提升，那么其他任务加起来必须要有比单个任务大得多的数据量。<br>要满足这个条件，其中一种方法是，比如右边这个例子这样，或者如果每个任务中的数据量很相近，但关键在于， 如果对于单个任务你已经有<strong>1000个样本</strong>了，那么对于所有其他任务，你最好有超过<strong>1000个样 本</strong>，这样其他任务的知识才能帮你改善这个任务的性能。</li><li>最后多任务学习往往在以下场合<strong>更有意义</strong>，当你可以训练一个足够大的神经网络，同时做好所有的工作，所以多任务学习的<strong>替代方法</strong>是为每个任务<strong>训练一个单独的神经网络</strong>。<br>所以不是训练单个神经网络同时处理行人、汽车、停车标志和交通灯检测。你可以训练一个<strong>用于行人检测的神经网络</strong>，一个<strong>用于汽车检测的神经网络</strong>，一个<strong>用于停车标志检测的神经网络</strong>和一个<strong>用于交通信号灯检测的神经网络</strong>。<br>那么研究员 Rich Carona 几年前发现的是什么呢？<br>多任务学习会降低性能的唯一情况，和训练单个神经网络相比性能更低的情况就是你的神经网络还不够大。 但如果你可以训练一个足够大的神经网络，那么多任务学习肯定<strong>不会或者很少</strong>会<strong>降低性能</strong>，我们都希望它可以提升性能，比单独训练神经网络来单独完成各个任务<strong>性能要更好</strong>。</li><li>所以<strong>这就是多任务学习</strong>，在实践中，多任务学习的使用频率要低于迁移学习。<br>我看到很多迁移学习的应用，你需要解决一个问题，但你的<strong>训练数据很少</strong>，所以你需要找一个数据很多的相关问题来<strong>预先学习</strong>，并将知识迁移到这个新问题上。<br>但多任务学习比较少见，就是你需要同时处理很多任务，都要做好，你可以同时训练所有这些任务，也许计算机视觉是一个例子。<br>在物体检测中，我们看到<strong>更多</strong>使用多任务学习的应用，其中一个神经网络尝试检测一大堆物体，比分别训练不同的神经网络检测物体<strong>更好</strong>。但我说，平均来说，目前迁移学习使用频率<strong>更高</strong>，比多任务学习频率<strong>更高</strong>，但两者都可以成为你的<strong>强力工具</strong>。</li><li>总结一下，多任务学习能让你训练一个神经网络来执行许多任务，这可以给你更高的性能，比单独完成各个任务更高的性能。<br>但要<strong>注意</strong>，<strong>实际上</strong>迁移学习比多任务学习使用频率<strong>更高</strong>。<br>我看到很多任务都是，如果你想解决一个机器学习问题，但你的数据集相对较小，那么迁移学习真的能帮到你，就是如果你找到一个相关问题，其中数据量要大得多，你就能以它为基础训练你的神经网络，然后迁移到这个数据量很少的任务上来。</li><li>今天我们学到了很多和迁移学习有关的问题，还有一些迁移学习和多任务学习的应用。<br>但多任务学习，我觉得使用频率比迁移学习要少得多，也许其中一个例外是计算机视觉，物体检测。在那些任务中，人们经常训练一个神经网络同时检测很多不同物体，这比训练单独的神经网络来检测视觉物体要更好。但平均而言，我认为即使迁移学习和多任务学习工作方式类似。 实际上，我看到用迁移学习比多任务学习要更多，我觉得这是因为你很难找到那么多相似且数据量对等的任务可以用单一神经网络训练。<br>再次，在计算机视觉领域，物体检测这个例子是最显著的例外情况。</li><li>所以这就是多任务学习，多任务学习和迁移学习都是你的工具包中的重要工具。<br>最后，我想继续讨论端到端深度学习，所以我们来看下一个视频来讨论端到端学习。</li></ol><h2 id="10-9-什么是端到端的深度学习？"><a href="#10-9-什么是端到端的深度学习？" class="headerlink" title="10.9 什么是端到端的深度学习？"></a>10.9 什么是端到端的深度学习？</h2><ol><li>深度学习中<strong>最令人振奋</strong>的最新动态之一就是端到端深度学习的兴起，那么端到端学习到底是什么呢？简而言之，以前有一些数据处理系统或者学习系统，它们需要多个阶段的处理。<br>那么端到端深度学习就是<strong>忽略所有这些不同的阶段</strong>，用单个神经网络代替它。</li><li>而端到端深度学习就只需要把训练集拿过来，直接学到了和之间的函数映射，直接绕过了其中很多步骤。对一些学科里的人来说，这点相当难以接受，他们无法接受这样<strong>构建AI系统</strong>，因为有些情况，<strong>端到端方法</strong>完全<strong>取代</strong>了旧系统，某些投入了多年研究的中间组件也许已经<strong>过时</strong>了。</li></ol><h2 id="10-10-端到端的深度学习举例？"><a href="#10-10-端到端的深度学习举例？" class="headerlink" title="10.10 端到端的深度学习举例？"></a>10.10 端到端的深度学习举例？</h2><ol><li>这张图上是一个研究员做的人脸识别门禁，是百度的林元庆研究员做的。<br>这是一个相机，它会拍下接近门禁的人，如果它认出了那个人，门禁系统就自动打开，让他通过，所以你不需要刷一个<strong>RFID工卡</strong>就能进入这个设施。<br>系统部署在越来越多的中国办公室，希望在其他国家也可以部署更多，你可以接近门禁，如果它认出你的脸，它就直接让你通过，你不需要带RFID工卡。</li><li>我们再来看几个例子，比如机器翻译。<br>传统上，机器翻译系统也有一个很复杂的流水线，比如英语机翻得到文本，然后做文本分析，基本上要从文本中提取一些特征之类的，经过很多步骤，你最后会将英文文本翻译成法文。<br>因为对于机器翻译来说的确有很多(英文,法文)的数据对，端到端深度学习在机器翻译领域非常好用，那是因为在今天可以收集对的大数据集，就是英文句子和对应的法语翻译。<br>所以在这个例子中，端到端深度学习效果很好。</li></ol><h2 id="10-11-端到端的深度学习有什么挑战？"><a href="#10-11-端到端的深度学习有什么挑战？" class="headerlink" title="10.11 端到端的深度学习有什么挑战？"></a>10.11 端到端的深度学习有什么挑战？</h2><ol><li>事实证明，端到端深度学习的挑战之一是，你可能需要大量数据才能让系统表现良好，比如，你只有<strong>3000小时数据</strong>去训练你的<strong>语音识别系统</strong>，那么传统的流水线效果真的很好。<br>但当你拥有非常大的数据集时，比如<strong>10,000小时数据</strong>或者<strong>100,000小时</strong>数据，这样端到端方法突然开始很厉害了。所以当你的<strong>数据集较小</strong>的时候，传统流水线方法其实效果也不错，通常做得<strong>更好</strong>。</li><li>你需要<strong>大数据集</strong>才能让<strong>端到端方法</strong>真正发出耀眼光芒。如果你的数据量适中，那么也可以用中间件方法，你可能输入还是音频，然后绕过特征提取，直接尝试从神经网络输出音位，然后也可以在其他阶段用，所以这是往端到端学习迈出的一小步，但还没有到那里。</li></ol><h2 id="10-13-端到端的深度学习优缺点？"><a href="#10-13-端到端的深度学习优缺点？" class="headerlink" title="10.13 端到端的深度学习优缺点？"></a>10.13 端到端的深度学习优缺点？</h2><p>假设你正在搭建一个机器学习系统，你要决定是否使用端对端方法，我们来看看端到端深度学习的一些优缺点，这样你就可以根据一些准则，判断你的应用程序是否有希望使用端到端方法。</p><p>这里是应用端到端学习的一些优点：</p><ol><li>首先端到端学习真的只是让数据说话。所以如果你有足够多的数据，那么不管从 x 到 y 最适合的函数映射是什么，如果你训练一个足够大的神经网 络，希望这个神经网络能自己搞清楚，而使用纯机器学习方法，直接从到输入去训练的神经网 络，可能更能够捕获数据中的任何统计信息，而不是被迫引入人类的成见。<br>例如，在语音识别领域，早期的识别系统有这个音位概念，就是基本的声音单元，如 cat 单词的“cat”的 Cu-、Ah-和 Tu-，我觉得这个音位是人类语言学家生造出来的，我实际上认为音位其实是语音学家的幻想，用音位描述语言也还算合理。但是不要强迫你的学习算法以音位为单位思考，这点有时没那么明显。如果你让你的学习算法学习它想学习的任意表示方式，而不是强迫你的学习算法使用音位作为表示方式，那么其整体表现可能会更好。</li><li>端到端深度学习的第二个好处就是这样，所需手工设计的组件更少，所以这也许能够简化你的设计工作流程，你不需要花太多时间去手工设计功能，手工设计这些中间表示方式。</li></ol><p>这里是应用端到端学习的一些缺点：</p><ol><li>首先，它可能需要大量的数据。要直接学到这个到的映射，你可能需要大量数据。<br>我们在以前的视频里看过一个例子，其中你可以收集大量子任务数据。<br>比如人脸识别，我们可以收集很多数据用来分辨图像中的人脸，当你找到一张脸后，也可以找得到很多人脸识别数据。<br>但是对于整个端到端任务，可能只有更少的数据可用。所以这是端到端学习的输入端，是输出端，所以你需要很多这样的数据，在输入端和输出端都有数据，这样可以训练这些系统。<br>这就是为什么我们称之为端到端学习，因为你直接学习出从系统的一端到 系统的另一端。</li><li>另一个缺点是，它排除了可能有用的手工设计组件。<br>机器学习研究人员一般都很鄙视手工设计的东西，但如果你没有很多数据，你的学习算法就没办法从很小的训练集数据中获得洞察力。<br>所以手工设计组件在这种情况，可能是把人类知识直接注入算法的途径，这总不是一件坏事。<br>我觉得学习算法有两个主要的知识来源，一个是数据，另一个是你手工设计的任何东西，可能是组件，功能，或者其他东西。<br>所以当你有大量数据时，手工设计的东西就不太重要了，但是当你没有太多的数据时，构造一个精心设计的系统，实际上可以将人类对这个问题的很多 认识直接注入到问题里，进入算法里应该挺有帮助的。</li></ol><p>总结：</p><ol><li>所以端到端深度学习的弊端之一是它把可能有用的人工设计的组件排除在外了，精心设计的人工组件可能非常有用，但它们也有可能真的伤害到你的算法表现。<br>例如，强制你的算法以音位为单位思考，也许让算法自己找到更好的表示方法更好。<br>所以这是一把双刃剑，可能有坏处，可能有好处，但往往好处更多，手工设计的组件往往在训练集更小的时候帮助更大。</li></ol><h2 id="10-14-什么是负迁移？产生负迁移的原因有哪些？（中科院计算所-王晋东）"><a href="#10-14-什么是负迁移？产生负迁移的原因有哪些？（中科院计算所-王晋东）" class="headerlink" title="10.14 什么是负迁移？产生负迁移的原因有哪些？（中科院计算所-王晋东）"></a>10.14 什么是负迁移？产生负迁移的原因有哪些？（中科院计算所-王晋东）</h2><p>负迁移(Negative Transfer)指的是，在源域上学习到的知识，对于目标域上的学习产生负面作用。</p><p>产生负迁移的原因主要有：</p><ul><li>数据问题：源域和目标域压根不相似，谈何迁移？</li><li>方法问题：源域和目标域是相似的，但是，迁移学习方法不够好，没找到可迁移的成分。</li></ul><p>负迁移给迁移学习的研究和应用带来了负面影响。在实际应用中，找到合理的相似性，并且选择或开发合理的迁移学习方法，能够避免负迁移现象。</p><h2 id="10-15-什么是迁移学习？"><a href="#10-15-什么是迁移学习？" class="headerlink" title="10.15 什么是迁移学习？"></a>10.15 什么是迁移学习？</h2><ol><li>找到目标问题的相似性，迁移学习任务就是从相似性出发，将旧领域(domain)学习过的模型应用在新领域上。</li><li>迁移学习，是指利用数据、任务、或模型之间的相似性，将在旧领域学习过的模型，应用于新领域的一种学习过程。</li><li>迁移学习<strong>最有用的场合</strong>是，如果你尝试优化任务B的性能，通常这个任务数据相对较少。<br>例如，在放射科中你知道很难收集很多射线扫描图来搭建一个性能良好的放射科诊断系统，所以在这种情况下，你可能会找一个相关但不同的任务，如图像识别，其中你可能用 1 百万张图片训练过了，并从中学到很多低层次特征，所以那也许能帮助网络在任务在放射科任务上做得更好，尽管任务没有这么多数据。</li><li>迁移学习什么时候是有意义的？它确实可以<strong>显著提高</strong>你的<strong>学习任务的性能</strong>，但我有时候也见过有些场合使用迁移学习时，任务实际上数据量比任务要少， 这种情况下增益可能不多。</li></ol><blockquote><p>什么情况下可以使用迁移学习？</p><p>假如两个领域之间的区别特别的大，<strong>不可以直接采用迁移学习</strong>，因为在这种情况下效果不是很好。在这种情况下，推荐使用[3]的工作，在两个相似度很低的domain之间一步步迁移过去（踩着石头过河）。</p></blockquote><blockquote><ol><li>迁移学习主要解决方案有哪些？</li><li>除直接看infer的结果的Accurancy以外，如何衡量迁移学习学习效果？</li><li>对抗网络是如何进行迁移的？</li></ol></blockquote><p>Reference： </p><ol><li><a href="https：//github.com/jindongwang/transferlearning-tutorial">王晋东，迁移学习简明手册</a></li><li>Ben-David, S., Blitzer, J., Crammer, K., Kulesza, A., Pereira, F., &amp; Vaughan, J. W. (2010). A theory of learning from different domains. Machine learning, 79(1-2), 151-175.</li><li>Tan, B., Song, Y., Zhong, E. and Yang, Q., 2015, August. Transitive transfer learning. In Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (pp. 1155-1164). ACM.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>图像分割</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E4%B9%9D%E7%AB%A0_%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/"/>
    <id>https://leesen998.github.io/2016/12/20/第九章_图像分割/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:45:58.482Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="9-1-传统的基于CNN的分割方法缺点？"><a href="#9-1-传统的基于CNN的分割方法缺点？" class="headerlink" title="9.1 传统的基于CNN的分割方法缺点？"></a>9.1 传统的基于CNN的分割方法缺点？</h2><p>&emsp;&emsp;<br>传统的基于CNN的分割方法：为了对一个像素分类，使用该像素周围的一个图像块作为CNN的输入，用于训练与预测，这种方法主要有几个缺点：<br>&emsp;&emsp;<br>1）存储开销大，例如，对每个像素使用15 * 15的图像块，然后不断滑动窗口，将图像块输入到CNN中进行类别判断，因此，需要的存储空间随滑动窗口的次数和大小急剧上升；<br>&emsp;&emsp;<br>2）效率低下，相邻像素块基本上是重复的，针对每个像素块逐个计算卷积，这种计算有很大程度上的重复；<br>&emsp;&emsp;<br>3）像素块的大小限制了感受区域的大小，通常像素块的大小比整幅图像的大小小很多，只能提取一些局部特征，从而导致分类性能受到限制。<br>&emsp;&emsp;<br>而全卷积网络(FCN)则是从抽象的特征中恢复出每个像素所属的类别。即从图像级别的分类进一步延伸到像素级别的分类。</p><h2 id="9-2-FCN"><a href="#9-2-FCN" class="headerlink" title="9.2 FCN"></a>9.2 FCN</h2><h3 id="9-2-1-FCN改变了什么"><a href="#9-2-1-FCN改变了什么" class="headerlink" title="9.2.1 FCN改变了什么?"></a>9.2.1 FCN改变了什么?</h3><p>&emsp;&emsp;<br>对于一般的分类CNN网络，如VGG和Resnet，都会在网络的最后加入一些全连接层，经过softmax后就可以获得类别概率信息。但是这个概率信息是1维的，即只能标识整个图片的类别，不能标识每个像素点的类别，所以这种全连接方法不适用于图像分割。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.1_1.jpg" alt=""></p><p>&emsp;&emsp;<br>而FCN提出可以把后面几个全连接都换成卷积，这样就可以获得一张2维的feature map，后接softmax获得每个像素点的分类信息，从而解决了分割问题，如图4。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.1_2.jpg" alt=""></p><center>图 4</center><h3 id="9-2-2-FCN网络结构？"><a href="#9-2-2-FCN网络结构？" class="headerlink" title="9.2.2 FCN网络结构？"></a>9.2.2 FCN网络结构？</h3><p>&emsp;&emsp;<br>FCN对图像进行像素级的分类，从而解决了语义级别的图像分割（semantic segmentation）问题。与经典的CNN在卷积层之后使用全连接层得到固定长度的特征向量进行分类（全联接层＋softmax输出）不同，FCN可以接受任意尺寸的输入图像，采用反卷积层对最后一个卷积层的feature map进行上采样, 使它恢复到输入图像相同的尺寸，从而可以对每个像素都产生了一个预测, 同时保留了原始输入图像中的空间信息, 最后在上采样的特征图上进行逐像素分类。<br>下图是语义分割所采用的全卷积网络(FCN)的结构示意图：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.2_1.jpg" alt=""></p><h3 id="9-2-3-全卷积网络举例？"><a href="#9-2-3-全卷积网络举例？" class="headerlink" title="9.2.3 全卷积网络举例？"></a>9.2.3 全卷积网络举例？</h3><p>&emsp;&emsp;<br>通常CNN网络在卷积层之后会接上若干个全连接层, 将卷积层产生的特征图(feature map)映射成一个固定长度的特征向量。以AlexNet为代表的经典CNN结构适合于图像级的分类和回归任务，因为它们最后都得到整个输入图像的一个概率向量，比如AlexNet的ImageNet模型输出一个1000维的向量表示输入图像属于每一类的概率(softmax归一化)。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.3_1.jpg" alt=""></p><p>&emsp;&emsp;<br>如图所示：<br>&emsp;&emsp;<br>（1）在CNN中, 猫的图片输入到AlexNet, 得到一个长为1000的输出向量, 表示输入图像属于每一类的概率, 其中在“tabby cat”这一类统计概率最高, 用来做分类任务。<br>&emsp;&emsp;<br>（2）FCN与CNN的区别在于把CNN最后的全连接层转换成卷积层，输出的是一张已经Label好的图片, 而这个图片就可以做语义分割。<br>&emsp;&emsp;<br>（3）CNN的强大之处在于它的多层结构能自动学习特征，并且可以学习到多个层次的特征: 较浅的卷积层感知域较小，学习到一些局部区域的特征；较深的卷积层具有较大的感知域，能够学习到更加抽象一些的特征。高层的抽象特征对物体的大小、位置和方向等敏感性更低，从而有助于识别性能的提高, 所以我们常常可以将卷积层看作是特征提取器。</p><h3 id="9-2-4-全连接层和卷积层如何相互转化？"><a href="#9-2-4-全连接层和卷积层如何相互转化？" class="headerlink" title="9.2.4 全连接层和卷积层如何相互转化？"></a>9.2.4 全连接层和卷积层如何相互转化？</h3><p>&emsp;&emsp;<br><strong>两者相互转换的可能性：</strong><br>&emsp;&emsp;<br>全连接层和卷积层之间唯一的不同就是卷积层中的神经元只与输入数据中的一个局部区域连接，并且在卷积列中的神经元共享参数。然而在两类层中，神经元都是计算点积，所以它们的函数形式是一样的。因此，将此两者相互转化是可能的：<br>&emsp;&emsp;<br>（1）对于任一个卷积层，都存在一个能实现和它一样的前向传播函数的全连接层。权重矩阵是一个巨大的矩阵，除了某些特定块，其余部分都是零。而在其中大部分块中，元素都是相等的。<br>&emsp;&emsp;<br>（2）任何全连接层都可以被转化为卷积层。比如VGG16中第一个全连接层是25088 <em> 4096的数据尺寸，将它转化为512 </em> 7 <em> 7 </em> 4096的数据尺寸，即一个K=4096的全连接层，输入数据体的尺寸是7 <em> 7 </em> 512，这个全连接层可以被等效地看做一个F=7, P=0, S=1, K=4096 的卷积层。换句话说，就是将滤波器的尺寸设置为和输入数据体的尺寸一致7 <em> 7, 这样输出就变为1 </em> 1 * 4096, 本质上和全连接层的输出是一样的。<br>&emsp;&emsp;<br><strong>输出激活数据体深度是由卷积核的数目决定的(K=4096)。</strong><br>&emsp;&emsp;<br>在两种变换中，将全连接层转化为卷积层在实际运用中更加有用。假设一个卷积神经网络的输入是227x227x3的图像，一系列的卷积层和下采样层将图像数据变为尺寸为7x7x512的激活数据体, AlexNet的处理方式为使用了两个尺寸为4096的全连接层，最后一个有1000个神经元的全连接层用于计算分类评分。我们可以将这3个全连接层中的任意一个转化为卷积层：<br>&emsp;&emsp;<br>（1）第一个连接区域是[7x7x512]的全连接层，令其滤波器尺寸为F=7,K=4096，这样输出数据体就为[1x1x4096]。<br>&emsp;&emsp;<br>（2）第二个全连接层，令其滤波器尺寸为F=1,K=4096，这样输出数据体为[1x1x4096]。<br>&emsp;&emsp;<br>（3）最后一个全连接层也做类似的，令其F=1,K=1000，最终输出为[1x1x1000]。</p><h3 id="9-2-5-为什么传统CNN的输入图片是固定大小？"><a href="#9-2-5-为什么传统CNN的输入图片是固定大小？" class="headerlink" title="9.2.5 为什么传统CNN的输入图片是固定大小？"></a>9.2.5 为什么传统CNN的输入图片是固定大小？</h3><p>&emsp;&emsp;<br>对于CNN，一幅输入图片在经过卷积和pooling层时，这些层是不关心图片大小的。比如对于一个卷积层，outputsize = (inputsize - kernelsize) / stride + 1，它并不关心inputsize多大，对于一个inputsize大小的输入feature map，滑窗卷积，输出outputsize大小的feature map即可。pooling层同理。但是在进入全连接层时，feature map（假设大小为n×n）要拉成一条向量，而向量中每个元素（共n×n个）作为一个结点都要与下一个层的所有结点（假设4096个）全连接，这里的权值个数是4096×n×n，而我们知道神经网络结构一旦确定，它的权值个数都是固定的，所以这个n不能变化，n是conv5的outputsize，所以层层向回看，每个outputsize都要固定，那每个inputsize都要固定，因此输入图片大小要固定。</p><h3 id="9-2-6-把全连接层的权重W重塑成卷积层的滤波器有什么好处？"><a href="#9-2-6-把全连接层的权重W重塑成卷积层的滤波器有什么好处？" class="headerlink" title="9.2.6 把全连接层的权重W重塑成卷积层的滤波器有什么好处？"></a>9.2.6 把全连接层的权重W重塑成卷积层的滤波器有什么好处？</h3><p>&emsp;&emsp;<br>这样的转化可以在单个向前传播的过程中, 使得卷积网络在一张更大的输入图片上滑动，从而得到多个输出(可以理解为一个label map)。<br>&emsp;&emsp;<br>比如: 我们想让224×224尺寸的浮窗，以步长为32在384×384的图片上滑动，把每个经停的位置都带入卷积网络，最后得到6×6个位置的类别得分, 那么通过将全连接层转化为卷积层之后的运算过程为:<br>&emsp;&emsp;<br>如果224×224的输入图片经过卷积层和下采样层之后得到了[7x7x512]的数组，那么，384×384的大图片直接经过同样的卷积层和下采样层之后会得到[12x12x512]的数组, 然后再经过上面由3个全连接层转化得到的3个卷积层，最终得到[6x6x1000]的输出((12 – 7)/1 + 1 = 6), 这个结果正是浮窗在原图经停的6×6个位置的得分。<br>&emsp;&emsp;<br>一个确定的CNN网络结构之所以要固定输入图片大小，是因为全连接层权值数固定，而该权值数和feature map大小有关, 但是FCN在CNN的基础上把1000个结点的全连接层改为含有1000个1×1卷积核的卷积层，经过这一层，还是得到二维的feature map，同样我们也不关心这个feature map大小, 所以对于输入图片的size并没有限制。<br>&emsp;&emsp;<br>如下图所示，FCN将传统CNN中的全连接层转化成卷积层，对应CNN网络FCN把最后三层全连接层转换成为三层卷积层:</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.7_1.png" alt=""></p><center>一个分类网络</center><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.7_2.png" alt=""><br><br><center>变为全卷积网络</center><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.7_3.png" alt=""><br><br><center>End-to-end, pixels-to pixels网络</center><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.7_4.jpg" alt=""><br><br><br><br>（1）全连接层转化为全卷积层 : 在传统的CNN结构中，前5层是卷积层，第6层和第7层分别是一个长度为4096的一维向量，第8层是长度为1000的一维向量，分别对应1000个不同类别的概率。FCN将这3层表示为卷积层，卷积核的大小 (通道数，宽，高) 分别为 (4096,1,1)、(4096,1,1)、(1000,1,1)。看上去数字上并没有什么差别，但是卷积跟全连接是不一样的概念和计算过程，使用的是之前CNN已经训练好的权值和偏置，但是不一样的在于权值和偏置是有自己的范围，属于自己的一个卷积核。<br>&emsp;&emsp;<br>（2）CNN中输入的图像大小是统一固定成227x227大小的图像，第一层pooling后为55x55，第二层pooling后图像大小为27x27，第五层pooling后的图像大小为13x13, 而FCN输入的图像是H <em> W大小，第一层pooling后变为原图大小的1/2，第二层变为原图大小的1/4，第五层变为原图大小的1/8，第八层变为原图大小的1/16。<br>&emsp;&emsp;<br>（3）经过多次卷积和pooling以后，得到的图像越来越小，分辨率越来越低。其中图像到H/32 </em> W/32的时候图片是最小的一层时，所产生图叫做heatmap热图，热图就是我们最重要的高维特征图，得到高维特征的heatmap之后就是最重要的一步也是最后的一步对原图像进行upsampling，把图像进行放大几次到原图像的大小。<br>&emsp;&emsp;<br>相较于使用被转化前的原始卷积神经网络对所有36个位置进行迭代计算优化模型，然后再对36个位置做预测，使用转化后的卷积神经网络进行一次前向传播计算要高效得多，因为36次计算都在共享计算资源。这一技巧在实践中经常使用，通常将一张图像尺寸变得更大，然后使用变换后的卷积神经网络来对空间上很多不同位置进行评价得到分类评分，然后在求这些分值的平均值。<br><br>### 9.2.7 反卷积层理解<br><br>&emsp;&emsp;<br>Upsampling的操作可以看成是反卷积(deconvolutional)，卷积运算的参数和CNN的参数一样是在训练FCN模型的过程中通过bp算法学习得到。反卷积层也是卷积层，不关心input大小，滑窗卷积后输出output。deconv并不是真正的deconvolution（卷积的逆变换），最近比较公认的叫法应该是transposed convolution，deconv的前向传播就是conv的反向传播。<br>&emsp;&emsp;<br>反卷积参数: 利用卷积过程filter的转置（实际上就是水平和竖直方向上翻转filter）作为计算卷积前的特征图。<br>&emsp;&emsp;<br>反卷积的运算如下所示:<br>&emsp;&emsp;<br>蓝色是反卷积层的input，绿色是反卷积层的outputFull padding, transposed Full padding, transposed。<br><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.8_1.png" alt=""><br><br><center>上图中的反卷积，input是2×2, output是4×4。     Zero padding, non-unit strides, transposed。</center><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.8_2.png" alt=""><br><center>上图中的反卷积，input feature map是3×3, 转化后是5×5, output是5×5</center><h3 id="9-2-8-跳级-skip-结构"><a href="#9-2-8-跳级-skip-结构" class="headerlink" title="9.2.8 跳级(skip)结构"></a>9.2.8 跳级(skip)结构</h3><p>&emsp;&emsp;<br>对CNN的结果做处理，得到了dense prediction，而作者在试验中发现，得到的分割结果比较粗糙，所以考虑加入更多前层的细节信息，也就是把倒数第几层的输出和最后的输出做一个fusion，实际上也就是加和：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.9_1.png" alt=""><br>&emsp;&emsp;<br>实验表明，这样的分割结果更细致更准确。在逐层fusion的过程中，做到第三行再往下，结果又会变差，所以作者做到这里就停了。</p><h3 id="9-2-9-模型训练"><a href="#9-2-9-模型训练" class="headerlink" title="9.2.9 模型训练"></a>9.2.9 模型训练</h3><p>&emsp;&emsp;<br>（1）用AlexNet，VGG16或者GoogleNet训练好的模型做初始化，在这个基础上做fine-tuning，全部都fine-tuning，只需在末尾加上upsampling，参数的学习还是利用CNN本身的反向传播原理。<br>&emsp;&emsp;<br>（2）采用whole image做训练，不进行patchwise sampling。实验证明直接用全图已经很effective and efficient。<br>&emsp;&emsp;<br>（3）对class score的卷积层做全零初始化。随机初始化在性能和收敛上没有优势。<br><em>举例：</em><br>&emsp;&emsp;<br><em>FCN例子: 输入可为任意尺寸图像彩色图像；输出与输入尺寸相同，深度为：20类目标+背景=21，模型基于AlexNet。</em><br>&emsp;&emsp;<br><em>蓝色：卷积层。</em><br>&emsp;&emsp;<br><em>绿色：Max Pooling层。</em><br>&emsp;&emsp;<br><em>黄色: 求和运算, 使用逐数据相加，把三个不同深度的预测结果进行融合：较浅的结果更为精细，较深的结果更为鲁棒。</em><br>&emsp;&emsp;<br><em>灰色: 裁剪, 在融合之前，使用裁剪层统一两者大小, 最后裁剪成和输入相同尺寸输出。</em><br>&emsp;&emsp;<br><em>对于不同尺寸的输入图像，各层数据的尺寸（height，width）相应变化，深度（channel）不变。</em></p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_1.png" alt=""><br>&emsp;&emsp;<br>（1）全卷积层部分进行特征提取, 提取卷积层（3个蓝色层）的输出来作为预测21个类别的特征。</p><p>&emsp;&emsp;<br>（2）图中虚线内是反卷积层的运算, 反卷积层（3个橙色层）可以把输入数据尺寸放大。和卷积层一样，升采样的具体参数经过训练确定。    </p><p>&emsp;&emsp;&emsp;&emsp;<br>1) 以经典的AlexNet分类网络为初始化。最后两级是全连接（红色），参数弃去不用。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_2.png" alt=""><br>&emsp;&emsp;&emsp;&emsp;<br>2) 从特征小图（）预测分割小图（），之后直接升采样为大图。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_3.png" alt=""></p><center>反卷积（橙色）的步长为32，这个网络称为FCN-32s</center><br>&emsp;&emsp;&emsp;&emsp;<br>3) 升采样分为两次完成（橙色×2）, 在第二次升采样前，把第4个pooling层（绿色）的预测结果（蓝色）融合进来。使用跳级结构提升精确性。<br><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_4.png" alt=""><br><br><center>第二次反卷积步长为16，这个网络称为FCN-16s</center><br>&emsp;&emsp;&emsp;&emsp;<br>4) 升采样分为三次完成（橙色×3）, 进一步融合了第3个pooling层的预测结果。<br><br><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_5.png" alt=""><br><br><center>第三次反卷积步长为8，记为FCN-8s</center><p>其他参数:<br>&emsp;&emsp;<br>minibatch：20张图片。<br>&emsp;&emsp;<br>learning rate：0.001。<br>&emsp;&emsp;<br>初始化：分类网络之外的卷积层参数初始化为0。<br>&emsp;&emsp;<br>反卷积参数初始化为bilinear插值。<br>&emsp;&emsp;<br>最后一层反卷积固定位bilinear插值不做学习。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.1.10_6.png" alt=""></p><h3 id="9-2-10-FCN缺点"><a href="#9-2-10-FCN缺点" class="headerlink" title="9.2.10 FCN缺点"></a>9.2.10 FCN缺点</h3><p>&emsp;&emsp;<br>（1）得到的结果还是不够精细。进行8倍上采样虽然比32倍的效果好了很多，但是上采样的结果还是比较模糊和平滑，对图像中的细节不敏感。<br>&emsp;&emsp;<br>（2）对各个像素进行分类，没有充分考虑像素与像素之间的关系。忽略了在通常的基于像素分类的分割方法中使用的空间规整（spatial regularization）步骤，缺乏空间一致性。</p><h2 id="9-3-U-Net"><a href="#9-3-U-Net" class="headerlink" title="9.3 U-Net"></a>9.3 U-Net</h2><p>&emsp;&emsp;<br>卷积网络被大规模应用在分类任务中，输出的结果是整个图像的类标签。然而，在许多视觉任务，尤其是生物医学图像处理领域，目标输出应该包括目标类别的位置，并且每个像素都应该有类标签。另外，在生物医学图像往往缺少训练图片。所以，Ciresan等人训练了一个卷积神经网络，用滑动窗口提供像素的周围区域（patch）作为输入来预测每个像素的类标签。这个网络有两个优点：<br>第一，输出结果可以定位出目标类别的位置；<br>第二，由于输入的训练数据是patches，这样就相当于进行了数据增广，解决了生物医学图像数量少的问题。<br>&emsp;&emsp;<br>但是，这个方法也有两个很明显缺点。<br>&emsp;&emsp;<br>第一，它很慢，因为这个网络必须训练每个patch，并且因为patch间的重叠有很多的冗余(冗余会造成什么影响呢？卷积核里面的W，就是提取特征的权重，两个块如果重叠的部分太多，这个权重会被同一些特征训练两次，造成资源的浪费，减慢训练时间和效率，虽然说会有一些冗余，训练集大了，准确率不就高了吗？可是你这个是相同的图片啊，重叠的东西都是相同的，举个例子，我用一张相同的图片训练20次，按照这个意思也是增大了训练集啊，可是会出现什么结果呢，很显然，会导致过拟合，也就是对你这个图片识别很准，别的图片就不一定了)。<br>&emsp;&emsp;<br>第二，定位准确性和获取上下文信息不可兼得。大的patches需要更多的max-pooling层这样减小了定位准确性(为什么？因为你是对以这个像素为中心的点进行分类，如果patch太大，最后经过全连接层的前一层大小肯定是不变的，如果你patch大就需要更多的pooling达到这个大小，而pooling层越多，丢失信息的信息也越多；小的patches只能看到很小的局部信息，包含的背景信息不够。<br>&emsp;&emsp;<br>这篇论文建立了一个更好全卷积方法。我们定义和扩展了这个方法它使用更少的训练图片但产生更精确的分割。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.2_1.png" alt="">   </p><p>&emsp;&emsp;<br>(1)    使用全卷积神经网络。(全卷积神经网络就是卷积取代了全连接层，全连接层必须固定图像大小而卷积不用，所以这个策略使得，你可以输入任意尺寸的图片，而且输出也是图片，所以这是一个端到端的网络。)<br>&emsp;&emsp;<br>(2)    左边的网络是收缩路径：使用卷积和maxpooling。<br>&emsp;&emsp;<br>(3)    右边的网络是扩张路径:使用上采样产生的特征图与左侧收缩路径对应层产生的特征图进行concatenate操作。（pooling层会丢失图像信息和降低图像分辨率且是不可逆的操作，对图像分割任务有一些影响，对图像分类任务的影响不大，为什么要做上采样？因为上采样可以补足一些图片的信息，但是信息补充的肯定不完全，所以还需要与左边的分辨率比较高的图片相连接起来（直接复制过来再裁剪到与上采样图片一样大小），这就相当于在高分辨率和更抽象特征当中做一个折衷，因为随着卷积次数增多，提取的特征也更加有效，更加抽象，上采样的图片是经历多次卷积后的图片，肯定是比较高效和抽象的图片，然后把它与左边不怎么抽象但更高分辨率的特征图片进行连接）。<br>&emsp;&emsp;<br>(4)    最后再经过两次反卷积操作，生成特征图，再用两个1X1的卷积做分类得到最后的两张heatmap,例如第一张表示的是第一类的得分，第二张表示第二类的得分heatmap,然后作为softmax函数的输入，算出概率比较大的softmax类，选择它作为输入给交叉熵进行反向传播训练。</p><p>下面是U-Net模型的代码实现：（贡献者：黄钦建－华南理工大学）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">def get_unet():</span><br><span class="line">    inputs = Input((img_rows, img_cols, 1))</span><br><span class="line">    conv1 = Conv2D(32, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(inputs)</span><br><span class="line">    conv1 = Conv2D(32, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv1)</span><br><span class="line">    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)</span><br><span class="line">    # pool1 = Dropout(0.25)(pool1)</span><br><span class="line">    # pool1 = BatchNormalization()(pool1)</span><br><span class="line"></span><br><span class="line">    conv2 = Conv2D(64, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(pool1)</span><br><span class="line">    conv2 = Conv2D(64, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv2)</span><br><span class="line">    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)</span><br><span class="line">    # pool2 = Dropout(0.5)(pool2)</span><br><span class="line">    # pool2 = BatchNormalization()(pool2)</span><br><span class="line"></span><br><span class="line">    conv3 = Conv2D(128, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(pool2)</span><br><span class="line">    conv3 = Conv2D(128, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv3)</span><br><span class="line">    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)</span><br><span class="line">    # pool3 = Dropout(0.5)(pool3)</span><br><span class="line">    # pool3 = BatchNormalization()(pool3)</span><br><span class="line"></span><br><span class="line">    conv4 = Conv2D(256, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(pool3)</span><br><span class="line">    conv4 = Conv2D(256, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv4)</span><br><span class="line">    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)</span><br><span class="line">    # pool4 = Dropout(0.5)(pool4)</span><br><span class="line">    # pool4 = BatchNormalization()(pool4)</span><br><span class="line"></span><br><span class="line">    conv5 = Conv2D(512, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(pool4)</span><br><span class="line">    conv5 = Conv2D(512, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv5)</span><br><span class="line"></span><br><span class="line">    up6 = concatenate([Conv2DTranspose(256, (2, 2), strides=(</span><br><span class="line">        2, 2), padding=&apos;same&apos;)(conv5), conv4], axis=3)</span><br><span class="line">    # up6 = Dropout(0.5)(up6)</span><br><span class="line">    # up6 = BatchNormalization()(up6)</span><br><span class="line">    conv6 = Conv2D(256, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(up6)</span><br><span class="line">    conv6 = Conv2D(256, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv6)</span><br><span class="line"></span><br><span class="line">    up7 = concatenate([Conv2DTranspose(128, (2, 2), strides=(</span><br><span class="line">        2, 2), padding=&apos;same&apos;)(conv6), conv3], axis=3)</span><br><span class="line">    # up7 = Dropout(0.5)(up7)</span><br><span class="line">    # up7 = BatchNormalization()(up7)</span><br><span class="line">    conv7 = Conv2D(128, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(up7)</span><br><span class="line">    conv7 = Conv2D(128, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv7)</span><br><span class="line"></span><br><span class="line">    up8 = concatenate([Conv2DTranspose(64, (2, 2), strides=(</span><br><span class="line">        2, 2), padding=&apos;same&apos;)(conv7), conv2], axis=3)</span><br><span class="line">    # up8 = Dropout(0.5)(up8)</span><br><span class="line">    # up8 = BatchNormalization()(up8)</span><br><span class="line">    conv8 = Conv2D(64, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(up8)</span><br><span class="line">    conv8 = Conv2D(64, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv8)</span><br><span class="line"></span><br><span class="line">    up9 = concatenate([Conv2DTranspose(32, (2, 2), strides=(</span><br><span class="line">        2, 2), padding=&apos;same&apos;)(conv8), conv1], axis=3)</span><br><span class="line">    # up9 = Dropout(0.5)(up9)</span><br><span class="line">    # up9 = BatchNormalization()(up9)</span><br><span class="line">    conv9 = Conv2D(32, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(up9)</span><br><span class="line">    conv9 = Conv2D(32, (3, 3), activation=&apos;relu&apos;, padding=&apos;same&apos;)(conv9)</span><br><span class="line"></span><br><span class="line">    # conv9 = Dropout(0.5)(conv9)</span><br><span class="line"></span><br><span class="line">    conv10 = Conv2D(1, (1, 1), activation=&apos;sigmoid&apos;)(conv9)</span><br><span class="line"></span><br><span class="line">    model = Model(inputs=[inputs], outputs=[conv10])</span><br><span class="line"></span><br><span class="line">    model.compile(optimizer=Adam(lr=1e-5),</span><br><span class="line">                  loss=dice_coef_loss, metrics=[dice_coef])</span><br><span class="line"></span><br><span class="line">    return model</span><br></pre></td></tr></table></figure><h2 id="9-4-SegNet"><a href="#9-4-SegNet" class="headerlink" title="9.4 SegNet"></a>9.4 SegNet</h2><p>&emsp;&emsp;<br>可训练的图像分割引擎，包含一个encoder网络，一个对应的decoder网络，衔接像素级分类层，解码网络与VGG16的13层卷积层相同。解码网络是将低分辨率的编码特征图映射到全分辨率的特征图。解码网络使用最大池化层的池化索引进行非线性上采样，上采样过程就不需要学习。上采样得到的稀疏图与可训练的滤波器卷积得到致密的特征图。<br>&emsp;&emsp;<br>使用池化层索引进行上采样的优势：<br>&emsp;&emsp;<br>1）提升边缘刻画度；<br>&emsp;&emsp;<br>2）减少训练的参数；<br>&emsp;&emsp;<br>3）这种上采样模式可以包含到任何编码-解码网络中。<br>&emsp;&emsp;<br>SegNet网络的结构如下图所示：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.3_1.jpg" alt="">  </p><p>&emsp;&emsp;<br>SegNet网络结构如图1所示，Input为输入图片，Output为输出分割的图像，不同颜色代表不同的分类。语义分割的重要性就在于不仅告诉你图片中某个东西是什么，而且告知你他在图片的位置。我们可以看到是一个对称网络，由中间绿色pooling层与红色upsampling层作为分割，左边是卷积提取高维特征，并通过pooling使图片变小，SegNet作者称为Encoder，右边是反卷积（在这里反卷积与卷积没有区别）与upsampling，通过反卷积使得图像分类后特征得以重现，upsampling使图像变大，SegNet作者称为Decoder，最后通过Softmax，输出不同分类的最大值。这就是大致的SegNet过程，下面对这个过程里面使用到的方法进行介绍。<br>&emsp;&emsp;<br>编码网络与滤波器族卷积得到特征图，进行BN，ReLU，最大池化。最大池化是为了获得空间小位移的平移不变。最大池化和下采样损失了边缘细节，因此，在编码过程中保存边缘信息很重要。考虑到内存原因，只保存最大池化索引，如最大特征值的位置。<br>&emsp;&emsp;<br>SegNet解码技术如下图所示：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.3_2.jpg" alt="">  </p><p>&emsp;&emsp;<br>解码网络使用保存的最大池化索引上采样，得到稀疏的特征图，将特征图与可训练的解码滤波器族卷积得到致密的特征图。之后进行BN。高维的特征图输入soft-max层，对每个像素进行分类，得到每个像素属于K类的概率。  图3中右边是FCN的解码技术，FCN对编码的特征图进行降维，降维后输入到解码网络，解码网络中，上采样使用反卷积实现，上采样的特征图与降维的编码图进行element-wise add得到最终的解码特征图。FCN解码模型需要存储编码特征图，在嵌入式设备中内存紧张。<br>&emsp;&emsp;<br>SegNet的Encoder过程中，卷积的作用是提取特征，SegNet使用的卷积为same卷积（详见卷积神经网络CNN（1）)，即卷积后不改变图片大小；在Decoder过程中，同样使用same卷积，不过卷积的作用是为upsampling变大的图像丰富信息，使得在Pooling过程丢失的信息可以通过学习在Decoder得到。SegNet中的卷积与传统CNN的卷积并没有区别。</p><h2 id="9-5-空洞卷积-Dilated-Convolutions"><a href="#9-5-空洞卷积-Dilated-Convolutions" class="headerlink" title="9.5 空洞卷积(Dilated Convolutions)"></a>9.5 空洞卷积(Dilated Convolutions)</h2><p>&emsp;&emsp;<br>在图像分割领域，图像输入到CNN（典型的网络比如FCN[3]）中，FCN先像传统的CNN那样对图像做卷积再pooling，降低图像尺寸的同时增大感受野，但是由于图像分割预测是pixel-wise的输出，所以要将pooling后较小的图像尺寸upsampling到原始的图像尺寸进行预测（upsampling一般采用deconv反卷积操作，deconv可参见知乎答案如何理解深度学习中的deconvolution networks？），之前的pooling操作使得每个pixel预测都能看到较大感受野信息。因此图像分割FCN中有两个关键，一个是pooling减小图像尺寸增大感受野，另一个是upsampling扩大图像尺寸。在先减小再增大尺寸的过程中，肯定有一些信息损失掉了，那么能不能设计一种新的操作，不通过pooling也能有较大的感受野看到更多的信息呢？答案就是dilated conv。<br>&emsp;&emsp;<br>以前的CNN主要问题总结：<br>&emsp;&emsp;<br>（1）Up-sampling / pooling layer<br>&emsp;&emsp;<br>（2）内部数据结构丢失；空间层级化信息丢失。<br>&emsp;&emsp;<br>（3）小物体信息无法重建 (假设有四个pooling layer 则 任何小于 2^4 = 16 pixel 的物体信息将理论上无法重建。)<br>&emsp;&emsp;<br>举例如下：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.3_3.png" alt=""></p><p><center>Dilated Convolution with a 3 x 3 kernel and dilation rate 2</center><br>&emsp;&emsp;<br>下面看一下dilated conv原始论文[4]中的示意图</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.3_4.jpg" alt="">  </p><p>&emsp;&emsp;<br>(a)    图对应3x3的1-dilated conv，和普通的卷积操作一样，(b)图对应3x3的2-dilated conv，实际的卷积kernel size还是3x3，但是空洞为1，也就是对于一个7x7的图像patch，只有9个红色的点和3x3的kernel发生卷积操作，其余的点略过。也可以理解为kernel的size为7x7，但是只有图中的9个点的权重不为0，其余都为0。 可以看到虽然kernel size只有3x3，但是这个卷积的感受野已经增大到了7x7（如果考虑到这个2-dilated conv的前一层是一个1-dilated conv的话，那么每个红点就是1-dilated的卷积输出，所以感受野为3x3，所以1-dilated和2-dilated合起来就能达到7x7的conv）,(c)图是4-dilated conv操作，同理跟在两个1-dilated和2-dilated conv的后面，能达到15x15的感受野。对比传统的conv操作，3层3x3的卷积加起来，stride为1的话，只能达到(kernel-1) * layer+1=7的感受野，也就是和层数layer成线性关系，而dilated conv的感受野是指数级的增长。<br>&emsp;&emsp;<br>dilated的好处是不做pooling损失信息的情况下，加大了感受野，让每个卷积输出都包含较大范围的信息。在图像需要全局信息或者语音文本需要较长的sequence信息依赖的问题中，都能很好的应用dilated conv，比如图像分割、语音合成WaveNet、机器翻译ByteNet中。</p><h2 id="9-6-RefineNet"><a href="#9-6-RefineNet" class="headerlink" title="9.6 RefineNet"></a>9.6 RefineNet</h2><p>&emsp;&emsp;<br>网络结构：<br>&emsp;&emsp;<br>RefineNet block的作用就是把不同resolution level的feature map进行融合。网络结构如下：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.4_1.png" alt=""><br>&emsp;&emsp;<br>最左边一栏就是FCN的encoder部分(文中是用的ResNet)，先把pretrained ResNet按feature map的分辨率分成四个ResNet blocks，然后向右把四个blocks分别作为4个path通过RefineNet block进行融合refine，最后得到一个refined feature map(接softmax再双线性插值输出)。<br>注意除了RefineNet-4，所有的RefineNet block都是二输入的，用于融合不同level做refine，而单输入的RefineNet-4可以看作是先对ResNet的一个task adaptation。  </p><p>&emsp;&emsp;<br><strong>RefineNet Block</strong><br>&emsp;&emsp;<br>接下来仔细看一下RefineNet block，可以看到主要组成部分是Residual convolution unit, Multi-resolution fusion, Chained residual pooling, Output convolutions. 切记这个block作用是融合多个level的feature map输出单个level的feature map，但具体的实现应该是和输入个数、shape无关的。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.4_2.png" alt=""> </p><p>&emsp;&emsp;<br>Residual convolution unit就是普通的去除了BN的residual unit；  </p><p>&emsp;&emsp;<br>Multi-resolution fusion是先对多输入的feature map都用一个卷积层进行adaptation(都化到最小的feature map的shape)，再上采样再做element-wise的相加。注意如果是像RefineNet-4那样的单输入block这一部分就直接pass了；</p><p>&emsp;&emsp;<br>Chained residual pooling中的ReLU对接下来池化的有效性很重要，还可以使模型对学习率的变化没这么敏感。这个链式结构能从很大范围区域上获取背景context。另外，这个结构中大量使用了identity mapping这样的连接，无论长距离或者短距离的，这样的结构允许梯度从一个block直接向其他任一block传播。</p><p>&emsp;&emsp;<br>Output convolutions就是输出前再加一个RCU。</p><h2 id="9-7-PSPNet"><a href="#9-7-PSPNet" class="headerlink" title="9.7 PSPNet"></a>9.7 PSPNet</h2><p>&emsp;&emsp;<br>场景解析对于无限制的开放词汇和不同场景来说是具有挑战性的.本文使用文中的pyramid pooling module实现基于不同区域的上下文集成，提出了PSPNet，实现利用上下文信息的能力进行场景解析。<br>&emsp;&emsp;<br>作者认为，FCN存在的主要问题是没有采取合适的策略来用全局的信息，本文的做法就是借鉴SPPNet来设计了PSPNet解决这个问题。<br>&emsp;&emsp;<br>很多State-of-the-art的场景解析框架都是基于FCN的.基于CNN的方法能够增强动态物体的理解，但是在无限制词汇和不同场景中仍然面临挑战.举个例子，如下图.</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_1.png" alt=""><br>&emsp;&emsp;<br>FCN认为右侧框中是汽车，但是实际上是船，如果参考上下文的先验知识，就会发现左边是一个船屋，进而推断是框中是船.FCN存在的主要问题就是不能利用好全局的场景线索。  </p><p>&emsp;&emsp;<br>对于尤其复杂的场景理解，之前都是采用空间金字塔池化来做的，和之前方法不同（为什么不同，需要参考一下经典的金字塔算法），本文提出了pyramid scene parsing network(PSPNet)。<br>&emsp;&emsp;<br>本文的主要贡献如下:<br>&emsp;&emsp;<br>(1)    提出了PSPNet在基于FCN的框架中集成困难的上下文特征<br>&emsp;&emsp;<br>(2)    通过基于深度监督误差开发了针对ResNet的高效优化策略<br>&emsp;&emsp;<br>(3)    构建了一个用于state-of-the-art的场景解析和语义分割的实践系统（具体是什么？）<br>&emsp;&emsp;<br>通过观察FCN的结果，发现了如下问题：<br>&emsp;&emsp;<br>(1)    关系不匹配（Mismatched Relationship）<br>&emsp;&emsp;<br>(2)    易混淆的类别（Confusion Categories）<br>&emsp;&emsp;<br>(3)    不显眼的类别（Inconspicuous Classes）<br>&emsp;&emsp;<br>总结以上结果发现，以上问题部分或者全部与上下文关系和全局信息有关系，因此本文提出了PSPNet.框架如下:</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_2.png" alt=""><br>&emsp;&emsp;<br>并且加入额外的深度监督 Loss</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_3.png" alt=""></p><h2 id="9-8-DeepLab系列"><a href="#9-8-DeepLab系列" class="headerlink" title="9.8 DeepLab系列"></a>9.8 DeepLab系列</h2><h3 id="9-8-1-DeepLabv1"><a href="#9-8-1-DeepLabv1" class="headerlink" title="9.8.1 DeepLabv1"></a>9.8.1 DeepLabv1</h3><p>&emsp;&emsp;<br>DeepLab 是结合了深度卷积神经网络（DCNNs）和概率图模型（DenseCRFs）的方法。<br>&emsp;&emsp;<br>在实验中发现 DCNNs 做语义分割时精准度不够的问题，根本原因是 DCNNs 的高级特征的平移不变性，即高层次特征映射，根源于重复的池化和下采样。<br>&emsp;&emsp;<br>针对信号下采样或池化降低分辨率，DeepLab 是采用的 atrous（带孔）算法扩展感受野，获取更多的上下文信息。<br>&emsp;&emsp;<br>分类器获取以对象中心的决策是需要空间变换的不变性，这天然地限制了 DCNN 的定位精度，DeepLab 采用完全连接的条件随机场（CRF）提高模型捕获细节的能力。<br>&emsp;&emsp;<br>除空洞卷积和 CRFs 之外，论文使用的 tricks 还有 Multi-Scale features。其实就是 U-Net 和 FPN 的思想，在输入图像和前四个最大池化层的输出上附加了两层的 MLP，第一层是 128 个 3×3 卷积，第二层是 128 个 1×1 卷积。最终输出的特征与主干网的最后一层特征图融合，特征图增加 5×128=640 个通道。<br>&emsp;&emsp;<br>实验表示多尺度有助于提升预测结果，但是效果不如 CRF 明显。<br>&emsp;&emsp;<br>论文模型基于 VGG16，在 Titan GPU 上运行速度达到了 8FPS，全连接 CRF 平均推断需要 0.5s ，在 PASCAL VOC-2012 达到 71.6% IOU accuracy。</p><h3 id="9-8-2-DeepLabv2"><a href="#9-8-2-DeepLabv2" class="headerlink" title="9.8.2 DeepLabv2"></a>9.8.2 DeepLabv2</h3><p>&emsp;&emsp;<br>DeepLabv2 是相对于 DeepLabv1 基础上的优化。DeepLabv1 在三个方向努力解决，但是问题依然存在：特征分辨率的降低、物体存在多尺度，DCNN 的平移不变性。<br>&emsp;&emsp;<br>因 DCNN 连续池化和下采样造成分辨率降低，DeepLabv2 在最后几个最大池化层中去除下采样，取而代之的是使用空洞卷积，以更高的采样密度计算特征映射。<br>&emsp;&emsp;<br>物体存在多尺度的问题，DeepLabv1 中是用多个 MLP 结合多尺度特征解决，虽然可以提供系统的性能，但是增加特征计算量和存储空间。<br>&emsp;&emsp;<br>论文受到 Spatial Pyramid Pooling (SPP) 的启发，提出了一个类似的结构，在给定的输入上以不同采样率的空洞卷积并行采样，相当于以多个比例捕捉图像的上下文，称为 ASPP (atrous spatial pyramid pooling) 模块。<br>&emsp;&emsp;<br>DCNN 的分类不变形影响空间精度。DeepLabv2 是采样全连接的 CRF 在增强模型捕捉细节的能力。<br>&emsp;&emsp;<br>论文模型基于 ResNet，在 NVidia Titan X GPU 上运行速度达到了 8FPS，全连接 CRF 平均推断需要 0.5s ，在耗时方面和 DeepLabv1 无差异，但在 PASCAL VOC-2012 达到 79.7 mIOU。</p><h3 id="9-8-3-DeepLabv3"><a href="#9-8-3-DeepLabv3" class="headerlink" title="9.8.3 DeepLabv3"></a>9.8.3 DeepLabv3</h3><p>&emsp;&emsp;<br>好的论文不止说明怎么做，还告诉为什么。DeepLab 延续到 DeepLabv3 系列，依然是在空洞卷积做文章，但是探讨不同结构的方向。<br>&emsp;&emsp;<br>DeepLabv3 论文比较了多种捕获多尺度信息的方式：</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_4.png" alt=""> </p><p>&emsp;&emsp;<br>1.Image Pyramid：将输入图片放缩成不同比例，分别应用在 DCNN 上，将预测结果融合得到最终输出。<br>&emsp;&emsp;<br>2.Encoder-Decoder：利用 Encoder 阶段的多尺度特征，运用到 Decoder 阶段上恢复空间分辨率，代表工作有 FCN、SegNet、PSPNet 等工。<br>&emsp;&emsp;<br>3.Deeper w. Atrous Convolution：在原始模型的顶端增加额外的模块，例如 DenseCRF，捕捉像素间长距离信息。<br>&emsp;&emsp;<br>4.Spatial Pyramid Pooling：空间金字塔池化具有不同采样率和多种视野的卷积核，能够以多尺度捕捉对象。<br>&emsp;&emsp;<br>DeepLabv1-v2 都是使用带孔卷积提取密集特征来进行语义分割。但是为了解决分割对象的多尺度问题，DeepLabv3 设计采用多比例的带孔卷积级联或并行来捕获多尺度背景。<br>&emsp;&emsp;<br>此外，DeepLabv3 将修改之前提出的带孔空间金字塔池化模块，该模块用于探索多尺度卷积特征，将全局背景基于图像层次进行编码获得特征，取得 state-of-art 性能，在 PASCAL VOC-2012 达到 86.9 mIOU。</p><h3 id="9-8-4-DeepLabv3"><a href="#9-8-4-DeepLabv3" class="headerlink" title="9.8.4 DeepLabv3+"></a>9.8.4 DeepLabv3+</h3><p>&emsp;&emsp;<br>语义分割关注的问题:<br>&emsp;&emsp;<br>1、 实例对象多尺度问题。<br>&emsp;&emsp;<br>2、 因为深度网络存在stride=2的层，会导致feature分辨率下降，从而导致预测精度降低，而造成的边界信息丢失问题。<br>&emsp;&emsp;<br>deeplab V3新设计的aspp结构解决了问题1，deeplab v3+主要目的在于解决问题2。<br>&emsp;&emsp;<br>问题2 可以使用空洞卷积替代更多的pooling层来获取分辨率更高的feature。但是feature分辨率更高会极大增加运算量。以deeplab v3使用的resnet101为例，stride=16将造成后面9层feature变大，后面9层的计算量变为原来的2*2=4倍大。stride=8则更为恐怖，后面78层的计算量都会变大很多。<br>&emsp;&emsp;<br>解决方案：1、编解码器结构；2 Modified Aligned Xception</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_5.png" alt="">   </p><p>&emsp;&emsp;<br>在deeplabv3基础上加入解码器。A是aspp结构，其中8x的上采样可以看做是一个解码器。B是编解码结构，它集合了高层和底层的特征。C就是本文采取的结构。<br>&emsp;&emsp;<br>方法：<br>&emsp;&emsp;<br>（1）Encoder-Decoder with Atrous Convolution</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_6.png" alt="">  </p><p>&emsp;&emsp;<br>编码器采用deeplabv3。<br>&emsp;&emsp;<br>解码器部分：先从低层级选一个feature，将低层级的feature用1 <em> 1的卷积进行通道压缩（原本为256通道，或者512通道），目的在于减少低层级的比重。作者认为编码器得到的feature具有更丰富的信息，所以编码器的feature应该有更高的比重。 这样做有利于训练。<br>&emsp;&emsp;<br>再将编码器的输出上采样，使其分辨率与低层级feature一致。举个例子，如果采用resnet conv2 输出的feature，则这里要</em> 4上采样。将两种feature连接后，再进行一次3 * 3的卷积（细化作用），然后再次上采样就得到了像素级的预测。后面的实验结果表明这种结构在 stride=16 时既有很高的精度速度又很快。stride=8相对来说只获得了一点点精度的提升，但增加了很多的计算量。<br>&emsp;&emsp;<br>（2）Modified Aligned Xception<br>&emsp;&emsp;<br>Xception主要采用了deepwish seperable convolution来替换原来的卷积层。简单的说就是这种结构能在更少参数更少计算量的情况下学到同样的信息。这边则是考虑将原来的resnet-101骨架网换成xception。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.6_7.png" alt="">  </p><p>&emsp;&emsp;<br><strong>红色部分为修改</strong><br>&emsp;&emsp;<br>更多层：重复8次改为16次（基于MSRA目标检测的工作）。<br>&emsp;&emsp;<br>将原来简单的pool层改成了stride为2的deepwish seperable convolution。<br>&emsp;&emsp;<br>额外的RELU层和归一化操作添加在每个 3 × 3 depthwise convolution之后（原来只在1 * 1卷积之后）</p><h2 id="9-9-Mask-R-CNN"><a href="#9-9-Mask-R-CNN" class="headerlink" title="9.9 Mask-R-CNN"></a>9.9 Mask-R-CNN</h2><h3 id="9-9-1-Mask-RCNN-的网络结构示意图"><a href="#9-9-1-Mask-RCNN-的网络结构示意图" class="headerlink" title="9.9.1 Mask-RCNN 的网络结构示意图"></a>9.9.1 Mask-RCNN 的网络结构示意图</h3><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.8_1.png" alt=""></p><p>&emsp;&emsp;<br>其中黑色部分为原来的Faster-RCNN，红色部分为在Faster网络上的修改：<br>&emsp;&emsp;<br>1）将ROI Pooling层替换成了ROIAlign；<br>&emsp;&emsp;<br>2）添加并列的FCN层（Mask层）；<br>&emsp;&emsp;<br>先来概述一下Mask-RCNN的几个特点（来自于Paper<a href="https://arxiv.org/pdf/1703.06870.pdf" target="_blank" rel="noopener">Mask R-CNN</a>的Abstract）：<br>&emsp;&emsp;<br>1）在边框识别的基础上添加分支网络，用于语义Mask识别；<br>&emsp;&emsp;<br>2）训练简单，相对于Faster仅增加一个小的Overhead，可以跑到5FPS；<br>&emsp;&emsp;<br>3）可以方便的扩展到其他任务，比如人的姿态估计等；<br>&emsp;&emsp;<br>4）不借助Trick，在每个任务上，效果优于目前所有的 single-model entries；包括 COCO 2016 的Winners。</p><h3 id="9-9-2-RCNN行人检测框架"><a href="#9-9-2-RCNN行人检测框架" class="headerlink" title="9.9.2 RCNN行人检测框架"></a>9.9.2 RCNN行人检测框架</h3><p>&emsp;&emsp;<br>来看下后面两种RCNN方法与Mask结合的示意图:</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.8_2.png" alt=""><br>&emsp;&emsp;<br>图中灰色部分是原来的RCNN结合ResNet or FPN的网络，下面黑色部分为新添加的并联Mask层，这个图本身与上面的图也没有什么区别，旨在说明作者所提出的Mask RCNN方法的泛化适应能力：可以和多种RCNN框架结合，表现都不错。</p><h3 id="9-9-3-Mask-RCNN-技术要点"><a href="#9-9-3-Mask-RCNN-技术要点" class="headerlink" title="9.9.3 Mask-RCNN 技术要点"></a>9.9.3 Mask-RCNN 技术要点</h3><p>&emsp;&emsp;<br><strong>1.技术要点1 - 强化的基础网络</strong><br>&emsp;&emsp;<br>通过ResNeXt-101+FPN用作特征提取网络，达到state-of-the-art的效果。<br>&emsp;&emsp;<br><strong>2.技术要点2 - ROIAlign</strong><br>&emsp;&emsp;<br>采用ROIAlign替代RoiPooling（改进池化操作）。引入了一个插值过程，先通过双线性插值到14<em>14，再pooling到7</em>7，很大程度上解决了仅通过Pooling直接采样带来的Misalignment对齐问题。<br>&emsp;&emsp;<br>PS： 虽然 Misalignment 在分类问题上影响并不大，但在 Pixel 级别的 Mask 上会存在较大误差。<br>&emsp;&emsp;<br>后面我们把结果对比贴出来（Table2 c &amp; d），能够看到 ROIAlign 带来较大的改进，可以看到，Stride 越大改进越明显。<br>&emsp;&emsp;<br><strong>3.技术要点3 - Loss Function</strong><br>&emsp;&emsp;<br>每个ROIAlign对应K <em> m^2维度的输出。K对应类别个数，即输出K个mask，m对应池化分辨率（7 </em> 7）。Loss函数定义：<br>$$<br>Lmask(Cls_k)=Sigmoid(Cls_k)<br>$$<br>&emsp;&emsp;<br>$Lmask(Cls_k) = Sigmoid (Cls_k)$，平均二值交叉熵 （average binary cross-entropy）Loss，通过逐像素的 Sigmoid 计算得到。<br>&emsp;&emsp;<br>Why K个mask？通过对每个 Class 对应一个Mask可以有效避免类间竞争（其他Class不贡献Loss）。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.8_3.png" alt=""><br>&emsp;&emsp;<br>通过结果对比来看（Table2 b），也就是作者所说的 Decouple 解耦，要比多分类的Softmax效果好很多。<br>&emsp;&emsp;<br>另外，作者给出了很多实验分割效果，就不都列了，只贴一张和FCIS的对比图（FCIS出现了Overlap的问题）</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.8_4.png" alt=""></p><h2 id="9-10-CNN在基于弱监督学习的图像分割中的应用"><a href="#9-10-CNN在基于弱监督学习的图像分割中的应用" class="headerlink" title="9.10 CNN在基于弱监督学习的图像分割中的应用"></a>9.10 CNN在基于弱监督学习的图像分割中的应用</h2><p>&emsp;&emsp;<br>答案来源：<a href="https://zhuanlan.zhihu.com/p/23811946" target="_blank" rel="noopener">CNN在基于弱监督学习的图像分割中的应用</a>  </p><p>&emsp;&emsp;<br>最近基于深度学习的图像分割技术一般依赖于卷积神经网络CNN的训练，训练过程中需要非常大量的标记图像，即一般要求训练图像中都要有精确的分割结果。<br>&emsp;&emsp;<br>对于图像分割而言，要得到大量的完整标记过的图像非常困难，比如在ImageNet数据集上，有1400万张图有类别标记，有50万张图给出了bounding box,但是只有4460张图像有像素级别的分割结果。对训练图像中的每个像素做标记非常耗时，特别是对医学图像而言，完成对一个三维的CT或者MRI图像中各组织的标记过程需要数小时。<br>&emsp;&emsp;<br>如果学习算法能通过对一些初略标记过的数据集的学习就能完成好的分割结果，那么对训练数据的标记过程就很简单，这可以大大降低花在训练数据标记上的时间。这些初略标记可以是：<br>&emsp;&emsp;<br>1、只给出一张图像里面包含哪些物体，<br>&emsp;&emsp;<br>2、给出某个物体的边界框，<br>&emsp;&emsp;<br>3、对图像中的物体区域做部分像素的标记，例如画一些线条、涂鸦等（scribbles)。</p><h3 id="9-10-1-Scribble标记"><a href="#9-10-1-Scribble标记" class="headerlink" title="9.10.1 Scribble标记"></a>9.10.1 Scribble标记</h3><p>&emsp;&emsp;<br>论文地址：<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Lin_ScribbleSup_Scribble-Supervised_Convolutional_CVPR_2016_paper.pdf" target="_blank" rel="noopener">ScribbleSup: Scribble-Supervised Convolutional Networks for Semantic Segmentation (CVPR 2016)</a><br>&emsp;&emsp;<br>香港中文大学的Di Lin提出了一个基于Scribble标记的弱监督学习方法。Scribble是一个很方便使用的标记方法，因此被用得比较广泛。如下图，只需要画五条线就能完成对一副图像的标记工作。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_1.png" alt=""><br>&emsp;&emsp;<br>ScribbleSup分为两步，第一步将像素的类别信息从scribbles传播到其他未标记的像素，自动完成所有的训练图像的标记工作； 第二步使用这些标记图像训练CNN。在第一步中，该方法先生成super-pxels, 然后基于graph cut的方法对所有的super-pixel进行标记。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_2.png" alt="">  </p><p>&emsp;&emsp;<br>Graph Cut的能量函数为：</p><p>$$<br>\sum_{i}\psi _i\left(y_i|X,S\right)+\sum_{i,j}\psi_{ij}\left(y_i,y_j,X\right)<br>$$</p><p>&emsp;&emsp;<br>在这个graph中，每个super-pixel是graph中的一个节点，相接壤的super-pixel之间有一条连接的边。这个能量函数中的一元项包括两种情况，一个是来自于scribble的，一个是来自CNN对该super-pixel预测的概率。整个最优化过程实际上是求graph cut能量函数和CNN参数联合最优值的过程：</p><p>$$<br>\sum_{i}\psi _i^{scr}\left(y_i|X,S\right)+\sum _i-logP\left(y_i| X,\theta\right)+\sum_{i,j}\psi _{ij}\left(y_i,y_j|X\right)<br>$$</p><p>&emsp;&emsp;<br>上式的最优化是通过交替求 $Y$ 和 $\theta$ 的最优值来实现的。文章中发现通过三次迭代就能得到比较好的结果。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_3.png" alt=""></p><h3 id="9-10-2-图像级别标记"><a href="#9-10-2-图像级别标记" class="headerlink" title="9.10.2 图像级别标记"></a>9.10.2 图像级别标记</h3><p>&emsp;&emsp;<br>论文地址：<a href="https://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Pathak_Constrained_Convolutional_Neural_ICCV_2015_paper.pdf" target="_blank" rel="noopener">Constrained Convolutional Neural Networks for Weakly Supervised Segmentation （ICCV 2015）</a><br>&emsp;&emsp;<br>UC Berkeley的Deepak Pathak使用了一个具有图像级别标记的训练数据来做弱监督学习。训练数据中只给出图像中包含某种物体，但是没有其位置信息和所包含的像素信息。该文章的方法将image tags转化为对CNN输出的label分布的限制条件，因此称为 Constrained convolutional neural network (CCNN).</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_4.png" alt=""><br>&emsp;&emsp;</p><p>该方法把训练过程看作是有线性限制条件的最优化过程：</p><p>$$<br>\underset{\theta ,P}{minimize}\qquad D(P(X)||Q(X|\theta ))\<br>subject\to\qquad A\overrightarrow{P} \geqslant \overrightarrow{b},\sum_{X}^{ }P(X)=1<br>$$<br>&emsp;&emsp;</p><p>其中的线性限制条件来自于训练数据上的标记，例如一幅图像中前景类别像素个数期望值的上界或者下界（物体大小）、某个类别的像素个数在某图像中为0，或者至少为1等。该目标函数可以转化为为一个loss function，然后通过SGD进行训练。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_5.png" alt=""><br>&emsp;&emsp;<br>实验中发现单纯使用Image tags作为限制条件得到的分割结果还比较差，在PASCAL VOC 2012 test数据集上得到的mIoU为35.6%，加上物体大小的限制条件后能达到45.1%，如果再使用bounding box做限制，可以达到54%。FCN-8s可以达到62.2%，可见弱监督学习要取得好的结果还是比较难。     </p><h3 id="9-10-3-DeepLab-bounding-box-image-level-labels"><a href="#9-10-3-DeepLab-bounding-box-image-level-labels" class="headerlink" title="9.10.3 DeepLab+bounding box+image-level labels**"></a>9.10.3 DeepLab+bounding box+image-level labels**</h3><p>&emsp;&emsp;<br>论文地址：<a href="https://arxiv.org/pdf/1502.02734.pdf" target="_blank" rel="noopener">Weakly-and Semi-Supervised Learning of a DCNN for Semantic Image Segmentation</a><br>&emsp;&emsp;<br>Google的George Papandreou 和UCLA的Liang-Chieh Chen等在DeepLab的基础上进一步研究了使用bounding box和image-level labels作为标记的训练数据。使用了期望值最大化算法（EM）来估计未标记的像素的类别和CNN的参数。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_6.png" alt=""><br>&emsp;&emsp;<br>对于image-level标记的数据，我们可以观测到图像的像素值和图像级别的标记 ,但是不知道每个像素的标号,因此把$y$当做隐变量。使用如下的概率图模式：<br>$$<br>P\left ( x,y,z;\theta \right ) = P\left ( x \right )\left (\prod_{m=1}^{M} P\left ( y_m|x;\theta \right )\right )P\left ( z|y \right )<br>$$<br>&emsp;&emsp;<br>这篇论文是通过EM算法来学习模型的参数$\theta$，具体推导过程可参考原论文。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_7.png" alt=""><br>&emsp;&emsp;<br>对于给出bounding box标记的训练图像，该方法先使用CRF对该训练图像做自动分割，然后在分割的基础上做全监督学习。通过实验发现，单纯使用图像级别的标记得到的分割效果较差，但是使用bounding box的训练数据可以得到较好的结果，在VOC2012 test数据集上得到mIoU 62.2%。另外如果使用少量的全标记图像和大量的弱标记图像进行结合，可以得到与全监督学习(70.3%)接近的分割结果(69.0%)。     </p><h3 id="9-10-4-统一的框架"><a href="#9-10-4-统一的框架" class="headerlink" title="9.10.4 统一的框架"></a>9.10.4 统一的框架</h3><p>&emsp;&emsp;<br>论文地址：<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Xu_Learning_to_Segment_2015_CVPR_paper.pdf" target="_blank" rel="noopener">Learning to Segment Under Various Forms of Weak Supervision (CVPR 2015)</a> </p><p>&emsp;&emsp;<br>Wisconsin-Madison大学的Jia Xu提出了一个统一的框架来处理各种不同类型的弱标记：图像级别的标记、bounding box和部分像素标记如scribbles。该方法把所有的训练图像分成共计$n$个super-pixel，对每个super-pixel提取一个$d$维特征向量。因为不知道每个super-pixel所属的类别，相当于无监督学习，因此该方法对所有的super-pixel做聚类，使用的是最大间隔聚类方法(max-margin clustering, MMC),该过程的最优化目标函数是：</p><p>$$<br>\underset{W,H}{min} \qquad  \frac{1}{2}tr\left ( W^TW \right ) + \lambda\sum_{p=1}^{n}\sum_{c=1}^{C}\xi \left ( w_c;x_p;h_p^c \right)<br>$$</p><p>&emsp;&emsp;<br>在这个目标函数的基础上，根据不同的弱标记方式，可以给出不同的限制条件，因此该方法就是在相应的限制条件下求最大间隔聚类。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/figure_9.9_8.png" alt="">  </p><p>&emsp;&emsp;<br>该方法在Siftflow数据集上得到了比较好的结果，比state-of-the-art的结果提高了10%以上。</p><p>&emsp;&emsp;<br>小结：在弱标记的数据集上训练图像分割算法可以减少对大量全标记数据的依赖，在大多数应用中会更加贴合实际情况。弱标记可以是图像级别的标记、边框和部分像素的标记等。训练的方法一般看做是限制条件下的最优化方法。另外EM算法可以用于CNN参数和像素类别的联合求优。</p><h2 id="9-11-DenseNet（贡献者：黄钦建－华南理工大学）"><a href="#9-11-DenseNet（贡献者：黄钦建－华南理工大学）" class="headerlink" title="9.11 DenseNet（贡献者：黄钦建－华南理工大学）"></a>9.11 DenseNet（贡献者：黄钦建－华南理工大学）</h2><p>&emsp;&emsp;<br>这篇论文是CVPR2017年的最佳论文。</p><p>&emsp;&emsp;<br>卷积神经网络结构的设计主要朝着两个方向发展，一个是更宽的网络（代表：GoogleNet、VGG），一个是更深的网络（代表：ResNet）。但是随着层数的加深会出现一个问题——梯度消失，这将会导致网络停止训练。到目前为止解决这个问题的思路基本都是在前后层之间加一个identity connections(short path)。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/9-10-3.png" alt=""></p><p>&emsp;&emsp;<br>由上图中可知Resnet是做值的相加（也就是add操作），通道数是不变的。而DenseNet是做通道的合并（也就是Concatenation操作），就像Inception那样。从这两个公式就可以看出这两个网络的本质不同。此外DensetNet的前面一层输出也是后面所有层的输入，这也不同于ResNet残差网络。</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/9-10-1.png" alt=""></p><p>&emsp;&emsp;<br>DenseNet的Block结构如上图所示。</p><p>&emsp;&emsp;<br>1*1卷积核的目的：减少输入的特征图数量，这样既能降维减少计算量，又能融合各个通道的特征。我们将使用BottleNeck Layers的DenseNet表示为DenseNet-B。(在论文的实验里，将1×1×n小卷积里的n设置为4k，k为每个H产生的特征图数量)</p><p><img src="/2016/12/20/第九章_图像分割/img/ch9/9-10-2.png" alt=""></p><p>&emsp;&emsp;<br>上图是DenseNet网络的整体网络结构示意图。其中1*1卷积核的目的是进一步压缩参数，并且在Transition Layer层有个参数Reduction（范围是0到1），表示将这些输出缩小到原来的多少倍，默认是0.5，这样传给下一个Dense Block的时候channel数量就会减少一半。当Reduction的值小于1的时候，我们就把带有这种层的网络称为DenseNet-C。</p><p>&emsp;&emsp;<br>DenseNet网络的优点包括：</p><ul><li>减轻了梯度消失</li><li>加强了feature的传递</li><li>更有效地利用了feature </li><li>一定程度上较少了参数数量</li><li>一定程度上减轻了过拟合</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之优化算法</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0_%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>https://leesen998.github.io/2016/12/20/第十三章_优化算法/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:47:53.821Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="13-1-CPU-和-GPU-的区别"><a href="#13-1-CPU-和-GPU-的区别" class="headerlink" title="13.1 CPU 和 GPU 的区别?"></a>13.1 CPU 和 GPU 的区别?</h2><p>&emsp;&emsp;<br><strong>概念：</strong><br>&emsp;&emsp;<br>CPU 全称是 central processing unit，CPU 是一块超大规模的集成电路，是一台计算机的运 算和控制核心，它的主要功能是解释计算机指令和处理计算机软件中的数据。  </p><p>&emsp;&emsp;<br>GPU 全称是 graphics processing unit，GPU 是将计算机系统，所需要的显示信息进行转换 的驱动，并向显示器提供扫描信号，控制显示器的正确显示，是连接显示器和个人电脑主板的 重要元件，是人机对话的重要设备之一。</p><p>&emsp;&emsp;<br><strong>缓存：</strong><br>&emsp;&emsp;<br>CPU 有大量的缓存结构，目前主流的 CPU 芯片上都有四级缓存，这些缓存结构消耗了大 量的晶体管，在运行的时候需要大量的电力。反观 GPU 的缓存就很简单，目前主流的 GPU 芯 片最多有两层缓存。CPU 消耗在晶体管上的空间和能耗，GPU 都可以用来做成 ALU 单元，也 因此 GPU 比 CPU 的效率要高一些。</p><p>&emsp;&emsp;<br><strong>响应方式：</strong><br>&emsp;&emsp;<br>对 CPU 来说，要求的是实时响应，对单任务的速度要求很高，所以就要用很多层缓存的 办法来保证单任务的速度。对 GPU 来说大家不关心第一个像素什么时候计算完成，而是都关 心最后一个像素什么时候计算出来，所以 GPU 就把所有的任务都排好，然后再批处理，这样 对缓存的要求就很低了。举个不恰当的例子，在点击 10 次鼠标的时候，CPU 要每一次点击都 要及时响应，而 GPU 会等第 10 次点击后，再一次性批处理响应。</p><p>&emsp;&emsp;<br><strong>浮点运算：</strong><br>&emsp;&emsp;<br>CPU 除了负责浮点整形运算外，还有很多其他的指令集的负载，比如像多媒体解码，硬 件解码等，所以 CPU 是个多才多艺的东西，而 GPU 基本上就是只做浮点运算的，也正是因为 只做浮点运算，所以设计结构简单，也就可以做的更快。另外显卡的 GPU 和单纯为了跑浮点 高性能运算的 GPU 还是不太一样，显卡的 GPU 还要考虑配合图形输出显示等方面，而有些专 用 GPU 设备，就是一个 PCI 卡上面有一个性能很强的浮点运算 GPU，没有显示输出的，这样 的 GPU 就是为了加快某些程序的浮点计算能力。CPU 注重的是单线程的性能，也就是延迟， 对于 CPU 来说，要保证指令流不中断，所以 CPU 需要消耗更多的晶体管和能耗用在控制部分， 于是CPU分配在浮点计算的功耗就会变少。GPU注重的是吞吐量，单指令能驱动更多的计算， 所以相比较而言 GPU 消耗在控制部分的能耗就比较少，因此也就可以把电省下来的资源给浮 点计算使用。</p><p>&emsp;&emsp;<br><strong>应用方向：</strong><br>&emsp;&emsp;<br>像操作系统这一类应用，需要快速响应实时信息，需要针对延迟优化，所以晶体管数量和能耗都需要用在分支预测，乱序执行上，低延迟缓存等控制部分，而这都是 CPU 的所擅长的。 对于像矩阵一类的运算，具有极高的可预测性和大量相似运算的，这种高延迟，高吞吐的架构 运算，就非常适合 GPU。</p><p>&emsp;&emsp;<br><strong>浅显解释：</strong><br>&emsp;&emsp;<br>一块 CPU 相当于一个数学教授，一块 GPU 相当于 100 个小学生。<br>&emsp;&emsp;<br>第一回合，四则运算，一百个题。教授拿到卷子一道道计算。100 个小学生各拿一道题。 教授刚开始计算到第二题的时候，小学生就集体交卷了。<br>&emsp;&emsp;<br>第二回合，高等函数，一百个题。当教授搞定后。一百个小学生可能还不知道该做些什么。<br>&emsp;&emsp;<br>这两个回合就是 CPU 和 GPU 的区别了。</p><h2 id="13-2-如何解决训练样本少的问题"><a href="#13-2-如何解决训练样本少的问题" class="headerlink" title="13.2 如何解决训练样本少的问题"></a>13.2 如何解决训练样本少的问题</h2><p>&emsp;&emsp;<br>要训练一个好的 CNN 模型，通常需要很多训练数据，尤其是模型结构比较复杂的时候， 比如 ImageNet 数据集上训练的模型。虽然深度学习在 ImageNet 上取得了巨大成功，但是一个 现实的问题是，很多应用的训练集是较小的，如何在这种情况下应用深度学习呢?有三种方法 可供读者参考。  </p><p>&emsp;&emsp;<br>（1）可以将 ImageNet 上训练得到的模型做为起点，利用目标训练集和反向传播对其进 行继续训练，将模型适应到特定的应用。ImageNet 起到预训练的作用。<br>&emsp;&emsp;<br>（2）如果目标训练集不够大，也可以将低层的网络参数固定，沿用 ImageNet 上的训练集 结果，只对上层进行更新。这是因为底层的网络参数是最难更新的，而从 ImageNet 学习得到 的底层滤波器往往描述了各种不同的局部边缘和纹理信息，而这些滤波器对一般的图像有较好 的普适性。<br>&emsp;&emsp;<br>（3）直接采用 ImageNet 上训练得到的模型，把最高的隐含层的输出作为特征表达，代 替常用的手工设计的特征。</p><h2 id="13-3-什么样的样本集不适合用深度学习"><a href="#13-3-什么样的样本集不适合用深度学习" class="headerlink" title="13.3 什么样的样本集不适合用深度学习?"></a>13.3 什么样的样本集不适合用深度学习?</h2><p>&emsp;&emsp;<br>（1）数据集太小，数据样本不足时，深度学习相对其它机器学习算法，没有明显优势。<br>&emsp;&emsp;<br>（2）数据集没有局部相关特性，目前深度学习表现比较好的领域主要是图像/语音 /自然语言处理等领域，这些领域的一个共性是局部相关性。图像中像素组成物体，语音 信号中音位组合成单词，文本数据中单词组合成句子，这些特征元素的组合一旦被打乱， 表示的含义同时也被改变。对于没有这样的局部相关性的数据集，不适于使用深度学习算 法进行处理。举个例子:预测一个人的健康状况，相关的参数会有年龄、职业、收入、家 庭状况等各种元素，将这些元素打乱，并不会影响相关的结果。</p><h2 id="13-4-有没有可能找到比已知算法更好的算法"><a href="#13-4-有没有可能找到比已知算法更好的算法" class="headerlink" title="13.4 有没有可能找到比已知算法更好的算法?"></a>13.4 有没有可能找到比已知算法更好的算法?</h2><p>&emsp;&emsp;<br>没有免费的午餐定理:<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_4_1.png" alt="没有免费的午餐定理"></p><center>图 13.4 没有免费的午餐（黑点：训练样本；白点：测试样本）</center><p>&emsp;&emsp;<br>对于训练样本（黑点），不同的算法 A/B 在不同的测试样本（白点）中有不同的表现，这表示:对于一个学习算法A，若它在某些问题上比学习算法B更好，则必然存在一些问题， 在那里B比A好。<br>&emsp;&emsp;<br>也就是说:对于所有问题，无论学习算法 A 多聪明，学习算法 B 多笨拙，它们的期望性 能相同。<br>&emsp;&emsp;<br>但是:没有免费午餐定力假设所有问题出现几率相同，实际应用中，不同的场景，会有不 同的问题分布，所以，在优化算法时，针对具体问题进行分析，是算法优化的核心所在。</p><h2 id="13-5-何为共线性-跟过拟合有啥关联"><a href="#13-5-何为共线性-跟过拟合有啥关联" class="headerlink" title="13.5 何为共线性, 跟过拟合有啥关联?"></a>13.5 何为共线性, 跟过拟合有啥关联?</h2><p>&emsp;&emsp;<br>共线性:多变量线性回归中，变量之间由于存在高度相关关系而使回归估计不准确。<br>&emsp;&emsp;<br>产生问题:共线性会造成冗余，导致过拟合。<br>&emsp;&emsp;<br>解决方法:排除变量的相关性、加入权重正则。</p><h2 id="13-6-广义线性模型是怎被应用在深度学习中"><a href="#13-6-广义线性模型是怎被应用在深度学习中" class="headerlink" title="13.6 广义线性模型是怎被应用在深度学习中?"></a>13.6 广义线性模型是怎被应用在深度学习中?</h2><p>&emsp;&emsp;<br>深度学习从统计学角度，可以看做递归的广义线性模型。<br>&emsp;&emsp;<br>广义线性模型相对于经典的线性模型$(y=wx+b)$，核心在于引入了连接函数 $g(\cdot)$，形式变为: $y=g-1(wx+b)$。<br>&emsp;&emsp;<br>深度学习时递归的广义线性模型，神经元的激活函数，即为广义线性模型的链接函数。逻 辑回归(广义线性模型的一种)的 Logistic 函数即为神经元激活函数中的 Sigmoid 函数，很多 类似的方法在统计学和神经网络中的名称不一样，容易引起困惑。</p><h2 id="13-7-造成梯度消失的原因"><a href="#13-7-造成梯度消失的原因" class="headerlink" title="13.7 造成梯度消失的原因?"></a>13.7 造成梯度消失的原因?</h2><p>&emsp;&emsp;<br>神经网络的训练中，通过改变神经元的权重，使网络的输出值尽可能逼近标签以降低误差 值，训练普遍使用 BP 算法，核心思想是，计算出输出与标签间的损失函数值，然后计算其相 对于每个神经元的梯度，进行权值的迭代。<br>&emsp;&emsp;<br>梯度消失会造成权值更新缓慢，模型训练难度增加。造成梯度消失的一个原因是，许多激 活函数将输出值挤压在很小的区间内，在激活函数两端较大范围的定义域内梯度为 $0$。造成学 习停止。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_7_1.png" alt="sigmoid 函数与其导数"></p><center>图 13.7 sigmoid 函数的梯度消失</center><h2 id="13-8-权值初始化方法有哪些？"><a href="#13-8-权值初始化方法有哪些？" class="headerlink" title="13.8 权值初始化方法有哪些？"></a>13.8 权值初始化方法有哪些？</h2><p>&emsp;&emsp;<br>权值初始化的方法主要有:常量初始化(constant)、高斯分布初始化(gaussian)、 positive_unitball 初始化、均匀分布初始化(uniform)、xavier 初始化、msra 初始化、双线性初 始化(bilinear)。  </p><p>&emsp;&emsp;<br><strong>1. 常量初始化(constant)</strong><br>&emsp;&emsp;<br>把权值或者偏置初始化为一个常数，具体是什么常数，可以自己定义。  </p><p>&emsp;&emsp;<br><strong>2. 高斯分布初始化(gaussian)</strong><br>&emsp;&emsp;<br>需要给定高斯函数的均值与标准差。  </p><p>&emsp;&emsp;<br><strong>3. positive_unitball 初始化</strong><br>&emsp;&emsp;<br>让每一个神经元的输入的权值和为 $1$，例如:一个神经元有 $100$ 个输入，让这 $100$ 个输入<br>的权值和为 $1$. 首先给这 $100$ 个权值赋值为在$(0,1)$之间的均匀分布，然后，每一个权值再 除以它们的和就可以啦。这么做，可以有助于防止权值初始化过大，从而防止激活函数(sigmoid 函数)进入饱和区。所以，它应该比较适合 simgmoid 形的激活函数。  </p><p>&emsp;&emsp;<br><strong>4. 均匀分布初始化(uniform)</strong><br>&emsp;&emsp;<br>将权值与偏置进行均匀分布的初始化，用 min 与 max 控制它们的的上下限，默认为$(0,1)$。  </p><p>&emsp;&emsp;<br><strong>5. xavier 初始化</strong><br>&emsp;&emsp;<br>对于权值的分布:均值为 $0$，方差为($1$ / 输入的个数)的均匀分布。如果我们更注重前<br>向传播的话，我们可以选择 fan_in，即正向传播的输入个数;如果更注重后向传播的话，我们选择 fan_out, 因为在反向传播的时候，fan_out 就是神经元的输入个数;如果两者都考虑的话， 就选 average = (fan_in + fan_out) /$2$。对于 ReLU 激活函数来说，XavierFiller 初始化也是很适合。关于该初始化方法，具体可以参考文章1、文章2，该方法假定激活函数是线性的。  </p><p>&emsp;&emsp;<br><strong>6. msra 初始化</strong><br>&emsp;&emsp;<br>对于权值的分布:基于均值为 $0$，方差为( $2$/输入的个数)的高斯分布;它特别适合 ReLU 激活函数，该方法主要是基于 Relu 函数提出的，推导过程类似于 xavier。  </p><p>&emsp;&emsp;<br><strong>7. 双线性初始化（bilinear）</strong><br>&emsp;&emsp;<br>常用在反卷积神经网络里的权值初始化。</p><h2 id="13-9-启发式优化算法中，如何避免陷入局部最优解"><a href="#13-9-启发式优化算法中，如何避免陷入局部最优解" class="headerlink" title="13.9 启发式优化算法中，如何避免陷入局部最优解?"></a>13.9 启发式优化算法中，如何避免陷入局部最优解?</h2><p>&emsp;&emsp;<br>启发式算法中，局部最优值的陷入无法避免。启发式，本质上是一种贪心策略，这也在客 观上决定了不符合贪心规则的更好(或者最优)解会错过。<br>&emsp;&emsp;<br>简单来说，避免陷入局部最优就是两个字:随机。<br>&emsp;&emsp;<br>具体实现手段上，可以根据所采用的启发式框架来灵活地加入随机性。比如遗传里面，可 以在交叉变异时，可以在控制人口策略中，也可以在选择父本母本样本时;禁忌里面，可以在 禁忌表的长度上体现，也可以在解禁策略中使用，等等。这些都要结合具体问题特定的算例集， 需要反复尝试摸索才行。参数的敏感性是一个问题，建议不要超过 $3$ 个参数，参数越不敏感越好。不同算例集用不同种子运行多次($100$ 次左右才有统计意义)，统计平均性能即可。需注 意全局的随机重启通常来说不是一个好办法，因为等于主动放弃之前搜索结果，万不得已不要 用，或者就是不用。</p><p>&emsp;&emsp;<br><strong>三个原则应该把握:越随机越好;越不随机越好;二者平衡最好。</strong></p><p>&emsp;&emsp;<br><strong>1. 越随机越好</strong><br>&emsp;&emsp;<br>没有随机性，一定会陷入局部最优。为了获得更大的找到最优解的期望，算法中一定要有<br>足够的随机性。具体体现为鲁棒性较好，搜索时多样性较好。算法的每一步选择都可以考虑加入随机性，但要控制好概率。比如，某个贪心策略下，是以概率 $1 $做某一动作，可以考虑将其 改为以概率 $0.999$ 做之前的操作，以剩余概率做其他操作。具体参数设置需调试。</p><p>&emsp;&emsp;<br><strong>2. 越不随机越好</strong><br>&emsp;&emsp;<br>随机性往往是对问题内在规律的一种妥协。即没有找到其内在规律，又不知道如何是好， 为了获得更好的多样性，逼不得已加入随机。因此，对给定问题的深入研究才是根本:分辨出 哪些时候，某个动作就是客观上能严格保证最优的——这点至关重要，直接决定了算法性能。 最好的算法一定是和问题结构紧密相连的，范范地套用某个启发式的框架不会有出色的性能。 当然，如果不是追求性能至上，而是考虑到开发效率实现成本这些额外因素，则另当别论。</p><p>&emsp;&emsp;<br><strong>3. 二者平衡最好</strong><br>&emsp;&emsp;<br>通常情况下，做好第一点，可以略微改善算法性能;做好第二点，有希望给算法带来质的提高。而二者调和后的平衡则会带来质的飞跃。</p><p>&emsp;&emsp;<br>贪心是“自强不息”的精进，不放过任何改进算法的机会;多样性的随机是“厚德载物”的一分包 容，给那些目前看似不那么好的解一些机会。调和好二者，不偏颇任何一方才能使算法有出色 的性能。要把握这种平衡，非一朝一夕之功，只能在反复试验反思中去细细品味。<br>&emsp;&emsp;<br>要结合具体问题而言，范范空谈无太大用。</p><h2 id="13-10-凸优化中如何改进-GD-方法以防止陷入局部最优解"><a href="#13-10-凸优化中如何改进-GD-方法以防止陷入局部最优解" class="headerlink" title="13.10 凸优化中如何改进 GD 方法以防止陷入局部最优解?"></a>13.10 凸优化中如何改进 GD 方法以防止陷入局部最优解?</h2><p>&emsp;&emsp;<br>在对函数进行凸优化时，如果使用导数的方法(如:梯度下降法/GD，牛顿法等)来寻找最优解，有可能陷入到局部最优解而非全局最优解。<br>&emsp;&emsp;<br>为了防止得到局部最优，可以对梯度下降法进行一些改进，防止陷入局部最优。<br>&emsp;&emsp;<br>但是请注意，这些方法只能保证以最大的可能找到全局最优，无法保证 $100\%$得到全局最优。</p><p>&emsp;&emsp;<br><strong>（1）incremental GD/stochastic GD</strong><br>&emsp;&emsp;<br>在 GD 中，是需要遍历所有的点之后才计算 $w$ 的变化的;但是，在 stochastic GD 中，每输入一个点，就根据该点计算下一步的 $w$，这样，不仅可以从 batch training 变成 online training 方法，而且每次是按照单点的最优方向而不是整体的最优方向前进，从而相当于在朝目标前进的路上多拐了好多弯，有可能逃出局部最优。</p><p>&emsp;&emsp;<br><strong>（2）momentum 方法</strong><br>&emsp;&emsp;<br>momentum 相当与记忆住上一次的更新。在每次的更新中，都要加一个 $k$ 倍的上一次更新 量。这样，也不再是按照标准路线前进，每次的步骤都容易受到上一次的影响，从而可能会逃 出局部最优。另外，也会加大步长，从而加快收敛。</p><h2 id="13-11-常见的损失函数"><a href="#13-11-常见的损失函数" class="headerlink" title="13.11 常见的损失函数?"></a>13.11 常见的损失函数?</h2><p>&emsp;&emsp;<br>机器学习通过对算法中的目标函数进行不断求解优化，得到最终想要的结果。分类和回归 问题中，通常使用损失函数或代价函数作为目标函数。<br>&emsp;&emsp;<br>损失函数用来评价预测值和真实值不一样的程度。通常损失函数越好，模型的性能也越好。<br>&emsp;&emsp;<br>损失函数可分为经验风险损失函数和结构风险损失函数。经验风险损失函数指预测结果和 实际结果的差别，结构风险损失函数是在经验风险损失函数上加上正则项。  </p><p>&emsp;&emsp;<br>下面介绍常用的损失函数:</p><p>&emsp;&emsp;<br><strong>1）$0-1$ 损失函数</strong><br>&emsp;&emsp;<br>如果预测值和目标值相等，值为 $0$，如果不相等，值为 $1$：<br>$$<br>L(Y,f(x))=<br>\left{<br>\begin{array}{}<br>1\;\;\;,\;\;Y\ne f(x), \<br>0\;\;\;,\;\;Y=f(x).<br>\end{array}<br>\right.<br>$$</p><p>&emsp;&emsp;<br>一般的在实际使用中，相等的条件过于严格，可适当放宽条件：<br>$$<br>L(Y,f(x))=<br>\left{<br>\begin{array}{}<br>1\;\;\;,\;\;|Y - f(x)| \ge T, \<br>0\;\;\;,\;\;|Y-f(x)| &lt; T.<br>\end{array}<br>\right.<br>$$</p><p>&emsp;&emsp;<br><strong>2）绝对值损失函数</strong><br>&emsp;&emsp;<br>和 $0-1$ 损失函数相似，绝对值损失函数表示为：<br>$$<br>L(Y,f(x))=|Y-f(x)|.<br>$$</p><p>&emsp;&emsp;<br><strong>3）平方损失函数</strong><br>$$<br>L(Y|f(x))=\sum_{N}(Y-f(x))^2.<br>$$</p><p>&emsp;&emsp;<br>这点可从最小二乘法和欧几里得距离角度理解。最小二乘法的原理是，最优拟合曲线应该 使所有点到回归直线的距离和最小。</p><p>&emsp;&emsp;<br><strong>4）$log$ 对数损失函数</strong><br>$$<br>L(Y,P(Y|X))=-logP(Y|X).<br>$$</p><p>&emsp;&emsp;<br>常见的逻辑回归使用的就是对数损失函数，有很多人认为逻辑回归的损失函数式平方损失， 其实不然。逻辑回归它假设样本服从伯努利分布，进而求得满足该分布的似然函数，接着取对 数求极值等。逻辑回归推导出的经验风险函数是最小化负的似然函数，从损失函数的角度看， 就是 $log$ 损失函数。</p><p>&emsp;&emsp;<br><strong>5）指数损失函数</strong><br>&emsp;&emsp;<br>指数损失函数的标准形式为：<br>$$<br>L(Y|f(x))=exp[-yf(x)].<br>$$</p><p>&emsp;&emsp;<br>例如 AdaBoost 就是以指数损失函数为损失函数。</p><p>&emsp;&emsp;<br><strong>6）Hinge 损失函数</strong><br>&emsp;&emsp;<br>Hinge 损失函数的标准形式如下：<br>$$<br>L(y)=max(0, 1-ty).<br>$$</p><p>&emsp;&emsp;<br>其中 $y$ 是预测值，范围为$(-1,1)$, $t$ 为目标值，其为$-1$ 或 $1$。<br>&emsp;&emsp;<br>在线性支持向量机中，最优化问题可等价于：<br>$$<br>\underset{w,b}{min}\sum_{i=1}^{N}(1-y_i(wx_i+b))+\lambda \lVert w^2 \rVert<br>$$</p><p>&emsp;&emsp;<br>$$<br>\frac{1}{m}\sum_{i=1}^{N}l(wx_i+by_i))+\lVert w^2 \rVert<br>$$</p><p>&emsp;&emsp;<br>其中$l(wx_i+by_i))$是Hinge损失函数，$\lVert w^2 \rVert$可看做为正则化项。</p><h2 id="13-14-如何进行特征选择-feature-selection"><a href="#13-14-如何进行特征选择-feature-selection" class="headerlink" title="13.14 如何进行特征选择(feature selection)?"></a>13.14 如何进行特征选择(feature selection)?</h2><h3 id="13-14-1-如何考虑特征选择"><a href="#13-14-1-如何考虑特征选择" class="headerlink" title="13.14.1 如何考虑特征选择"></a>13.14.1 如何考虑特征选择</h3><p>&emsp;&emsp;<br>当数据预处理完成后，我们需要选择有意义的特征输入机器学习的算法和模型进行训练。通常来说，从两个方面考虑来选择特征:</p><p>&emsp;&emsp;<br>（1）特征是否发散:如果一个特征不发散，例如方差接近于 $0$，也就是说样本在这个特 征上基本上没有差异，这个特征对于样本的区分并没有什么用。<br>&emsp;&emsp;<br>（2）特征与目标的相关性:这点比较显见，与目标相关性高的特征，应当优选选择。除移除低方差法外，本文介绍的其他方法均从相关性考虑。</p><h3 id="13-14-2-特征选择方法分类"><a href="#13-14-2-特征选择方法分类" class="headerlink" title="13.14.2 特征选择方法分类"></a>13.14.2 特征选择方法分类</h3><p>&emsp;&emsp;<br>根据特征选择的形式又可以将特征选择方法分为 $3$ 种:</p><p>&emsp;&emsp;<br>（1）Filter:过滤法，按照发散性或者相关性对各个特征进行评分，设定阈值或者待选择<br>阈值的个数，选择特征。<br>&emsp;&emsp;<br>（2）Wrapper:包装法，根据目标函数(通常是预测效果评分)，每次选择若干特征，或<br>者排除若干特征。<br>&emsp;&emsp;<br>（3）Embedded:嵌入法，先使用某些机器学习的算法和模型进行训练，得到各个特征的权值系数，根据系数从大到小选择特征。类似于 Filter 方法，但是是通过训练来确定特征的优劣。</p><h3 id="13-14-3-特征选择目的"><a href="#13-14-3-特征选择目的" class="headerlink" title="13.14.3 特征选择目的"></a>13.14.3 特征选择目的</h3><p>&emsp;&emsp;<br>（1）减少特征数量、降维，使模型泛化能力更强，减少过拟合;<br>&emsp;&emsp;<br>（2）增强对特征和特征值之间的理解。拿到数据集，一个特征选择方法，往往很难同时完成这两个目的。通常情况下，选择一种自己最熟悉或者最方便的特征选择方法(往往目的是降维，而忽略了对特征和数据理解的目的)。 本文将结合 Scikit-learn 提供的例子介绍几种常用的特征选择方法，它们各自的优缺点和问题。</p><h2 id="13-15-梯度消失-梯度爆炸原因，以及解决方法"><a href="#13-15-梯度消失-梯度爆炸原因，以及解决方法" class="headerlink" title="13.15 梯度消失/梯度爆炸原因，以及解决方法"></a>13.15 梯度消失/梯度爆炸原因，以及解决方法</h2><h3 id="13-15-1-为什么要使用梯度更新规则"><a href="#13-15-1-为什么要使用梯度更新规则" class="headerlink" title="13.15.1 为什么要使用梯度更新规则?"></a>13.15.1 为什么要使用梯度更新规则?</h3><p>&emsp;&emsp;<br>在介绍梯度消失以及爆炸之前，先简单说一说梯度消失的根源—–深度神经网络和反向传 播。目前深度学习方法中，深度神经网络的发展造就了我们可以构建更深层的网络完成更复杂 的任务，深层网络比如深度卷积网络，LSTM 等等，而且最终结果表明，在处理复杂任务上， 深度网络比浅层的网络具有更好的效果。但是，目前优化神经网络的方法都是基于反向传播的 思想，即根据损失函数计算的误差通过梯度反向传播的方式，指导深度网络权值的更新优化。 这样做是有一定原因的，首先，深层网络由许多非线性层堆叠而来，每一层非线性层都可以视 为是一个非线性函数 $f(x)$（$f(x)$非线性来自于非线性激活函数），因此整个深度网络可以视为是一个复合的非线性多元函数：<br>$$F(x)=f_n(\cdots f_3(f_2(f_1(x)<em>\theta_1+b)</em>\theta_2+b)\cdots)$$</p><p>&emsp;&emsp;<br>我们最终的目的是希望这个多元函数可以很好的完成输入到输出之间的映射，假设不同的输入，输出的最优解是$g(x)$ ，那么，优化深度网络就是为了寻找到合适的权值，满足 $Loss=L(g(x),F(x))$取得极小值点，比如最简单的损失函数：<br>$$<br>Loss = \lVert g(x)-f(x) \rVert^2_2.<br>$$</p><p>&emsp;&emsp;<br>假设损失函数的数据空间是下图这样的，我们最优的权值就是为了寻找下图中的最小值点， 对于这种数学寻找最小值问题，采用梯度下降的方法再适合不过了。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_15_1.png" alt=""></p><center>图 13.15.1 </center><h3 id="13-15-2-梯度消失、爆炸原因"><a href="#13-15-2-梯度消失、爆炸原因" class="headerlink" title="13.15.2 梯度消失、爆炸原因?"></a>13.15.2 梯度消失、爆炸原因?</h3><p>&emsp;&emsp;<br>梯度消失与梯度爆炸其实是一种情况，看接下来的文章就知道了。两种情况下梯度消失经 常出现，一是在深层网络中，二是采用了不合适的损失函数，比如 sigmoid。梯度爆炸一般出 现在深层网络和权值初始化值太大的情况下，下面分别从这两个角度分析梯度消失和爆炸的原因。</p><p>&emsp;&emsp;<br>（1）深层网络角度<br>&emsp;&emsp;<br>对激活函数进行求导，如果此部分大于 $1$，那么层数增多的时候，最终的求出的梯度更新 将以指数形式增加，即发生<strong>梯度爆炸</strong>，如果此部分小于 $1$，那么随着层数增多，求出的梯度更 新信息将会以指数形式衰减，即发生了<strong>梯度消失</strong>。<br>&emsp;&emsp;<br>从深层网络角度来讲，不同的层学习的速度差异很大，表现为网络中靠近输出的层学习的 情况很好，靠近输入的层学习的很慢，有时甚至训练了很久，前几层的权值和刚开始随机初始 化的值差不多。因此，梯度消失、爆炸，其根本原因在于反向传播训练法则，属于先天不足， 另外多说一句，Hinton 提出 capsule 的原因就是为了彻底抛弃反向传播，如果真能大范围普及， 那真是一个革命。  </p><p>&emsp;&emsp;<br>（2）激活函数角度<br>&emsp;&emsp;<br>计算权值更新信息的时候需要计算前层偏导信息，因此如果激活函数选择不合适，比如使用 sigmoid，梯度消失就会很明显了，原因看下图，左图是sigmoid的损失函数图，右边是其倒数的图像，如果使用 sigmoid 作为损失函数，其梯度是不可能超过 $0.25$ 的，这样经过链式求导之后，很容易发生梯度消失。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_15_2.png" alt=""></p><center>图 13.15.2 sigmod函数与其导数</center><h3 id="13-15-3-梯度消失、爆炸的解决方案"><a href="#13-15-3-梯度消失、爆炸的解决方案" class="headerlink" title="13.15.3 梯度消失、爆炸的解决方案"></a>13.15.3 梯度消失、爆炸的解决方案</h3><p>&emsp;&emsp;<br><strong>方案1-预训练加微调</strong><br>&emsp;&emsp;<br>此方法来自Hinton在2006年发表的一篇论文，Hinton为了解决梯度的问题，提出采取无监督逐层训练方法，其基本思想是每次训练一层隐节点，训练时将上一层隐节点的输出作为输入，而本层隐节点的输出作为下一层隐节点的输入，此过程就是逐层“预训练”（pre-training）；在预训练完成后，再对整个网络进行“微调”（fine-tunning）。Hinton在训练深度信念网络（Deep Belief Networks中，使用了这个方法，在各层预训练完成后，再利用BP算法对整个网络进行训练。此思想相当于是先寻找局部最优，然后整合起来寻找全局最优，此方法有一定的好处，但是目前应用的不是很多了。</p><p>&emsp;&emsp;<br><strong>方案2-梯度剪切、正则</strong><br>&emsp;&emsp;<br>梯度剪切这个方案主要是针对梯度爆炸提出的，其思想是设置一个梯度剪切阈值，然后更新梯度的时候，如果梯度超过这个阈值，那么就将其强制限制在这个范围之内。这可以防止梯度爆炸。<br>&emsp;&emsp;<br>另外一种解决梯度爆炸的手段是采用权重正则化（weithts regularization）比较常见的是l1l1正则，和l2l2正则，在各个深度框架中都有相应的API可以使用正则化。</p><p>&emsp;&emsp;<br><strong>方案3-relu、leakrelu、elu等激活函数</strong><br>&emsp;&emsp;<br><strong>Relu</strong><br>&emsp;&emsp;<br>思想也很简单，如果激活函数的导数为1，那么就不存在梯度消失爆炸的问题了，每层的网络都可以得到相同的更新速度，relu就这样应运而生。<br>&emsp;&emsp;<br>relu函数的导数在正数部分是恒等于1的，因此在深层网络中使用relu激活函数就不会导致梯度消失和爆炸的问题。<br>relu的主要贡献在于：<br>&emsp;&emsp;<br>（1）解决了梯度消失、爆炸的问题<br>&emsp;&emsp;<br>（2）计算方便，计算速度快<br>&emsp;&emsp;<br>（3）加速了网络的训练  </p><p>&emsp;&emsp;<br>同时也存在一些缺点：<br>&emsp;&emsp;<br>（1）由于负数部分恒为0，会导致一些神经元无法激活（可通过设置小学习率部分解决）；<br>&emsp;&emsp;<br>（2）输出不是以0为中心的。  </p><p>&emsp;&emsp;<br><strong>leakrelu</strong><br>&emsp;&emsp;<br>leakrelu就是为了解决relu的0区间带来的影响，其数学表达为：leakrelu$=max(k*x,0)$其中$k$是leak系数，一般选择$0.01$或者$0.02$，或者通过学习而来。</p><p>&emsp;&emsp;<br><strong>方案4-batchnorm</strong><br>&emsp;&emsp;<br>Batchnorm是深度学习发展以来提出的最重要的成果之一了，目前已经被广泛的应用到了各大网络中，具有加速网络收敛速度，提升训练稳定性的效果，Batchnorm本质上是解决反向传播过程中的梯度问题。Batchnorm全名是Batch Normalization，简称BN，即批规范化，通过规范化操作将输出信号$x$规范化到均值为$0$，方差为$1$保证网络的稳定性。  </p><p>&emsp;&emsp;<br><strong>方案5-残差结构</strong><br>&emsp;&emsp;<br>事实上，就是残差网络的出现导致了Imagenet比赛的终结，自从残差提出后，几乎所有的深度网络都离不开残差的身影，相比较之前的几层，几十层的深度网络，在残差网络面前都不值一提，残差可以很轻松的构建几百层，一千多层的网络而不用担心梯度消失过快的问题，原因就在于残差的捷径（shortcut）部分。</p><p>&emsp;&emsp;<br><strong>方案6-LSTM</strong><br>&emsp;&emsp;<br>LSTM全称是长短期记忆网络（long-short term memory networks），是不那么容易发生梯度消失的，主要原因在于LSTM内部复杂的“门”(gates)。</p><h2 id="13-16-深度学习为什么不用二阶优化"><a href="#13-16-深度学习为什么不用二阶优化" class="headerlink" title="13.16 深度学习为什么不用二阶优化"></a>13.16 深度学习为什么不用二阶优化</h2><ol><li>二阶优化方法可以用到深度学习网络中，比如DistBelief，《Large-scale L-BFGS using MapReduce》.采用了数据并行的方法解决了海量数据下L-BFGS算法的可用性问题。</li><li>二阶优化方法目前还不适用于深度学习训练中，主要存在问题是：<br>（1）最重要的问题是二阶方法的计算量大，训练较慢。<br>（2）求导不易，实现比SGD这类一阶方法复杂。<br>（3）另外其优点在深度学习中无法展现出来，主要是二阶方法能够更快地求得更高精度的解，这在浅层模型是有益的，但是在神经网络这类深层模型中对参数的精度要求不高，相反 相对而言不高的精度对模型还有益处，能够提高模型的泛化能力。<br>（4）稳定性。题主要明白的一点事，越简单的东西往往越robust，对于优化算法也是这样。梯度下降等一阶算法只要步长不选太大基本都不会出问题，但二阶方法遍地是坑，数值稳定性啊等等。</li></ol><h2 id="13-17-怎样优化你的深度学习系统？"><a href="#13-17-怎样优化你的深度学习系统？" class="headerlink" title="13.17 怎样优化你的深度学习系统？"></a>13.17 怎样优化你的深度学习系统？</h2><p>&emsp;&emsp;<br>你可能有很多想法去改善你的系统，比如，你可能想我们去收集更多的训练数据吧。或者你会说，可能你的训练集的多样性还不够，你应该收集更多不同姿势的猫咪图片，或者更多样化的反例集。或者你想再用梯度下降训练算法，训练久一点。或者你想尝试用一个完全不同的优化算法，比如Adam优化算法。或者尝试使用规模更大或者更小的神经网络。或者你想试试dropout或者正则化。或者你想修改网络的架构，比如修改激活函数，改变隐藏单元的数目之类的方法。</p><p>&emsp;&emsp;<br>当你尝试优化一个深度学习系统时，你通常可以有很多想法可以去试，问题在于，如果你做出了错误的选择，你完全有可能白费6个月的时间，往错误的方向前进，在6个月之后才意识到这方法根本不管用。比如，我见过一些团队花了6个月时间收集更多数据，却在6个月之后发现，这些数据几乎没有改善他们系统的性能。所以，假设你的项目没有6个月的时间可以浪费，如果有快速有效的方法能够判断哪些想法是靠谱的，或者甚至提出新的想法，判断哪些是值得一试的想法，哪些是可以放心舍弃的。</p><p>&emsp;&emsp;<br>我希望在这门课程中，可以教给你们一些策略，一些分析机器学习问题的方法，可以指引你们朝着最有希望的方向前进。这门课中，我会和你们分享我在搭建和部署大量深度学习产品时学到的经验和教训，我想这些内容是这门课程独有的。比如说，很多大学深度学习课程很少提到这些策略。事实上，机器学习策略在深度学习的时代也在变化，因为现在对于深度学习算法来说能够做到的事情，比上一代机器学习算法大不一样。我希望这些策略能帮助你们提高效率，让你们的深度学习系统更快投入实用。</p><h2 id="13-18-为什么要设置单一数字评估指标？"><a href="#13-18-为什么要设置单一数字评估指标？" class="headerlink" title="13.18 为什么要设置单一数字评估指标？"></a>13.18 为什么要设置单一数字评估指标？</h2><p>&emsp;&emsp;<br>无论你是调整超参数，或者是尝试不同的学习算法，或者在搭建机器学习系统时尝试不同手段，你会发现，如果你有一个单实数评估指标，你的进展会快得多，它可以快速告诉你，新尝试的手段比之前的手段好还是差。所以当团队开始进行机器学习项目时，我经常推荐他们为问题设置一个单实数评估指标。</p><p>&emsp;&emsp;<br>我发现很多机器学习团队就是这样，有一个定义明确的开发集用来测量查准率和查全率，再加上这样一个单一数值评估指标，有时我叫单实数评估指标，能让你快速判断分类器或者分类器更好。所以有这样一个开发集，加上单实数评估指标，你的迭代速度肯定会很快，它可以加速改进您的机器学习算法的迭代过程。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_18_1.png" alt=""></p><center>图 13.8.1 </center><h2 id="13-19-满足和优化指标（Satisficing-and-optimizing-metrics）"><a href="#13-19-满足和优化指标（Satisficing-and-optimizing-metrics）" class="headerlink" title="13.19 满足和优化指标（Satisficing and optimizing metrics）"></a>13.19 满足和优化指标（Satisficing and optimizing metrics）</h2><p>&emsp;&emsp;<br>要把你顾及到的所有事情组合成单实数评估指标有时并不容易，在那些情况里，我发现有时候设立满足和优化指标是很重要的，让我告诉你是什么意思吧。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_19_1.png" alt=""></p><center>图 13.9.1 </center><p>&emsp;&emsp;<br>假设你已经决定你很看重猫分类器的分类准确度，这可以是分数或者用其他衡量准确度的指标。但除了准确度之外，我们还需要考虑运行时间，就是需要多长时间来分类一张图。分类器需要$80$毫秒，需要$95$毫秒，C需要$1500$毫秒，就是说需要$1.5$秒来分类图像。  </p><p>&emsp;&emsp;<br>你可以这么做，将准确度和运行时间组合成一个整体评估指标。所以成本，比如说，总体成本是，这种组合方式可能太刻意，只用这样的公式来组合准确度和运行时间，两个数值的线性加权求和。   </p><p>&emsp;&emsp;<br>你还可以做其他事情，就是你可能选择一个分类器，能够最大限度提高准确度，但必须满足运行时间要求，就是对图像进行分类所需的时间必须小于等于$100$毫秒。所以在这种情况下，我们就说准确度是一个优化指标，因为你想要准确度最大化，你想做的尽可能准确，但是运行时间就是我们所说的满足指标，意思是它必须足够好，它只需要小于$100$毫秒，达到之后，你不在乎这指标有多好，或者至少你不会那么在乎。所以这是一个相当合理的权衡方式，或者说 将准确度和运行时间结合起来的方式。实际情况可能是，只要运行时间少于 100 毫秒，你的用 户就不会在乎运行时间是 100 毫秒还是 50 毫秒，甚至更快。  </p><p>&emsp;&emsp;<br>通过定义优化和满足指标，就可以给你提供一个明确的方式，去选择“最好的”分类器。在 这种情况下分类器 B 最好，因为在所有的运行时间都小于 100 毫秒的分类器中，它的准确度最好。  </p><p>&emsp;&emsp;<br>总结一下，如果你需要顾及多个指标，比如说，有一个优化指标，你想尽可能优化的，然 后还有一个或多个满足指标，需要满足的，需要达到一定的门槛。现在你就有一个全自动的方 法，在观察多个成本大小时，选出”最好的”那个。现在这些评估指标必须是在训练集或开发集 或测试集上计算或求出来的。所以你还需要做一件事，就是设立训练集、开发集，还有测试集。 在下一个视频里，我想和大家分享一些如何设置训练、开发和测试集的指导方针，我们下一个 视频继续。</p><h2 id="13-20-怎样划分训练-开发-测试集"><a href="#13-20-怎样划分训练-开发-测试集" class="headerlink" title="13.20 怎样划分训练/开发/测试集"></a>13.20 怎样划分训练/开发/测试集</h2><p>&emsp;&emsp;<br>设立训练集，开发集和测试集的方式大大影响了你或者你的团队在建立机器学习应用方面取得进展的速度。同样的团队，即使是大公司里的团队，在设立这些数据集的方式，真的会让团队的进展变慢而不是加快，我们看看应该如何设立这些数据集，让你的团队效率最大化。  </p><p>&emsp;&emsp;<br>我建议你们不要这样，而是让你的开发集和测试集来自同一分布。我的意思是这样，你们要记住，我想就是设立你的开发集加上一个单实数评估指标，这就是像是定下目标，然后告诉你的团队，那就是你要瞄准的靶心，因为你一旦建立了这样的开发集和指标，团队就可以快速迭代，尝试不同的想法，跑实验，可以很快地使用开发集和指标去评估不同分类器，然后尝试选出最好的那个。所以，机器学习团队一般都很擅长使用不同方法去逼近目标，然后不断迭代，不断逼近靶心。所以，针对开发集上的指标优化。  </p><p>&emsp;&emsp;<br>所以我建议你们在设立开发集和测试集时，要选择这样的开发集和测试集，能够反映你未来会得到的数据，认为很重要的数据，必须得到好结果的数据，特别是，这里的开发集和测试集可能来自同一个分布。所以不管你未来会得到什么样的数据，一旦你的算法效果不错，要尝试收集类似的数据，而且，不管那些数据是什么，都要随机分配到开发集和测试集上。因为这样，你才能将瞄准想要的目标，让你的团队高效迭代来逼近同一个目标，希望最好是同一个目标。  </p><p>&emsp;&emsp;<br>我们还没提到如何设立训练集，我们会在之后的视频里谈谈如何设立训练集，但这个视频的重点在于，设立开发集以及评估指标，真的就定义了你要瞄准的目标。我们希望通过在同一分布中设立开发集和测试集，你就可以瞄准你所希望的机器学习团队瞄准的目标。而设立训练集的方式则会影响你逼近那个目标有多快，但我们可以在另一个讲座里提到。我知道有一些机器学习团队，他们如果能遵循这个方针，就可以省下几个月的工作，所以我希望这些方针也能帮到你们。  </p><p>&emsp;&emsp;<br>接下来，实际上你的开发集和测试集的规模，如何选择它们的大小，在深度学习时代也在变化，我们会在下一个视频里提到这些内容。</p><h2 id="13-21-如何划分开发-测试集大小"><a href="#13-21-如何划分开发-测试集大小" class="headerlink" title="13.21 如何划分开发/测试集大小"></a>13.21 如何划分开发/测试集大小</h2><p>&emsp;&emsp;<br>你可能听说过一条经验法则，在机器学习中，把你取得的全部数据用$70/30$比例分成训练集和测试集。或者如果你必须设立训练集、开发集和测试集，你会这么分$60\%$训练集，$20\%$开发集，$20\%$测试集。在机器学习的早期，这样分是相当合理的，特别是以前的数据集大小要小得多。所以如果你总共有100个样本，这样$70/30$或者$60/20/20$分的经验法则是相当合理的。如果你有几千个样本或者有一万个样本，这些做法也还是合理的。  </p><p>&emsp;&emsp;<br>但在现代机器学习中，我们更习惯操作规模大得多的数据集，比如说你有$1$百万个训练样本，这样分可能更合理，$98\%$作为训练集，$1\%$开发集，$1\%$测试集，我们用和缩写来表示开发集和测试集。因为如果你有$1$百万个样本，那么$1\%$就是$10,000$个样本，这对于开发集和测试集来说可能已经够了。所以在现代深度学习时代，有时我们拥有大得多的数据集，所以使用小于$20\%$的比例或者小于$30\%$比例的数据作为开发集和测试集也是合理的。而且因为深度学习算法对数据的胃口很大，我们可以看到那些有海量数据集的问题，有更高比例的数据划分到训练集里，那么测试集呢？   </p><p>&emsp;&emsp;<br>总结一下，在大数据时代旧的经验规则，这个$70/30$不再适用了。现在流行的是把大量数据分到训练集，然后少量数据分到开发集和测试集，特别是当你有一个非常大的数据集时。以前的经验法则其实是为了确保开发集足够大，能够达到它的目的，就是帮你评估不同的想法，然后选出还是更好。测试集的目的是评估你最终的成本偏差，你只需要设立足够大的测试集，可以用来这么评估就行了，可能只需要远远小于总体数据量的$30\%$。  </p><p>&emsp;&emsp;<br>所以我希望本视频能给你们一点指导和建议，让你们知道如何在深度学习时代设立开发和测试集。接下来，有时候在研究机器学习的问题途中，你可能需要更改评估指标，或者改动你的开发集和测试集，我们会讲什么时候需要这样做。</p><h2 id="13-22-什么时候该改变开发-测试集和指标？"><a href="#13-22-什么时候该改变开发-测试集和指标？" class="headerlink" title="13.22 什么时候该改变开发/测试集和指标？"></a>13.22 什么时候该改变开发/测试集和指标？</h2><p>&emsp;&emsp;<br>我们来看一个例子，假设你在构建一个猫分类器，试图找到很多猫的照片，向你的爱猫人士用户展示，你决定使用的指标是分类错误率。所以算法和分别有3％错误率和5％错误率，所以算法似乎做得更好。  </p><p>&emsp;&emsp;<br>但我们实际试一下这些算法，你观察一下这些算法，算法由于某些原因，把很多色情图像分类成猫了。如果你部署算法，那么用户就会看到更多猫图，因为它识别猫的错误率只有$3\%$，但它同时也会给用户推送一些色情图像，这是你的公司完全不能接受的，你的用户也完全不能接受。相比之下，算法有$5\%$的错误率，这样分类器就得到较少的图像，但它不会推送色情图像。所以从你们公司的角度来看，以及从用户接受的角度来看，算法实际上是一个更好的算法，因为它不让任何色情图像通过。  </p><p>&emsp;&emsp;<br>那么在这个例子中，发生的事情就是，算法A在评估指标上做得更好，它的错误率达到$3\%$，但实际上是个更糟糕的算法。在这种情况下，评估指标加上开发集它们都倾向于选择算法，因为它们会说，看算法A的错误率较低，这是你们自己定下来的指标评估出来的。但你和你的用户更倾向于使用算法，因为它不会将色情图像分类为猫。所以当这种情况发生时，当你的评估指标无法正确衡量算法之间的优劣排序时，在这种情况下，原来的指标错误地预测算法A是更好的算法这就发出了信号，你应该改变评估指标了，或者要改变开发集或测试集。在这种情况下，你用的分类错误率指标可以写成这样：  </p><p>&emsp;&emsp;<br>但粗略的结论是，如果你的评估指标无法正确评估好算法的排名，那么就需要花时间定义一个新的评估指标。这是定义评估指标的其中一种可能方式（上述加权法）。评估指标的意义在于，准确告诉你已知两个分类器，哪一个更适合你的应用。就这个视频的内容而言，我们不需要太注重新错误率指标是怎么定义的，关键在于，如果你对旧的错误率指标不满意，那就不要一直沿用你不满意的错误率指标，而应该尝试定义一个新的指标，能够更加符合你的偏好，定义出实际更适合的算法。  </p><p>&emsp;&emsp;<br>所以方针是，如果你在指标上表现很好，在当前开发集或者开发集和测试集分布中表现很好，但你的实际应用程序，你真正关注的地方表现不好，那么就需要修改指标或者你的开发测试集。换句话说，如果你发现你的开发测试集都是这些高质量图像，但在开发测试集上做的评估无法预测你的应用实际的表现。因为你的应用处理的是低质量图像，那么就应该改变你的开发测试集，让你的数据更能反映你实际需要处理好的数据。  </p><p>&emsp;&emsp;<br>但总体方针就是，如果你当前的指标和当前用来评估的数据和你真正关心必须做好的事情关系不大，那就应该更改你的指标或者你的开发测试集，让它们能更够好地反映你的算法需要处理好的数据。</p><h2 id="13-23-设置评估指标的意义？"><a href="#13-23-设置评估指标的意义？" class="headerlink" title="13.23 设置评估指标的意义？"></a>13.23 设置评估指标的意义？</h2><p>&emsp;&emsp;<br>评估指标的意义在于，准确告诉你已知两个分类器，哪一个更适合你的应用。就这个视频的内容而言，我们不需要太注重新错误率指标是怎么定义的，关键在于，如果你对旧的错误率指标不满意，那就不要一直沿用你不满意的错误率指标，而应该尝试定义一个新的指标，能够更加符合你的偏好，定义出实际更适合的算法。</p><h2 id="13-24-什么是可避免偏差？"><a href="#13-24-什么是可避免偏差？" class="headerlink" title="13.24 什么是可避免偏差？"></a>13.24 什么是可避免偏差？</h2><p>&emsp;&emsp;<br><a href="http://www.ai-start.com/dl2017/lesson3-week1.html" target="_blank" rel="noopener">http://www.ai-start.com/dl2017/lesson3-week1.html</a></p><p>&emsp;&emsp;<br>所以要给这些概念命名一下，这不是广泛使用的术语，但我觉得这么说思考起来比较流畅。就是把这个差值，贝叶斯错误率或者对贝叶斯错误率的估计和训练错误率之间的差值称为可避免偏差，你可能希望一直提高训练集表现，直到你接近贝叶斯错误率，但实际上你也不希望做到比贝叶斯错误率更好，这理论上是不可能超过贝叶斯错误率的，除非过拟合。而这个训练错误率和开发错误率之前的差值，就大概说明你的算法在方差问题上还有多少改善空间。  </p><p>&emsp;&emsp;<br>可避免偏差这个词说明了有一些别的偏差，或者错误率有个无法超越的最低水平，那就是说如果贝叶斯错误率是$7.5\%$。你实际上并不想得到低于该级别的错误率，所以你不会说你的训练错误率是$8\%$，然后$8\%$就衡量了例子中的偏差大小。你应该说，可避免偏差可能在$0.5\%$左右，或者$0.5\%$是可避免偏差的指标。而这个$2\%$是方差的指标，所以要减少这个$2\%$比减少这个$0.5\%$空间要大得多。而在左边的例子中，这$7\%$衡量了可避免偏差大小，而$2\%$衡量了方差大小。所以在左边这个例子里，专注减少可避免偏差可能潜力更大。</p><h2 id="13-25-什么是TOP5错误率？"><a href="#13-25-什么是TOP5错误率？" class="headerlink" title="13.25 什么是TOP5错误率？"></a>13.25 什么是TOP5错误率？</h2><p>&emsp;&emsp;<br>top1就是你预测的label取最后概率向量里面最大的那一个作为预测结果，你的预测结果中概率最大的那个类必须是正确类别才算预测正确。而top5就是最后概率向量最大的前五名中出现了正确概率即为预测正确。  </p><p>&emsp;&emsp;<br>ImageNet 项目是一个用于物体对象识别检索大型视觉数据库。截止$2016$年，ImageNet 已经对超过一千万个图像的url进行手动注释，标记图像的类别。在至少一百万张图像中还提供了边界框。自$2010$年以来，ImageNet 举办一年一度的软件竞赛，叫做 ImageNet 大尺度视觉识别挑战(ImageNet Large Scale Visual Recognition Challenge,ILSVRC)。主要内容是通过算法程序实现正确分类和探测识别物体与场景，评价标准就是Top-5 错误率。  </p><p>&emsp;&emsp;<br>Top-5 错误率<br>&emsp;&emsp;<br>ILSRVRC（ImageNet 图像分类大赛） 比赛设置如下：$1000$类图像分类问题，训练数据集$126$万张图像，验证集$5$万张，测试集$10$万张（标注未公布）。评价标准采用 top-5 错误率——即对一张图像预测$5$个类别，只要有一个和人工标注类别相同就算对，否则算错。</p><h2 id="13-26-什么是人类水平错误率？"><a href="#13-26-什么是人类水平错误率？" class="headerlink" title="13.26 什么是人类水平错误率？"></a>13.26 什么是人类水平错误率？</h2><p>&emsp;&emsp;<br>人类水平错误率的定义，就是如果你想要替代或估计贝叶斯错误率，那么一队经验丰富的医生讨论和辩论之后，可以达到$0.5\%$的错误率。我们知道贝叶斯错误率小于等于$0.5\%$，因为有些系统，这些医生团队可以达到$0.5\%$的错误率。所以根据定义，最优错误率必须在$0.5\%$以下。我们不知道多少更好，也许有一个更大的团队，更有经验的医生能做得更好，所以也许比$0.5\%$好一点。但是我们知道最优错误率不能高于$0.5\%$，那么在这个背景下，我就可以用$0.5\%$估计贝叶斯错误率。所以我将人类水平定义为$0.5\%$，至少如果你希望使用人类水平错误来分析偏差和方差的时候，就像上个视频那样。  </p><p>&emsp;&emsp;<br>现在，为了发表研究论文或者部署系统，也许人类水平错误率的定义可以不一样，你可以使用1%，只要你超越了一个普通医生的表现，如果能达到这种水平，那系统已经达到实用了。也许超过一名放射科医生，一名医生的表现，意味着系统在一些情况下可以有部署价值了。</p><h2 id="13-27-可避免偏差、几大错误率之间的关系？"><a href="#13-27-可避免偏差、几大错误率之间的关系？" class="headerlink" title="13.27 可避免偏差、几大错误率之间的关系？"></a>13.27 可避免偏差、几大错误率之间的关系？</h2><p>&emsp;&emsp;<br>要了解为什么这个很重要，我们来看一个错误率分析的例子。比方说，在医学图像诊断例子中，你的训练错误率是$5\%$，你的开发错误率是$6\%$。而在上一张幻灯片的例子中，我们的人类水平表现，我将它看成是贝叶斯错误率的替代品，取决于你是否将它定义成普通单个医生的表现，还是有经验的医生或医生团队的表现，你可能会用$1\%$或$0.7\%$或$0.5\%$。同时也回想一下，前面视频中的定义，贝叶斯错误率或者说贝叶斯错误率的估计和训练错误率直接的差值就衡量了所谓的可避免偏差，这（训练误差与开发误差之间的差值）可以衡量或者估计你的学习算法的方差问题有多严重。  </p><p>&emsp;&emsp;<br>所以在这个第一个例子中，无论你做出哪些选择，可避免偏差大概是$4\%$，这个值我想介于……，如果你取$1\%$就是$4\%$，如果你取$0.5\%$就是$4.5\%$，而这个差距（训练误差与开发误差之间的差值）是$1\%$。所以在这个例子中，我得说，不管你怎么定义人类水平错误率，使用单个普通医生的错误率定义，还是单个经验丰富医生的错误率定义或经验丰富的医生团队的错误率定义，这是$4\%$还是$4.5\%$，这明显比都比方差问题更大。所以在这种情况下，你应该专注于减少偏差的技术，例如培训更大的网络。</p><h2 id="13-28-怎样选取可避免偏差及贝叶斯错误率"><a href="#13-28-怎样选取可避免偏差及贝叶斯错误率" class="headerlink" title="13.28 怎样选取可避免偏差及贝叶斯错误率?"></a>13.28 怎样选取可避免偏差及贝叶斯错误率?</h2><p>&emsp;&emsp;<br>就是比如你的训练错误率是0.7%，所以你现在已经做得很好了，你的开发错误率是$0.8\%$。在这种情况下，你用$0.5\%$来估计贝叶斯错误率关系就很大。因为在这种情况下，你测量到的可避免偏差是$0.2\%$，这是你测量到的方差问题$0.1\%$的两倍，这表明也许偏差和方差都存在问题。但是，可避免偏差问题更严重。在这个例子中，我们在上一张幻灯片中讨论的是$0.5\%$，就是对贝叶斯错误率的最佳估计，因为一群人类医生可以实现这一目标。如果你用$0.7$代替贝叶斯错误率，你测得的可避免偏差基本上是$0\%$，那你就可能忽略可避免偏差了。实际上你应该试试能不能在训练集上做得更好。</p><h2 id="13-29-怎样减少方差？"><a href="#13-29-怎样减少方差？" class="headerlink" title="13.29 怎样减少方差？"></a>13.29 怎样减少方差？</h2><p>&emsp;&emsp;<br>如果你的算法方差较高，可以尝试下面的技巧：  </p><p>&emsp;&emsp;<br>（1）增加训练数据：只要你可以获得大量数据和足够的算力去处理数据，这就是一种解决高方差问题最简单，最可靠的方式。<br>&emsp;&emsp;<br>（2）正则化（L2, L1, dropout）：这种技巧减少方差的同时，增加了偏差。<br>&emsp;&emsp;<br>（3）提前停止（例如，根据开发集的错误率来提前停止梯度下降）：这种技巧减少方差的同时增加的偏差。提前停止技巧很像正则化方法，一些论文作者也叫他正则化技巧。<br>&emsp;&emsp;<br>（4）特征选择来减少输入特征的数量或类型：这种技巧可能会处理好方差问题，但是同时会增大偏差。稍微减少特征数量（比如从1000个特征减少到900个特征）不太可能对偏差产生大的影响。大量减少特征数量（比如从$1000$减少到$100-$减少$10$倍）可能产生较大偏差，因为去掉了很多有用的特征。（注：可能会欠拟合）。在现代的深度学习中，数据量很大，人们对待特征选择的态度出现了转变，现在我们更加倾向于使用全部的特征，让算法自己选择合适的特征。但是当训练集比较小时，特征选择非常有用。<br>&emsp;&emsp;<br>（5）缩小模型（例如减少网络层数和神经元数量）：谨慎使用。这种技巧可以减少方差，同时也可能增加偏差。然而，我并不推荐使用这种技巧来解决方差问题。添加正则化通常会获得更好的分类性能。缩小模型的优点在于减少计算成本，以更快的速度来训练模型。如果模型的训练速度非常重要，那么就想尽一切方法来缩小模型。但是如果目标是减少方差，不是那么在意计算成本，可以考虑添加正则化。</p><h2 id="13-30-贝叶斯错误率的最佳估计"><a href="#13-30-贝叶斯错误率的最佳估计" class="headerlink" title="13.30 贝叶斯错误率的最佳估计"></a>13.30 贝叶斯错误率的最佳估计</h2><p>&emsp;&emsp;<br>对于这样的问题，更好的估计贝叶斯错误率很有必要，可以帮助你更好地估计可避免偏差和方差，这样你就能更好的做出决策，选择减少偏差的策略，还是减少方差的策略。</p><h2 id="13-31-举机器学习超过单个人类表现几个例子？"><a href="#13-31-举机器学习超过单个人类表现几个例子？" class="headerlink" title="13.31 举机器学习超过单个人类表现几个例子？"></a>13.31 举机器学习超过单个人类表现几个例子？</h2><p>&emsp;&emsp;<br>现在，机器学习有很多问题已经可以大大超越人类水平了。例如，我想网络广告，估计某个用户点击广告的可能性，可能学习算法做到的水平已经超越任何人类了。还有提出产品建议，向你推荐电影或书籍之类的任务。我想今天的网站做到的水平已经超越你最亲近的朋友了。还有物流预测，从到开车需要多久，或者预测快递车从开到需要多少时间。或者预测某人会不会偿还贷款，这样你就能判断是否批准这人的贷款。我想这些问题都是今天的机器学习远远超过了单个人类的表现。  </p><p>&emsp;&emsp;<br>除了这些问题，今天已经有语音识别系统超越人类水平了，还有一些计算机视觉任务，一些图像识别任务，计算机已经超越了人类水平。但是由于人类对这种自然感知任务非常擅长，我想计算机达到那种水平要难得多。还有一些医疗方面的任务，比如阅读ECG或诊断皮肤癌，或者某些特定领域的放射科读图任务，这些任务计算机做得非常好了，也许超越了单个人类的水平。</p><h2 id="13-32如何改善你的模型？"><a href="#13-32如何改善你的模型？" class="headerlink" title="13.32如何改善你的模型？"></a>13.32如何改善你的模型？</h2><p>&emsp;&emsp;<br>你们学过正交化，如何设立开发集和测试集，用人类水平错误率来估计贝叶斯错误率以及如何估计可避免偏差和方差。我们现在把它们全部组合起来写成一套指导方针，如何提高学习算法性能的指导方针。  </p><p>&emsp;&emsp;<br>首先，你的算法对训练集的拟合很好，这可以看成是你能做到可避免偏差很低。还有第二件事你可以做好的是，在训练集中做得很好，然后推广到开发集和测试集也很好，这就是说方差不是太大。  </p><ol><li><p>总结一下前几段视频我们见到的步骤，如果你想提升机器学习系统的性能，我建议你们看看训练错误率和贝叶斯错误率估计值之间的距离，让你知道可避免偏差有多大。换句话说，就是你觉得还能做多好，你对训练集的优化还有多少空间。</p></li><li><p>然后看看你的开发错误率和训练错误率之间的距离，就知道你的方差问题有多大。换句话说，你应该做多少努力让你的算法表现能够从训练集推广到开发集，算法是没有在开发集上训练的。</p></li><li><p>用尽一切办法减少可避免偏差</p></li><li><p>比如使用规模更大的模型，这样算法在训练集上的表现会更好，或者训练更久。</p></li><li><p>使用更好的优化算法，比如说加入momentum或者RMSprop，或者使用更好的算法，比如Adam。你还可以试试寻找更好的新神经网络架构，或者说更好的超参数。这些手段包罗万有，你可以改变激活函数，改变层数或者隐藏单位数，虽然你这么做可能会让模型规模变大。</p></li><li><p>或者试用其他模型，其他架构，如循环神经网络和卷积神经网络。  </p></li></ol><p>&emsp;&emsp;<br>在之后的课程里我们会详细介绍的，新的神经网络架构能否更好地拟合你的训练集，有时也很难预先判断，但有时换架构可能会得到好得多的结果。</p><h2 id="13-33-理解误差分析"><a href="#13-33-理解误差分析" class="headerlink" title="13.33 理解误差分析"></a>13.33 理解误差分析</h2><p>&emsp;&emsp;<br>如果你希望让学习算法能够胜任人类能做的任务，但你的学习算法还没有达到人类的表现，那么人工检查一下你的算法犯的错误也许可以让你了解接下来应该做什么。这个过程称为错误分析，我们从一个例子开始讲吧。  </p><p>&emsp;&emsp;<br>假设你正在调试猫分类器，然后你取得了$90\%$准确率，相当于$10\%$错误，，在你的开发集上做到这样，这离你希望的目标还有很远。也许你的队员看了一下算法分类出错的例子，注意到算法将一些狗分类为猫，你看看这两只狗，它们看起来是有点像猫，至少乍一看是。所以也许你的队友给你一个建议，如何针对狗的图片优化算法。试想一下，你可以针对狗，收集更多的狗图，或者设计一些只处理狗的算法功能之类的，为了让你的猫分类器在狗图上做的更好，让算法不再将狗分类成猫。所以问题在于，你是不是应该去开始做一个项目专门处理狗？这项目可能需要花费几个月的时间才能让算法在狗图片上犯更少的错误，这样做值得吗？或者与其花几个月做这个项目，有可能最后发现这样一点用都没有。这里有个错误分析流程，可以让你很快知道这个方向是否值得努力。  </p><p>&emsp;&emsp;<br>那这个简单的人工统计步骤，错误分析，可以节省大量时间，可以迅速决定什么是最重要的，或者最有希望的方向。实际上，如果你观察$100$个错误标记的开发集样本，也许只需要$5$到$10$分钟的时间，亲自看看这$100$个样本，并亲自统计一下有多少是狗。根据结果，看看有没有占到$5\%$、$50\%$或者其他东西。这个在$5$到$10$分钟之内就能给你估计这个方向有多少价值，并且可以帮助你做出更好的决定，是不是把未来几个月的时间投入到解决错误标记的狗图这个问题。  </p><p>&emsp;&emsp;<br>所以总结一下，进行错误分析，你应该找一组错误样本，可能在你的开发集里或者测试集里，观察错误标记的样本，看看假阳性（false positives）和假阴性（false negatives），统计属于不同错误类型的错误数量。在这个过程中，你可能会得到启发，归纳出新的错误类型，就像我们看到的那样。如果你过了一遍错误样本，然后说，天，有这么多Instagram滤镜或Snapchat滤镜，这些滤镜干扰了我的分类器，你就可以在途中新建一个错误类型。总之，通过统计不同错误标记类型占总数的百分比，可以帮你发现哪些问题需要优先解决，或者给你构思新优化方向的灵感。在做错误分析的时候，有时你会注意到开发集里有些样本被错误标记了，这时应该怎么做呢？我们下一个视频来讨论。</p><h2 id="13-34-为什么值得花时间查看错误标记数据？"><a href="#13-34-为什么值得花时间查看错误标记数据？" class="headerlink" title="13.34 为什么值得花时间查看错误标记数据？"></a>13.34 为什么值得花时间查看错误标记数据？</h2><p>&emsp;&emsp;<br>最后我讲几个建议：<br>&emsp;&emsp;<br>首先，深度学习研究人员有时会喜欢这样说：“我只是把数据提供给算法，我训练过了，效果拔群”。这话说出了很多深度学习错误的真相，更多时候，我们把数据喂给算法，然后训练它，并减少人工干预，减少使用人类的见解。但我认为，在构造实际系统时，通常需要更多的人工错误分析，更多的人类见解来架构这些系统，尽管深度学习的研究人员不愿意承认这点。<br>&emsp;&emsp;<br>其次，不知道为什么，我看一些工程师和研究人员不愿意亲自去看这些样本，也许做这些事情很无聊，坐下来看100或几百个样本来统计错误数量，但我经常亲自这么做。当我带领一个机器学习团队时，我想知道它所犯的错误，我会亲自去看看这些数据，尝试和一部分错误作斗争。我想就因为花了这几分钟，或者几个小时去亲自统计数据，真的可以帮你找到需要优先处理的任务，我发现花时间亲自检查数据非常值得，所以我强烈建议你们这样做，如果你在搭建你的机器学习系统的话，然后你想确定应该优先尝试哪些想法，或者哪些方向。</p><h2 id="13-35-快速搭建初始系统的意义？"><a href="#13-35-快速搭建初始系统的意义？" class="headerlink" title="13.35 快速搭建初始系统的意义？"></a>13.35 快速搭建初始系统的意义？</h2><p>&emsp;&emsp;<br>一般来说，对于几乎所有的机器学习程序可能会有$50$个不同的方向可以前进，并且每个方向都是相对合理的可以改善你的系统。但挑战在于，你如何选择一个方向集中精力处理。即使我已经在语音识别领域工作多年了，如果我要为一个新应用程序域构建新系统，我还是觉得很难不花时间去思考这个问题就直接选择方向。所以我建议你们，如果你想搭建全新的机器学习程序，就是快速搭好你的第一个系统，然后开始迭代。我的意思是我建议你快速设立开发集和测试集还有指标，这样就决定了你的目标所在，如果你的目标定错了，之后改也是可以的。但一定要设立某个目标，然后我建议你马上搭好一个机器学习系统原型，然后找到训练集，训练一下，看看效果，开始理解你的算法表现如何，在开发集测试集，你的评估指标上表现如何。当你建立第一个系统后，你就可以马上用到之前说的偏差方差分析，还有之前最后几个视频讨论的错误分析，来确定下一步优先做什么。特别是如果错误分析让你了解到大部分的错误的来源是说话人远离麦克风，这对语音识别构成特殊挑战，那么你就有很好的理由去集中精力研究这些技术，所谓远场语音识别的技术，这基本上就是处理说话人离麦克风很远的情况。</p><p>&emsp;&emsp;<br>建立这个初始系统的所有意义在于，它可以是一个快速和粗糙的实现（quick and dirty implementation），你知道的，别想太多。初始系统的全部意义在于，有一个学习过的系统，有一个训练过的系统，让你确定偏差方差的范围，就可以知道下一步应该优先做什么，让你能够进行错误分析，可以观察一些错误，然后想出所有能走的方向，哪些是实际上最有希望的方向。</p><h2 id="13-36-为什么要在不同的划分上训练及测试？"><a href="#13-36-为什么要在不同的划分上训练及测试？" class="headerlink" title="13.36 为什么要在不同的划分上训练及测试？"></a>13.36 为什么要在不同的划分上训练及测试？</h2><p>&emsp;&emsp;<br>深度学习算法对训练数据的胃口很大，当你收集到足够多带标签的数据构成训练集时，算法效果最好，这导致很多团队用尽一切办法收集数据，然后把它们堆到训练集里，让训练的数据量更大，即使有些数据，甚至是大部分数据都来自和开发集、测试集不同的分布。在深度学习时代，越来越多的团队都用来自和开发集、测试集分布不同的数据来训练，这里有一些微妙的地方，一些最佳做法来处理训练集和测试集存在差异的情况，我们来看看。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_36_1.png" alt=""></p><center>图 13.36 Cat app example</center><p>&emsp;&emsp;<br>假设你在开发一个手机应用，用户会上传他们用手机拍摄的照片，你想识别用户从应用中上传的图片是不是猫。现在你有两个数据来源，一个是你真正关心的数据分布，来自应用上传的数据，比如右边的应用，这些照片一般更业余，取景不太好，有些甚至很模糊，因为它们都是业余用户拍的。另一个数据来源就是你可以用爬虫程序挖掘网页直接下载，就这个样本而言，可以下载很多取景专业、高分辨率、拍摄专业的猫图片。如果你的应用用户数还不多，也许你只收集到$10,000$张用户上传的照片，但通过爬虫挖掘网页，你可以下载到海量猫图，也许你从互联网上下载了超过$20$万张猫图。而你真正关心的算法表现是你的最终系统处理来自应用程序的这个图片分布时效果好不好，因为最后你的用户会上传类似右边这些图片，你的分类器必须在这个任务中表现良好。现在你就陷入困境了，因为你有一个相对小的数据集，只有$10,000$个样本来自那个分布，而你还有一个大得多的数据集来自另一个分布，图片的外观和你真正想要处理的并不一样。但你又不想直接用这$10,000$张图片，因为这样你的训练集就太小了，使用这$20$万张图片似乎有帮助。但是，困境在于，这$20$万张图片并不完全来自你想要的分布，那么你可以怎么做呢？</p><p>&emsp;&emsp;<br>这里有一种选择，你可以做的一件事是将两组数据合并在一起，这样你就有$21$万张照片，你可以把这$21$万张照片随机分配到训练、开发和测试集中。为了说明观点，我们假设你已经确定开发集和测试集各包含$2500$个样本，所以你的训练集有$205000$个样本。现在这么设立你的数据集有一些好处，也有坏处。好处在于，你的训练集、开发集和测试集都来自同一分布，这样更好管理。但坏处在于，这坏处还不小，就是如果你观察开发集，看看这$2500$个样本其中很多图片都来自网页下载的图片，那并不是你真正关心的数据分布，你真正要处理的是来自手机的图片。</p><p>&emsp;&emsp;<br>我建议你走另外一条路，就是这样，训练集，比如说还是$205,000$张图片，我们的训练集是来自网页下载的$200,000$张图片，然后如果需要的话，再加上$5000$张来自手机上传的图片。然后对于开发集和测试集，这数据集的大小是按比例画的，你的开发集和测试集都是手机图。而训练集包含了来自网页的$20$万张图片，还有$5000$张来自应用的图片，开发集就是$2500$张来自应用的图片，测试集也是$2500$张来自应用的图片。这样将数据分成训练集、开发集和测试集的好处在于，现在你瞄准的目标就是你想要处理的目标，你告诉你的团队，我的开发集包含的数据全部来自手机上传，这是你真正关心的图片分布。我们试试搭建一个学习系统，让系统在处理手机上传图片分布时效果良好。缺点在于，当然了，现在你的训练集分布和你的开发集、测试集分布并不一样。但事实证明，这样把数据分成训练、开发和测试集，在长期能给你带来更好的系统性能。我们以后会讨论一些特殊的技巧，可以处理 训练集的分布和开发集和测试集分布不一样的情况。</p><h2 id="13-37-如何解决数据不匹配问题？"><a href="#13-37-如何解决数据不匹配问题？" class="headerlink" title="13.37 如何解决数据不匹配问题？"></a>13.37 如何解决数据不匹配问题？</h2><p>&emsp;&emsp;<br>如果您的训练集来自和开发测试集不同的分布，如果错误分析显示你有一个数据不匹配的问题该怎么办？这个问题没有完全系统的解决方案，但我们可以看看一些可以尝试的事情。如果我发现有严重的数据不匹配问题，我通常会亲自做错误分析，尝试了解训练集和开发测试集的具体差异。技术上，为了避免对测试集过拟合，要做错误分析，你应该人工去看开发集而不是测试集。</p><p>&emsp;&emsp;<br>但作为一个具体的例子，如果你正在开发一个语音激活的后视镜应用，你可能要看看……我想如果是语音的话，你可能要听一下来自开发集的样本，尝试弄清楚开发集和训练集到底有什么不同。所以，比如说你可能会发现很多开发集样本噪音很多，有很多汽车噪音，这是你的开发集和训练集差异之一。也许你还会发现其他错误，比如在你的车子里的语言激活后视镜，你发现它可能经常识别错误街道号码，因为那里有很多导航请求都有街道地址，所以得到正确的街道号码真的很重要。当你了解开发集误差的性质时，你就知道，开发集有可能跟训练集不同或者更难识别，那么你可以尝试把训练数据变得更像开发集一点，或者，你也可以收集更多类似你的开发集和测试集的数据。所以，比如说，如果你发现车辆背景噪音是主要的错误来源，那么你可以模拟车辆噪声数据，我会在下一张幻灯片里详细讨论这个问题。或者你发现很难识别街道号码，也许你可以有意识地收集更多人们说数字的音频数据，加到你的训练集里。</p><p>&emsp;&emsp;<br>现在我知道这张幻灯片只给出了粗略的指南，列出一些你可以做的尝试，这不是一个系统化的过程，我想，这不能保证你一定能取得进展。但我发现这种人工见解，我们可以一起尝试收集更多和真正重要的场合相似的数据，这通常有助于解决很多问题。所以，如果你的目标是让训练数据更接近你的开发集，那么你可以怎么做呢？</p><p>&emsp;&emsp;<br>你可以利用的其中一种技术是人工合成数据（artificial data synthesis），我们讨论一下。在解决汽车噪音问题的场合，所以要建立语音识别系统。也许实际上你没那么多实际在汽车背景噪音下录得的音频，或者在高速公路背景噪音下录得的音频。但我们发现，你可以合成。所以假设你录制了大量清晰的音频，不带车辆背景噪音的音频，“The quick brown fox jumps over the lazy dog”（音频播放），所以，这可能是你的训练集里的一段音频，顺便说一下，这个句子在AI测试中经常使用，因为这个短句包含了从a到z所有字母，所以你会经常见到这个句子。但是，有了这个“the quick brown fox jumps over the lazy dog”这段录音之后，你也可以收集一段这样的汽车噪音，（播放汽车噪音音频）这就是汽车内部的背景噪音，如果你一言不发开车的话，就是这种声音。如果你把两个音频片段放到一起，你就可以合成出”the quick brown fox jumps over the lazy dog”（带有汽车噪声），在汽车背景噪音中的效果，听起来像这样，所以这是一个相对简单的音频合成例子。在实践中，你可能会合成其他音频效果，比如混响，就是声音从汽车内壁上反弹叠加的效果。</p><p>&emsp;&emsp;<br>但是通过人工数据合成，你可以快速制造更多的训练数据，就像真的在车里录的那样，那就不需要花时间实际出去收集数据，比如说在实际行驶中的车子，录下上万小时的音频。所以，如果错误分析显示你应该尝试让你的数据听起来更像在车里录的，那么人工合成那种音频，然后喂给你的机器学习算法，这样做是合理的。</p><p>&emsp;&emsp;<br>现在我们要提醒一下，人工数据合成有一个潜在问题，比如说，你在安静的背景里录得$10,000$小时音频数据，然后，比如说，你只录了一小时车辆背景噪音，那么，你可以这么做，将这$1$小时汽车噪音回放$10,000$次，并叠加到在安静的背景下录得的$10,000$小时数据。如果你这么做了，人听起来这个音频没什么问题。但是有一个风险，有可能你的学习算法对这1小时汽车噪音过拟合。特别是，如果这组汽车里录的音频可能是你可以想象的所有汽车噪音背景的集合，如果你只录了一小时汽车噪音，那你可能只模拟了全部数据空间的一小部分，你可能只从汽车噪音的很小的子集来合成数据。</p><p>&emsp;&emsp;<br>所以，总而言之，如果你认为存在数据不匹配问题，我建议你做错误分析，或者看看训练集，或者看看开发集，试图找出，试图了解这两个数据分布到底有什么不同，然后看看是否有办法收集更多看起来像开发集的数据作训练。</p><p>&emsp;&emsp;<br>我们谈到其中一种办法是人工数据合成，人工数据合成确实有效。在语音识别中。我已经看到人工数据合成显著提升了已经非常好的语音识别系统的表现，所以这是可行的。但当你使用人工数据合成时，一定要谨慎，要记住你有可能从所有可能性的空间只选了很小一部分去模拟数据。</p><p>&emsp;&emsp;<br>所以这就是如何处理数据不匹配问题，接下来，我想和你分享一些想法就是如何从多种类型的数据同时学习。</p><h2 id="13-38-梯度检验注意事项？"><a href="#13-38-梯度检验注意事项？" class="headerlink" title="13.38 梯度检验注意事项？"></a>13.38 梯度检验注意事项？</h2><p>&emsp;&emsp;<br>首先，不要在训练中使用梯度检验，它只用于调试。我的意思是，计算所有值的是一个非常漫长的计算过程，为了实施梯度下降，你必须使用和 backprop来计算，并使用backprop来计算导数，只要调试的时候，你才会计算它，来确认数值是否接近。完成后，你会关闭梯度检验，梯度检验的每一个迭代过程都不执行它，因为它太慢了。</p><p>&emsp;&emsp;<br>第二点，如果算法的梯度检验失败，要检查所有项，检查每一项，并试着找出bug，也就是说，如果与$d\theta[i]$的值相差很大，我们要做的就是查找不同的$i$值，看看是哪个导致与的值相差这么多。举个例子，如果你发现，相对某些层或某层的或的值相差很大，但是的各项非常接近，注意的各项与和的各项都是一一对应的，这时，你可能会发现，在计算参数的导数的过程中存在bug。反过来也是一样，如果你发现它们的值相差很大，的值与的值相差很大，你会发现所有这些项目都来自于或某层的，可能帮你定位bug的位置，虽然未必能够帮你准确定位bug的位置，但它可以帮助你估测需要在哪些地方追踪bug。</p><p>&emsp;&emsp;<br>第三点，在实施梯度检验时，如果使用正则化，请注意正则项。如果代价函数，这就是代价函数J的定义，等于与相关的函数的梯度，包括这个正则项，记住一定要包括这个正则项。</p><p>&emsp;&emsp;<br>第四点，梯度检验不能与dropout同时使用，因为每次迭代过程中，dropout会随机消除隐藏层单元的不同子集，难以计算dropout在梯度下降上的代价函数J。因此dropout可作为优化代价函数的一种方法，但是代价函数J被定义为对所有指数极大的节点子集求和。而在任何迭代过程中，这些节点都有可能被消除，所以很难计算代价函数。你只是对成本函数做抽样，用dropout，每次随机消除不同的子集，所以很难用梯度检验来双重检验dropout的计算，所以我一般不同时使用梯度检验和dropout。如果你想这样做，可以把dropout中的keepprob设置为$1.0$，然后打开dropout，并寄希望于dropout的实施是正确的，你还可以做点别的，比如修改节点丢失模式确定梯度检验是正确的。实际上，我一般不这么做，我建议关闭dropout，用梯度检验进行双重检查，在没有dropout的情况下，你的算法至少是正确的，然后打开dropout。</p><p>&emsp;&emsp;<br>最后一点，也是比较微妙的一点，现实中几乎不会出现这种情况。当和接近0时，梯度下降的实施是正确的，在随机初始化过程中$……$，但是在运行梯度下降时，和变得更大。可能只有在和接近$0$时，backprop的实施才是正确的。但是当和变大时，它会变得越来越不准确。你需要做一件事，我不经常这么做，就是在随机初始化过程中，运行梯度检验，然后再训练网络，和会有一段时间远离$0$，如果随机初始化值比较小，反复训练网络之后，再重新运行梯度检验。</p><p>&emsp;&emsp;<br>这就是梯度检验，恭喜大家，这是本周最后一课了。回顾这一周，我们讲了如何配置训练集，验证集和测试集，如何分析偏差和方差，如何处理高偏差或高方差以及高偏差和高方差并存的问题，如何在神经网络中应用不同形式的正则化，如正则化和dropout，还有加快神经网络训练速度的技巧，最后是梯度检验。这一周我们学习了很多内容，你可以在本周编程作业中多多练习这些概念。祝你好运，期待下周再见。</p><h2 id="13-39什么是随机梯度下降？"><a href="#13-39什么是随机梯度下降？" class="headerlink" title="13.39什么是随机梯度下降？"></a>13.39什么是随机梯度下降？</h2><p>&emsp;&emsp;<br>随机梯度下降，简称SGD，是指梯度下降算法在训练集上，对每一个训练数据都计算误差并更新模型。<br>对每一个数据都进行模型更新意味着随机梯度下降是一种<a href="https://en.wikipedia.org/wiki/Online_machine_learning" target="_blank" rel="noopener">在线机器学习算法</a>。  </p><p>&emsp;&emsp;<br>优点:</p><ul><li>频繁的更新可以给我们一个模型表现和效率提升的即时反馈。</li><li>这可能是最容易理解和实现的一种方式，尤其对于初学者。</li><li>较高的模型更新频率在一些问题上可以快速的学习。</li><li>这种伴有噪声的更新方式能让模型避免局部最优（比如过早收敛）。</li></ul><p>&emsp;&emsp;<br>缺点:</p><ul><li>这种方式相比其他来说，计算消耗更大，在大数据集上花费的训练时间更多。</li><li>频繁的更新产生的噪声可能导致模型参数和模型误差来回跳动（更大的方差）。</li><li>这种伴有噪声的更新方式也能让算法难以稳定的收敛于一点。</li></ul><h2 id="13-40什么是批量梯度下降？"><a href="#13-40什么是批量梯度下降？" class="headerlink" title="13.40什么是批量梯度下降？"></a>13.40什么是批量梯度下降？</h2><p>&emsp;&emsp;<br>批量梯度下降对训练集上每一个数据都计算误差，但只在所有训练数据计算完成后才更新模型。<br>&emsp;&emsp;<br>对训练集上的一次训练过程称为一代（epoch）。因此，批量梯度下降是在每一个训练epoch之后更新模型。  </p><p>&emsp;&emsp;<br>优点：</p><ul><li>更少的模型更新意味着比SGD有更高的计算效率。</li><li>在一些问题上可以得到更稳定的误差梯度和更稳定的收敛点。</li><li>误差计算和模型更新过程的分离有利于并行算法的实现。</li></ul><p>&emsp;&emsp;<br>缺点：</p><ul><li>更稳定的误差梯度可能导致模型过早收敛于一个不是最优解的参数集。</li><li>每一次epoch之后才更新会增加一个累加所有训练数据误差的复杂计算。</li><li>通常来说，批量梯度下降算法需要把所有的训练数据都存放在内存中。</li><li>在大数据集上，训练速度会非常慢。</li></ul><h2 id="13-41什么是小批量梯度下降？"><a href="#13-41什么是小批量梯度下降？" class="headerlink" title="13.41什么是小批量梯度下降？"></a>13.41什么是小批量梯度下降？</h2><p>&emsp;&emsp;<br>小批量梯度下降把训练集划分为很多批，对每一批（batch）计算误差并更新参数。<br>&emsp;&emsp;<br>可以选择对batch的梯度进行累加，或者取平均值。取平均值可以减少梯度的方差。<br>&emsp;&emsp;<br>小批量梯度下降在随机梯度下降的鲁棒性和批量梯度下降的效率之间取得平衡。是如今深度学习领域最常见的实现方式。  </p><p>&emsp;&emsp;<br>优点：</p><ul><li>比批量梯度下降更快的更新频率有利于更鲁棒的收敛，避免局部最优。</li><li>相比随机梯度下降更具计算效率。</li><li>不需要把所有数据放入内存中。</li></ul><p>&emsp;&emsp;<br>缺点：</p><ul><li>小批量梯度下降给算法增加了一个超参数batch size。</li><li>和批量梯度下降一样，每一个batch上的误差需要累加。</li></ul><h2 id="13-42怎么配置mini-batch梯度下降"><a href="#13-42怎么配置mini-batch梯度下降" class="headerlink" title="13.42怎么配置mini-batch梯度下降"></a>13.42怎么配置mini-batch梯度下降</h2><p>&emsp;&emsp;<br>Mini-batch梯度下降对于深度学习大部分应用是最常用的方法。<br>&emsp;&emsp;<br>Mini-batch sizes，简称为 “batch sizes”，是算法设计中需要调节的参数。比如对应于不同GPU或CPU硬件$(32,64,128,256,\cdots)$的内存要求。<br>&emsp;&emsp;<br>batch size是学习过程中的“滑块”。  </p><p>&emsp;&emsp;<br>（1）较小的值让学习过程收敛更快，但是产生更多噪声。<br>&emsp;&emsp;<br>（2）较大的值让学习过程收敛较慢，但是准确的估计误差梯度。</p><p>&emsp;&emsp;<br><strong>建议1：batch size的默认值最好是$32$</strong><br>&emsp;&emsp;<br>batch size通常从1到几百之间选择，比如$32$是一个很好的默认值，超过$10$的值可以充分利用矩阵$<em>$矩阵相对于矩阵$</em>$向量的加速优势。<br><a href="https://arxiv.org/abs/1206.5533" target="_blank" rel="noopener">——Practical recommendations for gradient-based training of deep architectures, 2012</a></p><p>&emsp;&emsp;<br><strong>建议2：调节batch size时，最好观察模型在不同batch size下的训练时间和验证误差的学习曲线</strong><br>&emsp;&emsp;<br>相比于其他超参数，它可以被单独优化。在其他超参数（除了学习率）确定之后，在对比训练曲线（训练误差和验证误差对应于训练时间）。 </p><p>&emsp;&emsp;<br><strong>建议3：调整其他所有超参数之后再调整batch size和学习率</strong><br>&emsp;&emsp;<br>batch size和学习率几乎不受其他超参数的影响，因此可以放到最后再优化。batch size确定之后，可以被视为固定值，从而去优化其他超参数（如果使用了动量超参数则例外）。</p><h2 id="13-43-局部最优的问题"><a href="#13-43-局部最优的问题" class="headerlink" title="13.43 局部最优的问题"></a>13.43 局部最优的问题</h2><p>&emsp;&emsp;<br>在深度学习研究早期，人们总是担心优化算法会困在极差的局部最优，不过随着深度学习理论不断发展，我们对局部最优的理解也发生了改变。我向你展示一下现在我们怎么看待局部最优以及深度学习中的优化问题。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_1.png" alt=""></p><center>图 13.43.1 </center><p>&emsp;&emsp;<br>这是曾经人们在想到局部最优时脑海里会出现的图，也许你想优化一些参数，我们把它们称之为和，平面的高度<br>就是损失函数。在图中似乎各处都分布着局部最优。梯度下降法或者某个算法可能困在一个局部最优中，而不会抵达<br>全局最优。如果你要作图计算一个数字，比如说这两个维度，就容易出现有多个不同局部最优的图，而这些低维的图<br>曾经影响了我们的理解，但是这些理解并不正确。事实上，如果你要创建一个神经网络，通常梯度为零的点并不是这<br>个图中的局部最优点，实际上成本函数的零梯度点，通常是鞍点。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_2.png" alt=""></p><center>图 13.43.2 </center><p>&emsp;&emsp;<br>也就是在这个点，这里是和，高度即成本函数的值。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_3.png" alt=""></p><center>图 13.43.3 </center><p>&emsp;&emsp;<br>但是一个具有高维度空间的函数，如果梯度为$0$，那么在每个方向，它可能是凸函数，也可能是凹函数。如果你在$2$万维空间中，那么想要得到局部最优，所有的$2$万个方向都需要是这样，但发生的机率也许很小，也许是，你更有可能遇到有些方向的曲线会这样向上弯曲，另一些方向曲线向下弯，而不是所有的都向上弯曲，因此在高维度空间，你更可能碰到鞍点。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_4.png" alt=""></p><center>图 13.43.4 </center><p>&emsp;&emsp;<br>就像下面的这种：<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_5.png" alt=""></p><center>图 13.43.5 </center><p>&emsp;&emsp;<br>而不会碰到局部最优。至于为什么会把一个曲面叫做鞍点，你想象一下，就像是放在马背上的马鞍一样，如果这是马，这是马的头，这就是马的眼睛，画得不好请多包涵，然后你就是骑马的人，要坐在马鞍上，因此这里的这个点，导数为$0$的点，这个点叫做鞍点。我想那确实是你坐在马鞍上的那个点，而这里导数为$0$。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_6.png" alt=""></p><center>图 13.43.6 </center><p>&emsp;&emsp;<br>所以我们从深度学习历史中学到的一课就是，我们对低维度空间的大部分直觉，比如你可以画出上面的图，并不能应用到高维度空间中。适用于其它算法，因为如果你有$2$万个参数，那么函数有$2$万个维度向量，你更可能遇到鞍点，而不是局部最优点。</p><p>&emsp;&emsp;<br>如果局部最优不是问题，那么问题是什么？结果是平稳段会减缓学习，平稳段是一块区域，其中导数长时间接近于$0$，如果你在此处，梯度会从曲面从从上向下下降，因为梯度等于或接近$0$，曲面很平坦，你得花上很长时间慢慢抵达平稳段的这个点，因为左边或右边的随机扰动，我换个笔墨颜色，大家看得清楚一些，然后你的算法能够走出平稳段（红色笔）。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_7.png" alt=""></p><center>图 13.43.7 </center><p>&emsp;&emsp;<br>我们可以沿着这段长坡走，直到这里，然后走出平稳段。<br><img src="/2016/12/20/第十三章_优化算法/img/ch13/figure_13_43_8.png" alt=""></p><center>图 13.43.8 </center><p>&emsp;&emsp;<br>所以此次视频的要点是，首先，你不太可能困在极差的局部最优中，条件是你在训练较大的神经网络，存在大量参数，并且成本函数被定义在较高的维度空间。</p><p>&emsp;&emsp;<br>第二点，平稳段是一个问题，这样使得学习十分缓慢，这也是像Momentum或是RMSprop，Adam这样的算法，能够加速学习算法的地方。在这些情况下，更成熟的优化算法，如Adam算法，能够加快速度，让你尽早往下走出平稳段。</p><p>&emsp;&emsp;<br>因为你的网络要解决优化问题，说实话，要面临如此之高的维度空间，我觉得没有人有那么好的直觉，知道这些空间长什么样，而且我们对它们的理解还在不断发展，不过我希望这一点能够让你更好地理解优化算法所面临的问题。</p><h2 id="13-44-提升算法性能思路"><a href="#13-44-提升算法性能思路" class="headerlink" title="13.44 提升算法性能思路"></a>13.44 提升算法性能思路</h2><p>&emsp;&emsp;<br>这个列表里提到的思路并完全，但是一个好的开始。<br>&emsp;&emsp;<br>我的目的是给出很多可以尝试的思路，希望其中的一或两个你之前没有想到。你经常只需要一个好的想法就能得到性能提升。<br>&emsp;&emsp;<br>如果你能从其中一个思路中得到结果，请在评论区告诉我。我很高兴能得知这些好消息。<br>&emsp;&emsp;<br>如果你有更多的想法，或者是所列思路的拓展，也请告诉我，我和其他读者都将受益！有时候仅仅是一个想法或许就能使他人得到突破。</p><ol><li>通过数据提升性能 </li><li>通过算法提升性能 </li><li>通过算法调参提升性能 </li><li>通过嵌套模型提升性能</li></ol><p>&emsp;&emsp;<br>通常来讲，随着列表自上而下，性能的提升也将变小。例如，对问题进行新的架构或者获取更多的数据，通常比调整最优算法的参数能带来更好的效果。虽然并不总是这样，但是通常来讲是的。</p><p>&emsp;&emsp;<br>我已经把相应的链接加入了博客的教程中，相应网站的问题中，以及经典的Neural Net FAQ中。<br>&emsp;&emsp;<br>部分思路只适用于人工神经网络，但是大部分是通用的。通用到足够你用来配合其他技术来碰撞出提升模型性能的方法。<br>OK，现在让我们开始吧。</p><ol><li>通过数据提升性能 </li></ol><p>&emsp;&emsp;<br>对你的训练数据和问题定义进行适当改变，你能得到很大的性能提升。或许是最大的性能提升。  </p><p>&emsp;&emsp;<br>以下是我将要提到的思路：<br>&emsp;&emsp;<br>获取更多数据、创造更多数据、重放缩你的数据、转换你的数据、特征选取、重架构你的问题</p><p>&emsp;&emsp;<br>1）获取更多数据<br>&emsp;&emsp;<br>你能获取更多训练数据吗？<br>&emsp;&emsp;<br>你的模型的质量通常受到你的训练数据质量的限制。为了得到最好的模型，你首先应该想办法获得最好的数据。你也想尽可能多的获得那些最好的数据。<br>&emsp;&emsp;<br>有更多的数据，深度学习和其他现代的非线性机器学习技术有更全的学习源，能学得更好，深度学习尤为如此。这也是机器学习对大家充满吸引力的很大一个原因（世界到处都是数据）。  </p><p>&emsp;&emsp;<br>2） 创造更多数据<br>&emsp;&emsp;<br>上一小节说到了有了更多数据，深度学习算法通常会变的更好。有些时候你可能无法合理地获取更多数据，那你可以试试创造更多数据。<br>&emsp;&emsp;<br>如果你的数据是数值型向量，可以随机构造已有向量的修改版本。<br>&emsp;&emsp;<br>如果你的数据是图片，可以随机构造已有图片的修改版本(平移、截取、旋转等)。<br>&emsp;&emsp;<br>如果你的数据是文本，类似的操作……<br>&emsp;&emsp;<br>这通常被称作数据扩增（data augmentation）或者数据生成（data generation）。<br>&emsp;&emsp;<br>你可以利用一个生成模型。你也可以用一些简单的技巧。例如，针对图片数据，你可以通过随机地平移或旋转已有图片获取性能的提升。如果新数据中包含了这种转换，则提升了模型的泛化能力。<br>&emsp;&emsp;<br>这也与增加噪声是相关的，我们习惯称之为增加扰动。它起到了与正则化方法类似的作用，即抑制训练数据的过拟合。</p><p>&emsp;&emsp;<br>3）重缩放(rescale)你的数据<br>&emsp;&emsp;<br>这是一个快速获得性能提升的方法。 当应用神经网络时，一个传统的经验法则是：重缩放(rescale)你的数据至激活函数的边界。<br>&emsp;&emsp;<br>如果你在使用sigmoid激活函数，重缩放你的数据到0和1的区间里。如果你在使用双曲正切（tanh）激活函数，重缩放数据到－1和1的区间里。<br>&emsp;&emsp;<br>这种方法可以被应用到输入数据（x）和输出数据（y）。例如，如果你在输出层使用sigmoid函数去预测二元分类的结果，应当标准化y值，使之成为二元的。如果你在使用softmax函数，你依旧可以通过标准化y值来获益。<br>&emsp;&emsp;<br>这依旧是一个好的经验法则，但是我想更深入一点。我建议你可以参考下述方法来创造一些训练数据的不同的版本：<br>&emsp;&emsp;<br>归一化到0和1的区间。<br>&emsp;&emsp;<br>重放缩到－1和1的区间<br>&emsp;&emsp;<br>标准化（译者注：标准化数据使之成为零均值，单位标准差）<br>&emsp;&emsp;<br>然后对每一种方法，评估你的模型的性能，选取最好的进行使用。如果你改变了你的激活函数，重复这一过程。<br>&emsp;&emsp;<br>在神经网络中，大的数值累积效应(叠加叠乘)并不是好事，除上述方法之外，还有其他的方法来控制你的神经网络中数据的数值大小，譬如归一化激活函数和权重，我们会在以后讨论这些技术。  </p><p>&emsp;&emsp;<br>4）数据变换<br>&emsp;&emsp;<br>这里的数据变换与上述的重缩放方法类似，但需要更多工作。你必须非常熟悉你的数据。通过可视化来考察离群点。<br>&emsp;&emsp;<br>猜测每一列数据的单变量分布。<br>&emsp;&emsp;<br>列数据看起来像偏斜的高斯分布吗？考虑用Box-Cox变换调整偏态。<br>&emsp;&emsp;<br>列数据看起来像指数分布吗？考虑用对数变换。<br>&emsp;&emsp;<br>列数据看起来有一些特征，但是它们被一些明显的东西遮盖了，尝试取平方或者开平方根来转换数据<br>&emsp;&emsp;<br>你能离散化一个特征或者以某种方式组合特征，来更好地突出一些特征吗？<br>&emsp;&emsp;<br>依靠你的直觉，尝试以下方法。<br>&emsp;&emsp;<br>你能利用类似PCA的投影方法来预处理数据吗？<br>&emsp;&emsp;<br>你能综合多维特征至一个单一数值(特征)吗？<br>&emsp;&emsp;<br>你能用一个新的布尔标签去发现问题中存在一些有趣的方面吗？<br>&emsp;&emsp;<br>你能用其他方法探索出目前场景下的其他特殊结构吗？<br>&emsp;&emsp;<br>神经网层擅长特征学习(feature engineering)。它(自己)可以做到这件事。但是如果你能更好的发现问题到网络中的结构，神经网层会学习地更快。你可以对你的数据就不同的转换方式进行抽样调查，或者尝试特定的性质，来看哪些有用，哪些没用。  </p><p>&emsp;&emsp;<br>5）特征选择<br>&emsp;&emsp;<br>一般说来，神经网络对不相关的特征是具有鲁棒的(校对注：即不相关的特征不会很大影响神经网络的训练和效果)。它们会用近似于0的权重来弱化那些没有预测能力的特征的贡献。</p><p>&emsp;&emsp;<br>尽管如此，这些无关的数据特征，在训练周期依旧要耗费大量的资源。所以你能去除数据里的一些特征吗？<br>&emsp;&emsp;<br>有许多特征选择的方法和特征重要性的方法，这些方法能够给你提供思路，哪些特征该保留，哪些特征该剔除。最简单的方式就是对比所有特征和部分特征的效果。同样的，如果你有时间，我建议在同一个网络中尝试选择不同的视角来看待你的问题，评估它们，来看看分别有怎样的性能。<br>&emsp;&emsp;<br>或许你利用更少的特征就能达到同等甚至更好的性能。而且，这将使模型变得更快！<br>&emsp;&emsp;<br>或许所有的特征选择方法都剔除了同样的特征子集。很好，这些方法在没用的特征上达成了一致。<br>&emsp;&emsp;<br>或许筛选过后的特征子集，能带给特征工程的新思路。<br>&emsp;&emsp;</p><p>&emsp;&emsp;<br>6）重新架构你的问题<br>&emsp;&emsp;<br>有时候要试试从你当前定义的问题中跳出来，想想你所收集到的观察值是定义你问题的唯一方式吗？或许存在其他方法。或许其他构建问题的方式能够更好地揭示待学习问题的结构。<br>&emsp;&emsp;<br>我真的很喜欢这个尝试，因为它迫使你打开自己的思路。这确实很难，尤其是当你已经对当前的方法投入了大量的时间和金钱时。<br>&emsp;&emsp;<br>但是咱们这么想想，即使你列出了3-5个可供替代的建构方案，而且最终还是放弃了它们，但这至少说明你对当前的方案更加自信了。<br>&emsp;&emsp;<br>看看能够在一个时间窗（时间周期）内对已有的特征/数据做一个合并。<br>&emsp;&emsp;<br>或许你的分类问题可以成为一个回归问题(有时候是回归到分类)。<br>&emsp;&emsp;<br>或许你的二元输出可以变成softmax输出？<br>&emsp;&emsp;<br>或许你可以转而对子问题进行建模。<br>&emsp;&emsp;<br>仔细思考你的问题，最好在你选定工具之前就考虑用不同方法构建你的问题，因为此时你对解决方案并没有花费太多的投入。除此之外，如果你在某个问题上卡住了，这样一个简单的尝试能释放更多新的想法。  </p><ol start="2"><li>通过算法提升性能  </li></ol><p>&emsp;&emsp;<br>机器学习当然是用算法解决问题。<br>&emsp;&emsp;<br>所有的理论和数学都是描绘了应用不同的方法从数据中学习一个决策过程（如果我们这里只讨论预测模型）。<br>&emsp;&emsp;<br>你已经选择了深度学习来解释你的问题。但是这真的是最好的选择吗？在这一节中，我们会在深入到如何最大地发掘你所选择的深度学习方法之前，接触一些算法选择上的思路。  </p><p>下面是一个简要列表：</p><ul><li>对算法进行抽样调查</li><li>借鉴已有文献</li><li>重采样方法</li></ul><p>下面我解释下上面提到的几个方法:</p><p>&emsp;&emsp;<br>1）对算法进行抽样调查<br>&emsp;&emsp;<br>其实你事先无法知道，针对你的问题哪个算法是最优的。如果你知道，你可能就不需要机器学习了。那有没有什么数据(办法)可以证明你选择的方法是正确的？  </p><p>&emsp;&emsp;<br>让我们来解决这个难题。当从所有可能的问题中平均来看各算法的性能时，没有哪个算法能够永远胜过其他算法。所有的算法都是平等的，下面是在no free lunch theorem中的一个总结。 </p><p>&emsp;&emsp;<br>或许你选择的算法不是针对你的问题最优的那个<br>&emsp;&emsp;<br>我们不是在尝试解决所有问题，算法世界中有很多新热的方法，可是它们可能并不是针对你数据集的最优算法。<br>&emsp;&emsp;<br>我的建议是收集(证据)数据指标。接受更好的算法或许存在这一观点，并且给予其他算法在解决你的问题上“公平竞争”的机会。<br>&emsp;&emsp;<br>抽样调查一系列可行的方法，来看看哪些还不错，哪些不理想。<br>&emsp;&emsp;<br>首先尝试评估一些线性方法，例如逻辑回归（logistic regression）和线性判别分析（linear discriminate analysis）。<br>&emsp;&emsp;<br>评估一些树类模型，例如CART， 随机森林（Random Forest）和Gradient Boosting。<br>&emsp;&emsp;<br>评估一些实例方法，例如支持向量机（SVM）和K-近邻（kNN）。<br>&emsp;&emsp;<br>评估一些其他的神经网络方法，例如LVQ, MLP, CNN, LSTM, hybrids等  </p><p>&emsp;&emsp;<br>选取性能最好的算法，然后通过进一步的调参和数据准备来提升。尤其注意对比一下深度学习和其他常规机器学习方法，对上述结果进行排名，比较他们的优劣。</p><p>&emsp;&emsp;<br>很多时候你会发现在你的问题上可以不用深度学习，而是使用一些更简单，训练速度更快，甚至是更容易理解的算法。</p><p>&emsp;&emsp;<br>2）借鉴已有文献<br>&emsp;&emsp;<br>方法选择的一个捷径是借鉴已有的文献资料。可能有人已经研究过与你的问题相关的问题，你可以看看他们用的什么方法。<br>&emsp;&emsp;<br>你可以阅读论文，书籍，博客，问答网站，教程，以及任何能在谷歌搜索到的东西。<br>&emsp;&emsp;<br>写下所有的想法，然后用你的方式把他们研究一遍。<br>&emsp;&emsp;<br>这不是复制别人的研究，而是启发你想出新的想法，一些你从没想到但是却有可能带来性能提升的想法。<br>&emsp;&emsp;<br>发表的研究通常都是非常赞的。世界上有非常多聪明的人，写了很多有趣的东西。你应当好好挖掘这个“图书馆”，找到你想要的东西。  </p><p>&emsp;&emsp;<br>3）重采样方法<br>&emsp;&emsp;<br>你必须知道你的模型效果如何。你对模型性能的估计可靠吗？<br>&emsp;&emsp;<br>深度学习模型在训练阶段非常缓慢。这通常意味着，我们无法用一些常用的方法，例如k层交叉验证，去估计模型的性能。</p><p>&emsp;&emsp;<br>或许你在使用一个简单的训练集／测试集分割，这是常规套路。如果是这样，你需要确保这种分割针对你的问题具有代表性。单变量统计和可视化是一个好的开始。</p><p>&emsp;&emsp;<br>或许你能利用硬件来加速估计的过程。例如，如果你有集群或者AWS云端服务（Amazon Web Services）账号，你可以并行地训练n个模型，然后获取结果的均值和标准差来得到更鲁棒的估计。</p><p>&emsp;&emsp;<br>或许你可以利用hold-out验证方法来了解模型在训练后的性能（这在早停法（early stopping）中很有用，后面会讲到）。</p><p>&emsp;&emsp;<br>或许你可以先隐藏一个完全没用过的验证集，等到你已经完成模型选择之后再使用它。<br>&emsp;&emsp;<br>而有时候另外的方式，或许你能够让数据集变得更小，以及使用更强的重采样方法。<br>&emsp;&emsp;<br>有些情况下你会发现在训练集的一部分样本上训练得到的模型的性能，和在整个数据集上训练得到的模型的性能有很强的相关性。也许你可以先在小数据集上完成模型选择和参数调优，然后再将最终的方法扩展到全部数据集上。</p><p>&emsp;&emsp;<br>或许你可以用某些方式限制数据集，只取一部分样本，然后用它进行全部的建模过程。</p><ol start="3"><li>通过算法调参提升性能</li></ol><p>&emsp;&emsp;<br>这通常是工作的关键所在。你经常可以通过抽样调查快速地发现一个或两个性能优秀的算法。但是如果想得到最优的算法可能需要几天，几周，甚至几个月。</p><p>为了获得更优的模型，以下是对神经网络算法进行参数调优的几点思路：  </p><ul><li>诊断（Diagnostics）  </li><li>权重初始化（Weight Initialization）  </li><li>学习速率（Learning Rate）  </li><li>激活函数  </li><li>网络拓扑（Network Topology）  </li><li>批次和周期（Batches and Epochs）  </li><li>正则化  </li><li>优化和损失  </li><li>早停法</li></ul><p>&emsp;&emsp;<br>你可能需要训练一个给定“参数配置”的神经网络模型很多次（3-10次甚至更多），才能得到一个估计性能不错的参数配置。这一点几乎适用于这一节中你能够调参的所有方面。</p><p>&emsp;&emsp;<br>1）诊断<br>&emsp;&emsp;<br>如果你能知道为什么你的模型性能不再提高了，你就能获得拥有更好性能的模型。<br>&emsp;&emsp;<br>你的模型是过拟合还是欠拟合？永远牢记这个问题。永远。<br>&emsp;&emsp;<br>模型总是会遇到过拟合或者欠拟合，只是程度不同罢了。一个快速了解模型学习行为的方法是，在每个周期，评估模型在训练集和验证集上的表现，并作出图表。</p><p>&emsp;&emsp;<br>如果训练集上的模型总是优于验证集上的模型，你可能遇到了过拟合，你可以使用诸如正则化的方法。</p><p>&emsp;&emsp;<br>如果训练集和验证集上的模型都很差，你可能遇到了欠拟合，你可以提升网络的容量，以及训练更多或者更久。</p><p>&emsp;&emsp;<br>如果有一个拐点存在，在那之后训练集上的模型开始优于验证集上的模型，你可能需要使用早停法。<br>&emsp;&emsp;<br>经常画一画这些图表，学习它们来了解不同的方法，你能够提升模型的性能。这些图表可能是你能创造的最有价值的（模型状态）诊断信息。<br>&emsp;&emsp;<br>另一个有用的诊断是网络模型判定对和判定错的观察值。<br>&emsp;&emsp;<br>对于难以训练的样本，或许你需要更多的数据。<br>&emsp;&emsp;<br>或许你应该剔除训练集中易于建模的多余的样本。<br>&emsp;&emsp;<br>也许可以尝试对训练集划分不同的区域，在特定区域中用更专长的模型。</p><p>&emsp;&emsp;<br>2）权重初始化<br>&emsp;&emsp;<br>经验法则通常是：用小的随机数进行初始化。<br>&emsp;&emsp;<br>在实践中，这可能依旧效果不错，但是对于你的网络来说是最佳的吗？对于不同的激活函数也有一些启发式的初始化方法，但是在实践应用中并没有太多不同。<br>&emsp;&emsp;<br>固定你的网络，然后尝试多种初始化方式。<br>&emsp;&emsp;<br>记住，权重是你的模型真正的参数，你需要找到他们。有很多组权重都能有不错的性能表现，但我们要尽量找到最好的。  </p><p>&emsp;&emsp;<br>尝试所有不同的初始化方法，考察是否有一种方法在其他情况不变的情况下(效果)更优。</p><p>&emsp;&emsp;<br>尝试用无监督的方法，例如自动编码（autoencoder），来进行预先学习。</p><p>&emsp;&emsp;<br>尝试使用一个已经存在的模型，只是针对你的问题重新训练输入层和输出层（迁移学习（transfer learning））<br>&emsp;&emsp;<br>需要提醒的一点是，改变权重初始化方法和激活函数，甚至优化函数/损失函数紧密相关。</p><p>&emsp;&emsp;<br>3）学习率<br>&emsp;&emsp;<br>调整学习率很多时候也是行之有效的时段。  </p><p>以下是可供探索的一些想法：</p><p>&emsp;&emsp;<br>实验很大和很小的学习率</p><p>&emsp;&emsp;<br>格点搜索文献里常见的学习速率值，考察你能学习多深的网络。</p><p>&emsp;&emsp;<br>尝试随周期递减的学习率</p><p>&emsp;&emsp;<br>尝试经过固定周期数后按比例减小的学习率。</p><p>&emsp;&emsp;<br>尝试增加一个动量项（momentum term），然后对学习速率和动量同时进行格点搜索。 </p><p>&emsp;&emsp;<br>越大的网络需要越多的训练，反之亦然。如果你添加了太多的神经元和层数，适当提升你的学习速率。同时学习率需要和训练周期，batch size大小以及优化方法联系在一起考虑。  </p><p>&emsp;&emsp;<br>4）激活函数<br>&emsp;&emsp;<br>你或许应该使用修正激活函数（rectifier activation functions）。他们也许能提供更好的性能。<br>&emsp;&emsp;<br>在这之前，最早的激活函数是sigmoid和tanh，之后是softmax, 线性激活函数，或者输出层上的sigmoid函数。我不建议尝试更多的激活函数，除非你知道你自己在干什么。<br>&emsp;&emsp;<br>尝试全部三种激活函数，并且重缩放你的数据以满足激活函数的边界。<br>&emsp;&emsp;<br>显然，你想要为输出的形式选择正确的传递函数，但是可以考虑一下探索不同表示。例如，把在二元分类问题上使用的sigmoid函数切换到回归问题上使用的线性函数，然后后置处理你的输出。这可能需要改变损失函数使之更合适。详情参阅数据转换那一节。</p><p>&emsp;&emsp;<br>5）网络拓扑<br>&emsp;&emsp;<br>网络结构的改变能带来好处。<br>&emsp;&emsp;<br>你需要多少层以及多少个神经元？抱歉没有人知道。不要问这种问题…<br>&emsp;&emsp;<br>那怎么找到适用你的问题的配置呢？去实验吧。  </p><p>&emsp;&emsp;<br>尝试一个隐藏层和许多神经元（广度模型）。</p><p>&emsp;&emsp;<br>尝试一个深的网络，但是每层只有很少的神经元（深度模型）。</p><p>&emsp;&emsp;<br>尝试上述两种方法的组合。</p><p>&emsp;&emsp;<br>借鉴研究问题与你的类似的论文里面的结构。</p><p>&emsp;&emsp;<br>尝试拓扑模式（扇出（fan out）然后扇入（fan in））和书籍论文里的经验法则（下有链接）  </p><p>&emsp;&emsp;<br>选择总是很困难的。通常说来越大的网络有越强的代表能力，或许你需要它。越多的层数可以提供更强的从数据中学到的抽象特征的能力。或许需要它。<br>&emsp;&emsp;<br>深层的神经网络需要更多的训练，无论是训练周期还是学习率，都应该相应地进行调整。</p><p>&emsp;&emsp;<br>6）Batches和周期<br>&emsp;&emsp;<br>batch size大小会决定最后的梯度，以及更新权重的频度。一个周期(epoch)指的是神经网络看一遍全部训练数据的过程。<br>&emsp;&emsp;<br>你是否已经试验了不同的批次batch size和周期数？ 之前，我们已经讨论了学习率，网络大小和周期之间的关系。<br>&emsp;&emsp;<br>在很深的网络结构里你会经常看到：小的batch size配以大的训练周期。<br>&emsp;&emsp;<br>下面这些或许能有助于你的问题，也或许不能。你要在自己的数据上尝试和观察。</p><p>&emsp;&emsp;<br>尝试选取与训练数据同大小的batch size，但注意一下内存（批次学习（batch learning））</p><p>&emsp;&emsp;<br>尝试选取1作为batch size（在线学习（online learning））</p><p>&emsp;&emsp;<br>尝试用格点搜索不同的小的batch size（8，16，32，…）</p><p>&emsp;&emsp;<br>分别尝试训练少量周期和大量周期。</p><p>&emsp;&emsp;<br>考虑一个接近无穷的周期值(持续训练)，去记录到目前为止能得到的最佳的模型。<br>&emsp;&emsp;<br>一些网络结构对batch size更敏感。我知道多层感知器（Multilayer Perceptrons）通常对batch size是鲁棒的，而LSTM和CNNs比较敏感，但是这只是一个说法（仅供参考）。  </p><p>&emsp;&emsp;<br>7）正则化<br>正则化是一个避免模型在训练集上过拟合的好方法。<br>&emsp;&emsp;<br>神经网络里最新最热的正则化技术是dropout方法，你是否试过？dropout方法在训练阶段随机地跳过一些神经元，驱动这一层其他的神经元去捕捉松弛。简单而有效。你可以从dropout方法开始。  </p><p>&emsp;&emsp;<br>格点搜索不同的丢失比例。</p><p>&emsp;&emsp;<br>分别在输入，隐藏层和输出层中试验dropout方法</p><p>&emsp;&emsp;<br>dropout方法也有一些拓展，比如你也可以尝试drop connect方法。</p><p>&emsp;&emsp;<br>也可以尝试其他更传统的神经网络正则化方法，例如：</p><p>&emsp;&emsp;<br>权重衰减（Weight decay）去惩罚大的权重</p><p>&emsp;&emsp;<br>激活约束（Activation constraint）去惩罚大的激活值</p><p>&emsp;&emsp;<br>你也可以试验惩罚不同的方面，或者使用不同种类的惩罚/正则化（L1, L2, 或者二者同时）</p><p>&emsp;&emsp;<br>8）优化和损失<br>&emsp;&emsp;<br>最常见是应用随机梯度下降法（stochastic gradient descent），但是现在有非常多的优化器。你试验过不同的优化(方法)过程吗？随机梯度下降法是默认的选择。先好好利用它，配以不同的学习率和动量。  </p><p>&emsp;&emsp;<br>许多更高级的优化方法有更多的参数，更复杂，也有更快的收敛速度。 好与坏，是不是需要用，取决于你的问题。  </p><p>&emsp;&emsp;<br>为了更好的利用好一个给定的(优化)方法，你真的需要弄明白每个参数的意义，然后针对你的问题通过格点搜索不同的的取值。困难，消耗时间，但是值得。  </p><p>&emsp;&emsp;<br>我发现了一些更新更流行的方法，它们可以收敛的更快，并且针对一个给定网络的容量提供了一个快速了解的方式，例如：</p><ul><li>ADAM</li><li>RMSprop</li></ul><p>&emsp;&emsp;<br>你还可以探索其他优化算法，例如，更传统的（Levenberg-Marquardt）和不那么传统的（genetic algorithms）。其他方法能够为随机梯度下降法和其他类似方法提供好的出发点去改进。  </p><p>&emsp;&emsp;<br>要被优化的损失函数与你要解决的问题高度相关。然而，你通常还是有一些余地（可以做一些微调，例如回归问题中的均方误（MSE）和平均绝对误差（MAE）等），有时候变换损失函数还有可能获得小的性能提升，这取决于你输出数据的规模和使用的激活函数。  </p><p>&emsp;&emsp;<br>9）Early Stopping/早停法<br>&emsp;&emsp;<br>一旦训练过程中出现(验证集)性能开始下降，你可以停止训练与学习。这可以节省很多时间，而且甚至可以让你使用更详尽的重采样方法来评估你的模型的性能。  </p><p>&emsp;&emsp;<br>早停法是一种用来避免模型在训练数据上的过拟合的正则化方式，它需要你监测模型在训练集以及验证集上每一轮的效果。一旦验证集上的模型性能开始下降，训练就可以停止。</p><p>&emsp;&emsp;<br>如果某个条件满足（衡量准确率的损失），你还可以设置检查点(Checkpointing)来储存模型，使得模型能够继续学习。检查点使你能够早停而非真正的停止训练，因此在最后，你将有一些模型可供选择。</p><ol start="4"><li>通过嵌套模型提升性能  </li></ol><p>&emsp;&emsp;<br>你可以组合多个模型的预测能力。刚才提到了算法调参可以提高最后的性能，调参之后这是下一个可以提升的大领域。<br>&emsp;&emsp;<br>事实上，你可以经常通过组合多个“足够好的”模型来得到优秀的预测能力，而不是通过组合多个高度调参的（脆弱的）模型。  </p><p>你可以考虑以下三个方面的嵌套方式：</p><ul><li>组合模型</li><li>组合视角</li><li>堆叠（Stacking）</li></ul><p>&emsp;&emsp;<br>1）组合模型<br>&emsp;&emsp;<br>有时候我们干脆不做模型选择，而是直接组合它们。<br>&emsp;&emsp;<br>如果你有多个不同的深度学习模型，在你的研究问题上每一个都表现的还不错，你可以通过取它们预测的平均值来进行组合。<br>&emsp;&emsp;<br>模型差异越大，最终效果越好。例如，你可以应用非常不同的网络拓扑或者不同的技术。<br>&emsp;&emsp;<br>如果每个模型都效果不错但是不同的方法/方式，嵌套后的预测能力将更加鲁棒。<br>&emsp;&emsp;<br>每一次你训练网络，你初始化不同的权重，然后它会收敛到不同的最终权重。你可以多次重复这一过程去得到很多网络，然后把这些网络的预测值组合在一起。<br>&emsp;&emsp;<br>它们的预测将会高度相关，但是在那些难以预测的特征上，它会给你一个意外的小提升。</p><p>&emsp;&emsp;<br>2）组合视角<br>&emsp;&emsp;<br>同上述类似，但是从不同视角重构你的问题，训练你的模型。<br>&emsp;&emsp;<br>同样，目标得到的是效果不错但是不同的模型（例如，不相关的预测）。得到不同的模型的方法，你可以依赖我们在数据那一小节中罗列的那些非常不同的放缩和转换方法。<br>&emsp;&emsp;<br>你用来训练模型的转换方法越不同，你构建问题的方式越不同，你的结果被提升的程度就越高。<br>&emsp;&emsp;<br>简单使用预测的均值将会是一个好的开始。</p><p>&emsp;&emsp;<br>3）stacking/堆叠<br>&emsp;&emsp;<br>你还可以学习如何最佳地组合多个模型的预测。这称作堆叠泛化（stacked generalization），或者简短来说就叫堆叠。<br>&emsp;&emsp;<br>通常上，你使用简单线性回归方法就可以得到比取预测平均更好的结果，像正则化的回归（regularized regression），就会学习如何给不同的预测模型赋权重。基线模型是通过取子模型的预测均值得到的，但是应用学习了权重的模型会提升性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>后端架构选型、离线及实时计算</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0_%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E9%80%89%E5%9E%8B%E3%80%81%E7%A6%BB%E7%BA%BF%E5%8F%8A%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97/"/>
    <id>https://leesen998.github.io/2016/12/20/第十八章_后端架构选型、离线及实时计算/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:50:10.432Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><pre><code>Markdown Revision 1;Date: 2018/11/11Editor: 梁志成Contact: superzhicheng@foxmail.com</code></pre><h2 id="18-1-为什么需要分布式计算？"><a href="#18-1-为什么需要分布式计算？" class="headerlink" title="18.1 为什么需要分布式计算？"></a>18.1 为什么需要分布式计算？</h2><p>&emsp;&emsp;在这个数据爆炸的时代，产生的数据量不断地在攀升，从GB,TB,PB,ZB.挖掘其中数据的价值也是企业在不断地追求的终极目标。但是要想对海量的数据进行挖掘，首先要考虑的就是海量数据的存储问题，比如Tb量级的数据。</p><p>&emsp;&emsp;谈到数据的存储，则不得不说的是磁盘的数据读写速度问题。早在上个世纪90年代初期，普通硬盘的可以存储的容量大概是1G左右，硬盘的读取速度大概为4.4MB/s.读取一张硬盘大概需要5分钟时间，但是如今硬盘的容量都在1TB左右了,相比扩展了近千倍。但是硬盘的读取速度大概是100MB/s。读完一个硬盘所需要的时间大概是2.5个小时。所以如果是基于TB级别的数据进行分析的话，光硬盘读取完数据都要好几天了，更谈不上计算分析了。那么该如何处理大数据的存储，计算分析呢？</p><p>&emsp;&emsp;一个很简单的减少数据读写时间的方法就是同时从多个硬盘上读写数据，比如，如果我们有100个硬盘，每个硬盘存储1%的数据 ，并行读取，那么不到两分钟就可以完成之前需要2.5小时的数据读写任务了。这就是大数据中的分布式存储的模型。当然实现分布式存储还需要解决很多问题，比如硬件故障的问题，使用多台主机进行分布式存储时，若主机故障，会出现数据丢失的问题，所以有了副本机制：系统中保存数据的副本。一旦有系统发生故障，就可以使用另外的副本进行替换（著名的RAID冗余磁盘阵列就是按这个原理实现的）。其次比如一个很大的文件如何进行拆分存储，读取拆分以后的文件如何进行校验都是要考虑的问题。比如我们使用Hadoop中的HDFS也面临这个问题，只是框架给我们实现了这些问题的解决办法，开发中开发者不用考虑这些问题，底层框架已经实现了封装。</p><p>&emsp;&emsp;同样假如有一个10TB的文件，我们要统计其中某个关键字的出现次数，传统的做法是遍历整个文件，然后统计出关键字的出现次数，这样效率会特别特别低。基于分布式存储以后，数据被分布式存储在不同的服务器上，那么我们就可以使用分布式计算框架（比如MapReduce,Spark等）来进行并行计算（或者说是分布式计算），即：每个服务器上分别统计自己存储的数据中关键字出现的次数，最后进行一次汇总，那么假如数据分布在100台服务器上，即同时100台服务器同时进行关键字统计工作，效率一下子可以提高几十倍。</p><h2 id="18-2-目前有哪些深度学习分布式计算框架？"><a href="#18-2-目前有哪些深度学习分布式计算框架？" class="headerlink" title="18.2 目前有哪些深度学习分布式计算框架？"></a>18.2 目前有哪些深度学习分布式计算框架？</h2><h3 id="18-2-1-PaddlePaddle"><a href="#18-2-1-PaddlePaddle" class="headerlink" title="18.2.1 PaddlePaddle"></a>18.2.1 PaddlePaddle</h3><p>&emsp;&emsp;PaddlePaddle【1】是百度开源的一个深度学习平台。PaddlePaddle为深度学习研究人员提供了丰富的API，可以轻松地完成神经网络配置，模型训练等任务。<br>官方文档中简易介绍了如何使用框架在</p><ul><li>线性回归</li><li>识别数字</li><li>图像分类</li><li>词向量</li><li>个性化推荐</li><li>情感分析</li><li>语义角色标注</li><li>机器翻译</li></ul><p>等方面的应用</p><p>&emsp;&emsp;Github地址：<a href="https://github.com/PaddlePaddle/Paddle" target="_blank" rel="noopener">https://github.com/PaddlePaddle/Paddle</a></p><h3 id="18-2-2-Deeplearning4j"><a href="#18-2-2-Deeplearning4j" class="headerlink" title="18.2.2 Deeplearning4j"></a>18.2.2 Deeplearning4j</h3><p>&emsp;&emsp;DeepLearning4J（DL4J）【2】是一套基于Java语言的神经网络工具包，可以构建、定型和部署神经网络。DL4J与Hadoop和Spark集成，支持分布式CPU和GPU。</p><p>&emsp;&emsp;Deeplearning4j包括了分布式、多线程的深度学习框架，以及普通的单线程深度学习框架。定型过程以集群进行，也就是说，Deeplearning4j可以快速处理大量数据。Deeplearning4j在开放堆栈中作为模块组件的功能，使之成为为微服务架构打造的深度学习框架。</p><p>&emsp;&emsp;Deeplearning4j从各类浅层网络出发，设计深层神经网络。这一灵活性使用户可以根据所需，在分布式、生产级、能够在分布式CPU或GPU的基础上与Spark和Hadoop协同工作的框架内，整合受限玻尔兹曼机、其他自动编码器、卷积网络或递归网络。</p><p>&emsp;&emsp;Deeplearning4j在已建立的各个库及其在系统整体中的所处位置</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-2.png" alt="Deeplearning4j"></p><p>&emsp;&emsp;Github地址：<a href="https://github.com/deeplearning4j/deeplearning4j" target="_blank" rel="noopener">https://github.com/deeplearning4j/deeplearning4j</a></p><h3 id="18-2-3-Mahout"><a href="#18-2-3-Mahout" class="headerlink" title="18.2.3 Mahout"></a>18.2.3 Mahout</h3><p>&emsp;&emsp;Mahout【3】是基于Hadoop的机器学习和数据挖掘的一个分布式框架。Mahout用MapReduce实现了部分数据挖掘算法，解决了并行挖掘的问题。</p><p>&emsp;&emsp;Mahout包含许多实现，包括聚类、分类、推荐过滤、频繁子项挖掘等。</p><p>&emsp;&emsp;Mahout算法库：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-3-1.png" alt="Mahout"></p><p>&emsp;&emsp;Mahout应用场景：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-3-2.png" alt="Mahout"></p><p>&emsp;&emsp;Github地址：<a href="https://github.com/apache/mahout" target="_blank" rel="noopener">https://github.com/apache/mahout</a></p><h3 id="18-2-4-Spark-MLllib"><a href="#18-2-4-Spark-MLllib" class="headerlink" title="18.2.4 Spark MLllib"></a>18.2.4 Spark MLllib</h3><p>&emsp;&emsp;MLlib(Machine Learnig lib) 【4】是Spark对常用的机器学习算法的实现库，同时包括相关的测试和数据生成器。</p><p>&emsp;&emsp;MLlib是MLBase一部分，其中MLBase分为四部分：MLlib、MLI、ML Optimizer和MLRuntime。</p><ul><li>ML Optimizer会选择它认为最适合的已经在内部实现好了的机器学习算法和相关参数，来处理用户输入的数据，并返回模型或别的帮助分析的结果；</li><li>MLI 是一个进行特征抽取和高级ML编程抽象的算法实现的API或平台；</li><li>MLlib是Spark实现一些常见的机器学习算法和实用程序，包括分类、回归、聚类、协同过滤、降维以及底层优化，该算法可以进行可扩充； MLRuntime 基于Spark计算框架，将Spark的分布式计算应用到机器学习领域。</li></ul><p>&emsp;&emsp;MLlib主要包含三个部分：</p><ul><li>底层基础：包括Spark的运行库、矩阵库和向量库</li><li>算法库：包含广义线性模型、推荐系统、聚类、决策树和评估的算法</li><li>实用程序：包括测试数据的生成、外部数据的读入等功能</li></ul><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-4-1.png" alt="架构图"></p><center>架构图</center><p>&emsp;&emsp;MLlib目前支持4种常见的机器学习问题: 分类、回归、聚类和协同过滤，MLlib在Spark整个生态系统中的位置如图下图所示。</p><h3 id="18-2-5-Ray"><a href="#18-2-5-Ray" class="headerlink" title="18.2.5 Ray"></a>18.2.5 Ray</h3><p>&emsp;&emsp;Ray【5】是加州大学伯克利分校实时智能安全执行实验室(RISELab)的研究人员针对机器学习领域开发的一种新的分布式计算框架，该框架旨在让基于Python的机器学习和深度学习工作负载能够实时执行，并具有类似消息传递接口(MPI)的性能和细粒度。</p><p>&emsp;&emsp;增强学习的场景，按照原理定义，因为没有预先可用的静态标签信息，所以通常需要引入实际的目标系统（为了加快训练，往往是目标系统的模拟环境）来获取反馈信息，用做损失/收益判断，进而完成整个训练过程的闭环反馈。典型的步骤是通过观察特定目标系统的状态，收集反馈信息，判断收益，用这些信息来调整参数，训练模型，并根据新的训练结果产出可用于调整目标系统的行为Action，输出到目标系统，进而影响目标系统状态变化，完成闭环，如此反复迭代，最终目标是追求某种收益的最大化（比如对AlphoGo来说，收益是赢得一盘围棋的比赛）。</p><p>&emsp;&emsp;在这个过程中，一方面，模拟目标系统，收集状态和反馈信息，判断收益，训练参数，生成Action等等行为可能涉及大量的任务和计算（为了选择最佳Action，可能要并发模拟众多可能的行为）。而这些行为本身可能也是千差万别的异构的任务，任务执行的时间也可能长短不一，执行过程有些可能要求同步，也有些可能更适合异步。</p><p>&emsp;&emsp;另一方面，整个任务流程的DAG图也可能是动态变化的，系统往往可能需要根据前一个环节的结果，调整下一个环节的行为参数或者流程。这种调整，可能是目标系统的需要（比如在自动驾驶过程中遇到行人了，那么我们可能需要模拟计算刹车的距离来判断该采取的行动是刹车还是拐弯，而平时可能不需要这个环节），也可能是增强学习特定训练算法的需要（比如根据多个并行训练的模型的当前收益，调整模型超参数，替换模型等等）。</p><p>&emsp;&emsp;此外，由于所涉及到的目标系统可能是具体的，现实物理世界中的系统，所以对时效性也可能是有强要求的。举个例子，比如你想要实现的系统是用来控制机器人行走，或者是用来打视频游戏的。那么整个闭环反馈流程就需要在特定的时间限制内完成（比如毫秒级别）。</p><p>&emsp;&emsp;总结来说，就是增强学习的场景，对分布式计算框架的任务调度延迟，吞吐量和动态修改DAG图的能力都可能有很高的要求。按照官方的设计目标，Ray需要支持异构计算任务，动态计算链路，毫秒级别延迟和每秒调度百万级别任务的能力。</p><p>&emsp;&emsp;Ray的目标问题，主要是在类似增强学习这样的场景中所遇到的工程问题。那么增强学习的场景和普通的机器学习，深度学习的场景又有什么不同呢？简单来说，就是对整个处理链路流程的时效性和灵活性有更高的要求。</p><p>Ray框架优点</p><ul><li>海量任务调度能力</li><li>毫秒级别的延迟</li><li>异构任务的支持</li><li>任务拓扑图动态修改的能力</li></ul><p>&emsp;&emsp;Ray没有采用中心任务调度的方案，而是采用了类似层级（hierarchy）调度的方案，除了一个全局的中心调度服务节点（实际上这个中心调度节点也是可以水平拓展的），任务的调度也可以在具体的执行任务的工作节点上，由本地调度服务来管理和执行。<br>与传统的层级调度方案，至上而下分配调度任务的方式不同的是，Ray采用了至下而上的调度策略。也就是说，任务调度的发起，并不是先提交给全局的中心调度器统筹规划以后再分发给次级调度器的。而是由任务执行节点直接提交给本地的调度器，本地的调度器如果能满足该任务的调度需求就直接完成调度请求，在无法满足的情况下，才会提交给全局调度器，由全局调度器协调转发给有能力满足需求的另外一个节点上的本地调度器去调度执行。</p><p>&emsp;&emsp;架构设计一方面减少了跨节点的RPC开销，另一方面也能规避中心节点的瓶颈问题。当然缺点也不是没有，由于缺乏全局的任务视图，无法进行全局规划，因此任务的拓扑逻辑结构也就未必是最优的了。</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-5-1.png" alt="架构图"></p><center>架构图</center><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-5-2.png" alt="任务调度图"></p><center>任务调度图</center><p>&emsp;&emsp;Ray架构现状：</p><ul><li>API层以上 的部分还比较薄弱，Core模块核心逻辑估需要时间打磨。</li><li>国内目前除了蚂蚁金服和RISELab有针对性的合作以外，关注程度还很低，没有实际的应用实例看到，整体来说还处于比较早期的框架构建阶段。</li></ul><p>&emsp;&emsp;Github地址：<a href="https://github.com/ray-project/ray" target="_blank" rel="noopener">https://github.com/ray-project/ray</a></p><h3 id="18-2-6-Spark-stream"><a href="#18-2-6-Spark-stream" class="headerlink" title="18.2.6 Spark stream"></a>18.2.6 Spark stream</h3><p>&emsp;&emsp;随着大数据的发展，人们对大数据的处理要求也越来越高，原有的批处理框架MapReduce适合离线计算，却无法满足实时性要求较高的业务，如实时推荐、用户行为分析等。 Spark Streaming是建立在Spark上的实时计算框架，通过它提供的丰富的API、基于内存的高速执行引擎，用户可以结合流式、批处理和交互试查询应用。</p><p>&emsp;&emsp;Spark是一个类似于MapReduce的分布式计算框架，其核心是弹性分布式数据集，提供了比MapReduce更丰富的模型，可以在快速在内存中对数据集进行多次迭代，以支持复杂的数据挖掘算法和图形计算算法。Spark Streaming【6】是一种构建在Spark上的实时计算框架，它扩展了Spark处理大规模流式数据的能力。</p><p>&emsp;&emsp;Spark Streaming的优势在于：</p><ul><li>能运行在100+的结点上，并达到秒级延迟。</li><li>使用基于内存的Spark作为执行引擎，具有高效和容错的特性。</li><li>能集成Spark的批处理和交互查询。</li><li>为实现复杂的算法提供和批处理类似的简单接口。</li></ul><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-6-1.png" alt="Spark Streaming架构图"></p><center>Spark Streaming架构图</center><p>&emsp;&emsp;Spark Streaming把实时输入数据流以时间片Δt （如1秒）为单位切分成块。Spark Streaming会把每块数据作为一个RDD，并使用RDD操作处理每一小块数据。每个块都会生成一个Spark Job处理，最终结果也返回多块。</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-6-2.png" alt="Spark Streaming基本原理图"></p><center>Spark Streaming基本原理图</center><p>&emsp;&emsp;正如Spark Streaming最初的目标一样，它通过丰富的API和基于内存的高速计算引擎让用户可以结合流式处理，批处理和交互查询等应用。因此Spark Streaming适合一些需要历史数据和实时数据结合分析的应用场合。当然，对于实时性要求不是特别高的应用也能完全胜任。另外通过RDD的数据重用机制可以得到更高效的容错处理。</p><h3 id="18-2-7-Horovod"><a href="#18-2-7-Horovod" class="headerlink" title="18.2.7 Horovod"></a>18.2.7 Horovod</h3><p>&emsp;&emsp;Horovod【7】 是 Uber 开源的又一个深度学习工具，它的发展吸取了 Facebook「一小时训练 ImageNet 论文」与百度 Ring Allreduce 的优点，可为用户实现分布式训练提供帮助。</p><p>&emsp;&emsp;Horovod 支持通过用于高性能并行计算的低层次接口 – 消息传递接口 (MPI) 进行分布式模型训练。有了 MPI，就可以利用分布式 Kubernetes 集群来训练 TensorFlow 和 PyTorch 模型。</p><p>&emsp;&emsp;分布式 TensorFlow 的参数服务器模型（parameter server paradigm）通常需要对大量样板代码进行认真的实现。但是 Horovod 仅需要几行。下面是一个分布式 TensorFlow 项目使用 Horovod 的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import  tensorflow as tf</span><br><span class="line">import horovod.tensorflow as hvd</span><br><span class="line"># Initialize Horovod</span><br><span class="line">hvd.init()</span><br><span class="line"># Pin GPU to be used to process local rank (one GPU per process)</span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.visible_device_list = str(hvd.local_rank())</span><br><span class="line"># Build model…</span><br><span class="line">loss = …</span><br><span class="line">opt = tf.train.AdagradOptimizer(0.01)</span><br><span class="line"># Add Horovod Distributed Optimizer</span><br><span class="line">opt = hvd.DistributedOptimizer(opt)</span><br><span class="line"># Add hook to broadcast variables from rank 0 to all other processes during</span><br><span class="line"># initialization.</span><br><span class="line">hooks = [hvd.BroadcastGlobalVariablesHook(0)]</span><br><span class="line"># Make training operation</span><br><span class="line">train_op = opt.minimize(loss)</span><br><span class="line"># The MonitoredTrainingSession takes care of session initialization,</span><br><span class="line"># restoring from a checkpoint, saving to a checkpoint, and closing when done</span><br><span class="line"># or an error occurs.</span><br><span class="line">with tf.train.MonitoredTrainingSession(checkpoint_dir=“/tmp/train_logs”,</span><br><span class="line">                                      config=config,</span><br><span class="line">                                      hooks=hooks) as mon_sess:</span><br><span class="line"> while not mon_sess.should_stop():</span><br><span class="line">   # Perform synchronous training.</span><br><span class="line">   mon_sess.run(train_op)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在该示例中，粗体文字指进行单个 GPU 分布式项目时必须做的改变：</p><ul><li>hvd.init() 初始化 Horovod。</li><li>config.gpu_options.visible_device_list = str(hvd.local_rank()) 向每个 TensorFlow 流程分配一个 GPU。</li><li>opt=hvd.DistributedOptimizer(opt) 使用 Horovod 优化器包裹每一个常规 TensorFlow 优化器，Horovod 优化器使用 ring-allreduce 平均梯度。</li><li>hvd.BroadcastGlobalVariablesHook(0) 将变量从第一个流程向其他流程传播，以实现一致性初始化。如果该项目无法使用 MonitoredTrainingSession，则用户可以运行 hvd.broadcast_global_variables(0)。</li></ul><p>&emsp;&emsp;之后，可以使用 mpirun 命令使该项目的多个拷贝在多个服务器中运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mpirun -np 16 -x LD_LIBRARY_PATH -H </span><br><span class="line">server1:4,server2:4,server3:4,server4:4 python train.py</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;mpirun 命令向四个节点分布 train.py，然后在每个节点的四个 GPU 上运行 train.py。</p><p>&emsp;&emsp;Github地址：<a href="https://github.com/uber/horovod" target="_blank" rel="noopener">https://github.com/uber/horovod</a></p><h3 id="18-2-8-BigDL"><a href="#18-2-8-BigDL" class="headerlink" title="18.2.8 BigDL"></a>18.2.8 BigDL</h3><p>&emsp;&emsp;BigDL【9】是一种基于Apache Spark的分布式深度学习框架。它可以无缝的直接运行在现有的Apache Spark和Hadoop集群之上。BigDL的设计吸取了Torch框架许多方面的知识，为深度学习提供了全面的支持；包括数值计算和高级神经网络；借助现有的Spark集群来运行深度学习计算，并简化存储在Hadoop中的大数据集的数据加载。</p><p>&emsp;&emsp;BigDL优点：</p><ul><li>丰富的深度学习支持。模拟Torch之后，BigDL为深入学习提供全面支持，包括数字计算（通过Tensor）和高级神经网络 ; 此外，用户可以使用BigDL将预先训练好的Caffe或Torch模型加载到Spark程序中。</li><li>极高的性能。为了实现高性能，BigDL在每个Spark任务中使用英特尔MKL和多线程编程。因此，在单节点Xeon（即与主流GPU 相当）上，它比开箱即用开源Caffe，Torch或TensorFlow快了数量级。</li><li>有效地横向扩展。BigDL可以通过利用Apache Spark（快速分布式数据处理框架），以及高效实施同步SGD和全面减少Spark的通信，从而有效地扩展到“大数据规模”上的数据分析</li></ul><p>&emsp;&emsp;BigDL缺点：</p><ul><li>对机器要求高 jdk7上运行性能差 在CentOS 6和7上，要将最大用户进程增加到更大的值（例如514585）; 否则，可能会看到错误，如“无法创建新的本机线程”。 </li><li>训练和验证的数据会加载到内存，挤占内存</li></ul><p>&emsp;&emsp;BigDL满足的应用场景：</p><ul><li>直接在Hadoop/Spark框架下使用深度学习进行大数据分析（即将数据存储在HDFS、HBase、Hive等数据库上）；</li><li>在Spark程序中/工作流中加入深度学习功能；</li><li>利用现有的 Hadoop/Spark 集群来运行深度学习程序，然后将代码与其他的应用场景进行动态共享，例如ETL（Extract、Transform、Load，即通常所说的数据抽取）、数据仓库（data warehouse）、功能引擎、经典机器学习、图表分析等。</li></ul><h3 id="18-2-9-Petastorm"><a href="#18-2-9-Petastorm" class="headerlink" title="18.2.9 Petastorm"></a>18.2.9 Petastorm</h3><p>&emsp;&emsp;Petastorm是一个由 Uber ATG 开发的开源数据访问库。这个库可以直接基于数 TB Parquet 格式的数据集进行单机或分布式训练和深度学习模型评估。Petastorm 支持基于 Python 的机器学习框架，如 Tensorflow、Pytorch 和 PySpark，也可以直接用在 Python 代码中。</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-9-1.png" alt="深度学习集群"></p><center>深度学习集群</center><p>&emsp;&emsp;即使是在现代硬件上训练深度模型也很耗时，而且在很多情况下，很有必要在多台机器上分配训练负载。典型的深度学习集群需要执行以下几个步骤：</p><ul><li>一台或多台机器读取集中式或本地数据集。</li><li>每台机器计算损失函数的值，并根据模型参数计算梯度。在这一步通常会使用 GPU。</li><li>通过组合估计的梯度（通常由多台机器以分布式的方式计算得出）来更新模型系数。</li></ul><p>&emsp;&emsp;通常，一个数据集是通过连接多个数据源的记录而生成的。这个由 Apache Spark 的 Python 接口 PySpark 生成的数据集稍后将被用在机器学习训练中。Petastorm 提供了一个简单的功能，使用 Petastorm 特定的元数据对标准的 Parquet 进行了扩展，从而让它可以与 Petastorm 兼容。<br>有了 Petastorm，消费数据就像在 HDFS 或文件系统中创建和迭代读取对象一样简单。Petastorm 使用 PyArrow 来读取 Parquet 文件。</p><p>&emsp;&emsp;将多个数据源组合到单个表格结构中，从而生成数据集。可以多次使用相同的数据集进行模型训练和评估。<br><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-9-2.png" alt="深度学习集群"></p><center>深度学习集群</center><p>&emsp;&emsp;为分布式训练进行分片<br>在分布式训练环境中，每个进程通常负责训练数据的一个子集。一个进程的数据子集与其他进程的数据子集正交。Petastorm 支持将数据集的读时分片转换为正交的样本集。<br><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-9-3.png" alt="Petastorm 将数据集的非重叠子集提供给参与分布式训练的不同机器"></p><center>Petastorm 将数据集的非重叠子集提供给参与分布式训练的不同机器</center><p>&emsp;&emsp;本地缓存<br>Petastorm 支持在本地存储中缓存数据。当网络连接速度较慢或带宽很昂贵时，这会派上用场。<br><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-9-4.png" alt="本地缓存"></p><p>Github地址：<a href="https://github.com/uber/petastorm" target="_blank" rel="noopener">https://github.com/uber/petastorm</a></p><h3 id="18-2-10-TensorFlowOnSpark"><a href="#18-2-10-TensorFlowOnSpark" class="headerlink" title="18.2.10 TensorFlowOnSpark"></a>18.2.10 TensorFlowOnSpark</h3><p>&emsp;&emsp;TensorFlowOnSpark【10】为 Apache Hadoop 和 Apache Spark 集群带来可扩展的深度学习。 通过结合深入学习框架 TensorFlow 和大数据框架 Apache Spark 、Apache Hadoop 的显着特征，TensorFlowOnSpark 能够在 GPU 和 CPU 服务器集群上实现分布式深度学习。</p><p>&emsp;&emsp;满足的应用场景：<br>为了利用TensorFlow在现有的Spark和Hadoop集群上进行深度学习。而不需要为深度学习设置单独的集群。</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-10-1.png" alt="架构图"></p><center>架构图</center><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-2-10-2.png" alt="运行流程图"></p><center>运行流程图</center><p>&emsp;&emsp;优点：</p><ul><li>轻松迁移所有现有的TensorFlow程序，&lt;10行代码更改; </li><li>支持所有TensorFlow功能：同步/异步训练，模型/数据并行，推理和TensorBoard; </li><li>服务器到服务器的直接通信在可用时实现更快的学习; </li><li>允许数据集在HDFS和由Spark推动的其他来源或由TensorFlow拖动; </li><li>轻松集成您现有的数据处理流水线和机器学习算法（例如，MLlib，CaffeOnSpark）; </li><li>轻松部署在云或内部部署：CPU和GPU，以太网和Infiniband。</li><li>TensorFlowOnSpark是基于google的TensorFlow的实现，而TensorFlow有着一套完善的教程，内容丰富。 </li></ul><p>&emsp;&emsp;劣势：</p><ul><li>开源时间不长，未得到充分的验证。</li></ul><p>&emsp;&emsp;Github 地址:<a href="https://github.com/yahoo/TensorFlowOnSpark" target="_blank" rel="noopener">https://github.com/yahoo/TensorFlowOnSpark</a></p><h2 id="18-3-如何选择合适的分布式计算框架进行模型训练？"><a href="#18-3-如何选择合适的分布式计算框架进行模型训练？" class="headerlink" title="18.3 如何选择合适的分布式计算框架进行模型训练？"></a>18.3 如何选择合适的分布式计算框架进行模型训练？</h2><h2 id="18-4-如何进行实时计算？"><a href="#18-4-如何进行实时计算？" class="headerlink" title="18.4 如何进行实时计算？"></a>18.4 如何进行实时计算？</h2><h3 id="18-4-1-什么是实时流计算？"><a href="#18-4-1-什么是实时流计算？" class="headerlink" title="18.4.1 什么是实时流计算？"></a>18.4.1 什么是实时流计算？</h3><p>&emsp;&emsp;所谓实时流计算，就是近几年由于数据得到广泛应用之后，在数据持久性建模不满足现状的情况下，急需数据流的瞬时建模或者计算处理。这种实时计算的应用实例有金融服务、网络监控、电信数据管理、 Web 应用、生产制造、传感检测，等等。在这种数据流模型中，单独的数据单元可能是相关的元组（Tuple），如网络测量、呼叫记录、网页访问等产生的数据。但是，这些数据以大量、快速、时变（可能是不可预知）的数据流持续到达，由此产生了一些基础性的新的研究问题——实时计算。实时计算的一个重要方向就是实时流计算。</p><h3 id="18-4-2-实时流计算过程"><a href="#18-4-2-实时流计算过程" class="headerlink" title="18.4.2 实时流计算过程"></a>18.4.2 实时流计算过程</h3><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-4-1.png" alt=""></p><p>&emsp;&emsp;我们以热卖产品的统计为例，看下传统的计算手段：</p><ul><li>将用户行为、log等信息清洗后保存在数据库中.</li><li>将订单信息保存在数据库中.</li><li>利用触发器或者协程等方式建立本地索引，或者远程的独立索引.</li><li>join订单信息、订单明细、用户信息、商品信息等等表，聚合统计20分钟内热卖产品，并返回top-10.</li><li>web或app展示.</li></ul><p>&emsp;&emsp;这是一个假想的场景，但假设你具有处理类似场景的经验，应该会体会到这样一些问题和难处：</p><ul><li>水平扩展问题（scale-out）<br>显然，如果是一个具有一定规模的电子商务网站，数据量都是很大的。而交易信息因为涉及事务，所以很难直接舍弃关系型数据库的事务能力，迁移到具有更好的scale-out能力的NoSQL数据库中。</li></ul><p>&emsp;&emsp;那么，一般都会做sharding。历史数据还好说，我们可以按日期来归档，并可以通过批处理式的离线计算，将结果缓存起来。<br>但是，这里的要求是20分钟内，这很难。</p><ul><li>性能问题<br>这个问题，和scale-out是一致的，假设我们做了sharding，因为表分散在各个节点中，所以我们需要多次入库，并在业务层做聚合计算。</li></ul><p>&emsp;&emsp;问题是，20分钟的时间要求，我们需要入库多少次呢？<br>10分钟呢？<br>5分钟呢？<br>实时呢？</p><p>&emsp;&emsp;而且，业务层也同样面临着单点计算能力的局限，需要水平扩展，那么还需要考虑一致性的问题。<br>所以，到这里一切都显得很复杂。</p><ul><li>业务扩展问题</li></ul><p>&emsp;&emsp;假设我们不仅仅要处理热卖商品的统计，还要统计广告点击、或者迅速根据用户的访问行为判断用户特征以调整其所见的信息，更加符合用户的潜在需求等，那么业务层将会更加复杂。<br>也许你有更好的办法，但实际上，我们需要的是一种新的认知：<br>这个世界发生的事，是实时的。<br>所以我们需要一种实时计算的模型，而不是批处理模型。<br>我们需要的这种模型，必须能够处理很大的数据，所以要有很好的scale-out能力，最好是，我们都不需要考虑太多一致性、复制的问题。</p><p>&emsp;&emsp;那么，这种计算模型就是实时计算模型，也可以认为是流式计算模型。<br>现在假设我们有了这样的模型，我们就可以愉快地设计新的业务场景：</p><ul><li>转发最多的微博是什么？</li><li>最热卖的商品有哪些？</li><li>大家都在搜索的热点是什么？</li><li>我们哪个广告，在哪个位置，被点击最多？<br>或者说，我们可以问：<br>&emsp;&emsp;这个世界，在发生什么？</li></ul><p>&emsp;&emsp;最热的微博话题是什么？<br>我们以一个简单的滑动窗口计数的问题，来揭开所谓实时计算的神秘面纱。<br>假设，我们的业务要求是：<br>统计20分钟内最热的10个微博话题。</p><p>&emsp;&emsp;解决这个问题，我们需要考虑：</p><ul><li>数据源</li></ul><p>&emsp;&emsp;这里，假设我们的数据，来自微博长连接推送的话题。</p><ul><li>问题建模</li></ul><p>&emsp;&emsp;我们认为的话题是#号扩起来的话题，最热的话题是此话题出现的次数比其它话题都要多。<br>比如：@foreach_break : 你好,#世界#,我爱你，#微博#。<br>“世界”和“微博”就是话题。</p><ul><li><p>计算引擎采用storm</p></li><li><p>定义时间</p></li></ul><p>&emsp;&emsp;时间的定义是一件很难的事情，取决于所需的精度是多少。<br>根据实际，我们一般采用tick来表示时刻这一概念。<br>在storm的基础设施中，executor启动阶段，采用了定时器来触发“过了一段时间”这个事件。<br>如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(defn setup-ticks! [worker executor-data]</span><br><span class="line">  (let [storm-conf (:storm-conf executor-data)</span><br><span class="line">        tick-time-secs (storm-conf TOPOLOGY-TICK-TUPLE-FREQ-SECS)</span><br><span class="line">        receive-queue (:receive-queue executor-data)</span><br><span class="line">        context (:worker-context executor-data)]</span><br><span class="line">    (when tick-time-secs</span><br><span class="line">      (if (or (system-id? (:component-id executor-data))</span><br><span class="line">              (and (= false (storm-conf TOPOLOGY-ENABLE-MESSAGE-TIMEOUTS))</span><br><span class="line">                   (= :spout (:type executor-data))))</span><br><span class="line">        (log-message &quot;Timeouts disabled for executor &quot; (:component-id executor-data) &quot;:&quot; (:executor-id executor-data))</span><br><span class="line">        (schedule-recurring</span><br><span class="line">          (:user-timer worker)</span><br><span class="line">          tick-time-secs</span><br><span class="line">          tick-time-secs</span><br><span class="line">          (fn []</span><br><span class="line">            (disruptor/publish</span><br><span class="line">              receive-queue</span><br><span class="line">              [[nil (TupleImpl. context [tick-time-secs] Constants/SYSTEM_TASK_ID Constants/SYSTEM_TICK_STREAM_ID)]]</span><br><span class="line">              )))))))</span><br></pre></td></tr></table></figure></p><p>之前的博文中，已经详细分析了这些基础设施的关系，不理解的童鞋可以翻看前面的文章。<br>每隔一段时间，就会触发这样一个事件，当流的下游的bolt收到一个这样的事件时，就可以选择是增量计数还是将结果聚合并发送到流中。<br>bolt如何判断收到的tuple表示的是“tick”呢？<br>负责管理bolt的executor线程，从其订阅的消息队列消费消息时，会调用到bolt的execute方法，那么，可以在execute中这样判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isTick(Tuple tuple) &#123;</span><br><span class="line">    return tuple != null</span><br><span class="line">           &amp;&amp; Constants.SYSTEM_COMPONENT_ID  .equals(tuple.getSourceComponent())</span><br><span class="line">           &amp;&amp; Constants.SYSTEM_TICK_STREAM_ID.equals(tuple.getSourceStreamId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合上面的setup-tick!的clojure代码，我们可以知道SYSTEM_TICK_STREAM_ID在定时事件的回调中就以构造函数的参数传递给了tuple，那么SYSTEM_COMPONENT_ID是如何来的呢？<br>可以看到，下面的代码中，SYSTEM_TASK_ID同样传给了tuple：<br>;; 请注意SYSTEM_TASK_ID和SYSTEM_TICK_STREAM_ID<br>(TupleImpl. context [tick-time-secs] Constants/SYSTEM_TASK_ID Constants/SYSTEM_TICK_STREAM_ID)<br>然后利用下面的代码，就可以得到SYSTEM_COMPONENT_ID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public String getComponentId(int taskId) &#123;</span><br><span class="line">    if(taskId==Constants.SYSTEM_TASK_ID) &#123;</span><br><span class="line">        return Constants.SYSTEM_COMPONENT_ID;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return _taskToComponent.get(taskId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>滑动窗口<br>有了上面的基础设施，我们还需要一些手段来完成“工程化”，将设想变为现实。<br>这里，我们看看Michael G. Noll的滑动窗口设计。</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-4-2.png" alt=""></p><p>Topology</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String spoutId = &quot;wordGenerator&quot;;</span><br><span class="line">String counterId = &quot;counter&quot;;</span><br><span class="line">String intermediateRankerId = &quot;intermediateRanker&quot;;</span><br><span class="line">String totalRankerId = &quot;finalRanker&quot;;</span><br><span class="line">// 这里，假设TestWordSpout就是我们发送话题tuple的源</span><br><span class="line">builder.setSpout(spoutId, new TestWordSpout(), 5);</span><br><span class="line">// RollingCountBolt的时间窗口为9秒钟，每3秒发送一次统计结果到下游</span><br><span class="line">builder.setBolt(counterId, new RollingCountBolt(9, 3), 4).fieldsGrouping(spoutId, new Fields(&quot;word&quot;));</span><br><span class="line">// IntermediateRankingsBolt，将完成部分聚合，统计出top-n的话题</span><br><span class="line">builder.setBolt(intermediateRankerId, new IntermediateRankingsBolt(TOP_N), 4).fieldsGrouping(counterId, new Fields(</span><br><span class="line">    &quot;obj&quot;));</span><br><span class="line">    // TotalRankingsBolt， 将完成完整聚合，统计出top-n的话题</span><br><span class="line">builder.setBolt(totalRankerId, new TotalRankingsBolt(TOP_N)).globalGrouping(intermediateRankerId);</span><br></pre></td></tr></table></figure><p>上面的topology设计如下：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-4-3.png" alt=""></p><p>将聚合计算与时间结合起来<br>前文，我们叙述了tick事件，回调中会触发bolt的execute方法，那可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">RollingCountBolt:</span><br><span class="line">  @Override</span><br><span class="line">  public void execute(Tuple tuple) &#123;</span><br><span class="line">    if (TupleUtils.isTick(tuple)) &#123;</span><br><span class="line">      LOG.debug(&quot;Received tick tuple, triggering emit of current window counts&quot;);</span><br><span class="line">      // tick来了，将时间窗口内的统计结果发送，并让窗口滚动</span><br><span class="line">      emitCurrentWindowCounts();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      // 常规tuple，对话题计数即可</span><br><span class="line">      countObjAndAck(tuple);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // obj即为话题，增加一个计数 count++</span><br><span class="line">  // 注意，这里的速度基本取决于流的速度，可能每秒百万，也可能每秒几十.</span><br><span class="line">  // 内存不足？ bolt可以scale-out.</span><br><span class="line">  private void countObjAndAck(Tuple tuple) &#123;</span><br><span class="line">    Object obj = tuple.getValue(0);</span><br><span class="line">    counter.incrementCount(obj);</span><br><span class="line">    collector.ack(tuple);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 将统计结果发送到下游</span><br><span class="line">  private void emitCurrentWindowCounts() &#123;</span><br><span class="line">    Map&lt;Object, Long&gt; counts = counter.getCountsThenAdvanceWindow();</span><br><span class="line">    int actualWindowLengthInSeconds = lastModifiedTracker.secondsSinceOldestModification();</span><br><span class="line">    lastModifiedTracker.markAsModified();</span><br><span class="line">    if (actualWindowLengthInSeconds != windowLengthInSeconds) &#123;</span><br><span class="line">      LOG.warn(String.format(WINDOW_LENGTH_WARNING_TEMPLATE, actualWindowLengthInSeconds, windowLengthInSeconds));</span><br><span class="line">    &#125;</span><br><span class="line">    emit(counts, actualWindowLengthInSeconds);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码可能有点抽象，看下这个图就明白了，tick一到，窗口就滚动：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-4-4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IntermediateRankingsBolt &amp; TotalRankingsBolt：</span><br><span class="line">  public final void execute(Tuple tuple, BasicOutputCollector collector) &#123;</span><br><span class="line">    if (TupleUtils.isTick(tuple)) &#123;</span><br><span class="line">      getLogger().debug(&quot;Received tick tuple, triggering emit of current rankings&quot;);</span><br><span class="line">      // 将聚合并排序的结果发送到下游</span><br><span class="line">      emitRankings(collector);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      // 聚合并排序</span><br><span class="line">      updateRankingsWithTuple(tuple);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中，IntermediateRankingsBolt和TotalRankingsBolt的聚合排序方法略有不同：</p><p>IntermediateRankingsBolt的聚合排序方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">void updateRankingsWithTuple(Tuple tuple) &#123;</span><br><span class="line">  // 这一步，将话题、话题出现的次数提取出来</span><br><span class="line">  Rankable rankable = RankableObjectWithFields.from(tuple);</span><br><span class="line">  // 这一步，将话题出现的次数进行聚合，然后重排序所有话题</span><br><span class="line">  super.getRankings().updateWith(rankable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TotalRankingsBolt的聚合排序方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">void updateRankingsWithTuple(Tuple tuple) &#123;</span><br><span class="line">// 提出来自IntermediateRankingsBolt的中间结果</span><br><span class="line">  Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);</span><br><span class="line">// 聚合并排序</span><br><span class="line">  super.getRankings().updateWith(rankingsToBeMerged);</span><br><span class="line">// 去0，节约内存</span><br><span class="line">  super.getRankings().pruneZeroCounts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而重排序方法比较简单粗暴，因为只求前N个，N不会很大：</p><pre><code>private void rerank() {  Collections.sort(rankedItems);  Collections.reverse(rankedItems);}</code></pre><p>&emsp;&emsp;结语</p><p>&emsp;&emsp;下图可能就是我们想要的结果，我们完成了t0 - t1时刻之间的热点话题统计.<br><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-4-5.png" alt=""></p><h2 id="18-5-如何进行离线计算？"><a href="#18-5-如何进行离线计算？" class="headerlink" title="18.5 如何进行离线计算？"></a>18.5 如何进行离线计算？</h2><h2 id="18-6-如何使用分布式框架提高模型训练速度？"><a href="#18-6-如何使用分布式框架提高模型训练速度？" class="headerlink" title="18.6 如何使用分布式框架提高模型训练速度？"></a>18.6 如何使用分布式框架提高模型训练速度？</h2><h2 id="18-7-深度学习分布式计算框架如何在移动互联网中应用？"><a href="#18-7-深度学习分布式计算框架如何在移动互联网中应用？" class="headerlink" title="18.7 深度学习分布式计算框架如何在移动互联网中应用？"></a>18.7 深度学习分布式计算框架如何在移动互联网中应用？</h2><h2 id="18-8-如何在个性化推荐中应用深度学习分布式框架？"><a href="#18-8-如何在个性化推荐中应用深度学习分布式框架？" class="headerlink" title="18.8 如何在个性化推荐中应用深度学习分布式框架？"></a>18.8 如何在个性化推荐中应用深度学习分布式框架？</h2><h2 id="18-9-如何评价个性化推荐系统的效果？"><a href="#18-9-如何评价个性化推荐系统的效果？" class="headerlink" title="18.9 如何评价个性化推荐系统的效果？"></a>18.9 如何评价个性化推荐系统的效果？</h2><h3 id="18-9-1-准确率与召回率（Precision-amp-Recall）"><a href="#18-9-1-准确率与召回率（Precision-amp-Recall）" class="headerlink" title="18.9.1 准确率与召回率（Precision &amp; Recall）"></a>18.9.1 准确率与召回率（Precision &amp; Recall）</h3><p>&emsp;&emsp;准确率和召回率是广泛用于信息检索和统计学分类领域的两个度量值，用来评价结果的质量。其中精度是检索出相关文档数与检索出的文档总数的比率，衡量的是检索系统的查准率；召回率是指检索出的相关文档数和文档库中所有的相关文档数的比率，衡量的是检索系统的查全率。</p><p>&emsp;&emsp;一般来说，Precision就是检索出来的条目（比如：文档、网页等）有多少是准确的，Recall就是所有准确的条目有多少被检索出来了。</p><p>&emsp;&emsp;正确率、召回率和 F 值是在鱼龙混杂的环境中，选出目标的重要评价指标。不妨看看这些指标的定义先：</p><pre><code>正确率 = 提取出的正确信息条数 /  提取出的信息条数 召回率 = 提取出的正确信息条数 /  样本中的信息条数    </code></pre><p>&emsp;&emsp;两者取值在0和1之间，数值越接近1，查准率或查全率就越高。   </p><pre><code>F值  = 正确率 * 召回率 * 2 / (正确率 + 召回率) （F 值即为正确率和召回率的调和平均值）</code></pre><p>&emsp;&emsp;不妨举这样一个例子：某池塘有1400条鲤鱼，300只虾，300只鳖。现在以捕鲤鱼为目的。撒一大网，逮着了700条鲤鱼，200只虾，100只鳖。那么，这些指标分别如下：</p><pre><code>正确率 = 700 / (700 + 200 + 100) = 70%召回率 = 700 / 1400 = 50%F值 = 70% * 50% * 2 / (70% + 50%) = 58.3%</code></pre><p>&emsp;&emsp;不妨看看如果把池子里的所有的鲤鱼、虾和鳖都一网打尽，这些指标又有何变化：</p><pre><code>正确率 = 1400 / (1400 + 300 + 300) = 70%召回率 = 1400 / 1400 = 100%F值 = 70% * 100% * 2 / (70% + 100%) = 82.35%        </code></pre><p>&emsp;&emsp;由此可见，正确率是评估捕获的成果中目标成果所占得比例；召回率，顾名思义，就是从关注领域中，召回目标类别的比例；而F值，则是综合这二者指标的评估指标，用于综合反映整体的指标。</p><p>&emsp;&emsp;当然希望检索结果Precision越高越好，同时Recall也越高越好，但事实上这两者在某些情况下有矛盾的。比如极端情况下，我们只搜索出了一个结果，且是准确的，那么Precision就是100%，但是Recall就很低；而如果我们把所有结果都返回，那么比如Recall是100%，但是Precision就会很低。因此在不同的场合中需要自己判断希望Precision比较高或是Recall比较高。如果是做实验研究，可以绘制Precision-Recall曲线来帮助分析。</p><h3 id="18-9-2-综合评价指标（F-Measure）"><a href="#18-9-2-综合评价指标（F-Measure）" class="headerlink" title="18.9.2 综合评价指标（F-Measure）"></a>18.9.2 综合评价指标（F-Measure）</h3><p>&emsp;&emsp;P和R指标有时候会出现的矛盾的情况，这样就需要综合考虑他们，最常见的方法就是F-Measure（又称为F-Score）。</p><p>&emsp;&emsp;F-Measure是Precision和Recall加权调和平均：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-9-2-1.png" alt="F-Measure"></p><p>&emsp;&emsp;当参数α=1时，就是最常见的F1，也即</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-9-2-2.png" alt="F-Measure"></p><p>&emsp;&emsp;可知F1综合了P和R的结果，当F1较高时则能说明试验方法比较有效。</p><h3 id="18-9-3-E值"><a href="#18-9-3-E值" class="headerlink" title="18.9.3 E值"></a>18.9.3 E值</h3><p>&emsp;&emsp;E值表示查准率P和查全率R的加权平均值，当其中一个为0时，E值为1，其计算公式：</p><p><img src="/2016/12/20/第十八章_后端架构选型、离线及实时计算/img/18-9-3-1.png" alt="E值"></p><p>&emsp;&emsp;b越大，表示查准率的权重越大。</p><h3 id="18-9-4-平均正确率（Average-Precision）"><a href="#18-9-4-平均正确率（Average-Precision）" class="headerlink" title="18.9.4 平均正确率（Average Precision）"></a>18.9.4 平均正确率（Average Precision）</h3><p>&emsp;&emsp;平均正确率表示不同查全率的点上的正确率的平均。</p><h2 id="18-10-参考文献"><a href="#18-10-参考文献" class="headerlink" title="18.10 参考文献"></a>18.10 参考文献</h2><p>【1】<a href="http://www.paddlepaddle.org/documentation/book/zh/0.11.0/05.recommender_system/index.cn.html" target="_blank" rel="noopener">http://www.paddlepaddle.org/documentation/book/zh/0.11.0/05.recommender_system/index.cn.html</a></p><p>【2】<a href="https://deeplearning4j.org/cn/compare-dl4j-torch7-pylearn.html" target="_blank" rel="noopener">https://deeplearning4j.org/cn/compare-dl4j-torch7-pylearn.html</a></p><p>【3】<a href="http://mahout.apache.org/" target="_blank" rel="noopener">http://mahout.apache.org/</a></p><p>【4】<a href="http://spark.apache.org/docs/1.1.0/mllib-guide.html" target="_blank" rel="noopener">http://spark.apache.org/docs/1.1.0/mllib-guide.html</a></p><p>【5】<a href="https://ray.readthedocs.io/en/latest/tutorial.html" target="_blank" rel="noopener">https://ray.readthedocs.io/en/latest/tutorial.html</a></p><p>【6】<a href="http://spark.apache.org/streaming/" target="_blank" rel="noopener">http://spark.apache.org/streaming/</a></p><p>【7】<a href="https://github.com/uber/horovod" target="_blank" rel="noopener">https://github.com/uber/horovod</a></p><p>【8】<a href="https://software.intel.com/en-us/articles/bigdl-distributed-deep-learning-on-apache-spark" target="_blank" rel="noopener">https://software.intel.com/en-us/articles/bigdl-distributed-deep-learning-on-apache-spark</a></p><p>【9】<a href="https://eng.uber.com/petastorm/" target="_blank" rel="noopener">https://eng.uber.com/petastorm/</a></p><p>【10】<a href="https://yahoo.github.io/TensorFlowOnSpark/#" target="_blank" rel="noopener">https://yahoo.github.io/TensorFlowOnSpark/#</a></p><p> ….</p><p> 未完待续！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度学习经典网络汇总</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E7%BB%8F%E5%85%B8%E7%BD%91%E7%BB%9C/"/>
    <id>https://leesen998.github.io/2016/12/20/第四章_经典网络/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:42:24.785Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="4-1-LeNet5"><a href="#4-1-LeNet5" class="headerlink" title="4.1 LeNet5"></a>4.1 LeNet5</h2><p>一种典型的用来识别数字的卷积网络是LeNet-5。</p><h3 id="4-1-1-模型结构"><a href="#4-1-1-模型结构" class="headerlink" title="4.1.1 模型结构"></a>4.1.1 模型结构</h3><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image1.png" alt=""></p><h3 id="4-1-2-模型结构"><a href="#4-1-2-模型结构" class="headerlink" title="4.1.2 模型结构"></a>4.1.2 模型结构</h3><p>LeNet-5共有7层（不包含输入层），每层都包含可训练参数；每个层有多个Feature Map，每个FeatureMap通过一种卷积滤波器提取输入的一种特征，然后每个FeatureMap有多个神经元。  </p><ul><li><p>C1层是一个卷积层<br>输入图片：32 * 32<br>卷积核大小：5 * 5<br>卷积核种类：6<br>输出featuremap大小：28 * 28 （32-5+1）<br>神经元数量：28 * 28 * 6<br>可训练参数：（5 * 5+1） * 6（每个滤波器5 * 5=25个unit参数和一个bias参数，一共6个滤波器）<br>连接数：（5 * 5+1） * 6 * 28 * 28  </p></li><li><p>S2层是一个下采样层<br>输入：28 * 28<br>采样区域：2 * 2<br>采样方式：4个输入相加，乘以一个可训练参数，再加上一个可训练偏置。结果通过sigmoid<br>采样种类：6<br>输出featureMap大小：14 * 14（28/2）<br>神经元数量：14 * 14 * 6<br>可训练参数：2 * 6（和的权+偏置）<br>连接数：（2 * 2+1） * 6 * 14 * 14<br>S2中每个特征图的大小是C1中特征图大小的1/4  </p></li><li><p>C3层也是一个卷积层<br>输入：S2中所有6个或者几个特征map组合<br>卷积核大小：5 * 5<br>卷积核种类：16<br>输出featureMap大小：10 * 10<br>C3中的每个特征map是连接到S2中的所有6个或者几个特征map的，表示本层的特征map是上一层提取到的特征map的不同组合<br>存在的一个方式是：C3的前6个特征图以S2中3个相邻的特征图子集为输入。接下来6个特征图以S2中4个相邻特征图子集为输入。然后的3个以不相邻的4个特征图子集为输入。最后一个将S2中所有特征图为输入。  则：可训练参数：6 * （3 * 25+1）+6 * （4 * 25+1）+3 * （4 * 25+1）+（25 * 6+1）=1516<br>连接数：10 * 10 * 1516=151600  </p></li><li><p>S4层是一个下采样层<br>输入：10 * 10<br>采样区域：2 * 2<br>采样方式：4个输入相加，乘以一个可训练参数，再加上一个可训练偏置。结果通过sigmoid<br>采样种类：16<br>输出featureMap大小：5 * 5（10/2）<br>神经元数量：5 * 5 * 16=400<br>可训练参数：2 * 16=32（和的权+偏置）<br>连接数：16 * （2 * 2+1） * 5 * 5=2000<br>S4中每个特征图的大小是C3中特征图大小的1/4 </p></li><li><p>C5层是一个卷积层<br>输入：S4层的全部16个单元特征map（与s4全相连）<br>卷积核大小：5 * 5<br>卷积核种类：120<br>输出featureMap大小：1 * 1（5-5+1）<br>可训练参数/连接：120 * （16 * 5 * 5+1）=48120  </p></li><li><p>F6层全连接层<br>输入：c5 120维向量<br>计算方式：计算输入向量和权重向量之间的点积，再加上一个偏置，结果通过sigmoid函数<br>可训练参数:84 * (120+1)=10164</p><h3 id="4-1-3-模型特性"><a href="#4-1-3-模型特性" class="headerlink" title="4.1.3 模型特性"></a>4.1.3 模型特性</h3></li><li>卷积网络使用一个3层的序列：卷积、池化、非线性——这可能是自这篇论文以来面向图像的深度学习的关键特性！</li><li>使用卷积提取空间特征</li><li>使用映射的空间均值进行降采样</li><li>tanh或sigmoids非线性</li><li>多层神经网络（MLP）作为最终的分类器</li><li>层间的稀疏连接矩阵以避免巨大的计算开销</li></ul><h2 id="4-2-AlexNet"><a href="#4-2-AlexNet" class="headerlink" title="4.2 AlexNet"></a>4.2 AlexNet</h2><h3 id="4-2-1-模型介绍"><a href="#4-2-1-模型介绍" class="headerlink" title="4.2.1 模型介绍"></a>4.2.1 模型介绍</h3><p>​    AlexNet在2012年ILSVRC竞赛中赢得了第一名，其Top5错误率为15.3%。AlexNet模型证明了CNN在复杂模型下的有效性，并且在可接受时间范围内，部署GPU得到了有效结果。</p><h3 id="4-2-2-模型结构"><a href="#4-2-2-模型结构" class="headerlink" title="4.2.2 模型结构"></a>4.2.2 模型结构</h3><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image2.jpeg" alt=""></p><h3 id="4-2-3-模型解读"><a href="#4-2-3-模型解读" class="headerlink" title="4.2.3 模型解读"></a>4.2.3 模型解读</h3><p>AlexNet共8层，前五层为卷积层，后三层为全连接层。</p><ol><li><strong>conv1阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image3.png" alt=""></p><p>&nbsp;&nbsp;</p><ul><li>输入图片：227 * 227 * 3</li><li>卷积核大小：11<em> 11 </em>3</li><li>卷积核数量：96  </li><li><p>滤波器stride：4</p></li><li><p>输出featuremap大小：(227-11)/4+1=55 (227个像素减去11，然后除以4，生成54个像素，再加上被减去的11也对应生成一个像素)</p></li><li><p>输出featuremap大小：55 * 55</p></li><li><p>共有96个卷积核，会生成55 * 55 * 96个卷积后的像素层。96个卷积核分成2组，每组48个卷积核。对应生成2组55 * 55 * 48的卷积后的像素层数据。</p></li><li><p>这些像素层经过relu1单元的处理，生成激活像素层，尺寸仍为2组55 * 55 * 48的像素层数据。 </p></li><li><p>这些像素层经过pool运算的处理，池化运算尺度为3 * 3，运算的步长为2，则池化后图像的尺寸为(55-3)/2+1=27。 即池化后像素的规模为27 * 27 * 96；</p></li><li><p>然后经过归一化处理，归一化运算的尺度为5 * 5；第一卷积层运算结束后形成的像素层的规模为27 * 27 * 96。分别对应96个卷积核所运算形成。这96层像素层分为2组，每组48个像素层，每组在一个独立的GPU上进行运算。  </p></li><li><p>反向传播时，每个卷积核对应一个偏差值。即第一层的96个卷积核对应上层输入的96个偏差值。</p></li></ul><ol start="2"><li><strong>conv2阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image4.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li>输入图片：27 * 27 * 96（第一层输出）</li><li>为便于后续处理，每幅像素层的左右两边和上下两边都要填充2个像素</li><li>27 * 27 * 96的像素数据分成27 * 27 * 48的两组像素数据，两组数据分别再两个不同的GPU中进行运算。</li><li>卷积核大小：5 * 5 * 48</li><li><p>滤波器stride：1</p></li><li><p>输出featuremap大小：卷积核在移动的过程中会生成(27-5+2 * 2)/1+1=27个像素。(27个像素减去5，正好是22，在加上上下、左右各填充的2个像素，即生成26个像素，再加上被减去的5也对应生成一个像素)，行和列的27 * 27个像素形成对原始图像卷积之后的像素层。共有256个5 * 5 * 48卷积核；这256个卷积核分成两组，每组针对一个GPU中的27 * 27 * 48的像素进行卷积运算。会生成两组27 * 27 * 128个卷积后的像素层。</p></li><li><p>这些像素层经过relu2单元的处理，生成激活像素层，尺寸仍为两组27 * 27 * 128的像素层。  </p></li><li><p>这些像素层经过pool运算(池化运算)的处理，池化运算的尺度为3 * 3，运算的步长为2，则池化后图像的尺寸为(57-3)/2+1=13。 即池化后像素的规模为2组13 * 13 * 128的像素层；</p></li><li><p>然后经过归一化处理，归一化运算的尺度为5 * 5；</p></li><li><p>第二卷积层运算结束后形成的像素层的规模为2组13 * 13 * 128的像素层。分别对应2组128个卷积核所运算形成。每组在一个GPU上进行运算。即共256个卷积核，共2个GPU进行运算。  </p></li><li><p>反向传播时，每个卷积核对应一个偏差值。即第一层的96个卷积核对应上层输入的256个偏差值。</p></li></ul><ol start="3"><li><strong>conv3阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image5.png" alt=""></p><ul><li>第三层输入数据为第二层输出的2组13 * 13 * 128的像素层；</li><li>为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；</li><li>2组像素层数据都被送至2个不同的GPU中进行运算。每个GPU中都有192个卷积核，每个卷积核的尺寸是3 * 3 * 256。因此，每个GPU中的卷积核都能对2组13 * 13 * 128的像素层的所有数据进行卷积运算。</li><li>移动的步长是1个像素。</li><li>运算后的卷积核的尺寸为(13-3+1 * 2)/1+1=13（13个像素减去3，正好是10，在加上上下、左右各填充的1个像素，即生成12个像素，再加上被减去的3也对应生成一个像素），每个GPU中共13 * 13 * 192个卷积核。2个GPU中共13 * 13 * 384个卷积后的像素层。这些像素层经过relu3单元的处理，生成激活像素层，尺寸仍为2组13 * 13 * 192像素层，共13 * 13 * 384个像素层。</li></ul><ol start="4"><li><strong>conv4阶段DFD</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image6.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; </p><ul><li><p>第四层输入数据为第三层输出的2组13 * 13 * 192的像素层；</p></li><li><p>为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；</p></li><li><p>2组像素层数据都被送至2个不同的GPU中进行运算。每个GPU中都有192个卷积核，每个卷积核的尺寸是3 * 3 * 192。因此，每个GPU中的卷积核能对1组13 * 13 * 192的像素层的数据进行卷积运算。</p></li><li><p>移动的步长是1个像素。</p></li><li><p>运算后的卷积核的尺寸为(13-3+1 * 2)/1+1=13（13个像素减去3，正好是10，在加上上下、左右各填充的1个像素，即生成12个像素，再加上被减去的3也对应生成一个像素），每个GPU中共13 * 13 * 192个卷积核。2个GPU中共13 * 13 * 384个卷积后的像素层。</p></li><li><p>这些像素层经过relu4单元的处理，生成激活像素层，尺寸仍为2组13 * 13 * 192像素层，共13 * 13 * 384个像素层。</p></li></ul><ol start="5"><li><p><strong>conv5阶段</strong>：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image7.png" alt=""></p></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp; </p><ul><li>第五层输入数据为第四层输出的2组13 * 13 * 192的像素层；</li><li>为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；</li><li>2组像素层数据都被送至2个不同的GPU中进行运算。每个GPU中都有128个卷积核，每个卷积核的尺寸是3 * 3 * 192。因此，每个GPU中的卷积核能对1组13 * 13 * 192的像素层的数据进行卷积运算。</li><li>移动的步长是1个像素。</li><li>因此，运算后的卷积核的尺寸为(13-3+1 * 2)/1+1=13（13个像素减去3，正好是10，在加上上下、左右各填充的1个像素，即生成12个像素，再加上被减去的3也对应生成一个像素），每个GPU中共13 * 13 * 128个卷积核。2个GPU中共13 * 13 * 256个卷积后的像素层。</li><li>这些像素层经过relu5单元的处理，生成激活像素层，尺寸仍为2组13 * 13 * 128像素层，共13 * 13 * 256个像素层。</li><li>2组13 * 13 * 128像素层分别在2个不同GPU中进行池化(pool)运算处理。池化运算的尺度为3 * 3，运算的步长为2，则池化后图像的尺寸为(13-3)/2+1=6。 即池化后像素的规模为两组6 * 6 * 128的像素层数据，共6 * 6 * 256规模的像素层数据。</li></ul><ol start="6"><li><strong>fc6阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image8.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li>第六层输入数据的尺寸是6 * 6 * 256</li><li>采用6 * 6 * 256尺寸的滤波器对第六层的输入数据进行卷积运算</li><li>共有4096个6 * 6 * 256尺寸的滤波器对输入数据进行卷积运算，通过4096个神经元输出运算结果；</li><li>这4096个运算结果通过relu激活函数生成4096个值；</li><li>通过drop运算后输出4096个本层的输出结果值。</li><li>由于第六层的运算过程中，采用的滤波器的尺寸(6 * 6 * 256)与待处理的feature map的尺寸(6 * 6 * 256)相同，即滤波器中的每个系数只与feature map中的一个像素值相乘；而其它卷积层中，每个滤波器的系数都会与多个feature map中像素值相乘；因此，将第六层称为全连接层。 </li><li>第五层输出的6 * 6 * 256规模的像素层数据与第六层的4096个神经元进行全连接，然后经由relu6进行处理后生成4096个数据，再经过dropout6处理后输出4096个数据。</li></ul><ol start="7"><li><strong>fc7阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image9.png" alt=""></p><ul><li>第六层输出的4096个数据与第七层的4096个神经元进行全连接</li><li>然后经由relu7进行处理后生成4096个数据，再经过dropout7处理后输出4096个数据。</li></ul><ol start="8"><li><strong>fc8阶段</strong>：</li></ol><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image10.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li>第七层输出的4096个数据与第八层的1000个神经元进行全连接，经过训练后输出被训练的数值。</li></ul><h3 id="4-2-4-模型特性"><a href="#4-2-4-模型特性" class="headerlink" title="4.2.4 模型特性"></a>4.2.4 模型特性</h3><ul><li><p>使用ReLU作为非线性</p></li><li><p>使用dropout技术选择性地忽略训练中的单个神经元，避免模型的过拟合</p></li><li><p>重叠最大池化（overlapping max pooling），避免平均池化（average pooling）的平均效应</p></li><li><p>使用NVIDIA GTX 580 GPU减少训练时间</p></li><li><p>当时，GPU比CPU提供了更多的核心，可以将训练速度提升10倍，从而允许使用更大的数据集和更大的图像。</p></li></ul><h2 id="4-3-可视化ZFNet-转置卷积"><a href="#4-3-可视化ZFNet-转置卷积" class="headerlink" title="4.3 可视化ZFNet-转置卷积"></a>4.3 可视化ZFNet-转置卷积</h2><h3 id="4-3-1-基本的思想及其过程"><a href="#4-3-1-基本的思想及其过程" class="headerlink" title="4.3.1 基本的思想及其过程"></a>4.3.1 基本的思想及其过程</h3><ul><li>可视化技术揭露了激发模型中每层单独的特征图。</li><li>可视化技术允许观察在训练阶段特征的演变过程且诊断出模型的潜在问题。</li><li>可视化技术用到了多层解卷积网络，即由特征激活返回到输入像素空间。</li><li>可视化技术进行了分类器输出的敏感性分析，即通过阻止部分输入图像来揭示那部分对于分类是重要的。</li><li>可视化技术提供了一个非参数的不变性来展示来自训练集的哪一块激活哪个特征图，不仅需要裁剪输入图片，而且自上而下的投影来揭露来自每块的结构激活一个特征图。</li><li>可视化技术依赖于解卷积操作，即卷积操作的逆过程，将特征映射到像素上。</li></ul><h3 id="4-3-2-卷积与转置卷积"><a href="#4-3-2-卷积与转置卷积" class="headerlink" title="4.3.2 卷积与转置卷积"></a>4.3.2 卷积与转置卷积</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>下图为卷积过程 </p><center><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image11.GIF"><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image12.png"><br></center><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>下图为转置卷积过程<br><br><center><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image13.png"><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image14.png"><br></center><br>&nbsp;&nbsp;&nbsp;&nbsp;<br><br>下面首先介绍转置卷积中涉及到的几种操作：<br><br><strong>反池化操作</strong>：池化操作是非可逆的，但是我们可以用一组转换变量switch在每个池化区域中通过记录最大值的位置来获得一个近似值。在转置卷积网络中，反池化操作使用这些转换来放置上述最大值的位置，保存激活的位置，其余位置都置0。<br><br><strong>激活函数</strong>：卷积网中使用非线性的ReLU来确保所有输出值总是正值。在反卷积网中也利用了ReLU。<br><br><strong>转置卷积</strong>：为了实现转置卷积，转置卷积网络使用相同卷积核的转置作为新的卷积核进行计算。<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image15.jpeg" alt=""><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    上图左半部分是一个转置卷积层，右半部分为一个卷积层。反卷积层将会重建一个来自下一层的卷积特征近似版本。图中使用switch来记录在卷积网中进行最大池化操作时每个池化区域的局部最大值的位置，经过非池化操作之后，原来的非最大值的位置都置为0。<br><br>### 4.3.3 卷积可视化<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    预处理：网络对输入图片进行预处理，裁剪图片中间的256x256区域，并减去整个图像每个像素的均值，然后用10个不同的对256x256图像进行224x224的裁剪（中间区域加上四个角落，以及他们的水平翻转图像），对以128个图片分的块进行随机梯度下降法来更新参数。起始学习率为0.01，动量为0.9，当验证集误差不再变化时时，手动调整学习率。在全连接网络中使用概率为0.5的dropout，并且所有权值都初始化为0.01，偏置设为0。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    特征可视化：当输入存在一定的变化时，网络的输出结果保持不变。下图即在一个已经训练好的网络中可视化后的图。在可视化结果的右边是对应的输入图片，与重构特征相比，输入图片之间的差异性很大，而重构特征只包含那些具有判别能力的纹理特征。<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image18.jpeg" alt=""><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    由上图可以看到第二层应对角落和其他边缘或者颜色的结合；第三层有更加复杂的不变性，捕捉到了相似的纹理；第四层显示了特定类间显著的差异性；第五层显示了有显著构成变化的整个物体。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    训练时的特征演变过程：当输入图片中的最强刺激源发生变化时，对应的输出特征轮廓发生剧烈变化。经过一定次数的迭代以后，底层特征趋于稳定，但更高层的特征则需要更多的迭代次数才能收敛，这表明：只有所有层都收敛时，这个分类模型才是有效的。<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image19.jpeg" alt=""><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    <strong>特征不变性:</strong> 一般来说，就深度模型来说，只要深度超过七层，微小的变化对于模型的第一层都有比较大的影响，但对于较深层几乎没有没有影响。对于图像的平移、尺度、旋转的变化来说，网络的输出对于平移和尺度变化都是稳定的，但却不具有旋转不变性，除非目标图像时旋转对称的。下图为分别对平移，尺度，旋转做的分析图。<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image20.jpeg" alt=""><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    上图按行顺序分别为对5类图像进行不同程度的垂直方向上的平移、尺度变换、旋转对输出结果影响的分析图。按列顺序分别为原始变换图像，第一层中原始图片和变换后的图片的欧氏距离，第7层中原始图片和变换后的图片的欧氏距离，变换后图片被正确分类的概率图。   <br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    可视化不仅能够看到一个训练完的模型的内部操作，而且还能帮助选择好的网络结构。   <br><br>### 4.3.4 ZFNet和AlexNet比较<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    ZFNet的网络结构实际上与AlexNet没有什么很大的变化，差异表现在AlexNet用了两块GPU的稀疏连接结构，而ZFNet只用了一块GPU的稠密连接结构；同时，由于可视化可以用来选择好的网络结构，通过可视化发现AlexNet第一层中有大量的高频和低频信息的混合，却几乎没有覆盖到中间的频率信息；且第二层中由于第一层卷积用的步长为4太大了，导致了有非常多的混叠情况；因此改变了AlexNet的第一层即将滤波器的大小11x11变成7x7，并且将步长4变成了2，下图为AlexNet网络结构与ZFNet的比较。<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image2.jpeg" alt=""><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image21.jpeg" alt=""><br><br><br>## 4.4 VGGNet<br>### 4.4.1 模型结构<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image22.jpeg" alt=""><br><br>### 4.4.2 模型特点<br><br><br>1. 整个网络都使用了同样大小的卷积核尺寸（3 * 3）和最大池化尺寸（2 * 2）<br>2. 1 * 1卷积的意义主要在于线性变换，而输入通道数和输出通道数不变，没有发生降维。<br>3. 两个3 * 3的卷积层串联相当于1个5 * 5的卷积层，即一个像素会跟周围5 * 5的像素产生关联，可以说感受野大小为5 * 5。而3个3 * 3的卷积层串联的效果则相当于1个7 * 7的卷积层。除此之外，3个串联的3 * 3的卷积层，拥有比1个7 * 7的卷积层更少的参数量，只有后者的(3 * 3 * 3)/(7 * 7)=55%。最重要的是，3个3 * 3的卷积层拥有比1个7 * 7的卷积层更多的非线性变换（前者可以使用三次ReLU激活函数，而后者只有一次），使得CNN对特征的学习能力更强。<br>4. VGGNet在训练时有一个小技巧，先训练级别A的简单网络，再复用A网络的权重来初始化后面的几个复杂模型，这样训练收敛的速度更快。在预测时，VGG采用Multi-Scale的方法，将图像scale到一个尺寸Q，并将图片输入卷积网络计算。然后在最后一个卷积层使用滑窗的方式进行分类预测，将不同窗口的分类结果平均，再将不同尺寸Q的结果平均得到最后结果，这样可提高图片数据的利用率并提升预测准确率。在训练中，VGGNet还使用了Multi-Scale的方法做数据增强，将原始图像缩放到不同尺寸S，然后再随机裁切224*224的图片，这样能增加很多数据量，对于防止模型过拟合有很不错的效果。<br><br>## 4.5 Network in Network<br>### 4.5.1 模型结构<br><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image23.jpeg" alt=""><br><br>### 4.5.2 模型创新点<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>论文的创新点：<br><br>1. 提出了抽象能力更高的Mlpconv层<br>2. 提出了Global Average Pooling（全局平均池化）层<br><br>- Mlpconv层 <br><br>    &nbsp;&nbsp;&nbsp;&nbsp;<br>    传统的卷积神经网络一般来说是由线性卷积层、池化层、全连接层堆叠起来的网络，卷积层通过线性滤波器进行线性卷积运算，然后在接个非线性激活函数最终生成特征图。而这种卷积滤波器是一种GLM:(Generalized linear model)广义线性模型。然而GLM的抽象能力是比较低水平的。<br><br>    &nbsp;&nbsp;&nbsp;&nbsp;<br>    抽象：指得到对同一概念的不同变体保持不变的特征。<br><br>    &nbsp;&nbsp;&nbsp;&nbsp;<br>    一般用CNN进行特征提取时，其实就隐含地假设了特征是线性可分的，可实际问题往往是难以线性可分的。一般来说我们所要提取的特征一般是高度非线性的。在传统的CNN中，也许我们可以用超完备的滤波器，来提取各种潜在的特征。比如我们要提取某个特征，于是我就用了一大堆的滤波器，把所有可能的提取出来，这样就可以把我想要提取的特征也覆盖到，然而这样存在一个缺点，那就是网络太恐怖了，参数太多了。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>我们知道CNN高层特征其实是低层特征通过某种运算的组合。所以论文就根据这个想法，提出在每个局部感受野中进行更加复杂的运算，提出了对卷积层的改进算法：MLP卷积层。（这里也不知道是否有道理，因为在后面的深层网络没有提出此种说法，还是按照传统的cnn方法使用多个滤波器去学习同一特征的不同变体）。MLP中的激活函数采用的是整流线性单元（即ReLU:max（wx+b,0)。<br>MLP的优点：<br><br>1. 非常有效的通用函数近似器<br>2. 可用BP算法训练，可以完美地融合进CNN<br>3. 其本身也是一种深度模型，可以特征再利用<br><br><center><img src="/2016/12/20/第四章_经典网络/ch4/image24.png"></center><ul><li><p>全局平均池化层 </p><p>  &nbsp;&nbsp;&nbsp;&nbsp;<br>  另一方面，传统的CNN最后一层都是全连接层，参数个数非常之多，容易引起过拟合（如Alexnet），一个CNN模型，大部分的参数都被全连接层给占用了，所以论文提出采用了全局均值池化替代全连接层。与传统的全连接层不同，我们对每个特征图一整张图片进行全局均值池化，这样每张特征图都可以得到一个输出。这样采用均值池化，连参数都省了，可以大大减小网络参数，避免过拟合，另一方面它有一个特点，每张特征图相当于一个输出特征，然后这个特征就表示了我们输出类的特征。<br>  <br><br>  全局平均池化的优势： </p><ol><li>通过加强特征图与类别的一致性，让卷积结构更简单 </li><li>不需要进行参数优化，所以这一层可以避免过拟合 </li><li>它对空间信息进行了求和，因而对输入的空间变换更具有稳定性</li></ol></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>在采用了微神经网络后，让局部模型有更强的抽象能力，从而让全局平均池化能具有特征图与类别之间的一致性，同时相比传统CNN采用的全连接层，不易过拟合（因为全局平均池化本身就是一种结构性的规则项）（PS:经典CNN容易过拟合，并严重依赖用dropout进行规则化）。</p><h2 id="4-6-GoogleNet"><a href="#4-6-GoogleNet" class="headerlink" title="4.6 GoogleNet"></a>4.6 GoogleNet</h2><h3 id="4-6-1-模型结构"><a href="#4-6-1-模型结构" class="headerlink" title="4.6.1 模型结构"></a>4.6.1 模型结构</h3><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image25.jpeg" alt=""><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image26.png" alt=""></p><h3 id="4-6-2-Inception-结构"><a href="#4-6-2-Inception-结构" class="headerlink" title="4.6.2 Inception 结构"></a>4.6.2 Inception 结构</h3><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image27.jpeg" alt=""></p><p>对上图做以下说明：</p><ol><li>采用不同大小的卷积核意味着不同大小的感受野，最后拼接意味着不同尺度特征的融合； </li><li>之所以卷积核大小采用1、3和5，主要是为了方便对齐。设定卷积步长stride=1之后，只要分别设定pad=0、1、2，那么卷积之后便可以得到相同维度的特征，然后这些特征就可以直接拼接在一起了；</li><li>文章说很多地方都表明pooling挺有效，所以Inception里面也嵌入了。 </li><li>网络越到后面，特征越抽象，而且每个特征所涉及的感受野也更大了，因此随着层数的增加，3x3和5x5卷积的比例也要增加。</li></ol><p>但是，使用5x5的卷积核仍然会带来巨大的计算量。 为此，文章借鉴NIN2，采用1x1卷积核来进行降维。</p><p>例如：上一层的输出为100x100x128，经过具有256个输出的5x5卷积层之后(stride=1，padding=2)，输出数据为100x100x256。其中，卷积层的参数为128x5x5x256。假如上一层输出先经过具有32个输出的1x1卷积层，再经过具有256个输出的5x5卷积层，那么最终的输出数据仍为为100x100x256，但卷积参数量已经减少为128x1x1x32 + 32x5x5x256，大约减少了4倍。</p><p>具体改进后的Inception Module如下图：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image28.jpeg" alt=""></p><h2 id="4-7-Inception-系列"><a href="#4-7-Inception-系列" class="headerlink" title="4.7 Inception 系列"></a>4.7 Inception 系列</h2><h3 id="4-7-1-Inception-v1"><a href="#4-7-1-Inception-v1" class="headerlink" title="4.7.1 Inception v1"></a>4.7.1 Inception v1</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>相比于GoogLeNet之前的众多卷积神经网络而言，inception v1采用在同一层中提取不同的特征（使用不同尺寸的卷积核），并提出了卷积核的并行合并（也称为Bottleneck layer），如下图</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image31.png" alt=""></p><p>这样的结构主要有以下改进：</p><ol><li>一层block就包含1x1卷积，3x3卷积，5x5卷积，3x3池化(使用这样的尺寸不是必需的，可以根据需要进行调整)。这样，网络中每一层都能学习到“稀疏”（3x3. 5x5）或“不稀疏”（1x1）的特征，既增加了网络的宽度，也增加了网络对尺度的适应性；</li><li>通过deep concat在每个block后合成特征，获得非线性属性。</li></ol><p>虽然这样提高了性能，但是网络的计算量实在是太大了，因此GoogLeNet借鉴了Network-in-Network的思想，使用1x1的卷积核实现降维操作，以此来减小网络的参数量(这里就不对两种结构的参数量进行定量比较了)，如图所示。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image32.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>最后实现的inception v1网络是上图结构的顺序连接，其中不同inception模块之间使用2x2的最大池化进行下采样，如表所示。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image33.png" alt=""> </p><p>如表所示，实现的网络仍有一层全连接层，该层的设置是为了迁移学习的实现（下同）。<br>在之前的网络中，最后都有全连接层，经实验证明，全连接层并不是很必要的，因为可能会带来以下三点不便：<br>​    - 网络的输入需要固定<br>​    - 参数量多<br>​    - 易发生过拟合<br>实验证明，将其替换为平均池化层（或者1x1卷积层）不仅不影响精度，还可以减少。</p><h3 id="4-7-2-Inception-v2"><a href="#4-7-2-Inception-v2" class="headerlink" title="4.7.2 Inception v2"></a>4.7.2 Inception v2</h3><p>在V1的基础之上主要做了以下改进：</p><ul><li><p>使用BN层，将每一层的输出都规范化到一个N(0,1)的正态分布，这将有助于训练，因为下一层不必学习输入数据中的偏移，并且可以专注与如何更好地组合特征（也因为在v2里有较好的效果，BN层几乎是成了深度网络的必备）；<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>（在Batch-normalized论文中只增加了BN层，而之后的Inception V3的论文提及到的inception v2还做了下面的优化）</p></li><li><p>使用2个3x3的卷积代替梯度（特征图，下同）为35x35中的5x5的卷积，这样既可以获得相同的视野(经过2个3x3卷积得到的特征图大小等于1个5x5卷积得到的特征图)，还具有更少的参数，还间接增加了网络的深度，如下图。</p></li></ul><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image34.png" alt=""><br><img src="/2016/12/20/第四章_经典网络/img/ch4/image35.png" alt=""> </p><ul><li>3x3的卷积核表现的不错，那更小的卷积核是不是会更好呢？比如2x2。对此，v2在17x17的梯度中使用1 * n和n * 1这种非对称的卷积来代替n * n的对称卷积，既降低网络的参数，又增加了网络的深度（实验证明，该结构放于网络中部，取n=7，准确率更高），如下。（基于原则3）</li></ul><center><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image36.png"><br>    <img src="/2016/12/20/第四章_经典网络/ch4/image37.png"><br></center><ul><li>在梯度为8x8时使用可以增加滤波器输出的模块（如下图），以此来产生高维的稀疏特征。</li></ul><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image38.png" alt=""> </p><ul><li>输入从224x224变为229x229。</li></ul><p>最后实现的Inception v2的结构如下表。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image39.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>经过网络的改进，inception v2得到更低的识别误差率，与其他网络识别误差率对比如表所示。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image40.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>如表，inception v2相比inception v1在imagenet的数据集上，识别误差率由29%降为23.4%。</p><h3 id="4-7-3-Inception-v3"><a href="#4-7-3-Inception-v3" class="headerlink" title="4.7.3 Inception v3"></a>4.7.3 Inception v3</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>inception模块之间特征图的缩小，主要有下面两种方式：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image41.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>右图是先进行inception操作，再进行池化来下采样，但是这样参数量明显多于左图(比较方式同前文的降维后inception模块)，因此v2采用的是左图的方式，即在不同的inception之间（35/17/8的梯度）采用池化来进行下采样。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>但是，左图这种操作会造成表达瓶颈问题，也就是说特征图的大小不应该出现急剧的衰减(只经过一层就骤降)。如果出现急剧缩减，将会丢失大量的信息，对模型的训练造成困难。<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>因此，在2015年12月提出的Inception V3结构借鉴inception的结构设计了采用一种并行的降维结构，如下图：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image42.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;具体来说，就是在35/17/8之间分别采用下面这两种方式来实现特征图尺寸的缩小，如下图：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image43.png" alt=""> </p><p>figure 5’   35/17之间的特征图尺寸减小</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image44.png" alt=""> </p><p>figure 6’ 17/8之间的特征图尺寸缩小</p><p>这样就得到Inception v3的网络结构，如表所示。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image45.png" alt=""> </p><h3 id="4-7-4-Inception-V4"><a href="#4-7-4-Inception-V4" class="headerlink" title="4.7.4 Inception V4"></a>4.7.4 Inception V4</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>其实，做到现在，Inception模块感觉已经做的差不多了，再做下去准确率应该也不会有大的改变。但是谷歌这帮人还是不放弃，非要把一个东西做到极致，改变不了Inception模块，就改变其他的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>因此，作者Christian Szegedy设计了Inception v4的网络，将原来卷积、池化的顺次连接（网络的前几层）替换为stem模块，来获得更深的网络结构。stem模块结构如下：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image46.png" alt=""> </p><center>stem模块</center><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image47.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception v4 中的Inception模块（分别为Inception A Inception B Inception C）</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image48.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception v4中的reduction模块（分别为reduction A reduction B）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>最终得到的Inception v4结构如下图。</p><h3 id="4-7-5-Inception-ResNet-v2"><a href="#4-7-5-Inception-ResNet-v2" class="headerlink" title="4.7.5 Inception-ResNet-v2"></a>4.7.5 Inception-ResNet-v2</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>ResNet的结构既可以加速训练，还可以提升性能（防止梯度消失）；Inception模块可以在同一层上获得稀疏或非稀疏的特征。有没有可能将两者进行优势互补呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Christian Szegedy等人将两个模块的优势进行了结合，设计出了Inception-ResNet网络。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>(Inception-ResNet有v1和v2两个版本，v2表现更好且更复杂，这里只介绍了v2)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception-ResNet的成功，主要是它的Inception-ResNet模块。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception-ResNet v2中的Inception-ResNet模块如下图：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image49.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception-ResNet模块（分别为Inception-ResNet-A Inception-ResNet-B Inception-ResNet-C）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception-ResNet模块之间特征图尺寸的减小如下图。（类似于Inception v4）</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image50.png" alt=""> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>Inception-ResNet-v2中的reduction模块（分别为reduction A reduction B）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>最终得到的Inception-ResNet-v2网络结构如图(stem模块同Inception v4)。<br><img src="/2016/12/20/第四章_经典网络/img/ch4/image63.png" alt=""> </p><h2 id="4-8-ResNet及其变体"><a href="#4-8-ResNet及其变体" class="headerlink" title="4.8 ResNet及其变体"></a>4.8 ResNet及其变体</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>自从AlexNet在LSVRC2012分类比赛中取得胜利之后，深度残差网络（Deep Residual Network）可以说成为过去几年中，在计算机视觉、深度学习社区领域中最具突破性的成果了。ResNet可以实现高达数百，甚至数千个层的训练，且仍能获得超赞的性能。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>得益于其强大的表征能力，许多计算机视觉应用在图像分类以外领域的性能得到了提升，如对象检测和人脸识别。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>自从2015年ResNet进入人们的视线，并引发人们思考之后，许多研究界人员已经开始研究其成功的秘诀，并在架构中纳入了许多新的改进。本文分为两部分，第一部分我将为那些不熟悉ResNet的人提供一些相关的背景知识，第二部分我将回顾一些我最近读过的关于ResNet架构的不同变体及其论文的相关阐述。</p><h3 id="4-8-1-重新审视ResNet"><a href="#4-8-1-重新审视ResNet" class="headerlink" title="4.8.1 重新审视ResNet"></a>4.8.1 重新审视ResNet</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>根据泛逼近性原理（universal approximation theorem），我们知道，如果给定足够的容量，一个具有单层的前馈网络足以表示任何函数。然而，该层可能是巨大的，且网络可能容易过度拟合数据。因此，研究界有一个共同的趋势，即我们的网络架构需要更深。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>自从AlexNet投入使用以来，最先进的卷积神经网络（CNN）架构越来越深。虽然AlexNet只有5层卷积层，但VGG网络和GoogleNet（代号也为Inception_v1）分别有19层和22层。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>但是，如果只是通过简单地将层叠加在一起，增加网络深度并不会起到什么作用。随着网络层数的增加，就会出现梯度消失问题，这就会造成网络是难以进行训练，因为梯度反向传播到前层，重复乘法可能使梯度无穷小，这造成的结果就是，随着网络加深，其性能趋于饱和，或者甚至开始迅速退化。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image51.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>增加网络深度导致性能下降</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>其实早在ResNet之前，已经有过好几种方法来处理梯度消失问题，例如，在中间层增加辅助损失作为额外的监督，但遗憾的是，似乎没有一个方法可以真正解决这个问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>ResNet的核心思想是引入所谓的“恒等映射（identity shortcut connection）”，可以跳过一层或多层，如下图所示：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image52.png" alt=""></p><h3 id="4-8-2-残差块"><a href="#4-8-2-残差块" class="headerlink" title="4.8.2 残差块"></a>4.8.2 残差块</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br><a href="https://arxiv.org/pdf/1512.03385v1.pdf" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a>的作者认为，堆积网络层数不应该降低网络性能，因为我们可以简单地在当前网络上堆积身份映射（层不做任何事情），并且所得到的架构将执行相同的操作。这表明，较深的模型所产生的训练误差不应该比较浅的模型高。他们假设让堆积层适应残差映射比使它们直接适应所需的底层映射要容易得多。下图的残差块可以明确地使它做到这一点。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image53.png" alt=""></p><h3 id="4-8-3-ResNet架构"><a href="#4-8-3-ResNet架构" class="headerlink" title="4.8.3 ResNet架构"></a>4.8.3 ResNet架构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>事实上，ResNet并不是第一个利用short cut、Highway Networks引入门控近路连接的。这些参数化门控制允许多少信息流过近路（shortcut）。类似的想法可以在长短期记忆网络（LSTM）单元中找到，其中存在参数化的忘记门，其控制多少信息将流向下一个时间步。因此，ResNet可以被认为是Highway Networks的一种特殊情况。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>然而，实验表明，Highway Networks的性能并不如ResNet，因为Highway Networks的解决方案空间包含ResNet，因此它应该至少表现得像ResNet一样好。这就表明，保持这些“梯度公路”干净简洁比获取更大的解决方案空间更为重要。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>照着这种直觉，论文作者改进了残差块，并提出了一个残差块的预激活变体，其中梯度可以畅通无阻地通过快速连接到任何其他的前层。论文的实验结果表明，使用原始的残差块，训练1202层ResNet所展示的性能比其训练110层对等物要差得多。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image54.png" alt=""></p><h3 id="4-8-4-ResNeXt"><a href="#4-8-4-ResNeXt" class="headerlink" title="4.8.4 ResNeXt"></a>4.8.4 ResNeXt</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>S. Xie，R. Girshick，P. Dollar，Z. Tu和 K. He在<a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Xie_Aggregated_Residual_Transformations_CVPR_2017_paper.pdf" target="_blank" rel="noopener">Aggregated Residual Transformations for Deep Neural Networks</a>中提出了一个代号为ResNeXt的ResNet变体，它具有以下构建块：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image55.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>左：《Deep Residual Learning for Image Recognition》中所提及的构建块，右图： ResNeXt构建块 基数=32</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>这可能看起来很熟悉，因为它非常类似于《IEEE计算机视觉与模式识别会议论文集》中《Going deeper with convolutions》的Inception模块，它们都遵循“拆分-转换-合并”范式，除了在这个变体中，不同路径的输出通过将它们相加在一起而被合并，而在《Going deeper with convolutions》中它们是深度连接的。另一个区别是，在《Going deeper with convolutions》中，每个路径彼此互不相同（1x1,3x3和5x5卷积），而在此架构中，所有路径共享相同的拓扑。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>作者介绍了一个称为 “基数（cardinality）”的超参数——独立路径的数量，以提供调整模型容量的新方式。实验表明，可以通过增加基数，而不是深度或宽度，来更加有效地获得准确度。作者指出，与Inception相比，这种新颖的架构更容易适应新的数据集/任务，因为它具有一个简单的范式，且只有一个超参数被调整，而Inception却具有许多超参数（如每个路径中卷积层内核大小）待调整。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>这个新颖的构建块有如下三种等效形式：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image56.png" alt=""></p><p>实际上，“分割-变换-合并”通常是通过点分组卷积层来完成的，它将其输入分成特征映射组，并分别执行正常卷积，其输出被深度级联，然后馈送到1x1卷积层。</p><h3 id="4-8-5-ResNet作为小型网络的组合"><a href="#4-8-5-ResNet作为小型网络的组合" class="headerlink" title="4.8.5 ResNet作为小型网络的组合"></a>4.8.5 ResNet作为小型网络的组合</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br><a href="https://arxiv.org/pdf/1603.09382.pdf" target="_blank" rel="noopener">Deep Networks with Stochastic Depth</a>提出了一种反直觉的方式，训练一个非常深层的网络，通过在训练期间随机丢弃它的层，并在测试时间内使用完整的网络。Veit等人有一个更反直觉的发现：我们实际上可以删除一些已训练的ResNet的一些层，但仍然具有可比性能。这使得ResNet架构更加有趣，该论文亦降低了VGG网络的层，并大大降低了其性能。<br>该论文首先提供了ResNet的一个简单的视图，使事情更清晰。在我们展开网络架构之后，这是很显而易见的，具有i个残差块的ResNet架构具有$2^{i}$个不同的路径（因为每个残差块提供两个独立的路径）。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image60.jpeg" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>鉴于上述发现，我们很容易发现为什么在ResNet架构中删除几层，对于其性能影响不大——架构具有许多独立的有效路径，在我们删除了几层之后，它们大部分保持不变。相反，VGG网络只有一条有效的路径，所以删除一层是唯一的途径。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>作者还进行了实验，表明ResNet中的路径集合具有集合行为。他们是通过在测试时间删除不同数量的层，然后查看网络的性能是否与已删除层的数量平滑相关，这样的方式做到的。结果表明，网络确实表现得像集合，如下图所示：</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image61.png" alt=""></p><h3 id="4-8-6-ResNet中路径的特点"><a href="#4-8-6-ResNet中路径的特点" class="headerlink" title="4.8.6 ResNet中路径的特点"></a>4.8.6 ResNet中路径的特点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>最后，作者研究了ResNet中路径的特点：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>很明显，所有可能的路径长度的分布都遵循二项式分布，如（a）所示。大多数路径经过19到35个残差块。</p><p><img src="/2016/12/20/第四章_经典网络/img/ch4/image62.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    调查路径长度与经过其的梯度大小之间的关系，同时获得长度为k的路径的梯度幅度，作者首先将一批数据馈送给网络，随机抽取k个残差块。当反向传播梯度时，它们仅传播到采样残余块的权重层。（b）表明随着路径变长，梯度的大小迅速下降。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>​    我们现在可以将每个路径长度的频率与其预期的梯度大小相乘，以了解每个长度的路径对于训练有多少帮助，如（c）所示。令人惊讶的是，大多数贡献来自长度为9至18的路径，但它们仅占总路径的一小部分，如（a）所示。这是一个非常有趣的发现，因为它表明ResNet并没有解决长路径上的梯度消失问题，而是通过缩短其有效路径，ResNet实际上能够实现训练非常深度的网络。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>答案来源：<a href="http://www.sohu.com/a/157818653_390227" target="_blank" rel="noopener">ResNet有多大威力？最近又有了哪些变体？一文弄清</a></p><h2 id="4-9-为什么现在的CNN模型都是在GoogleNet、VGGNet或者AlexNet上调整的？"><a href="#4-9-为什么现在的CNN模型都是在GoogleNet、VGGNet或者AlexNet上调整的？" class="headerlink" title="4.9 为什么现在的CNN模型都是在GoogleNet、VGGNet或者AlexNet上调整的？"></a>4.9 为什么现在的CNN模型都是在GoogleNet、VGGNet或者AlexNet上调整的？</h2><ul><li>评测对比：为了让自己的结果更有说服力，在发表自己成果的时候会同一个标准的baseline及在baseline上改进而进行比较，常见的比如各种检测分割的问题都会基于VGG或者Resnet101这样的基础网络。</li><li>时间和精力有限：在科研压力和工作压力中，时间和精力只允许大家在有限的范围探索。</li><li>模型创新难度大：进行基本模型的改进需要大量的实验和尝试，并且需要大量的实验积累和强大灵感，很有可能投入产出比比较小。</li><li>资源限制：创造一个新的模型需要大量的时间和计算资源，往往在学校和小型商业团队不可行。</li><li>在实际的应用场景中，其实是有大量的非标准模型的配置。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 NLP</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0_NLP/"/>
    <id>https://leesen998.github.io/2016/12/20/第十六章_NLP/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:37:28.792Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Markdown Revision 1;</span><br><span class="line">Editor: 盛泳潘-电子科技大学;何建宏-学生</span><br><span class="line">Contact: shengyp2011@163.com;Bonopengate@gmail.com</span><br></pre></td></tr></table></figure><h2 id="16-0-NLP-发展史简述"><a href="#16-0-NLP-发展史简述" class="headerlink" title="16.0 NLP 发展史简述"></a>16.0 NLP 发展史简述</h2><p>50多年来 NLP 的历史发展可以分为三个浪潮，前两波以理性主义和经验主义的形式出现，为当前的深度学习浪潮铺平了道路。NLP的深层学习革命的主要支柱是: （1）语言嵌入实体的分布式表征，（2）由于嵌入而产生的语义泛化， （3）自然语言的大跨度深序列建模，（4）能够从低到高表示语言层次的分层网络，以及（5）解决许多联合 NLP 问题的端对端深度学习方法。</p><h3 id="第一个浪潮：理性主义"><a href="#第一个浪潮：理性主义" class="headerlink" title="第一个浪潮：理性主义"></a>第一个浪潮：理性主义</h3><p>在第一个浪潮中，NLP的实验持续了很长一段时间，可以追溯到20世纪50年代。1950年，阿兰·图灵提出了图灵测试，以评估计算机表现出与人类无法区分的智能行为的能力。这项测试是基于人类和计算机之间的自然语言对话，旨在生成类似人类的反应。1954年，George-IBM 实验产出了能够将60多个俄语句子翻译成英语的rrst机器翻译系统。</p><p>这些方法是基于这样一种信念，即人类思维中的语言知识是由泛型继承提前进行的，而这种信念，在大约1960年至1980年代后期，占据了NLP的大部分研究中的主导地位。这些方法被称为理性主义方法（Church 2007）。理性主义方法在 NLP 中的主导地位主要是由于诺姆·乔姆斯基（Noam Chomsky）关于先天语言结构的论点被广泛接受以及他对 N-grams 方法的批评（Chomsky 1957）。理性主义者一般假设语言的关键部分在出生时就被硬连接到大脑中，作为人类遗传遗传的一部分，因此他们试图设计手工制作的规则，将知识和推理机制纳入智能 NLP 系统。直到20世纪80年代，最著名的成功的NLP系统，如为模拟 Rogerian psychotherapist 的 ELIZA 系统和为了规则化真实世界信息为规则本体的 MARGIE 系统，都是基于复杂的手写规则。</p><p>这一时期恰逢以专家知识工程为特点的早期智能的早期发展，即领域专家根据其所掌握的（非常狭窄的）应用领域的知识设计计算机程序（Nilsson 1982; Winston 1993）。专家们使用符号逻辑规则设计了这些程序，这些规则基于对这些知识的仔细表征和工程。这些以知识为基础的智能系统往往通过检测”Head”或最重要的参数，并就每种特殊情况采取特定的解决办法，而这在解决狭义问题方面往往是有效的。这些“Head”参数由人类专家预先确定，使“tail”参数和案例不受影响。由于缺乏学习能力，他们有必要将解决方案推广到新的情况和领域。这一时期的典型方法是专家系统所提供的证据，这是一个模拟人类专家决策能力的计算机系统。这种系统旨在通过知识推理来解决复杂的问题（Nilsson 1982）。第一个专家系统建立于1970年代，然后在1980年代推广。使用的主要”算法”是以”if-then-else”为形式的推断规则（Jackson 1998）。这些智能系统的主要优点是其在进行逻辑推理方面（有限）能力的透明度和可解释性。像NLP系统，如 ELIZA 和 MARGIE ，一般专家系统在早期使用手工制作的专家知识，这往往是有效的狭隘的问题，虽然推理无法处理不确定性，是普遍存在的实际应用。</p><p>同样，语音识别研究和系统设计，这又是另一个长期存在的 NLP 和反智能挑战，在这个理性主义时代，主要基于专家知识工程的范式，如elegantly analyzed in（Church and Mercer 1993）。在1970年代和1980年代初，专家系统的语音识别方法相当流行（Reddy 1976; Zue 1985）。然而，研究人员敏锐地认识到，缺乏从数据中学习和处理推理不确定性的能力，导致了接下来描述的第二波语音识别、NLP和对于文本的人工智能浪潮也走向失败。</p><h3 id="第二波浪潮：经验主义"><a href="#第二波浪潮：经验主义" class="headerlink" title="第二波浪潮：经验主义"></a>第二波浪潮：经验主义</h3><p>第二波 NLP 浪潮的特点是利用语料库数据以及基于（浅层）机器学习、统计学等来利用这些数据（Manning and Schtze 1999）。由于许多自然语言的结构和理论都被贬低或抛弃，而倾向于数据驱动的方法，这个时代发展的主要方法被称为经验或务实的方法（ChurchandMercer 1993;Church 2014）。NLP 的一个主要会议甚至被命名为“自然语言处理的经验方法（Empirical Methods in Natural Language Processing）（EMNLP）”，最直接地反映了NLP研究人员在那个时代对经验方法的强烈积极情绪。</p><p>与理性主义方法相反，经验方法认为人类的思维只是从关联、模式识别和泛化的常规操作开始。丰富的感官输入需要使大脑学习自然语言的详细结构。经验主义盛行于1920年至1960年间，自1990年以来一直在兴起。NLP的早期经验方法主要是开发生成模型，如隐马尔可夫模型 （HMM） （Baum and Petrie 1966）， IBM 翻译模型 （Brown et al. 1993）， 和 head-driven parsing 模型（Collins 1997），以发现大型语料库的规律性。自1990年代后期以来，在各种NLP任务中，歧视性模式已成为事实上的做法。NLP的典型判别模型和方法包括最大熵模型（ratnaparkhi 1997）、支持向量机（Vapnik 1998）、条件随机（Lafferty et al. 2001）、最大相互信息和最小区分器错误（He et al. 2008）还有感知器（Collins 2002）。</p><p>在这种经验主义时代中、NLP 与同样的智能方法如语音识别和计算机视觉是平行的。这是在明确的证据表明，学习和感知能力对复杂的智能系统至关重要，但在前一波流行的专家系统中却不存在。例如，当 DARPA 开始对自动驾驶提出重大挑战时，大多数车辆随后依赖于基于知识的智能智能。正如语音识别和NLP 一样，自主驾驶和计算机视觉研究人员意识到基于知识的范式的局限性，因为机器学习需要进行不确定性处理和泛化能力。</p><p>在第二波浪潮中，NLP的经验主义和语音识别是基于数据密集型机器学习的，我们现在称之为“shallow”，因为在下一节中描述的第三波浪潮中，数据的多层或“deep”表征通常缺乏抽象结构。在机器学习中，在第一次浪潮中，研究人员不需要考虑构造精确规则，为知识为基础的 NLP 和语音系统。相反，他们把重点放在统计模型（Bishop 2006; Murphy 2012）或作为一个基本引擎的简单的神经网络（Bishop 1995）。然后，他们使用足够的训练数据进行自动学习或“tune（调整）”系统的参数，使它们能够处理不确定性，并尝试从一个条件泛化到另一个条件，从一个领域泛化到另一个领域。机器学习的关键算法和方法包括EM （期望最大化）、贝叶斯网络、支持向量机、决策树以及神经网络的反向传播算法。</p><p>一般来说，基于机器学习的NLP、语音和其他智能系统的性能比早期的基于知识的智能系统要好得多。成功的例子包括语音识别 （Jelinek 1998）， 脸部识别 （Viola and Jones 2004）， 实体识别 （Fei-Fei and Perona 2005）， 手写字体识别 （Plamondon and Srihari 2000）， 以及机器翻译 （Och 2003）。</p><p>在语音识别方面，从20世纪80年代初到2010年前后近30年，利用基于 HMM 与高斯混合模型相结合的统计生成模型，以及其推广的各种版本（Baker et al. 2009a，b; Deng and O’Shaughnessy 2003; Rabiner and Juang 1993）的统计生成模式。泛化 HMM 的许多版本都是基于统计和神经网络的隐动态模型（Deng 1998; Bridle et al. 1998; Deng and Yu 2007）。前者采用 EM 和 switching extended Kalman ﬁlter 算法学习模型参数（Ma and Deng 2004; Lee et al. 2004），后者采用反向传播（Picone et al. 1999），两者都广泛地利用多个潜在层表示法进行语音分析的生成过程。将这种“深度”生成过程转化为端到端过程的对应方案，导致了深度学习的工业化成功（Deng et al. 2010， 2013; Hinton et al. 2012） ，从而形成了第三波浪潮的驱动力。</p><h3 id="第三波浪潮：深度学习"><a href="#第三波浪潮：深度学习" class="headerlink" title="第三波浪潮：深度学习"></a>第三波浪潮：深度学习</h3><p>在第二波浪潮中开发的 NLP 系统，包括语音识别、语言理解和机器翻译，表现得比在第一波浪潮时更好，鲁棒性更高，但它们远远没有达到人的水平，而这留下了很多需求。除了少数例外，NLP的（浅层）机器学习模型通常没有足够的容量来吸收大量的训练数据。此外，学习算法、方法和基础设施也都不够强大。所有这一切都在几年前发生了变化，而这导致了第三波 NLP 浪潮，这股浪潮是由深层机器学习或深度学习的新范式推动的（Bengio 2009; Deng and Yu 2014; LeCun et al. 2015; Goodfellow et al. 2016）。</p><p>深度学习起源于人工神经网络，它可以被看作是受生物神经系统启发的细胞类型的级联模型。随着反向传播算法的出现（Rumelhart et al. 1986），90年代对深度神经网络的训练引起了广泛关注。在没有大量训练数据和没有适当的设计和学习范式的情况下，在神经网络训练过程中，学习信号随着层次数（或更严格的信用分配深度）在层层传播时呈指数形式消失，使得调整深层神经网络特别是递归的版本的连接权重变得异常艰难。Hinton 等人（2006）克服了这个问题，使用无人监督的预训练模型来进行学习有用的特征探测器。然后，通过监督学习进一步训练网络，对标记数据进行分类。因此，可以学习使用低维表征的方式来学习高维的表征的分布。这项开创性的工作标志着神经网络的复兴。此后提出和发展了各种网络结构，包括 Deep Belief 网络（Hinton et al.2006）、堆积自编码器（Vincent et al.2010）、深层玻尔兹曼机（Hinton and Salakhutdinov 2012）、深度卷积神经网络（Krizhevsky et al. 2012），深层堆积网络 （Deng et al. 2012），和深层 Q-networks （Mnih et al. 2015）。深度学习自2010年以来已成功地应用于实际智能领域的实际任务，包括语音识别（Yu et al. 2010; Hinton et al. 2012），图像识别（Krizhevsky et al. 2012; He et al. 2016），以及 NLP 绝大多数领域。 </p><p>其中由于微软公司在工业化上的成功，以及愈来愈高的准确率等迹象，这些2010-2011年语音识别的惊人成功预示着 NLP 的第三波浪潮和人工智能的到来。随着深度学习在语音识别方面取得成功，计算机视觉（Krizhevsky et al. 2012）和机器翻译（Bahdanau et al. 2015）被类似的深度学习范式所取代。特别是，虽然 Bengio 等人在2001的工作，在2011年就开发了强大的神经词嵌入技术（Bengio et al. 2001），但由于大数据的可用性和更快的计算，它直到10多年后才被证明在一个大规模和实际有用的规模上才能够实际有用（Mikolov et al. 2013）。此外，许多其他现实世界的NLP应用，如图像字幕（Karpathy and Fei-Fei 2015; Fang et al. 2015; Gan et al. 2017），视觉问题回答（Fei-Fei and Perona 2016），语音理解系统（Mesnil et al. 2013），网络搜索（Huang et al. 2013b）和推荐系统由于深度学习而取得成功，此外还有许多非NLP任务，包括药物发现和药理学、客户关系管理、推荐系统、手势识别、医学信息、广告投放、医学图像分析、机器人、自动驾驶车辆、纸板和电子游戏（例如 Atari， Go， Poker， and the latest， DOTA2）等。详情请参阅维基上的深度学习领域。</p><p>在更多基于文本的应用领域中，机器翻译可能受到深度学习的影响最大。从 NLP 第二波浪潮中发展起来的浅层——统计机器翻译开始看起的话，目前在实际应用中最好的机器翻译系统是基于深神经网络的。例如，谷歌在2016年9月宣布了其转向神经机器翻译的阶段，两个月后微软也发布了类似的声明。Facebook已经进行了大约一年的机器神经网络翻译的转换工作，到2017年8月它已经完全将这个系统部署成功。</p><p>在口语理解和对话系统领域，深度学习也正在产生巨大影响。目前流行的技术以多种方式维护和扩展了第二波时代浪潮中发展起来的统计方法。与经验（浅层）机器学习方法一样，深度学习也是基于数据密集型方法，以降低手工制作规则的成本，对噪声环境下的语音识别错误和语言理解错误具有很强的鲁棒性，并利用决策过程和强化学习的力量来设计对话策略，例如（Gasic et al. 2017; Dhingra et al. 2017）。与早期的方法相比，深度神经网络模型和表征方法更强大，它们使端到端学习成为可能。然而，深度学习也没有解决可解释性和领域泛化问题。</p><p>将深度学习应用于 NLP 问题方面的最近的两个重要技术突破是序列到序列学习（Sutskevar et al. 2014）和注意力机制建模（Bahdanau et al. 2015），以及最近的 BERT模型（Jacob el al.2018） 。序列到序列学习引入了一个强大的学习范式，即使用递归神经网络以端到端的方式进行编码和解码。注意力机制建模最初是为了克服编码一个长序列的难度而开发的，后来的持续发展又扩展了它的能力，提供了两个任意序列的高度可塑对齐能力，而其两个可以同时学习神经网络参数。而 BERT 则是实现了双向建模获取以得到更好的语言表征能力。序列到序列学习和注意力机制的关键概念在基于统计学习和词局部表征的最佳系统上提高了基于分布式单词嵌入的神经机器翻译的性能，而 BERT 更重要的意义是双向获取同一文段的高维意义。在这一成功之后，这些概念也被成功地应用到许多其他与NLP相关的任务中，如图像字幕（Karpathy and Fei-Fei 2015; Devlin et al. 2015）、语音识别（Chorowski et al. 2015）、一次性学习、句法分析、唇读、文本理解、摘要以及问答系统等。撇开他们巨大的经验成功不谈，基于神经网络的深度学习模型往往比早期浪潮中的传统机器学习模型更简单、更容易设计。在许多应用中，在端到端的任务中，模型的所有部分都同时进行深度学习，从特征抽取到预测。导致神经网络模型相对简单的另一个因素是，相同的模型构建成的块（即不同类型的层）通常在许多不同的应用中使用。为多种任务使用相同的构建块，这种方法使得模型更容易迁移到其它任务和数据上。此外，谷歌等公司还开发了软件工具包，以便更快、更有效地实现这些模型。由于以上这些原因，神经网络在数据量大而且基于云的方式上，是更常用的。</p><p>尽管深度学习在重塑语音、图像和视频的处理方面被证明是有效的，而且具有它的革命性，但在将深度学习与基于文本的 NLP 相结合方面的有效性并不那么明确，尽管它在一些实用的 NLP 任务中取得了经验上的成功。在语音、图像和视频处理中，深度学习通过直接从原始数据学习规律来解决语义差距问题。然而，在 NLP 中，人们提出了更强的理论和结构化模型，即语音、语法和语义，来提取理解和生成自然语言的基本机制，这些机制与神经网络不那么容易兼容。与语音、图像和视频信号相比，从文本数据中学习的神经表征可以对自然语言提供同样直接的见解，但是这个也不够直接。因此，将神经网络，特别是那些具有复杂层次结构的神经网络应用于 NLP，已成为 NLP 和深度学习社区中最活跃的领域，近年来取得了非常显著的进展（Deng 2016; Manning and Socher 2017;Jacob el al.2018）。</p><h2 id="16-1-如何理解序列到序列模型？"><a href="#16-1-如何理解序列到序列模型？" class="headerlink" title="16.1 如何理解序列到序列模型？"></a>16.1 如何理解序列到序列模型？</h2><h2 id="16-2-序列到序列模型有什么限制吗？"><a href="#16-2-序列到序列模型有什么限制吗？" class="headerlink" title="16.2 序列到序列模型有什么限制吗？"></a>16.2 序列到序列模型有什么限制吗？</h2><h2 id="16-3-如果不采用序列到序列模型，可以考虑用其它模型方法吗？"><a href="#16-3-如果不采用序列到序列模型，可以考虑用其它模型方法吗？" class="headerlink" title="16.3 如果不采用序列到序列模型，可以考虑用其它模型方法吗？"></a>16.3 如果不采用序列到序列模型，可以考虑用其它模型方法吗？</h2><h2 id="16-4-如何理解词向量？"><a href="#16-4-如何理解词向量？" class="headerlink" title="16.4 如何理解词向量？"></a>16.4 如何理解词向量？</h2><h2 id="16-5-词向量哪家好？"><a href="#16-5-词向量哪家好？" class="headerlink" title="16.5 词向量哪家好？"></a>16.5 词向量哪家好？</h2><h2 id="16-6-解释一下注意力机制的原理？"><a href="#16-6-解释一下注意力机制的原理？" class="headerlink" title="16.6 解释一下注意力机制的原理？"></a>16.6 解释一下注意力机制的原理？</h2><h2 id="16-7-注意力机制是不是适用于所有场景呢？它的鲁棒性如何？"><a href="#16-7-注意力机制是不是适用于所有场景呢？它的鲁棒性如何？" class="headerlink" title="16.7 注意力机制是不是适用于所有场景呢？它的鲁棒性如何？"></a>16.7 注意力机制是不是适用于所有场景呢？它的鲁棒性如何？</h2><h2 id="16-8-怎么将原有的模型加上注意力机制呢？"><a href="#16-8-怎么将原有的模型加上注意力机制呢？" class="headerlink" title="16.8 怎么将原有的模型加上注意力机制呢？"></a>16.8 怎么将原有的模型加上注意力机制呢？</h2><h2 id="16-9-通俗地解释一下词法分析是什么？有什么应用场景？"><a href="#16-9-通俗地解释一下词法分析是什么？有什么应用场景？" class="headerlink" title="16.9 通俗地解释一下词法分析是什么？有什么应用场景？"></a>16.9 通俗地解释一下词法分析是什么？有什么应用场景？</h2><h2 id="16-10-深度学习中的词法分析有哪些常见模型呢？"><a href="#16-10-深度学习中的词法分析有哪些常见模型呢？" class="headerlink" title="16.10 深度学习中的词法分析有哪些常见模型呢？"></a>16.10 深度学习中的词法分析有哪些常见模型呢？</h2><h2 id="16-11-通俗地解释一下知识图谱是什么？有什么应用场景？"><a href="#16-11-通俗地解释一下知识图谱是什么？有什么应用场景？" class="headerlink" title="16.11 通俗地解释一下知识图谱是什么？有什么应用场景？"></a>16.11 通俗地解释一下知识图谱是什么？有什么应用场景？</h2><h2 id="16-12-深度学习中的知识图谱有哪些常见模型呢？"><a href="#16-12-深度学习中的知识图谱有哪些常见模型呢？" class="headerlink" title="16.12 深度学习中的知识图谱有哪些常见模型呢？"></a>16.12 深度学习中的知识图谱有哪些常见模型呢？</h2><h2 id="16-13-深度学习中的机器翻译有哪些常见模型呢？"><a href="#16-13-深度学习中的机器翻译有哪些常见模型呢？" class="headerlink" title="16.13 深度学习中的机器翻译有哪些常见模型呢？"></a>16.13 深度学习中的机器翻译有哪些常见模型呢？</h2><h2 id="16-14-机器翻译的通俗实现以及部署过程是怎样的呢？"><a href="#16-14-机器翻译的通俗实现以及部署过程是怎样的呢？" class="headerlink" title="16.14 机器翻译的通俗实现以及部署过程是怎样的呢？"></a>16.14 机器翻译的通俗实现以及部署过程是怎样的呢？</h2><h2 id="16-15-通俗地解释一下文本情感分析是什么？常见的应用场景是？"><a href="#16-15-通俗地解释一下文本情感分析是什么？常见的应用场景是？" class="headerlink" title="16.15 通俗地解释一下文本情感分析是什么？常见的应用场景是？"></a>16.15 通俗地解释一下文本情感分析是什么？常见的应用场景是？</h2><h2 id="16-16-最常用的情感分析模型是什么呢？如何快速部署呢？"><a href="#16-16-最常用的情感分析模型是什么呢？如何快速部署呢？" class="headerlink" title="16.16 最常用的情感分析模型是什么呢？如何快速部署呢？"></a>16.16 最常用的情感分析模型是什么呢？如何快速部署呢？</h2><h2 id="16-17-通俗地解释一下问答系统？它涵盖哪些领域？常见的应用场景是？"><a href="#16-17-通俗地解释一下问答系统？它涵盖哪些领域？常见的应用场景是？" class="headerlink" title="16.17 通俗地解释一下问答系统？它涵盖哪些领域？常见的应用场景是？"></a>16.17 通俗地解释一下问答系统？它涵盖哪些领域？常见的应用场景是？</h2><h2 id="16-18-常见的问答系统模型是什么？如何快速部署呢？"><a href="#16-18-常见的问答系统模型是什么？如何快速部署呢？" class="headerlink" title="16.18 常见的问答系统模型是什么？如何快速部署呢？"></a>16.18 常见的问答系统模型是什么？如何快速部署呢？</h2><h2 id="16-19-图像文字生成是什么？它的技术原理是什么？"><a href="#16-19-图像文字生成是什么？它的技术原理是什么？" class="headerlink" title="16.19 图像文字生成是什么？它的技术原理是什么？"></a>16.19 图像文字生成是什么？它的技术原理是什么？</h2><h2 id="16-20-常见的图像文字生成模型是什么？"><a href="#16-20-常见的图像文字生成模型是什么？" class="headerlink" title="16.20 常见的图像文字生成模型是什么？"></a>16.20 常见的图像文字生成模型是什么？</h2><h2 id="16-21-NLP-的无监督学习发展动态是怎样的？有哪些领域在尝试无监督学习？"><a href="#16-21-NLP-的无监督学习发展动态是怎样的？有哪些领域在尝试无监督学习？" class="headerlink" title="16.21 NLP 的无监督学习发展动态是怎样的？有哪些领域在尝试无监督学习？"></a>16.21 NLP 的无监督学习发展动态是怎样的？有哪些领域在尝试无监督学习？</h2><h2 id="16-22-NLP-和强化学习的结合方式是怎样的？有哪些方向在尝试强化学习？"><a href="#16-22-NLP-和强化学习的结合方式是怎样的？有哪些方向在尝试强化学习？" class="headerlink" title="16.22 NLP 和强化学习的结合方式是怎样的？有哪些方向在尝试强化学习？"></a>16.22 NLP 和强化学习的结合方式是怎样的？有哪些方向在尝试强化学习？</h2><h2 id="16-23-NLP-和元学习？元学习如何能够和-NLP-结合起来？"><a href="#16-23-NLP-和元学习？元学习如何能够和-NLP-结合起来？" class="headerlink" title="16.23 NLP 和元学习？元学习如何能够和 NLP 结合起来？"></a>16.23 NLP 和元学习？元学习如何能够和 NLP 结合起来？</h2><h2 id="16-24-能说一下各自领域最常用且常见的基准模型有哪些吗？"><a href="#16-24-能说一下各自领域最常用且常见的基准模型有哪些吗？" class="headerlink" title="16.24 能说一下各自领域最常用且常见的基准模型有哪些吗？"></a>16.24 能说一下各自领域最常用且常见的基准模型有哪些吗？</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>异构计算， GPU和框架选型指南</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0_%E5%BC%82%E6%9E%84%E8%BF%90%E7%AE%97%E3%80%81GPU%E5%8F%8A%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/"/>
    <id>https://leesen998.github.io/2016/12/20/第十五章_异构运算、GPU及框架选型/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:48:43.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><p>深度学习训练和推理的过程中，会涉及到大量的向量(vector)，矩阵(matrix)和张量(tensor)操作，通常需要大量的浮点计算，包括高精度（在训练的时候）和低精度（在推理和部署的时候）。GPU， 作为一种通用可编程的加速器，最初设计是用来进行图形处理和渲染功能，但是从2007年开始，英伟达(NVIDIA)公司提出了第一个可编程通用计算平台（GPGPU），同时提出了CUDA框架，从此开启了GPU用于通用计算的新纪元。此后，不计其数的科研人员和开发者，对各种不同类型的算法用CUDA进行（部分）改写，从而达到几倍到数百倍的加速效果。尤其是在机器学习，特别是深度学习的浪潮来临后，GPU加速已经是各类工具实现的基本底层构架之一。本章里，会简单介绍GPU的基本架构，性能指标，框架选择等等和深度学习相关的内容。</p><h2 id="15-1-什么是异构计算？"><a href="#15-1-什么是异构计算？" class="headerlink" title="15.1 什么是异构计算？"></a>15.1 什么是异构计算？</h2><p>异构计算是基于一个更加朴素的概念，”异构现象“，也就是不同计算平台之间，由于硬件结构（包括计算核心和内存），指令集和底层软件实现等方面的不同而有着不同的特性。异构计算就是使用结合了两个或者多个不同的计算平台，并进行协同运算。比如，比较常见的，在深度学习和机器学习中已经比较成熟的架构：CPU和GPU的异构计算;此外还有比较新的Google推出的协处理器（TPU），根据目的而定制的ASIC，可编程的FPGA等也都是现在在异构计算中使用比较多的协处理器。而，本章中会着重介绍和深度学习共同繁荣的图形加算器，也就是常说的GPU。</p><h2 id="15-2-什么是GPGPU？"><a href="#15-2-什么是GPGPU？" class="headerlink" title="15.2 什么是GPGPU？"></a>15.2 什么是GPGPU？</h2><p>GPU,就如名字所包含的内容，原本开发的目的是为了进行计算机图形渲染，而减少对于CPU的负载。由于图像的原始特性，也就是像素间的独立性，所以GPU在设计的时候就遵从了“单指令流多数据流（SIMD）”架构，使得同一个指令（比如图像的某种变换），可以同时在多一个像素点上进行计算，从而得到比较大的吞吐量，才能使得计算机可以实时渲染比较复杂的2D/3D场景。在最初的应用场景里，GPU并不是作为一种通用计算平台出现的，直到2007年左右，一家伟大的公司—NVIDIA将GPU带到通用计算的世界里，使得其可以在相对比较友好的编程环境（CUDA/OpenCL）里加速通用程序成了可能。从此之后，GPU通用计算(General Purpose Computing on GPU)，也就是GPGPU就成了学界和工业界都频繁使用的技术，在深度学习爆发的年代里，GPGPU成了推动这股浪潮非常重要的力量。</p><h2 id="15-3-GPU架构简介"><a href="#15-3-GPU架构简介" class="headerlink" title="15.3 GPU架构简介"></a>15.3 GPU架构简介</h2><p>GPU，图形显示芯片作为不同于CPU的设计逻辑和应用场景，有着非常不同的架构，理解 GPU 和 CPU 之间区别的一种简单方式是比较它们如何处理任务。CPU 由专为顺序串行处理而优化的几个核心组成，而 GPU 则拥有一个由数以千计的更小、更高效的核心（专为同时处理多重任务而设计）组成的大规模并行计算架构。本部分将简单介绍GPU究竟是如何架构，其中的计算核心有哪些特性。</p><h3 id="15-3-1-如何通俗理解GPU的架构？"><a href="#15-3-1-如何通俗理解GPU的架构？" class="headerlink" title="15.3.1 如何通俗理解GPU的架构？"></a>15.3.1 如何通俗理解GPU的架构？</h3><p>首先，下图简单地展示了几个GPU不同于CPU的特性：</p><ul><li>计算核心： 图中的CPU,i7-5960X，Intel的第五代Broadwell架构，其中包括了8个CPU核心(支持16线程)，也就是理论上可以有16个不同的运算同时进行。除了8个核心计算单元，大部分的芯片面积是被3级缓存，内存和控制电路占据了。同样的，来自NVIDIA的GTX980GPU，在差不多的芯片面积上，大部分是计算单元，16个SM，也就是流处理单元，每个流处理单元中包含着128个CUDA计算核心，所以总共来说，有2048个GPU运算单元，相应地这颗GPU理论上可以在一个时钟周期内可以进行2048次单精度运算。</li></ul><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/cpu_gpu.png" alt="CPU和GPU的简单架构对比图"></p><ul><li>计算核心频率：时钟频率，代表每一秒中内能进行同步脉冲次数，也是从一个侧面反映一个计算元件的工作速度。下图中对比了个别早期产品，比如Intel的X5650和几款NVIDIA的GPU。可以看出核心频率而言，CPU要远高于GPU。对于CPU而言，在不考虑能源消耗和制程工艺限制的情况下，追求更高的主频。但在GPU的设计中，采用了多核心设计，即使是提高一些频率，其实对于总体性能影像不会特别大。当然，其中还有能耗方面的考虑，避免发热过高，也进行了权衡。还有一个可能的原因是，在一个流处理器中的每个核心（CUDA核心）的运行共享非常有限的缓存和寄存器，由于共享内存也是有性能极限的，所以即使每个GPU核心频率提高，如果被缓存等拖累也是无法展现出高性能的。</li></ul><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/cpu_specs.png" alt="CPU简单信息"></p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/gpu_specs.png" alt="GPU的简单信息对比"></p><ul><li>内存架构：GPU的多层内存架构包括全局内存（也就是通常意义上大部分比较关注的内存，在若干到16GB之间，截至到当前最新），2级缓存，和芯片上的存储（包括寄存器，和1级缓存共用的共享内存，只读/纹理缓存和常量缓存）。通常来说，最高速的共享内存/缓存和寄存器都是非常有限的，比如在Tesla的K20中，只有48K的缓存可以作为共享内存或者1级缓存使用，所以在很多用GPU加速算法实现的过程中，有效地利用这些高速缓存是使得性能提升的非常重要的方面。</li></ul><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/gpu_memory_arch.png" alt="GPU的简单信息对比"></p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/gpu_memory.png" alt="GPU的内存架构容量信息"></p><h3 id="15-3-2-CUDA-核心是什么？"><a href="#15-3-2-CUDA-核心是什么？" class="headerlink" title="15.3.2 CUDA 核心是什么？"></a>15.3.2 CUDA 核心是什么？</h3><p>上面提到在一个GPU芯片里，会很几千个CUDA核心，被分布在多个流处理单元（SM）中，比如上面提到早期的GTX980中的16个SM中各包含了128个CUDA核心。如下图所示，作为GPU架构中的最小单元，其实它的设计和CPU有着非常类似的结构，其中包括了一个浮点运算单元和整型运算单元，和控制单元。同一个流处理器中，所有的CUDA核心将同步执行同一个指令，但是作用于不同的数据点上。</p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/cudacore.jpg" alt="CUDA简单介绍"></p><p>一般来说，更加多的CUDA核心意味着有更多的并行执行单元，所以也就可以片面地认为是有更加高的性能。但是，其实这个也是取决于很多方面，最重要的是算法在并行实现的时候有没有高效地调度和内存的使用优化。在现在我们使用的大部分GPU加速的深度学习框架里，包括Tensorflow，PyTorch等都是依赖于底层的GPU的矩阵加速代码的实现。为此Nvidia公司也是制定和实现了统一的接口，比如cuDNN，方便上层框架更好的利用GPU的性能。</p><h3 id="15-3-3-为什么要使用GPU？"><a href="#15-3-3-为什么要使用GPU？" class="headerlink" title="15.3.3 为什么要使用GPU？"></a>15.3.3 为什么要使用GPU？</h3><p>对于并行计算来说，可以非常粗略地分为：</p><ul><li>并行指令： 也就是多个指令可以同时分配到不同的计算核心上同时进行，而他们的操作是不同的，并且他们之间相互独立，不需要额外的同步和信息共享。</li><li>并行数据流： 如果数据本身存在的天然的独立性，比如图像中的每一个像素，那么在对这个图像做处理的过程中，同一个指令可以同时作用于每一个像素。在这种情况下，这个对于完整图像的操作可以并行化。理论上，如果内存不是问题，并且计算单元的数量大于整个图像中总像素点的话，这个操作可以在一个时钟周期内完成。</li></ul><p>GPU整体的架构而言，某种意义上是同时支持以上两种并行模式。在同一个流处理器中，采用了“单一指令并行数据流的模式”，而在多个流处理器中，同一时间可以派发不同的指令。从这一点出发，GPU芯片算是一个非常灵活的架构。一个芯片中，流处理器的个数和其中包含的CUDA核心的数量也是一种面向应用设计时候找到的一个平衡点。</p><p>基于深度学习中大部分的操作的天然并行性（大量的矩阵操作），GPU在当下还是一种非常适合的计算平台。一个非常典型的例子就是常见的矩阵相乘（如下图），要计算Z = X×Y，通过并行计算，X和Y中的行向量和列向量的逐元素相乘就可以同时进行，只要得到结果后再进行累加，而且累加的过程中也是可以进行并行化，使得效率有非常大的提高。Nvidia也是制定和开发了一套底层类库，CUBlas方便开发者。我们熟悉的几大框架(e.g. Tensorflow, PyTorch等)也是遵循和使用了这些并行类库，所以才使得训练和部署性能有了非常多的提高。</p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/mat_mul_gpu.png" alt="CUDA 矩阵乘法示例"></p><h3 id="15-3-4-深度学习中的GPU应用"><a href="#15-3-4-深度学习中的GPU应用" class="headerlink" title="15.3.4 深度学习中的GPU应用"></a>15.3.4 深度学习中的GPU应用</h3><p>深度学习在最近几年内出现的井喷现象背后也是GPU的存在和发展作为坚实的推动力量。</p><p>哪些场景使用GPU<br>在涉及大型矩阵运算的时候使用GPU可以显著加速处理速度，由于GPU架构的独特设计，针对矩阵运算可以实现高速并行计算，极大提高计算速度。<br>一般在高性能计算，机器学习，深度学习，图像渲染等等场景中会比较多的使用矩阵运算，使用GPU可以显著加快处理速度。<br>在一般的深度学习训练中，通常来说使用GPU比使用CPU都有10倍以上的速度提升，所以几乎所有深度学习的研究者几乎都是在使用GPU进行训练。</p><p>ImageNet的例子</p><h3 id="15-3-5-新图灵架构里的tensor-core对深度学习有什么作用？"><a href="#15-3-5-新图灵架构里的tensor-core对深度学习有什么作用？" class="headerlink" title="15.3.5 新图灵架构里的tensor core对深度学习有什么作用？"></a>15.3.5 新图灵架构里的tensor core对深度学习有什么作用？</h3><p>我们知道在深度学习中,矩阵-矩阵乘法运算（BLAS GEMM）是神经网络训练和推理的核心，并且矩阵乘法运算占据了所有计算量的大部分，而Tensor core就是为了解决这个问题而推出的，它的出现极大的提高了计算效率，大大加速了深度学习的计算速度，对深度学习的发展具有极大意义。</p><p>Tensor Core是Volta架构最重磅特性，是专门针对Deep Learning应用而设计的专用ASIC单元，实际上是一种矩阵乘累加的计算单元。（矩阵乘累加计算在Deep Learning网络层算法中，比如卷积层、全连接层等是最重要、最耗时的一部分。）Tensor Core可以在一个时钟周期内实现两个4×4矩阵乘法以及与另一个4×4矩阵加法。整个计算的个数，就是在一个时钟周期内可以实现64次乘和64次加。</p><p>所以Tensor Core就是为了矩阵乘法的加速而设计的，使用具有Tensor Core的GPU来进行深度学习的训练会极大的提高训练速度。</p><h2 id="15-4-CUDA-框架"><a href="#15-4-CUDA-框架" class="headerlink" title="15.4 CUDA 框架"></a>15.4 CUDA 框架</h2><h3 id="15-4-1-做CUDA编程难不难？"><a href="#15-4-1-做CUDA编程难不难？" class="headerlink" title="15.4.1 做CUDA编程难不难？"></a>15.4.1 做CUDA编程难不难？</h3><h3 id="15-4-2-cuDNN"><a href="#15-4-2-cuDNN" class="headerlink" title="15.4.2 cuDNN"></a>15.4.2 cuDNN</h3><h2 id="15-5-GPU硬件环境配置推荐"><a href="#15-5-GPU硬件环境配置推荐" class="headerlink" title="15.5 GPU硬件环境配置推荐"></a>15.5 GPU硬件环境配置推荐</h2><h3 id="15-5-1-GPU主要性能指标"><a href="#15-5-1-GPU主要性能指标" class="headerlink" title="15.5.1 GPU主要性能指标"></a>15.5.1 GPU主要性能指标</h3><p>GPU的性能主要由以下三个参数构成：</p><ol><li>计算能力。通常我们关心的是32位浮点计算能力。16位浮点训练也开始流行，如果只做预测的话也可以用8位整数。</li><li>显存大小。当模型越大，或者训练时的批量越大时，所需要的GPU显存就越多。</li><li>显存带宽。只有当显存带宽足够时才能充分发挥计算能力。</li></ol><p>对于大部分用户来说，只要考虑计算能力就可以了。GPU显存尽量不小于4GB。但如果GPU要同时显示图形界面，那么推荐的显存大小至少为6GB。显存带宽通常相对固定，选择空间较小。</p><p>下图描绘了GTX 900和1000系列里各个型号的32位浮点计算能力和价格的对比。其中价格为Wikipedia的建议价格。</p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/gtx.png" alt="浮点计算能力和价格的对比。"></p><p>我们可以从图中读出两点信息：</p><ol><li>在同一个系列里面，价格和性能大体上成正比。但后发布的型号性价比更高，例如980 Ti和1080 Ti。</li><li>GTX 1000系列比900系列在性价比上高出2倍左右。</li></ol><p>如果大家继续比较GTX较早的系列，也可以发现类似的规律。据此，我们推荐大家在能力范围内尽可能买较新的GPU。</p><h3 id="15-5-2-购买建议"><a href="#15-5-2-购买建议" class="headerlink" title="15.5.2 购买建议"></a>15.5.2 购买建议</h3><h5 id="首先给出一些总体的建议"><a href="#首先给出一些总体的建议" class="headerlink" title="首先给出一些总体的建议"></a>首先给出一些总体的建议</h5><p>最好的GPU整体（小幅度）：Titan Xp<br>综合性价比高，但略贵：GTX 1080 Ti，GTX 1070，GTX 1080<br>性价比还不错且便宜：GTX 1060（6GB）</p><p>当使用数据集&gt; 250GB：GTX Titan X（Maxwell） ，NVIDIA Titan X Pascal或NVIDIA Titan Xp</p><p>没有足够的钱：GTX 1060（6GB）</p><p>几乎没有钱，入门级：GTX 1050 Ti（4GB）</p><p>做Kaggle比赛：GTX 1060（6GB）适用于任何“正常”比赛，或GTX 1080 Ti用于“深度学习竞赛”</p><p>计算机视觉研究员：NVIDIA Titan Xp；不要买现在新出的Titan X（Pascal或Maxwell）</p><p>一名研究员人员：GTX 1080 Ti。在某些情况下，如自然语言处理，一个GTX 1070或GTX 1080已经足够了-检查你现在模型的内存需求</p><p>搭建一个GPU集群：这个有点复杂，另做探讨。</p><p>刚开始进行深度学习研究：从GTX 1060（6GB）开始。根据你下一步兴趣（入门，Kaggle比赛，研究，应用深度学习）等等，在进行选择。目前，GTX 1060更合适。</p><p>想尝试下深度学习，但没有过多要求：GTX 1050 Ti（4或2GB）</p><p>目前独立GPU主要有AMD和NVIDIA两家厂商。其中NVIDIA在深度学习布局较早，对深度学习框架支持更好。因此，目前大家主要会选择NVIDIA的GPU。</p><p>NVIDIA有面向个人用户（例如GTX系列）和企业用户（例如Tesla系列）的两类GPU。这两类GPU的计算能力相当。然而，面向企业用户的GPU通常使用被动散热并增加了内存校验，从而更适合数据中心，并通常要比面向个人用户的GPU贵上10倍。</p><p>如果你是拥有100台机器以上的大公司用户，通常可以考虑针对企业用户的NVIDIA Tesla系列。如果你是拥有10到100台机器的实验室和中小公司用户，预算充足的情况下可以考虑NVIDIA DGX系列，否则可以考虑购买如Supermicro之类的性价比比较高的服务器，然后再购买安装GTX系列的GPU。</p><p>NVIDIA一般每一两年发布一次新版本的GPU，例如2016年发布的是GTX 1000系列。每个系列中会有数个不同的型号，分别对应不同的性能。</p><h2 id="15-6-软件环境搭建"><a href="#15-6-软件环境搭建" class="headerlink" title="15.6 软件环境搭建"></a>15.6 软件环境搭建</h2><p>深度学习其实就是指基于一套完整的软件系统来构建算法，训练模型。如何搭建一套完整的软件系统，比如操作系统的选择？安装环境中遇到的问题等等，本节做一个简单的总结。</p><h3 id="15-6-1-操作系统选择？"><a href="#15-6-1-操作系统选择？" class="headerlink" title="15.6.1 操作系统选择？"></a>15.6.1 操作系统选择？</h3><p>针对硬件厂商来说，比如NVIDIA，对各个操作系统的支持都是比较好的 ，比如Windows系列,Linux系列，但是由于Linux系统对专业技术人员比较友好，所以目前几乎所有的深度学习系统构建都是基于Linux的，比较常用的系统如Ubuntu系列，CentOS系列等等。<br>在构建系统的时候，如何选择合适的操作系是一个刚刚入门深度学习的工作者面临的问题，在这里给出几点建议：<br>（1）刚刚入门，熟悉Windows系统，但是对Linux和深度学习都不太熟，这个时候可以基于windows系列系统来做入门学习<br>（2）简单了解Linux的使用，不太懂深度学习相关知识，可以直接基于Linux系统来搭建框架，跑一些开源的项目，慢慢深入研究学习<br>（3）熟悉Linux，不熟悉深度学习理论，毫无疑问，强烈推荐使用Linux系统，安装软件简单，工作效率高<br>总之一句话，如果不熟悉Linux，就先慢慢熟悉，最终还是要回归到Linux系统来构建深度学习系统</p><h3 id="15-6-2-常用基础软件安装？"><a href="#15-6-2-常用基础软件安装？" class="headerlink" title="15.6.2 常用基础软件安装？"></a>15.6.2 常用基础软件安装？</h3><p>目前有众多深度学习框架可供大家使用，但是所有框架基本都有一个共同的特点，目前几乎都是基于Nvidia的GPU来训练模型，要想更好的使用NVIDIA的GPU，cuda和cudnn就是必备的软件安装。  </p><ol><li><p><strong>安装cuda</strong><br>上文中有关于cuda的介绍，这里只是简单介绍基于Linux系统安装cuda的具体步骤，可以根据自己的需要安装cuda8.0或者cuda9.0，这两种版本的安装步骤基本一致，这里以最常用的ubuntu 16.04 lts版本为例：  </p><ol><li><p>官网下载，地址<br>cuda8.0<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-80-ga2-download-archive</a><br>cuda9.0<a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-90-download-archive</a><br>进入网址之后选择对应的系统版本即可，如下图所示：<br><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/cuda8.0.png" alt="cuda8.0"></p><p><img src="/2016/12/20/第十五章_异构运算、GPU及框架选型/img/ch15/cuda9.0.png" alt="cuda9.0">  </p></li><li><p>命令行中进入到cuda所在的位置，授予运行权限：<br>cuda8.0: sudo chmod +x cuda_8.0.61_375.26_linux.run<br>cuda9.0:sudo chmod +x cuda_9.0.176_384.81_linux.run</p></li><li><p>执行命令安装cuda：<br>cuda8.0:sudo sh cuda_8.0.61_375.26_linux.run<br>cuda9.0:sudo sh cuda_9.0.176_384.81_linux.run<br>之后命令之后下面就是安装步骤，cuda8.0和cuda9.0几乎一致：  </p><ul><li><p>首先出现cuda软件的版权说明，可以直接按q键跳过阅读  </p></li><li><p>Do you accept the previously read EULA?<br>​accept/decline/quit: <strong>accept</strong></p></li><li><p>Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?<br>​(y)es/(n)o/(q)uit:<strong>no</strong></p></li><li><p>Install the CUDA 9.0 Toolkit?<br>​(y)es/(n)o/(q)uit:<strong>yes</strong></p></li><li><p>Enter Toolkit Location<br>​ [ default is /usr/local/cuda-9.0 ]:直接按enter键即可</p></li><li><p>Do you want to install a symbolic link at /usr/local/cuda?<br>​(y)es/(n)o/(q)uit:<strong>yes</strong></p></li><li><p>Install the CUDA 9.0 Samples?<br>​ (y)es/(n)o/(q)uit:<strong>yes</strong></p></li></ul><p>以上步骤基本就是cuda的安装步骤。</p></li></ol></li><li><p><strong>安装cudnn</strong><br>cudnn是Nvidia的专门针对深度学习的加速库。。。</p></li></ol><h3 id="15-6-3-本机安装还是使用docker？"><a href="#15-6-3-本机安装还是使用docker？" class="headerlink" title="15.6.3 本机安装还是使用docker？"></a>15.6.3 本机安装还是使用docker？</h3><h3 id="15-6-4-GPU驱动问题"><a href="#15-6-4-GPU驱动问题" class="headerlink" title="15.6.4 GPU驱动问题"></a>15.6.4 GPU驱动问题</h3><h2 id="15-7-框架选择"><a href="#15-7-框架选择" class="headerlink" title="15.7 框架选择"></a>15.7 框架选择</h2><h3 id="15-7-1-主流框架比较"><a href="#15-7-1-主流框架比较" class="headerlink" title="15.7.1 主流框架比较"></a>15.7.1 主流框架比较</h3><p>（一个大表格比较）</p><h3 id="15-7-2-框架详细信息"><a href="#15-7-2-框架详细信息" class="headerlink" title="15.7.2 框架详细信息"></a>15.7.2 框架详细信息</h3><ul><li>Tensorflow<br>Tensorflow是Google于2015年开源的基于数据流编程的深度学习框架，得益于Google强大的技术实力和品牌背书，目前Tensorflow发展迅猛，其用户量远远超过其它框架用户。<br>优点：  <ol><li>由谷歌开发、维护，因此可以保障支持、开发的持续性</li><li>巨大、活跃的社区</li><li>网络训练的低级、高级接口</li><li>「TensorBoard」是一款强大的可视化套件，旨在跟踪网络拓扑和性能，使调试更加简单</li><li>TensorFlow 不仅支持深度学习，还有支持强化学习和其他算法的工具<br>缺点：  </li><li>计算图是纯 Python 的，因此速度较慢</li><li>图构造是静态的，意味着图必须先被「编译」再运行</li></ol></li></ul><ul><li>PyTorch<br>pytorch是Facebook于2017年才推出的深度学习框架，相对于其它框架，算是比较晚的了，但是这个同时也是优势，在设计的时候就会避免很多之前框架的问题，所以一经推出，就收到大家极大的欢迎<br>优点：  <ol><li>接口简洁且规范，文档齐全，和python无缝结合，</li><li>社区非常活跃，开源实现较多</li><li>提供动态计算图（意味着图是在运行时生成的），允许你处理可变长度的输入和输出，例如，在使用 RNN 时非常有用</li><li>易于编写自己的图层类型，易于在 GPU 上运行</li><li>「TensorBoard」缺少一些关键功能时，「Losswise」可以作为 Pytorch 的替代品</li></ol></li></ul><p>缺点:  </p><ol><li>模型部署相对其它框架稍有劣势，不过后续的pytorch1.0版本应该会有很大改善，和caffe2合并后，caffe2的优秀的模型部署能力可以弥补这个不足</li><li></li><li></li></ol><p>相关资源链接：  </p><ol><li>官网教程：<a href="https://pytorch.org/tutorials/" target="_blank" rel="noopener">https://pytorch.org/tutorials/</a></li><li>基于pytorch的开源项目汇总：<a href="https://github.com/bharathgs/Awesome-pytorch-list" target="_blank" rel="noopener">https://github.com/bharathgs/Awesome-pytorch-list</a><br>3.</li></ol><ul><li>Keras<br>Keras 是一个更高级、对用户最友好的 API，具有可配置的后端，由 Google Brain 团队成员 Francis Chollet 编写和维护<br>优点：  <ol><li>提供高级 API 来构建深度学习模型，使其易于阅读和使用 </li><li>编写规范的文档</li><li>大型、活跃的社区</li><li>位于其他深度学习库（如 Theano 和 TensorFlow，可配置）之上</li><li>使用面向对象的设计，因此所有内容都被视为对象（如网络层、参数、优化器等）。所有模型参数都可以作为对象属性进行访问<br>缺点：  </li><li>由于用途非常普遍，所以在性能方面比较欠缺</li><li>与 TensorFlow 后端配合使用时会出现性能问题（因为并未针对其进行优化），但与 Theano 后端配合使用时效果良好</li><li>不像 TensorFlow 或 PyTorch 那样灵活</li></ol></li></ul><ul><li><p>Sonnet</p></li><li><p>Caffe<br>caffe是第一个主流产品级深度学习库，于 2014 年由 UC Berkeley 发布开源<br>优点：  </p><ol><li>简单网络结构无需编写代码，可快速实现</li><li>漂亮的 Matlab 和 Python 接口</li><li>完全由c++编程实现，部署方便</li></ol></li></ul><p>缺点：  </p><ol><li>不灵活。在 Caffe 中，每个节点被当做一个层，因此如果你想要一种新的层类型，你需要定义完整的前向、后向和梯度更新过程。这些层是网络的构建模块，你需要在无穷无尽的列表中进行选择。（相反，在 TensorFlow 中，每个节点被当做一个张量运算例如矩阵相加、相乘或卷积。你可以轻易地定义一个层作为这些运算的组合。因此 TensorFlow 的构建模块更小巧，允许更灵活的模块化。）</li><li>需要大量的非必要冗长代码。如果你希望同时支持 CPU 和 GPU，你需要为每一个实现额外的函数。你还需要使用普通的文本编辑器来定义你的模型。真令人头疼！几乎每个人都希望程序化地定义模型，因为这有利于不同组件之间的模块化。有趣的是，Caffe 的主要架构师现在在 TensorFlow 团队工作</li><li>专一性。仅定位在计算机视觉（但做得很不错）  </li><li>不是以 Python 编写！如果你希望引入新的变动，你需要在 C++和 CUDA 上编程（对于更小的变动，你可以使用它的 Python 和 Matlab 接口）</li><li>糟糕的文档</li><li>安装比较困难！有大量的依赖包</li></ol><ul><li>Caffe2</li></ul><ul><li>MxNet<br>MxNet是dmlc社区推出的深度学习框架，MXNet由学术界发起，包括数个顶尖大学的多个学科的研究人员的贡献，在2017年被亚马逊指定为官方框架。<br>mxnet的最知名的优点就是其对多GPU的支持和扩展性强，其优秀的性能使之在工业界占有一席之地，在amazon支持之后，其文档和开发进度明显好很多。除了高可扩展性，MXNet 还提供混合编程模型（命令式和声明式），同时兼容多种编程语言（包括 Python、C ++、R、Scala、Julia、Matlab 和 JavaScript）的代码，目前主要在推python高层接口gluon</li></ul><p>优点：  </p><ol><li>多GPU支持好，扩展性强，支持多种编程语言接口，主要是由华人团队开发，中文社区活跃，中文文档资源和课程丰富</li><li>针对两大热门领域推出gluoncv和gluonNLP模块，复现经典论文，达到State-of-the-art，接口设计简单，文档齐全，拿来就可以用<br>缺点:  </li><li>现在mxnet官方社区主要在推gluon接口，接口稍有混乱，坑较多，入手门槛稍高</li><li>偏小众，经典网络和项目的开源实现相对于tensorflow和pytorch还是比较少，很多还是需要自己手动实现<br>相关资源链接：  </li><li>官方教程：<a href="http://mxnet.incubator.apache.org" target="_blank" rel="noopener">http://mxnet.incubator.apache.org</a> 提供有快速入门教程和详细文档说明</li><li>中文教程：<a href="http://zh.gluon.ai/" target="_blank" rel="noopener">http://zh.gluon.ai/</a> 官方的中文教程，此课程有对应的中文版视频，主要由李沐大神讲课</li><li>中文论坛：<a href="https://discuss.gluon.ai/" target="_blank" rel="noopener">https://discuss.gluon.ai/</a> 官方发中文论坛，mxnet的主要作者都在这里，论坛比较活跃，可及时得到作者的回答</li><li>基于mxnet的开源项目实现：<a href="https://github.com/chinakook/Awesome-MXNet这里主要列举了mxnet在各个领域的项目的开源实现" target="_blank" rel="noopener">https://github.com/chinakook/Awesome-MXNet这里主要列举了mxnet在各个领域的项目的开源实现</a></li></ol><ul><li><p>CNTK</p></li><li><p>PaddlePaddle</p></li><li><p>其他国内自主开发开源框架</p></li></ul><h3 id="15-7-3-哪些框架对于部署环境友好？"><a href="#15-7-3-哪些框架对于部署环境友好？" class="headerlink" title="15.7.3 哪些框架对于部署环境友好？"></a>15.7.3 哪些框架对于部署环境友好？</h3><ul><li><p>Tensorflow Serving</p></li><li><p>ONNX 标准</p></li><li><p>TensorRT</p></li><li><p>ONNPACK</p></li><li><p>Clipper</p></li></ul><h3 id="15-7-4-移动平台的框架如何选择？"><a href="#15-7-4-移动平台的框架如何选择？" class="headerlink" title="15.7.4 移动平台的框架如何选择？"></a>15.7.4 移动平台的框架如何选择？</h3><ul><li><p>Tensorflow Lite</p></li><li><p>Caffe2</p></li></ul><h2 id="15-8-其他"><a href="#15-8-其他" class="headerlink" title="15.8 其他"></a>15.8 其他</h2><h3 id="15-8-1-多GPU环境的配置"><a href="#15-8-1-多GPU环境的配置" class="headerlink" title="15.8.1 多GPU环境的配置"></a>15.8.1 多GPU环境的配置</h3><ul><li><p>Tensorflow</p></li><li><p>PyTorch</p></li></ul><h3 id="15-8-2-是不是可以分布式训练？"><a href="#15-8-2-是不是可以分布式训练？" class="headerlink" title="15.8.2 是不是可以分布式训练？"></a>15.8.2 是不是可以分布式训练？</h3><h3 id="15-8-3-可以在SPARK环境里训练或者部署模型吗？"><a href="#15-8-3-可以在SPARK环境里训练或者部署模型吗？" class="headerlink" title="15.8.3 可以在SPARK环境里训练或者部署模型吗？"></a>15.8.3 可以在SPARK环境里训练或者部署模型吗？</h3><h3 id="15-8-4-怎么进一步优化性能？"><a href="#15-8-4-怎么进一步优化性能？" class="headerlink" title="15.8.4 怎么进一步优化性能？"></a>15.8.4 怎么进一步优化性能？</h3><ul><li><p>TVM</p></li><li><p>nGraph</p></li></ul><h3 id="15-8-5-TPU和GPU的区别？"><a href="#15-8-5-TPU和GPU的区别？" class="headerlink" title="15.8.5 TPU和GPU的区别？"></a>15.8.5 TPU和GPU的区别？</h3><h3 id="15-8-6-未来量子计算对于深度学习等AI技术的影响？"><a href="#15-8-6-未来量子计算对于深度学习等AI技术的影响？" class="headerlink" title="15.8.6 未来量子计算对于深度学习等AI技术的影响？"></a>15.8.6 未来量子计算对于深度学习等AI技术的影响？</h3><hr><h2 id="15-1-GPU购买指南"><a href="#15-1-GPU购买指南" class="headerlink" title="15.1 GPU购买指南"></a>15.1 GPU购买指南</h2><p>深度学习训练通常需要大量的计算资源。GPU目前是深度学习最常使用的计算加速硬件。相对于CPU来说，GPU更便宜且计算更加密集。一方面，相同计算能力的GPU的价格一般是CPU价格的十分之一。另一方面，一台服务器通常可以搭载8块或者16块GPU。因此，GPU数量可以看作是衡量一台服务器的深度学习计算能力的一个标准。</p><h3 id="15-1-1-如何选择GPU"><a href="#15-1-1-如何选择GPU" class="headerlink" title="15.1.1 如何选择GPU"></a>15.1.1 如何选择GPU</h3><h3 id="15-1-2-GPU的主要性能指标"><a href="#15-1-2-GPU的主要性能指标" class="headerlink" title="15.1.2 GPU的主要性能指标"></a>15.1.2 GPU的主要性能指标</h3><p>在选择GPU时，首先要考虑的第一个GPU性能问题是什么呢：是否为cuda核心？时钟速度多大？内存大小多少？<br>这些都不是，对于深度学习性能而言，最重要的特征是内存带宽（memory bandwidth）。<br>简而言之：GPU针对内存带宽进行了优化，但同时牺牲了内存访问时间（延迟）。CPU的设计恰恰相反：如果涉及少量内存（例如几个数字相乘（3 <em> 6 </em> 9）），CPU可以快速计算，但是对于大量内存（如矩阵乘法（A <em> B </em> C）则很慢。由于内存带宽的限制，当涉及大量内存的问题时，GPU快速计算的优势往往会受到限制。当然，GPU和CPU之间还有更复杂的区别，关于为何GPU如此适用于处理深度学习问题，另做探讨。</p><p>所以如果你想购买一个快速的GPU，首先要关注的是GPU的带宽（bandwidth）。</p><h3 id="15-1-3-整机配置"><a href="#15-1-3-整机配置" class="headerlink" title="15.1.3 整机配置"></a>15.1.3 整机配置</h3><p>通常，我们主要用GPU做深度学习训练。因此，不需要购买高端的CPU。至于整机配置，尽量参考网上推荐的中高档的配置就好。不过，考虑到GPU的功耗、散热和体积，我们在整机配置上也需要考虑以下三个额外因素。</p><ol><li>机箱体积。GPU尺寸较大，通常考虑较大且自带风扇的机箱。</li><li>电源。购买GPU时需要查一下GPU的功耗，例如50W到300W不等。购买电源要确保功率足够，且不会过载机房的供电。</li><li>主板的PCIe卡槽。推荐使用PCIe 3.0 16x来保证充足的GPU到主内存的带宽。如果搭载多块GPU，要仔细阅读主板说明，以确保多块GPU一起使用时仍然是16x带宽。注意，有些主板搭载4块GPU时会降到8x甚至4x带宽。</li></ol><h3 id="15-1-4-小结"><a href="#15-1-4-小结" class="headerlink" title="15.1.4 小结"></a>15.1.4 小结</h3><ul><li>在预算范围之内，尽可能买较新的GPU。</li><li>整机配置需要考虑到GPU的功耗、散热和体积。</li></ul><h2 id="15-2-框架选型"><a href="#15-2-框架选型" class="headerlink" title="15.2 框架选型"></a>15.2 框架选型</h2><p>目前常用的框架有tensorflow,keras,pytorch,mxnet等等，各个框架的优缺点在此简单介绍：</p><h3 id="15-2-1-常用框架简介"><a href="#15-2-1-常用框架简介" class="headerlink" title="15.2.1 常用框架简介"></a>15.2.1 常用框架简介</h3><p>1，tensorflow：<br>tensorflow由于有google的强大背书，加上其优秀的分布式设计，丰富的教程资源和论坛，工业部署方便，基本很多人都是从tensorflow入门的<br>优点：google的强大背书，分布式训练，教程资源丰富，常见问题基本都可以在互联网中找到解决办法，工业部署方便<br>缺点: 接口混乱，官方文档不够简洁，清晰，</p><p>2，keras:<br>keras是一种高层编程接口，其可以选择不同的后端，比如tensorflow，therao等等<br>优点：接口简洁，上手快，文档好，资源多<br>缺点: 封装的太好了导致不理解其技术细节</p><p>3,pytorch:</p><p>4,caffe2:<br>caffe2是在caffe之后的第二代版本，同属于Facebook。。。<br>优点：支持模型的全平台部署，。。。。<br>缺点:使用人数相对较少，资源较少，和pytorch合并后应该会更受欢迎</p><p>5,mxnet<br>mxnet是dmlc社区推出的深度学习框架，在2017年被亚马逊指定为官方框架<br>优点：支持多种语言，代码设计优秀，省显存，华人团队开发，中文社区活跃，官方复现经典论文推出gluoncv和gluonNLP模块，非常方便，拿来就可以用。<br>缺点:现在mxnet官方社区主要在推gluon接口，接口稍有混乱，坑较多，入手门槛稍高</p><p>6，caffe：<br>目前很多做深度学习比较早的大厂基本都是在用caffe，因为在2013-2015年基本就是caffe的天下，并且caffe的代码设计很优秀，基本所有代码都被翻了很多遍了，被各种分析，大厂基本都是魔改caffe，基于caffe来进行二次开发，所在目前在很多大厂还是在使用caffe<br>优点：资源丰富，代码容易理解，部署方便<br>缺点：入门门槛高，文档较少</p><p>###15.2.1 框架选型总结<br>1，新手入门，首推pytorch，上手快，资源丰富,官方文档写的非常好(<a href="https://pytorch.org/tutorials/" target="_blank" rel="noopener">https://pytorch.org/tutorials/</a>)<br>2，目前工业部署，tensorflow是首选,资源丰富，并且在分布式训练这一块基本一家独大<br>3，mxnet的gluon接口有比较丰富的中文资源（教程：zh.gluon.ai，论坛：discuss.gluon.ai）,gluoncv模块（<a href="https://gluon-cv.mxnet.io）,gluonNLP模块（https://gluon-nlp.mxnet.io）" target="_blank" rel="noopener">https://gluon-cv.mxnet.io）,gluonNLP模块（https://gluon-nlp.mxnet.io）</a></p><p>##15.3 模型部署<br>我们一般都是通过python或者其他语言来编码训练模型，然后基于后端来进行部署<br>一般的框架都有自身的部署框架，比如tensorflow，pytorch，caffe2，mxnet等等<br>有一些框架是专门做推理部署使用的，比如<br>（1）tensorRT</p><p> (2)TVM</p><p> (3)ONNX</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>网络搭建及训练</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%AE%AD%E7%BB%83/"/>
    <id>https://leesen998.github.io/2016/12/20/第十二章_网络搭建及训练/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:47:26.010Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h1 id="第十二章-网络搭建及训练"><a href="#第十二章-网络搭建及训练" class="headerlink" title="第十二章 网络搭建及训练"></a>第十二章 网络搭建及训练</h1><p>目录<br>常用框架介绍<br>常用框架对比(表格展示)  16个最棒的深度学习框架 <a href="https://baijiahao.baidu.com/s?id=1599943447101946075&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1599943447101946075&amp;wfr=spider&amp;for=pc</a><br>基于tensorfolw网络搭建实例<br>CNN训练注意事项<br>训练技巧<br>深度学习模型训练痛点及解决方法 <a href="https://blog.csdn.net/weixin_40581617/article/details/80537559" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40581617/article/details/80537559</a><br>深度学习模型训练流程 <a href="https://blog.csdn.net/Quincuntial/article/details/79242364" target="_blank" rel="noopener">https://blog.csdn.net/Quincuntial/article/details/79242364</a><br>深度学习模型训练技巧 <a href="https://blog.csdn.net/w7256037/article/details/52071345" target="_blank" rel="noopener">https://blog.csdn.net/w7256037/article/details/52071345</a><br><a href="https://blog.csdn.net/u012033832/article/details/79017951" target="_blank" rel="noopener">https://blog.csdn.net/u012033832/article/details/79017951</a><br><a href="https://blog.csdn.net/u012968002/article/details/72122965" target="_blank" rel="noopener">https://blog.csdn.net/u012968002/article/details/72122965</a>   </p><p>深度学习几大难点 <a href="https://blog.csdn.net/m0_37867246/article/details/79766371" target="_blank" rel="noopener">https://blog.csdn.net/m0_37867246/article/details/79766371</a>   </p><h2 id="CNN训练注意事项"><a href="#CNN训练注意事项" class="headerlink" title="CNN训练注意事项"></a>CNN训练注意事项</h2><p><a href="http://www.cnblogs.com/softzrp/p/6724884.html" target="_blank" rel="noopener">http://www.cnblogs.com/softzrp/p/6724884.html</a><br>1.用Mini-batch SGD对神经网络做训练的过程如下：</p><p>不断循环 ：</p><p>①  采样一个 batch 数据( ( 比如 32 张 ）</p><p>②前向计算得到损失 loss</p><p>③  反向传播计算梯度( 一个 batch）</p><p>④  用这部分梯度迭代更新权重参数</p><p>2.去均值</p><p>去均值一般有两种方式：第一种是在每个像素点都算出3个颜色通道上的平均值，然后对应减去，如AlexNet。 第二种是在整个样本上就只得到一组数，不分像素点了，如VGGNet。<br>3.权重初始化<br>4.Dropout</p><h1 id="第十二章-TensorFlow、pytorch和caffe介绍"><a href="#第十二章-TensorFlow、pytorch和caffe介绍" class="headerlink" title="第十二章 TensorFlow、pytorch和caffe介绍"></a>第十二章 TensorFlow、pytorch和caffe介绍</h1><h1 id="12-1-TensorFlow"><a href="#12-1-TensorFlow" class="headerlink" title="12.1 TensorFlow"></a>12.1 TensorFlow</h1><h2 id="12-1-1-TensorFlow是什么？"><a href="#12-1-1-TensorFlow是什么？" class="headerlink" title="12.1.1 TensorFlow是什么？"></a>12.1.1 TensorFlow是什么？</h2><p>&emsp;&emsp;TensorFlow支持各种异构平台，支持多CPU/GPU、服务器、移动设备，具有良好的跨平台的特性；TensorFlow架构灵活，能够支持各种网络模型，具有良好的通用性；此外，TensorFlow架构具有良好的可扩展性，对OP的扩展支持，Kernel特化方面表现出众。</p><p>&emsp;&emsp;TensorFlow最初由Google大脑的研究员和工程师开发出来，用于机器学习和神经网络方面的研究，于2015.10宣布开源，在众多深度学习框架中脱颖而出，在Github上获得了最多的Star量。</p><h2 id="12-1-2-TensorFlow的设计理念是什么？"><a href="#12-1-2-TensorFlow的设计理念是什么？" class="headerlink" title="12.1.2 TensorFlow的设计理念是什么？"></a>12.1.2 TensorFlow的设计理念是什么？</h2><p>TensorFlow的设计理念主要体现在两个方面：</p><p>（1）将图定义和图运算完全分开。<br>&emsp;&emsp;TensorFlow 被认为是一个“符号主义”的库。我们知道，编程模式通常分为命令式编程（imperative style programming）和符号式编程（symbolic style programming）。命令式编程就是编写我们理解的通常意义上的程序，很容易理解和调试，按照原有逻辑执行。符号式编程涉及很多的嵌入和优化，不容易理解和调试，但运行速度相对有所提升。现有的深度学习框架中，Torch 是典型的命令式的，Caffe、MXNet 采用了两种编程模式混合的方法，而 TensorFlow 完全采用符号式编程。</p><p>&emsp;&emsp;符号式计算一般是先定义各种变量，然后建立一个数据流图，在数据流图中规定各个变量间的计算关系，最后需要对据流图进行编译，但此时的数据流图还是一个空壳儿，里面没有任何实际数据，只有把需要运算的输入放进去后，才能在整个模型中形成数据流，从而形成输出值。</p><p>　　例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = 8 + 9</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在传统的程序操作中，定义了 t 的运算，在运行时就执行了，并输出 17。而在 TensorFlow中，数据流图中的节点，实际上对应的是 TensorFlow API 中的一个操作，并没有真正去运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">t = tf.add(8,9)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line">#输出  Tensor&#123;&quot;Add_1:0&quot;,shape=&#123;&#125;,dtype=int32&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;（2）TensorFlow 中涉及的运算都要放在图中，而图的运行只发生在会话（session）中。开启会话后，就可以用数据去填充节点，进行运算；关闭会话后，就不能进行计算了。因此，会话提供了操作运行和 Tensor 求值的环境。</p><p>　　例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">#创建图</span><br><span class="line">a = tf.constant([4.0,5.0])</span><br><span class="line">b = tf.constant([6.0,7.0])</span><br><span class="line">c = a * b</span><br><span class="line">#创建会话</span><br><span class="line">sess  = tf.Session()</span><br><span class="line">#计算c</span><br><span class="line">print(sess.run(c))   #进行矩阵乘法，输出[24.,35.]</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h2 id="12-1-3-TensorFlow特点有哪些？"><a href="#12-1-3-TensorFlow特点有哪些？" class="headerlink" title="12.1.3 TensorFlow特点有哪些？"></a>12.1.3 TensorFlow特点有哪些？</h2><h3 id="1-高度的灵活性"><a href="#1-高度的灵活性" class="headerlink" title="1.高度的灵活性"></a>1.高度的灵活性</h3><p>&emsp;&emsp;TensorFlow 并不仅仅是一个深度学习库，只要可以把你的计算过程表示称一个数据流图的过程，我们就可以使用 TensorFlow 来进行计算。TensorFlow 允许我们用计算图的方式建立计算网络，同时又可以很方便的对网络进行操作。用户可以基于 TensorFlow 的基础上用 python 编写自己的上层结构和库，如果TensorFlow没有提供我们需要的API的，我们也可以自己编写底层的 C++ 代码，通过自定义操作将新编写的功能添加到 TensorFlow 中。</p><h3 id="2-真正的可移植性"><a href="#2-真正的可移植性" class="headerlink" title="2.真正的可移植性"></a>2.真正的可移植性</h3><p>&emsp;&emsp;TensorFlow 可以在 CPU 和 GPU 上运行，可以在台式机、服务器、移动设备上运行。你想在你的笔记本上跑一下深度学习的训练，或者又不想修改代码，想把你的模型在多个CPU上运行， 亦或想将训练好的模型放到移动设备上跑一下，这些TensorFlow都可以帮你做到。</p><h3 id="3-多语言支持"><a href="#3-多语言支持" class="headerlink" title="3.多语言支持"></a>3.多语言支持</h3><p>&emsp;&emsp;TensorFlow采用非常易用的python来构建和执行我们的计算图，同时也支持 C++ 的语言。我们可以直接写python和C++的程序来执行TensorFlow，也可以采用交互式的ipython来方便的尝试我们的想法。当然，这只是一个开始，后续会支持更多流行的语言，比如Lua，JavaScript 或者R语言。</p><h3 id="4-丰富的算法库"><a href="#4-丰富的算法库" class="headerlink" title="4.丰富的算法库"></a>4.丰富的算法库</h3><p>&emsp;&emsp;TensorFlow提供了所有开源的深度学习框架里，最全的算法库，并且在不断的添加新的算法库。这些算法库基本上已经满足了大部分的需求，对于普通的应用，基本上不用自己再去自定义实现基本的算法库了。</p><h3 id="5-完善的文档"><a href="#5-完善的文档" class="headerlink" title="5.完善的文档"></a>5.完善的文档</h3><p>&emsp;&emsp;TensorFlow的官方网站，提供了非常详细的文档介绍，内容包括各种API的使用介绍和各种基础应用的使用例子，也包括一部分深度学习的基础理论。</p><p>&emsp;&emsp;自从宣布开源以来，大量人员对TensorFlow做出贡献，其中包括Google员工，外部研究人员和独立程序员，全球各地的工程师对TensorFlow的完善，已经让TensorFlow社区变成了Github上最活跃的深度学习框架。</p><h2 id="12-1-4-TensorFlow的系统架构是怎样的？"><a href="#12-1-4-TensorFlow的系统架构是怎样的？" class="headerlink" title="12.1.4 TensorFlow的系统架构是怎样的？"></a>12.1.4 TensorFlow的系统架构是怎样的？</h2><h3 id="emsp-emsp-整个系统从底层到上层可分为七层："><a href="#emsp-emsp-整个系统从底层到上层可分为七层：" class="headerlink" title="&emsp;&emsp;整个系统从底层到上层可分为七层："></a>&emsp;&emsp;整个系统从底层到上层可分为七层：</h3><p><img src="/2016/12/20/第十二章_网络搭建及训练/img\ch12\1.bmp" alt=""></p><p>&emsp;&emsp;设备层：硬件计算资源，支持CPU、GPU</p><p>&emsp;&emsp;网络层：支持两种通信协议</p><p>&emsp;&emsp;数值计算层：提供最基础的计算，有线性计算、卷积计算</p><p>&emsp;&emsp;高维计算层：数据的计算都是以数组的形式参与计算</p><p>&emsp;&emsp;计算图层：用来设计神经网络的结构</p><p>&emsp;&emsp;工作流层：提供轻量级的框架调用</p><p>&emsp;&emsp;构造层：最后构造的深度学习网络可以通过TensorBoard服务端可视化</p><h2 id="12-1-5-TensorFlow编程模型是怎样的？"><a href="#12-1-5-TensorFlow编程模型是怎样的？" class="headerlink" title="12.1.5 TensorFlow编程模型是怎样的？"></a>12.1.5 TensorFlow编程模型是怎样的？</h2><p>TensorFlow的编程模型：让向量数据在计算图里流动。那么在编程时至少有这几个过程：1.构建图，2.启动图，3.给图输入数据并获取结果。</p><h3 id="1-构建图"><a href="#1-构建图" class="headerlink" title="1.构建图"></a>1.构建图</h3><p>TensorFlow的图的类型是tf.Graph，它包含着计算节点和tensor的集合。</p><p>&emsp;&emsp;这里引用了两个新概念：tensor和计算节点。<br>&emsp;&emsp;我们先介绍tensor，一开始我们就介绍了，我们需要把数据输入给启动的图才能获取计算结果。那么问题来了，在构建图时用什么表示中间计算结果？这个时候tensor的概念就需要引入了。<br>&emsp;&emsp;类型是tf.Tensor，代表某个计算节点的输出，一定要看清楚是“代表”。它主要有两个作用：</p><p>1.构建不同计算节点之间的数据流</p><p>2.在启动图时，可以设置某些tensor的值，然后获取指定tensor的值。这样就完成了计算的输入输出功能。</p><p>如下代码所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inImage = tf.placeholder(tf.float32,[32,32,3],&quot;inputImage&quot;)</span><br><span class="line">processedImage = tf.image.per_image_standardization(inImage,&quot;processedImage&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里inImage和processedImage都是tensor类型。它们代表着计算节点输出的数据，数据的值具体是多少在启动图的时候才知道。上面两个方法调用都传递了一个字符串，它是计算节点的名字，最好给节点命名，这样我们可以在图上调用get_tensor_by_name(name)获取对应的tensor对象，十分方便。（tensor名字为“&lt;计算节点名字&gt;:&lt;tensor索引&gt;”）</p><p>&emsp;&emsp;创建tensor时，需要指定类型和shape。对不同tensor进行计算时要求类型相同，可以使用 tf.cast 进行类型转换。同时也要求 shape (向量维度)满足运算的条件，我们可以使用 tf.reshape 改变shape。</p><p>&emsp;&emsp;现在了解计算节点的概念，其功能是对tensor进行计算、创建tensor或进行其他操作，类型是tf.Operation。获取节点对象的方法为get_operation_by_name(name)。</p><p>构建图，如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">g=tf.Graph()</span><br><span class="line"></span><br><span class="line">with g.as_default():</span><br><span class="line">    input_data=tf.placeholder(tf.float32,[None,2],&quot;input_data&quot;)</span><br><span class="line">    input_label=tf.placeholder(tf.float32,[None,2],&quot;input_label&quot;)</span><br><span class="line"></span><br><span class="line">    W1=tf.Variable(tf.truncated_normal([2,2]),name=&quot;W1&quot;)</span><br><span class="line">    B1=tf.Variable(tf.zeros([2]),name=&quot;B1&quot;)</span><br><span class="line"></span><br><span class="line">    output=tf.add(tf.matmul(input_data,W1),B1,name=&quot;output&quot;)</span><br><span class="line">    cross_entropy=tf.nn.softmax_cross_entropy_with_logits(logits=output,labels=input_label)</span><br><span class="line"></span><br><span class="line">    train_step=tf.train.AdamOptimizer().minimize(cross_entropy,name=&quot;train_step&quot;)</span><br><span class="line"></span><br><span class="line">    initer=tf.global_variables_initializer()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的代码中我们创建了一个图，并在上面添加了很多节点。我们可以通过调用get_default_graph()获取默认的图。</p><p>&emsp;&emsp;Input_data，input_label，W1，B1，output，cross_entropy都是tensor类型，train_step，initer，是节点类型。</p><p>有几类tensor或节点比较重要，下面介绍一下：</p><h4 id="1-placeholder"><a href="#1-placeholder" class="headerlink" title="1.placeholder"></a>1.placeholder</h4><p>&emsp;&emsp;Tensorflow，顾名思义， tensor代表张量数据，flow代表流，其最初的设计理念就是构建一张静态的数据流图。图是有各个计算节点连接而成，计算节点之间流动的便是中间的张量数据。要想让张量数据在我们构建的静态计算图中流动起来，就必须有最初的输入数据流。而placeholder，翻译过来叫做占位符，顾名思义，是给我们的输入数据提供一个接口，也就是说我们的一切输入数据，例如训练样本数据，超参数数据等都可以通过占位符接口输送到数据流图之中。使用实例如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">x = tf.placeholder(dtype=tf.float32,shape=[],name=&apos;x&apos;)</span><br><span class="line">y = tf.placeholder(dtpe=tf.float32,shape=[],nmae=&apos;y&apos;)</span><br><span class="line">z = x*y</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">prod = sess.run(z,feed_dict=&#123;x:1.,y:5.2&#125;)</span><br><span class="line">print(prod)</span><br><span class="line">[out]:5.2</span><br></pre></td></tr></table></figure><h4 id="2-variable"><a href="#2-variable" class="headerlink" title="2. variable"></a>2. variable</h4><p>&emsp;&emsp;无论是传统的机器学习算法，例如线性支持向量机（Support Vector Machine, SVM)，其数学模型为y = &lt;w,x&gt; + b，还是更先进的深度学习算法，例如卷积神经网络（Convolutional Neural Network， CNN）单个神经元输出的模型y = w*x + b。可以看到，w和b就是我们要求的模型，模型的求解是通过优化算法（对于SVM，使用<br>SMO[1]算法，对于CNN，一般基于梯度下降法）来一步一步更新w和b的值直到满足停止条件。因此，大多数机器学习的模型中的w和b实际上是以变量的形式出现在代码中的，这就要求我们在代码中定义模型变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">a = tf.Variable(2.)</span><br><span class="line">b = tf.Variable(3.)</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(tf.global_variables_initializer()) #变量初始化</span><br><span class="line">    print(sess.run(a*b))</span><br><span class="line">[out]:6.</span><br></pre></td></tr></table></figure><p>[1] Platt, John. “Sequential minimal optimization: A fast algorithm for training support vector machines.” (1998).</p><h4 id="3-initializer"><a href="#3-initializer" class="headerlink" title="3. initializer"></a>3. initializer</h4><p>&emsp;&emsp;由于tensorflow构建的是静态的计算流图，在开启会话之前，所有的操作都不会被执行。因此为了执行在计算图中所构建的赋值初始化计算节点，需要在开启会话之后，在会话环境下运行初始化。如果计算图中定义了变量，而会话环境下为执行初始化命令，则程序报错，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">a = tf.Variable(2.)</span><br><span class="line">b = tf.Variable(3.)</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">#sess.run(tf.global_variables_initializer()) #注释掉初始化命令</span><br><span class="line">    print(sess.run(a*b))</span><br><span class="line">[Error]: Attempting to use uninitialized value Variable</span><br></pre></td></tr></table></figure><h3 id="2-启动图"><a href="#2-启动图" class="headerlink" title="2.启动图"></a>2.启动图</h3><p>&emsp;&emsp;先了解session的概念，然后才能更好的理解图的启动。<br>&emsp;&emsp;图的每个运行实例都必须在一个session里，session为图的运行提供环境。Session的类型是tf.Session，在实例化session对象时我们需要给它传递一个图对象，如果不显示给出将使用默认的图。Session有一个graph属性，我们可以通过它获取session对应的图。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">numOfBatch=5</span><br><span class="line">datas=np.zeros([numOfBatch,2],np.float32)</span><br><span class="line">labels=np.zeros([numOfBatch,2],np.float32)</span><br><span class="line"></span><br><span class="line">sess=tf.Session(graph=g)</span><br><span class="line">graph=sess.graph</span><br><span class="line">sess.run([graph.get_operation_by_name(&quot;initer&quot;)])</span><br><span class="line"></span><br><span class="line">dataHolder=graph.get_tensor_by_name(&quot;input_data:0&quot;)</span><br><span class="line">labelHolder=graph.get_tensor_by_name(&quot;input_label:0&quot;)</span><br><span class="line">train=graph.get_operation_by_name(&quot;train_step&quot;)</span><br><span class="line">out=graph.get_tensor_by_name(&quot;output:0&quot;)</span><br><span class="line"></span><br><span class="line">for i inrange(200):</span><br><span class="line">   result=sess.run([out,train],feed_dict=&#123;dataHolder:datas,labelHolder:labels&#125;)</span><br><span class="line">   if i%100==0:</span><br><span class="line">       saver.save(sess,&quot;./moules&quot;)</span><br><span class="line"></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p>代码都比较简单，就不介绍了。不过要注意2点：1.别忘记运行初始化节点，2.别忘记close掉session对象以释放资源。</p><h4 id="3-给图输入数据并获取结果"><a href="#3-给图输入数据并获取结果" class="headerlink" title="3.给图输入数据并获取结果"></a>3.给图输入数据并获取结果</h4><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i inrange(200):</span><br><span class="line">    result=sess.run([out,train],feed_dict=&#123;dataHolder:datas,labelHolder:labels&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里主要用到了session对象的run方法，它用来运行某个节点或tensor并获取对应的值。我们一般会一次传递一小部分数据进行mini-batch梯度下降来优化模型。</p><p>&emsp;&emsp;我们需要把我们需要运行的节点或tensor放入一个列表，然后作为第一个参数(不考虑self)传递给run方法，run方法会返回一个计算结果的列表，与我们传递的参数一一对应。</p><p>&emsp;&emsp;如果我们运行的节点依赖某个placeholder，那我们必须给这个placeholder指定值，怎么指定代码里面很清楚，给关键字参数feed_dict传递一个字典即可，字典里的元素的key是placeholder对象，value是我们指定的值。值的数据的类型必须和placeholder一致，包括shape。值本身的类型是numpy数组。</p><p>这里再解释一个细节，在定义placeholder时代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_data=tf.placeholder(tf.float32,[None,2],&quot;input_data&quot;)</span><br><span class="line">input_label=tf.placeholder(tf.float32,[None,2],&quot;input_label&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;shape为[None,2]，说明数据第一个维度是不确定的，然后TensorFlow会根据我们传递的数据动态推断第一个维度，这样我们就可以在运行时改变batch的大小。比如一个数据是2维，一次传递10个数据对应的tensor的shape就是[10,2]。可不可以把多个维度指定为None？理论上不可以！</p><h2 id="12-1-6-如何基于tensorflow搭建VGG16"><a href="#12-1-6-如何基于tensorflow搭建VGG16" class="headerlink" title="12.1.6 如何基于tensorflow搭建VGG16"></a>12.1.6 如何基于tensorflow搭建VGG16</h2><p>​    介绍完关于tensorflow的基础知识，是时候来一波网络搭建实战了。虽然网上有很多相关教程，但我想从最标准的tensorflow代码和语法出发（而不是调用更高级的API，失去了原来的味道），向大家展示如何搭建其标准的VGG16网络架构。话不多说，上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.get_variable(<span class="string">'weight'</span>, shape=shape, initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.get_variable(<span class="string">'bias'</span>, shape=shape, initializer=tf.constant_initializer(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, w, padding = <span class="string">'SAME'</span>, s=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = tf.nn.conv2d(x, w, strides=[<span class="number">1</span>, s, s, <span class="number">1</span>], padding = padding)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPoolLayer</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                          strides = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d_layer</span><span class="params">(x,in_chs, out_chs, ksize, layer_name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(layer_name):</span><br><span class="line">        w = get_weight_variable([ksize, ksize, in_chs, out_chs])</span><br><span class="line">        b = get_bias_variable([out_chs])</span><br><span class="line">        y = tf.nn.relu(tf.bias_add(conv2d(x,w,padding = <span class="string">'SAME'</span>, s=<span class="number">1</span>), b))</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fc_layer</span><span class="params">(x,in_kernels, out_kernels, layer_name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(layer_name):</span><br><span class="line">        w = get_weight_variable([in_kernels,out_kernels])</span><br><span class="line">        b = get_bias_variable([out_kernels])</span><br><span class="line">        y = tf.nn.relu(tf.bias_add(tf.matmul(x,w),b))</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">VGG16</span><span class="params">(x)</span>:</span></span><br><span class="line">    conv1_1 = conv2d_layer(x,tf.get_shape(x).as_list()[<span class="number">-1</span>], <span class="number">64</span>, <span class="number">3</span>, <span class="string">'conv1_1'</span>)</span><br><span class="line">    conv1_2 = conv2d_layer(conv1_1,<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="string">'conv1_2'</span>)</span><br><span class="line">    pool_1 = maxPoolLayer(conv1_2)</span><br><span class="line">    </span><br><span class="line">    conv2_1 = conv2d_layer(pool1,<span class="number">64</span>, <span class="number">128</span>, <span class="number">3</span>, <span class="string">'conv2_1'</span>)</span><br><span class="line">    conv2_2 = conv2d_layer(conv2_1,<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>, <span class="string">'conv2_2'</span>)</span><br><span class="line">    pool2 = maxPoolLayer(conv2_2)</span><br><span class="line">    </span><br><span class="line">conv3_1 = conv2d_layer(pool2,<span class="number">128</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="string">'conv3_1'</span>)</span><br><span class="line">    conv3_2 = conv2d_layer(conv3_1,<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="string">'conv3_2'</span>)</span><br><span class="line">conv3_3 = conv2d_layer(conv3_2,<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="string">'conv3_3'</span>)</span><br><span class="line">    pool3 = maxPoolLayer(conv3_3)</span><br><span class="line">    </span><br><span class="line">conv4_1 = conv2d_layer(pool3,<span class="number">256</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv4_1'</span>)</span><br><span class="line">    conv4_2 = conv2d_layer(conv4_1,<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv4_2'</span>)</span><br><span class="line">conv4_3 = conv2d_layer(conv4_2,<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv4_3'</span>)</span><br><span class="line">    pool4 = maxPoolLayer(conv4_3)</span><br><span class="line">    </span><br><span class="line">conv5_1 = conv2d_layer(pool4,<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv5_1'</span>)</span><br><span class="line">    conv5_2 = conv2d_layer(conv5_1,<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv5_2'</span>)</span><br><span class="line">conv5_3 = conv2d_layer(conv5_1,<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="string">'conv5_3'</span>)</span><br><span class="line">    pool5 = maxPoolLayer(conv5_3)</span><br><span class="line">    </span><br><span class="line">pool5_flatten_dims = int(np.prod(pool5.get_shape().as_list()[<span class="number">1</span>:]))</span><br><span class="line">    pool5_flatten = tf.reshape(pool5,[<span class="number">-1</span>,pool5_flatten_dims])</span><br><span class="line">    </span><br><span class="line">    fc_6 = fc_layer(pool5_flatten, pool5_flatten_dims, <span class="number">4096</span>, <span class="string">'fc6'</span>)</span><br><span class="line">fc_7 = fc_layer(fc_6, <span class="number">4096</span>, <span class="number">4096</span>, <span class="string">'fc7'</span>)</span><br><span class="line">fc_8 = fc_layer(fc_7, <span class="number">4096</span>, <span class="number">10</span>, <span class="string">'fc8'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fc_8</span><br></pre></td></tr></table></figure><h1 id="12-2-Pytorch"><a href="#12-2-Pytorch" class="headerlink" title="12.2 Pytorch"></a>12.2 Pytorch</h1><h2 id="12-2-1-Pytorch是什么？"><a href="#12-2-1-Pytorch是什么？" class="headerlink" title="12.2.1 Pytorch是什么？"></a>12.2.1 Pytorch是什么？</h2><p>&emsp;&emsp;Pytorch是torch的python版本，是由Facebook开源的神经网络框架，专门针对 GPU 加速的深度神经网络（DNN）编程。Torch 是一个经典的对多维矩阵数据进行操作的张量（tensor ）库，在机器学习和其他数学密集型应用有广泛应用。与Tensorflow的静态计算图不同，pytorch的计算图是动态的，可以根据计算需要实时改变计算图。但由于Torch语言采用 Lua，导致在国内一直很小众，并逐渐被支持 Python 的 Tensorflow 抢走用户。作为经典机器学习库 Torch 的端口，PyTorch 为 Python 语言使用者提供了舒适的写代码选择。</p><h2 id="12-2-2-为什么选择-Pytorch？"><a href="#12-2-2-为什么选择-Pytorch？" class="headerlink" title="12.2.2 为什么选择 Pytorch？"></a>12.2.2 为什么选择 Pytorch？</h2><h3 id="1-简洁："><a href="#1-简洁：" class="headerlink" title="1.简洁："></a>1.简洁：</h3><p>&emsp;&emsp;PyTorch的设计追求最少的封装，尽量避免重复造轮子。不像 TensorFlow 中充斥着session、graph、operation、name_scope、variable、tensor、layer等全新的概念，PyTorch 的设计遵循tensor→variable(autograd)→nn.Module 三个由低到高的抽象层次，分别代表高维数组（张量）、自动求导（变量）和神经网络（层/模块），而且这三个抽象之间联系紧密，可以同时进行修改和操作。<br>简洁的设计带来的另外一个好处就是代码易于理解。PyTorch的源码只有TensorFlow的十分之一左右，更少的抽象、更直观的设计使得PyTorch的源码十分易于阅读。</p><h3 id="2-速度："><a href="#2-速度：" class="headerlink" title="2.速度："></a>2.速度：</h3><p>&emsp;&emsp;PyTorch 的灵活性不以速度为代价，在许多评测中，PyTorch 的速度表现胜过 TensorFlow和Keras 等框架。框架的运行速度和程序员的编码水平有极大关系，但同样的算法，使用PyTorch实现的那个更有可能快过用其他框架实现的。</p><h3 id="3-易用："><a href="#3-易用：" class="headerlink" title="3.易用："></a>3.易用：</h3><p>&emsp;&emsp;PyTorch 是所有的框架中面向对象设计的最优雅的一个。PyTorch的面向对象的接口设计来源于Torch，而Torch的接口设计以灵活易用而著称，Keras作者最初就是受Torch的启发才开发了Keras。PyTorch继承了Torch的衣钵，尤其是API的设计和模块的接口都与Torch高度一致。PyTorch的设计最符合人们的思维，它让用户尽可能地专注于实现自己的想法，即所思即所得，不需要考虑太多关于框架本身的束缚。</p><h3 id="4-活跃的社区："><a href="#4-活跃的社区：" class="headerlink" title="4.活跃的社区："></a>4.活跃的社区：</h3><p>&emsp;&emsp;PyTorch 提供了完整的文档，循序渐进的指南，作者亲自维护的论坛 供用户交流和求教问题。Facebook 人工智能研究院对 PyTorch 提供了强力支持，作为当今排名前三的深度学习研究机构，FAIR的支持足以确保PyTorch获得持续的开发更新，不至于像许多由个人开发的框架那样昙花一现。</p><h2 id="12-2-3-PyTorch-的架构是怎样的？"><a href="#12-2-3-PyTorch-的架构是怎样的？" class="headerlink" title="12.2.3 PyTorch 的架构是怎样的？"></a>12.2.3 PyTorch 的架构是怎样的？</h2><p>&emsp;&emsp;PyTorch(Caffe2) 通过混合前端，分布式训练以及工具和库生态系统实现快速，灵活的实验和高效生产。PyTorch 和 TensorFlow 具有不同计算图实现形式，TensorFlow 采用静态图机制(预定义后再使用)，PyTorch采用动态图机制(运行时动态定义)。PyTorch 具有以下高级特征：</p><p>&emsp;&emsp;混合前端:新的混合前端在急切模式下提供易用性和灵活性，同时无缝转换到图形模式，以便在C ++运行时环境中实现速度，优化和功能。<br>&emsp;&emsp;分布式训练:通过利用本地支持集合操作的异步执行和可从Python和C ++访问的对等通信，优化了性能。<br>&emsp;&emsp;Python优先: PyTorch为了深入集成到Python中而构建的，因此它可以与流行的库和Cython和Numba等软件包一起使用。<br>&emsp;&emsp;丰富的工具和库:活跃的研究人员和开发人员社区建立了丰富的工具和库生态系统，用于扩展PyTorch并支持从计算机视觉到强化学习等领域的开发。<br>&emsp;&emsp;本机ONNX支持:以标准ONNX（开放式神经网络交换）格式导出模型，以便直接访问与ONNX兼容的平台，运行时，可视化工具等。<br>&emsp;&emsp;C++前端：C++前端是PyTorch的纯C++接口，它遵循已建立的Python前端的设计和体系结构。它旨在实现高性能，低延迟和裸机C++应用程序的研究。<br>使用GPU和CPU优化的深度学习张量库。</p><h2 id="12-2-4-Pytorch-与-tensorflow-之间的差异在哪里？"><a href="#12-2-4-Pytorch-与-tensorflow-之间的差异在哪里？" class="headerlink" title="12.2.4 Pytorch 与 tensorflow 之间的差异在哪里？"></a>12.2.4 Pytorch 与 tensorflow 之间的差异在哪里？</h2><p>&emsp;&emsp;上面也将了PyTorch 最大优势是建立的神经网络是动态的, 对比静态的 Tensorflow, 它能更有效地处理一些问题, 比如说 RNN 变化时间长度的输出。各有各的优势和劣势。两者都是大公司发布的, Tensorflow（Google）宣称在分布式训练上下了很大的功夫, 那就默认 Tensorflow 在分布式训练上要超出 Pytorch（Facebook），还有tensorboard可视化工具, 但是 Tensorflow 的静态计算图使得在 RNN 上有一点点被动 (虽然它用其他途径解决了), 不过用 PyTorch 的时候, 会对这种动态的 RNN 有更好的理解。而且 Tensorflow 的高度工业化, 它的底层代码很难看懂， Pytorch 好那么一点点, 如果深入 PytorchAPI, 至少能比看 Tensorflow 多看懂一点点 Pytorch 的底层在干啥。</p><h2 id="12-2-5-Pytorch有哪些常用工具包？"><a href="#12-2-5-Pytorch有哪些常用工具包？" class="headerlink" title="12.2.5 Pytorch有哪些常用工具包？"></a>12.2.5 Pytorch有哪些常用工具包？</h2><p>&emsp;&emsp;torch ：类似 NumPy 的张量库，强 GPU 支持 ；<br>&emsp;&emsp;torch.autograd ：基于 tape 的自动区别库，支持 torch 之中的所有可区分张量运行；<br>&emsp;&emsp;torch.nn ：为最大化灵活性未涉及、与 autograd 深度整合的神经网络库；<br>&emsp;&emsp;torch.optim：与 torch.nn 一起使用的优化包，包含 SGD、RMSProp、LBFGS、Adam 等标准优化方式；<br>&emsp;&emsp;torch.multiprocessing： python 多进程并发，进程之间 torch Tensors 的内存共享；<br>&emsp;&emsp;torch.utils：数据载入器。具有训练器和其他便利功能；<br>&emsp;&emsp;torch.legacy(.nn/.optim) ：处于向后兼容性考虑，从 Torch 移植来的 legacy 代码；</p><h1 id="12-3-Caffe"><a href="#12-3-Caffe" class="headerlink" title="12.3 Caffe"></a>12.3 Caffe</h1><h2 id="12-3-1-什么是-Caffe？"><a href="#12-3-1-什么是-Caffe？" class="headerlink" title="12.3.1 什么是 Caffe？"></a>12.3.1 什么是 Caffe？</h2><p>&emsp;&emsp;Caffe的全称应该是Convolutional Architecture for Fast Feature Embedding，它是一个清晰、高效的深度学习框架，它是开源的，核心语言是C++，它支持命令行、Python和Matlab接口，它既可以在CPU上运行也可以在GPU上运行。它的license是BSD 2-Clause。</p><h2 id="12-3-2-Caffe的特点是什么？"><a href="#12-3-2-Caffe的特点是什么？" class="headerlink" title="12.3.2 Caffe的特点是什么？"></a>12.3.2 Caffe的特点是什么？</h2><p>(1)、模块化：Caffe从一开始就设计得尽可能模块化，允许对新数据格式、网络层和损失函数进行扩展。</p><p>(2)、表示和实现分离：Caffe的模型(model)定义是用Protocol Buffer语言写进配置文件的。以任意有向无环图的形式，Caffe支持网络架构。Caffe会根据网络的需要来正确占用内存。通过一个函数调用，实现CPU和GPU之间的切换。</p><p>(3)、测试覆盖：在Caffe中，每一个单一的模块都对应一个测试。</p><p>(4)、python和Matlab接口：同时提供Python和Matlab接口。</p><p>(5)、预训练参考模型：针对视觉项目，Caffe提供了一些参考模型，这些模型仅应用在学术和非商业领域，它们的license不是BSD。</p><h2 id="12-3-3-Caffe的设计思想是怎样的？"><a href="#12-3-3-Caffe的设计思想是怎样的？" class="headerlink" title="12.3.3 Caffe的设计思想是怎样的？"></a>12.3.3 Caffe的设计思想是怎样的？</h2><p>&emsp;&emsp;基本上，Caffe 沿用了神经网络的一个简单假设—-所有的计算都是以layer的形式表示的，layer做的事情就是take一些数据，然后输出一些计算以后的结果，比如说卷积，就是输入一个图像，然后和这一层的参数（filter）做卷积，然后输出卷积的结果。每一个layer需要做两个计算：forward是从输入计算输出，然后backward是从上面给的gradient来计算相对于输入的gradient，只要这两个函数实现了以后，我们就可以把很多层连接成一个网络，这个网络做的事情就是输入我们的数据（图像或者语音或者whatever），然后来计算我们需要的输出（比如说识别的label），在training的时候，我们可以根据已有的label来计算loss和gradient，然后用gradient来update网络的参数，这个就是Caffe的一个基本流程。</p><p>&emsp;&emsp;基本上，最简单地用Caffe上手的方法就是先把数据写成Caffe的格式，然后设计一个网络，然后用Caffe提供的solver来做优化看效果如何，如果你的数据是图像的话，可以从现有的网络，比如说alexnet或者googlenet开始，然后做fine tuning，如果你的数据稍有不同，比如说是直接的float vector，你可能需要做一些custom的configuration，Caffe的logistic regression example兴许会很有帮助。</p><p>&emsp;&emsp;Fine tune方法：fine tuning的想法就是说，在imagenet那么大的数据集上train好一个很牛的网络了，那别的task上肯定也不错，所以我们可以把pretrain的网络拿过来，然后只重新train最后几层，重新train的意思是说，比如我以前需要classify imagenet的一千类，现在我只想识别是狗还是猫，或者是不是车牌，于是我就可以把最后一层softmax从一个4096<em>1000的分类器变成一个4096</em>2的分类器，这个strategy在应用中非常好使，所以我们经常会先在imagenet上pretrain一个网络，因为我们知道imagenet上training的大概过程会怎么样。</p><h2 id="12-3-4-Caffe架构是怎样的？"><a href="#12-3-4-Caffe架构是怎样的？" class="headerlink" title="12.3.4 Caffe架构是怎样的？"></a>12.3.4 Caffe架构是怎样的？</h2><p>&emsp;&emsp;Caffe的架构与其它的深度学习框架稍微不同，它没有根据算法实现过程的方式来进行编码，而是以系统级的抽象作为整体架构，逐层的封装实现细节，使得上层的架构变得很清晰。Caffe的整体架构如下：</p><h3 id="1-SyncedMem"><a href="#1-SyncedMem" class="headerlink" title="1. SyncedMem"></a>1. SyncedMem</h3><p>&emsp;&emsp;这个类的主要功能是封装CPU和GPU的数据交互操作。一般来说，数据的流动形式都是：硬盘-&gt;CPU内存-&gt;GPU内存-&gt;CPU内存-&gt;（硬盘），所以在写代码的过程中经常会写CPU/GPU之间数据传输的代码，同时还要维护CPU和GPU两个处理端的内存指针。这些事情处理起来不会很难，但是会很繁琐。因此SyncedMem的出现就是把CPU/GPU的数据传输操作封装起来，只需要调用简单的接口就可以获得两个处理端同步后的数据。</p><h3 id="2-Blob"><a href="#2-Blob" class="headerlink" title="2. Blob"></a>2. Blob</h3><p>&emsp;&emsp;Blob是用于存储数据的对象，在Caffe中各种数据(图像输入、模型参数)都是以Blob的形式在网络中传输的，Blob提供统一的存储操作接口，可用来保存训练数据、模型参数等，同时Blob还能在CPU和GPU之间进行同步以支持CPU/GPU的混合运算。<br>&emsp;&emsp;这个类做了两个封装：一个是操作数据的封装，使用Blob可以操纵高维的数据，快速访问其中的数据，变换数据的维度等；另一个是对原始数据和更新量的封装，每一个Blob中都有data和diff两个数据指针，data用于存储原始数据，diff 用于存储反向传播（Backpropagation）的梯度更新值。Blob使用了SyncedMem，这样便于访问不同的处理端。Blob基本实现了整个Caffe数据结构部分的封装，在Net类中可以看到所有的前后向数据和参数都用Blob来表示就足够了。数据的抽象到这个就可以了，接下来作层级的抽象。神经网络的前后向计算可以做到层与层之间完全独立，只要每个层按照一定的接口规则实现，就可以确保整个网络的正确性。</p><h3 id="3-Layer"><a href="#3-Layer" class="headerlink" title="3. Layer"></a>3. Layer</h3><p>&emsp;&emsp;Layer是网络Net的基本单元，也是Caffe中能在外部进行调整的最小网络结构单元，每个Layer都有输入Blob和输出Blob。Layer（层）是Caffe中最庞大最繁杂的模块，它是神经网络的基本计算单元。由于Caffe强调模块化设计，因此只允许每个layer完成一类特定的计算，例如convolution操作、pooling、非线性变换、内积运算，以及数据加载、归一化和损失计算等。Caffe中layer的种类有很多，具体的种类及功能请看官方文档。在创建一个Caffe模型的时候，也是以Layer为基础进行的。Layer是一个父类，它的下面还有各种实现特定功能的子类，例如data_layer，conv_layer，loss_layer等。Layer是通过LayFactory来创建的。</p><h3 id="4-Net"><a href="#4-Net" class="headerlink" title="4. Net"></a>4. Net</h3><p>&emsp;&emsp;Net是一个完整的深度网络，包含输入层、隐藏层、输出层，在Caffe中一般是一个卷积神经网络(Convolution Neural Networ，CNN)。通过定义不同类型的Layer，并用Blob将不同的Layer连接起来，就能产生一个Net。Net将数据Blob和层Layer组合起来做进一步的封装，对外提供了初始化和前后传播的接口，使得整体看上去和一个层的功能类似，但内部的组合可以是多种多样的。值得一提的是，每一层的输入输出数据统一保存在Net中，同时每个层内的参数指针也保存在Net中，不同的层可以通过WeightShare共享相同的参数，因此可以通过配置来实现多个神经网络层之间共享参数的功能。一个Net由多个Layer组成。一个典型的网络从data layer（从磁盘中载入数据）出发到loss layer结束。</p><h3 id="5-Solver"><a href="#5-Solver" class="headerlink" title="5. Solver"></a>5. Solver</h3><p>&emsp;&emsp;有了Net就可以进行神经网络的前后向传播计算了，但是还缺少神经网络的训练和预测功能，Solver类进一步封装了训练和预测相关的一些功能。它还提供了两个接口：一个是更新参数的接口，继承Solver可以实现不同的参数更新方法，如Momentum，Nesterov，Adagrad等，因此可以使用不同的优化算法。另一个接口是训练过程中每一轮特定状态下的可注入的一些回调函数，在代码中这个回调点的直接使用者就是多GPU训练算法。Solver定义了针对Net网络模型的求解方法，记录网络的训练过程，保存网络模型参数，中断并恢复网络的训练过程。自定义Solver能够实现不同的神经网络求解方式。阅读Solver的代码可以了解网络的求解优化过程。Solver是一个父类，它下面还有实现不同优化方法的子类，例如sgd_solver，adagrad_sovler等，Solver是通过SolverFactory来创建的。</p><h3 id="6-Proto"><a href="#6-Proto" class="headerlink" title="6. Proto"></a>6. Proto</h3><p>&emsp;&emsp;caffe.proto位于…/src/caffe/proto目录下，在这个文件夹下还有一个.pb.cc和一个.pb.h文件，这两个文件都是由caffe.proto编译而来的。 在caffe.proto中定义了很多结构化数据，包括：<br>BlobProto、Datum、FillerParameter、NetParameter、SolverParameter、SolverState、LayerParameter、ConcatParameter、ConvolutionParameter、DataParameter、DropoutParameter、HDF5DataParameter、HDF5OutputParameter、ImageDataParameter、InfogainLossParameter、InnerProductParameter、LRNParameter、MemoryDataParameter、PoolingParameter、PowerParameter、WindowDataParameter、V0LayerParameter。</p><h3 id="7-IO"><a href="#7-IO" class="headerlink" title="7. IO"></a>7. IO</h3><p>&emsp;&emsp;除了上面的东西之外，还需要输入数据和参数。DataReader和DataTransformer帮助准备输入数据，Filler对参数进行初始化，一些Snapshot方法可以对模型进行持久化。</p><h2 id="12-3-5-Caffe的有哪些接口？"><a href="#12-3-5-Caffe的有哪些接口？" class="headerlink" title="12.3.5 Caffe的有哪些接口？"></a>12.3.5 Caffe的有哪些接口？</h2><p>&emsp;&emsp;Caffe深度学习框架支持多种编程接口，包括命令行、Python和Matlab,下面将介绍如何使用这些接口。</p><h3 id="1-Caffe-Python接口"><a href="#1-Caffe-Python接口" class="headerlink" title="1. Caffe Python接口"></a>1. Caffe Python接口</h3><p>&emsp;&emsp;Caffe提供 Python 接口，即Pycaffe，具体实现在caffe、python文件夹内。在Python代码中import caffe，可以load models（导入模型）、forward and backward （前向、反向迭代）、handle IO（数据输入输出）、visualize networks（绘制net）和instrument model solving（自定义优化方法)。所有的模型数据、计算参数都是暴露在外、可供读写的。<br>&emsp;&emsp;(1)caffe.Net 是主要接口，负责导入数据、校验数据、计算模型。<br>&emsp;&emsp;(2)caffe.Classsifier 用于图像分类。<br>&emsp;&emsp;(3)caffe.Detector 用于图像检测。<br>&emsp;&emsp;(4)caffe.SGDSolver 是露在外的 solver 的接口。<br>&emsp;&emsp;(5)caffe.io 处理输入输出，数据预处理。<br>&emsp;&emsp;(6)caffe.draw 可视化 net 的结构。<br>&emsp;&emsp;(7)caffe blobs 以 numpy ndarrys 的形式表示，方便而且高效。</p><h3 id="2-Caffe-MATLAB接口"><a href="#2-Caffe-MATLAB接口" class="headerlink" title="2. Caffe MATLAB接口"></a>2. Caffe MATLAB接口</h3><p>&emsp;&emsp;MATLAB接口（Matcaffe）在 caffe/matlab 目录的 caffe 软件包。在 matcaffe 的基础上，可将Caffe整合到MATLAB代码中。<br>&emsp;&emsp;MATLAB接口包括：<br>&emsp;&emsp;(1)MATLAB 中创建多个网络结构。<br>&emsp;&emsp;(2)网络的前向传播（Forward）与反向传播（Backward）计算。<br>&emsp;&emsp;(3)网络中的任意一层以及参数的存取。<br>&emsp;&emsp;(4)网络参数保存至文件或从文件夹加载。<br>&emsp;&emsp;(5)blob 和 network 形状调整。<br>&emsp;&emsp;(6)网络参数编辑和调整。<br>&emsp;&emsp;(7)创建多个 solvers 进行训练。<br>&emsp;&emsp;(8)从solver 快照（Snapshots）恢复并继续训练。<br>&emsp;&emsp;(9)访问训练网络（Train nets）和测试网络(Test nets)。<br>&emsp;&emsp;(10)迭代后网络交由 MATLAB 控制。<br>&emsp;&emsp;(11)MATLAB代码融合梯度算法。</p><h3 id="3-Caffe-命令行接口"><a href="#3-Caffe-命令行接口" class="headerlink" title="3. Caffe 命令行接口"></a>3. Caffe 命令行接口</h3><p>&emsp;&emsp;命令行接口 Cmdcaffe 是 Caffe 中用来训练模型、计算得分以及方法判断的工具。Cmdcaffe 存放在 caffe/build/tools 目录下。</p><h4 id="1-caffe-train"><a href="#1-caffe-train" class="headerlink" title="1. caffe train"></a>1. caffe train</h4><p>&emsp;&emsp;caffe train 命令用于模型学习，具体包括：<br>&emsp;&emsp;(1)caffe train 带 solver.prototxt 参数完成配置。<br>&emsp;&emsp;(2)caffe train 带 snapshot mode_iter_1000.solverstate 参数加载 solver snapshot。<br>&emsp;&emsp;(3)caffe train 带 weights 参数 model.caffemodel 完成 Fine-tuning 模型初始化。</p><h4 id="2-caffe-test"><a href="#2-caffe-test" class="headerlink" title="2. caffe test"></a>2. caffe test</h4><p>&emsp;&emsp;caffe test 命令用于测试运行模型的得分，并且用百分比表示网络输出的最终结果，比如 accuracyhuoloss 作为其结果。测试过程中，显示每个 batch 的得分，最后输出全部 batch 的平均得分值。</p><h4 id="3-caffe-time"><a href="#3-caffe-time" class="headerlink" title="3. caffe time"></a>3. caffe time</h4><p>&emsp;&emsp;caffe time 命令用来检测系统性能和测量模型相对执行时间，此命令通过逐层计时与同步，执行模型检测。</p><p>参考文献：<br>1.深度学习：Caffe之经典模型讲解与实战/ 乐毅，王斌</p><h3 id="10-4-网络搭建有什么原则？"><a href="#10-4-网络搭建有什么原则？" class="headerlink" title="10.4 网络搭建有什么原则？"></a>10.4 网络搭建有什么原则？</h3><h3 id="10-4-1新手原则。"><a href="#10-4-1新手原则。" class="headerlink" title="10.4.1新手原则。"></a>10.4.1新手原则。</h3><p>刚入门的新手不建议直接上来就开始搭建网络模型。比较建议的学习顺序如下：</p><ul><li>1.了解神经网络工作原理，熟悉基本概念及术语。</li><li>2.阅读经典网络模型论文+实现源码(深度学习框架视自己情况而定)。</li><li>3.找数据集动手跑一个网络，可以尝试更改已有的网络模型结构。</li><li>4.根据自己的项目需要设计网络。</li></ul><h3 id="10-4-2深度优先原则。"><a href="#10-4-2深度优先原则。" class="headerlink" title="10.4.2深度优先原则。"></a>10.4.2深度优先原则。</h3><p>通常增加网络深度可以提高准确率，但同时会牺牲一些速度和内存。但深度不是盲目堆起来的，一定要在浅层网络有一定效果的基础上，增加深度。深度增加是为了增加模型的准确率，如果浅层都学不到东西，深了也没效果。</p><h3 id="10-4-3卷积核size一般为奇数。"><a href="#10-4-3卷积核size一般为奇数。" class="headerlink" title="10.4.3卷积核size一般为奇数。"></a>10.4.3卷积核size一般为奇数。</h3><p>卷积核为奇数有以下好处：</p><ul><li>1 保证锚点刚好在中间，方便以 central pixel为标准进行滑动卷积，避免了位置信息发生偏移 。</li><li>2 保证在填充（Padding）时，在图像之间添加额外的零层，图像的两边仍然对称。</li></ul><h3 id="10-4-4卷积核不是越大越好。"><a href="#10-4-4卷积核不是越大越好。" class="headerlink" title="10.4.4卷积核不是越大越好。"></a>10.4.4卷积核不是越大越好。</h3><p>AlexNet中用到了一些非常大的卷积核，比如11×11、5×5卷积核，之前人们的观念是，卷积核越大，感受野越大，看到的图片信息越多，因此获得的特征越好。但是大的卷积核会导致计算量的暴增，不利于模型深度的增加，计算性能也会降低。于是在VGG、Inception网络中，利用2个3×3卷积核的组合比1个5×5卷积核的效果更佳，同时参数量（3×3×2+1=19&lt;26=5×5×1+1）被降低，因此后来3×3卷积核被广泛应用在各种模型中。</p><h2 id="10-5-有哪些经典的网络模型值得我们去学习的？"><a href="#10-5-有哪些经典的网络模型值得我们去学习的？" class="headerlink" title="10.5 有哪些经典的网络模型值得我们去学习的？"></a>10.5 有哪些经典的网络模型值得我们去学习的？</h2><p>提起经典的网络模型就不得不提起计算机视觉领域的经典比赛：ILSVRC .其全称是 ImageNet Large Scale Visual Recognition Challenge.正是因为ILSVRC 2012挑战赛上的AlexNet横空出世，使得全球范围内掀起了一波深度学习热潮。这一年也被称作“深度学习元年”。而在历年ILSVRC比赛中每次刷新比赛记录的那些神经网络也成为了人们心中的经典，成为学术界与工业届竞相学习与复现的对象，并在此基础上展开新的研究。</p><table><thead><tr><th>序号</th><th>年份</th><th>网络名称</th><th>获得荣誉</th></tr></thead><tbody><tr><td>1</td><td>2012</td><td>AlexNet</td><td>ILSVRC图像分类冠军</td></tr><tr><td>2</td><td>2014</td><td>VGGNet</td><td>ILSVRC图像分类亚军</td></tr><tr><td>3</td><td>2014</td><td>GoogLeNet</td><td>ILSVRC图像分类冠军</td></tr><tr><td>4</td><td>2015</td><td>ResNet</td><td>ILSVRC图像分类冠军</td></tr><tr><td>5</td><td>2017</td><td>SeNet</td><td>ILSVRC图像分类冠军</td></tr></tbody></table><blockquote><ul><li>1 AlexNet<br>论文:<a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="noopener">ImageNet Classification with Deep Convolutional Neural Networks</a><br>代码实现:<a href="https://github.com/tensorflow/tensorflow/blob/361a82d73a50a800510674b3aaa20e4845e56434/tensorflow/contrib/slim/python/slim/nets/alexnet.py" target="_blank" rel="noopener">tensorflow</a><br>主要特点：<blockquote><ul><li>1.第一次使用非线性激活函数ReLU。</li><li>2.增加防加过拟合方法：Droupout层,提升了模型鲁棒性。</li><li>3.首次使用数据增强。  </li><li>4.首次使用GPU加速运算。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>2 VGGNet<br>论文:<a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener">Very Deep Convolutional Networks for Large-Scale Image Recognition</a><br>代码实现:<a href="https://github.com/tensorflow/tensorflow/blob/361a82d73a50a800510674b3aaa20e4845e56434/tensorflow/contrib/slim/python/slim/nets/vgg.py" target="_blank" rel="noopener">tensorflow</a><br>主要特点：<blockquote><ul><li>1.网络结构更深。</li><li>2.普遍使用小卷积核。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>3 GoogLeNet<br>论文:<a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener">Going Deeper with Convolutions</a><br>代码实现:<a href="https://github.com/tensorflow/tensorflow/blob/361a82d73a50a800510674b3aaa20e4845e56434/tensorflow/contrib/slim/python/slim/nets/inception_v1.py" target="_blank" rel="noopener">tensorflow</a><br>主要特点：<blockquote><ul><li>1.增强卷积模块功能。<br>主要的创新在于他的Inception，这是一种网中网（Network In Network）的结构，即原来的结点也是一个网络。Inception一直在不断发展，目前已经V2、V3、V4。其中1*1卷积主要用来降维，用了Inception之后整个网络结构的宽度和深度都可扩大，能够带来2-3倍的性能提升。</li><li>2.连续小卷积代替大卷积，保证感受野不变的同时，减少了参数数目。</li></ul></blockquote></li><li>4 ResNet<br>论文:<a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a><br>代码实现:<a href="https://github.com/tensorflow/tensorflow/blob/361a82d73a50a800510674b3aaa20e4845e56434/tensorflow/contrib/slim/python/slim/nets/inception_v1.py" target="_blank" rel="noopener">tensorflow</a><br>主要特点:<blockquote><p>解决了“退化”问题，即当模型的层次加深时，错误率却提高了。</p></blockquote></li><li>5 SeNet<br>论文:<a href="https://arxiv.org/abs/1709.01507" target="_blank" rel="noopener">Squeeze-and-Excitation Networks</a><br>代码实现:<a href="https://github.com/ry/tensorflow-resnet" target="_blank" rel="noopener">tensorflow</a><br>主要特点:<blockquote><p>提出了feature recalibration，通过引入 attention 重新加权，可以得到抑制无效特征，提升有效特征的权重，并很容易地和现有网络结合，提升现有网络性能，而计算量不会增加太多。</p></blockquote></li></ul></blockquote><p><strong>CV领域网络结构演进历程：</strong><br><img src="/2016/12/20/第十二章_网络搭建及训练/img/ch12/网络结构演进.png" alt="CV领域网络结构演进历程"></p><p><strong>ILSVRC挑战赛历年冠军:</strong><br><img src="/2016/12/20/第十二章_网络搭建及训练/img/ch12/历年冠军.png" alt="ILSVRC挑战赛历年冠军"></p><p>此后，ILSVRC挑战赛的名次一直是衡量一个研究机构或企业技术水平的重要标尺。<br>ILSVRC 2017 已是最后一届举办.2018年起，将由WebVision竞赛（Challenge on Visual Understanding by Learning from Web Data）来接棒。因此，即使ILSVRC挑战赛停办了，但其对深度学习的深远影响和巨大贡献，将永载史册。</p><h2 id="10-6-网络训练有哪些技巧吗？"><a href="#10-6-网络训练有哪些技巧吗？" class="headerlink" title="10.6 网络训练有哪些技巧吗？"></a>10.6 网络训练有哪些技巧吗？</h2><h3 id="10-6-1-合适的数据集。"><a href="#10-6-1-合适的数据集。" class="headerlink" title="10.6.1.合适的数据集。"></a>10.6.1.合适的数据集。</h3><ul><li>1 没有明显脏数据(可以极大避免Loss输出为NaN)。</li><li>2 样本数据分布均匀。</li></ul><h3 id="10-6-2-合适的预处理方法。"><a href="#10-6-2-合适的预处理方法。" class="headerlink" title="10.6.2.合适的预处理方法。"></a>10.6.2.合适的预处理方法。</h3><p>关于数据预处理，在Batch Normalization未出现之前预处理的主要做法是减去均值，然后除去方差。在Batch Normalization出现之后，减均值除方差的做法已经没有必要了。对应的预处理方法主要是数据筛查、数据增强等。</p><h3 id="10-6-3-网络的初始化。"><a href="#10-6-3-网络的初始化。" class="headerlink" title="10.6.3.网络的初始化。"></a>10.6.3.网络的初始化。</h3><p>网络初始化最粗暴的做法是参数赋值为全0，这是绝对不可取的。因为如果所有的参数都是0，那么所有神经元的输出都将是相同的，那在back propagation的时候同一层内所有神经元的行为也是相同的，这可能会直接导致模型失效，无法收敛。吴恩达视频中介绍的方法是将网络权重初始化均值为0、方差为1符合的正态分布的随机数据。</p><h3 id="10-6-4-小规模数据试练。"><a href="#10-6-4-小规模数据试练。" class="headerlink" title="10.6.4.小规模数据试练。"></a>10.6.4.小规模数据试练。</h3><p>在正式开始训练之前，可以先用小规模数据进行试练。原因如下：</p><ul><li>1 可以验证自己的训练流程对否。</li><li>2 可以观察收敛速度，帮助调整学习速率。</li><li>3 查看GPU显存占用情况，最大化batch_size(前提是进行了batch normalization，只要显卡不爆，尽量挑大的)。</li></ul><h3 id="10-6-5-设置合理Learning-Rate。"><a href="#10-6-5-设置合理Learning-Rate。" class="headerlink" title="10.6.5.设置合理Learning Rate。"></a>10.6.5.设置合理Learning Rate。</h3><ul><li>1 太大。Loss爆炸、输出NaN等。</li><li>2 太小。收敛速度过慢，训练时长大大延长。</li><li>3 可变的学习速率。比如当输出准确率到达某个阈值后，可以让Learning Rate减半继续训练。</li></ul><h3 id="10-6-6-损失函数"><a href="#10-6-6-损失函数" class="headerlink" title="10.6.6.损失函数"></a>10.6.6.损失函数</h3><p>损失函数主要分为两大类:分类损失和回归损失</p><blockquote><p>1.回归损失：</p><blockquote><ul><li>1 均方误差(MSE 二次损失 L2损失)<br>它是我们的目标变量与预测值变量差值平方。</li><li>2 平均绝对误差(MAE L1损失)<br>它是我们的目标变量与预测值变量差值绝对值。<br>关于MSE与MAE的比较。MSE更容易解决问题，但是MAE对于异常值更加鲁棒。更多关于MAE和MSE的性能，可以参考<a href="https://rishy.github.io/ml/2015/07/28/l1-vs-l2-loss/" target="_blank" rel="noopener">L1vs.L2 Loss Function</a></li></ul></blockquote></blockquote><blockquote><p>2.分类损失：</p><blockquote><ul><li>1 交叉熵损失函数。<br>是目前神经网络中最常用的分类目标损失函数。</li><li>2 合页损失函数<br>合页损失函数广泛在支持向量机中使用，有时也会在损失函数中使用。缺点:合页损失函数是对错误越大的样本施以更严重的惩罚，但是这样会导致损失函数对噪声敏感。</li></ul></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>目标检测</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%85%AB%E7%AB%A0_%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    <id>https://leesen998.github.io/2016/12/20/第八章_目标检测/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:45:19.991Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><p><strong>目录</strong></p><p>8.1 基本概念</p><p>8.1.1 什么是目标检测？</p><p>8.1.2 目标检测要解决的核心问题</p><p>8.1.2 目标检测算法</p><p>8.2 Two Stage目标检测算法</p><p>8.2.1 R-CNN</p><p>8.2.2 Fast R-CNN</p><p>8.2.3 Faster R-CNN</p><p>8.2.4 R-FCN</p><p>8.2.5 FPN</p><p>8.2.6 Mask R-CNN</p><p>8.2.7 RefineDet</p><p>8.2.8 Cascade R-CNN</p><p>8.3 One Stage目标检测算法</p><p>8.3.1 SSD</p><p>8.3.2 DSSD</p><p>8.3.3 FSSD</p><p>8.3.4 YOLOv1</p><p>8.3.5 YOLOv2</p><p>8.3.6 YOLO9000</p><p>8.3.7 YOLOv3</p><p>8.3.8 RetinaNet</p><p>8.3.9 RFBNet</p><p>8.3.10 M2Det</p><p>Reference</p><h2 id="8-1-基本概念"><a href="#8-1-基本概念" class="headerlink" title="8.1 基本概念"></a>8.1 基本概念</h2><h3 id="8-1-1-什么是目标检测？"><a href="#8-1-1-什么是目标检测？" class="headerlink" title="8.1.1 什么是目标检测？"></a>8.1.1 什么是目标检测？</h3><p>目标检测（Object Detection）的任务是找出图像中所有感兴趣的目标（物体），确定它们的类别和位置，是计算机视觉领域的核心问题之一。由于各类物体有不同的外观，形状，姿态，加上成像时光照，遮挡等因素的干扰，目标检测一直是计算机视觉领域最具有挑战性的问题。</p><p>计算机视觉中关于图像识别有四大类任务：</p><p><strong>分类-Classification</strong>：解决“是什么？”的问题，即给定一张图片或一段视频判断里面包含什么类别的目标。</p><p><strong>定位-Location</strong>：解决“在哪里？”的问题，即定位出这个目标的的位置。</p><p><strong>检测-Detection</strong>：解决“是什么？在哪里？”的问题，即定位出这个目标的的位置并且知道目标物是什么。</p><p><strong>分割-Segmentation</strong>：分为实例的分割（Instance-level）和场景分割（Scene-level），解决“每一个像素属于哪个目标物或场景”的问题。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.1.png" alt="图像识别四大类任务，图像来源于cs231n 2016课件Lecture 8"></p><h3 id="8-1-2-目标检测要解决的核心问题？"><a href="#8-1-2-目标检测要解决的核心问题？" class="headerlink" title="8.1.2 目标检测要解决的核心问题？"></a>8.1.2 目标检测要解决的核心问题？</h3><p>除了图像分类之外，目标检测要解决的核心问题是：</p><p>1.目标可能出现在图像的任何位置。</p><p>2.目标有各种不同的大小。</p><p>3.目标可能有各种不同的形状。</p><p>如果用矩形框来定义目标，则矩形有不同的宽高比。由于目标的宽高比不同，因此采用经典的滑动窗口+图像缩放的方案解决通用目标检测问题的成本太高。</p><h3 id="8-1-2-目标检测算法分类？"><a href="#8-1-2-目标检测算法分类？" class="headerlink" title="8.1.2 目标检测算法分类？"></a>8.1.2 目标检测算法分类？</h3><p>基于深度学习的目标检测算法主要分为两类：</p><p><strong>1.Two stage目标检测算法</strong></p><p>先进行区域生成（region proposal，RP）（一个有可能包含待检物体的预选框），再通过卷积神经网络进行样本分类。</p><p>任务：特征提取—&gt;生成RP—&gt;分类/定位回归。</p><p>常见的two stage目标检测算法有：R-CNN、SPP-Net、Fast R-CNN、Faster R-CNN和R-FCN等。</p><p><strong>2.One stage目标检测算法</strong></p><p>不用RP，直接在网络中提取特征来预测物体分类和位置。</p><p>任务：特征提取—&gt;分类/定位回归。</p><p>常见的one stage目标检测算法有：OverFeat、YOLOv1、YOLOv2、YOLOv3、SSD和RetinaNet等。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.2.png" alt=""></p><h2 id="8-2-Two-Stage目标检测算法"><a href="#8-2-Two-Stage目标检测算法" class="headerlink" title="8.2 Two Stage目标检测算法"></a>8.2 Two Stage目标检测算法</h2><h3 id="8-2-1-R-CNN"><a href="#8-2-1-R-CNN" class="headerlink" title="8.2.1 R-CNN"></a>8.2.1 R-CNN</h3><p><strong>标题：《Rich feature hierarchies for accurate object detection and semantic segmentation》</strong></p><p><strong>时间：2014</strong></p><p><strong>出版源：CVPR 2014</strong></p><p><strong>主要链接</strong>：</p><ul><li>arXiv：<a href="http://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">http://arxiv.org/abs/1311.2524</a></li><li>github(caffe)：<a href="https://github.com/rbgirshick/rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/rcnn</a></li></ul><p><strong>R-CNN 创新点</strong></p><ul><li>使用CNN（ConvNet）对 region proposals 计算 feature vectors。从经验驱动特征（SIFT、HOG）到数据驱动特征（CNN feature map），提高特征对样本的表示能力。</li><li>采用大样本下（ILSVRC）有监督预训练和小样本（PASCAL）微调（fine-tuning）的方法解决小样本难以训练甚至过拟合等问题。</li></ul><p>注：ILSVRC其实就是众所周知的ImageNet的挑战赛，数据量极大；PASCAL数据集（包含目标检测和图像分割等），相对较小。</p><p><strong>R-CNN 介绍</strong></p><p>R-CNN作为R-CNN系列的第一代算法，其实没有过多的使用“深度学习”思想，而是将“深度学习”和传统的“计算机视觉”的知识相结合。比如R-CNN pipeline中的第二步和第四步其实就属于传统的“计算机视觉”技术。使用selective search提取region proposals，使用SVM实现分类。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.3.png" alt="图像来源: r-cnn-ilsvrc2013-workshop.pdf"></p><p>原论文中R-CNN pipeline只有4个步骤，光看上图无法深刻理解R-CNN处理机制，下面结合图示补充相应文字</p><ol><li><p>预训练模型。选择一个预训练 （pre-trained）神经网络（如AlexNet、VGG）。</p></li><li><p>重新训练全连接层。使用需要检测的目标重新训练（re-train）最后全连接层（connected layer）。</p></li><li><p>提取 proposals并计算CNN 特征。利用选择性搜索（Selective Search）算法提取所有proposals（大约2000幅images），调整（resize/warp）它们成固定大小，以满足 CNN输入要求（因为全连接层的限制），然后将feature map 保存到本地磁盘。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.4.png" alt=""></p></li><li><p>训练SVM。利用feature map 训练SVM来对目标和背景进行分类（每个类一个二进制SVM）</p></li><li><p>边界框回归（Bounding boxes Regression）。训练将输出一些校正因子的线性回归分类器</p></li></ol><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.5.png" alt=""></p><p><strong>R-CNN 实验结果</strong></p><p>R-CNN在VOC 2007测试集上mAP达到58.5%，打败当时所有的目标检测算法。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.6.png" alt=""></p><p><strong>参考</strong></p><p><a href="https://github.com/amusi/paper-note/blob/master/Object-Detection/R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.md" target="_blank" rel="noopener">Amusi-R-CNN论文笔记</a></p><h3 id="8-2-2-Fast-R-CNN"><a href="#8-2-2-Fast-R-CNN" class="headerlink" title="8.2.2 Fast R-CNN"></a>8.2.2 Fast R-CNN</h3><p><strong>标题：《Fast R-CNN》</strong></p><p><strong>时间：2015</strong></p><p><strong>出版源：ICCV 2015</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">https://arxiv.org/abs/1504.08083</a></li><li>github(Official)：<a href="https://github.com/rbgirshick/fast-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn</a></li></ul><p><strong>Fast R-CNN 创新点</strong></p><ol><li>只对整幅图像进行一次特征提取，避免R-CNN中的冗余特征提取</li><li>用RoI pooling层替换最后一层的max pooling层，同时引入建议框数据，提取相应建议框特征</li><li>Fast R-CNN网络末尾采用并行的不同的全连接层，可同时输出分类结果和窗口回归结果，实现了end-to-end的多任务训练【建议框提取除外】，也不需要额外的特征存储空间【R-CNN中的特征需要保持到本地，来供SVM和Bounding-box regression进行训练】</li><li>采用SVD对Fast R-CNN网络末尾并行的全连接层进行分解，减少计算复杂度，加快检测速度。</li></ol><p><strong>Fast R-CNN 介绍</strong></p><p>Fast R-CNN是基于R-CNN和<a href="https://arxiv.org/abs/1406.4729" target="_blank" rel="noopener">SPPnets</a>进行的改进。SPPnets，其创新点在于计算整幅图像的the shared feature map，然后根据object proposal在shared feature map上映射到对应的feature vector（就是不用重复计算feature map了）。当然，SPPnets也有缺点：和R-CNN一样，训练是多阶段（multiple-stage pipeline）的，速度还是不够”快”，特征还要保存到本地磁盘中。</p><p>将候选区域直接应用于特征图，并使用ROI池化将其转化为固定大小的特征图块。以下是Fast R-CNN的流程图</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.7.png" alt=""></p><p><strong>RoI Pooling层详解</strong></p><p>因为Fast R-CNN使用全连接层，所以应用RoI Pooling将不同大小的ROI转换为固定大小。</p><p>RoI Pooling 是Pooling层的一种，而且是针对RoI的Pooling，其特点是输入特征图尺寸不固定，但是输出特征图尺寸固定（如7x7）。</p><p><strong>什么是RoI呢？</strong></p><p>RoI是Region of Interest的简写，一般是指图像上的区域框，但这里指的是由Selective Search提取的候选框。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.10.png" alt=""></p><p>往往经过rpn后输出的不止一个矩形框，所以这里我们是对多个RoI进行Pooling。</p><p><strong>RoI Pooling的输入</strong></p><p>输入有两部分组成： </p><ol><li>特征图（feature map）：指的是上面所示的特征图，在Fast RCNN中，它位于RoI Pooling之前，在Faster RCNN中，它是与RPN共享那个特征图，通常我们常常称之为“share_conv”； </li><li>RoIs，其表示所有RoI的N*5的矩阵。其中N表示RoI的数量，第一列表示图像index，其余四列表示其余的左上角和右下角坐标。</li></ol><p>在Fast RCNN中，指的是Selective Search的输出；在Faster RCNN中指的是RPN的输出，一堆矩形候选框，形状为1x5x1x1（4个坐标+索引index），其中值得注意的是：坐标的参考系不是针对feature map这张图的，而是针对原图的（神经网络最开始的输入）。其实关于ROI的坐标理解一直很混乱，到底是根据谁的坐标来。其实很好理解，我们已知原图的大小和由Selective Search算法提取的候选框坐标，那么根据”映射关系”可以得出特征图（featurwe map）的大小和候选框在feature map上的映射坐标。至于如何计算，其实就是比值问题，下面会介绍。所以这里把ROI理解为原图上各个候选框（region proposals），也是可以的。</p><p>注：说句题外话，由Selective Search算法提取的一系列可能含有object的boudning box，这些通常称为region proposals或者region of interest（ROI）。</p><p><strong>RoI的具体操作</strong></p><ol><li><p>根据输入image，将ROI映射到feature map对应位置</p><p>注：映射规则比较简单，就是把各个坐标除以“输入图片与feature map的大小的比值”，得到了feature map上的box坐标</p></li><li><p>将映射后的区域划分为相同大小的sections（sections数量与输出的维度相同）</p></li><li><p>对每个sections进行max pooling操作</p></li></ol><p>这样我们就可以从不同大小的方框得到固定大小的相应 的feature maps。值得一提的是，输出的feature maps的大小不取决于ROI和卷积feature maps大小。ROI pooling 最大的好处就在于极大地提高了处理速度。</p><p><strong>RoI Pooling的输出</strong></p><p>输出是batch个vector，其中batch的值等于RoI的个数，vector的大小为channel <em> w </em> h；RoI Pooling的过程就是将一个个大小不同的box矩形框，都映射成大小固定（w * h）的矩形框。</p><p><strong>RoI Pooling示例</strong></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.11.gif" alt=""></p><p><strong>参考</strong></p><p><a href="https://github.com/amusi/paper-note/blob/master/Object-Detection/Fast-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.md" target="_blank" rel="noopener">Amusi-Fast R-CNN论文笔记</a></p><h3 id="8-2-3-Faster-R-CNN"><a href="#8-2-3-Faster-R-CNN" class="headerlink" title="8.2.3 Faster R-CNN"></a>8.2.3 Faster R-CNN</h3><p><strong>标题：《Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks》</strong></p><p><strong>时间：2015</strong></p><p><strong>出版源：NIPS 2015</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="http://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">http://arxiv.org/abs/1506.01497</a></li><li>github(official, Matlab)：<a href="https://github.com/ShaoqingRen/faster_rcnn" target="_blank" rel="noopener">https://github.com/ShaoqingRen/faster_rcnn</a></li><li><p>github(official, Caffe)：<a href="https://github.com/rbgirshick/py-faster-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/py-faster-rcnn</a></p><p>  Fast R-CNN依赖于外部候选区域方法，如选择性搜索。但这些算法在CPU上运行且速度很慢。在测试中，Fast R-CNN需要2.3秒来进行预测，其中2秒用于生成2000个ROI。Faster R-CNN采用与Fast R-CNN相同的设计，只是它用内部深层网络代替了候选区域方法。新的候选区域网络（RPN）在生成ROI时效率更高，并且以每幅图像10毫秒的速度运行。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.13.png" alt=""> </p><p>  图8.1.13 Faster R-CNN的流程图<br>  Faster R-CNN的流程图与Fast R-CNN相同，采用外部候选区域方法代替了内部深层网络。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.14.png" alt=""> </p><p>  图8.1.14<br>  <strong>候选区域网络</strong></p><p>  候选区域网络（RPN）将第一个卷积网络的输出特征图作为输入。它在特征图上滑动一个3×3的卷积核，以使用卷积网络（如下所示的ZF网络）构建与类别无关的候选区域。其他深度网络（如VGG或ResNet）可用于更全面的特征提取，但这需要以速度为代价。ZF网络最后会输出256个值，它们将馈送到两个独立的全连接层，以预测边界框和两个objectness分数，这两个objectness分数度量了边界框是否包含目标。我们其实可以使用回归器计算单个objectness分数，但为简洁起见，Faster R-CNN使用只有两个类别的分类器：即带有目标的类别和不带有目标的类别。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.15.png" alt=""> </p><p>  图8.1.15<br>  对于特征图中的每一个位置，RPN会做k次预测。因此，RPN将输出4×k个坐标和每个位置上2×k个得分。下图展示了8×8的特征图，且有一个3×3的卷积核执行运算，它最后输出8×8×3个ROI（其中k=3）。下图（右）展示了单个位置的3个候选区域。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.16.png" alt=""></p><p>  图8.1.16<br>  假设最好涵盖不同的形状和大小。因此，Faster R-CNN不会创建随机边界框。相反，它会预测一些与左上角名为锚点的参考框相关的偏移量（如x, y）。我们限制这些偏移量的值，因此我们的猜想仍然类似于锚点。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.17.png" alt=""> </p><p>  图8.1.17<br>  要对每个位置进行k个预测，我们需要以每个位置为中心的k个锚点。每个预测与特定锚点相关联，但不同位置共享相同形状的锚点。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.18.png" alt=""> </p><p>  图8.1.18<br>  这些锚点是精心挑选的，因此它们是多样的，且覆盖具有不同比例和宽高比的现实目标。这使得我们可以用更好的猜想来指导初始训练，并允许每个预测专门用于特定的形状。该策略使早期训练更加稳定和简便。<br>  <img src="/2016/12/20/第八章_目标检测/img/ch8/8.1.19.png" alt=""></p><p>  图8.1.19<br>  Faster R-CNN使用更多的锚点。它部署9个锚点框：3个不同宽高比的3个不同大小的锚点框。每一个位置使用9个锚点，每个位置会生成2×9个objectness分数和4×9个坐标。</p></li></ul><h3 id="8-2-4-R-FCN"><a href="#8-2-4-R-FCN" class="headerlink" title="8.2.4 R-FCN"></a>8.2.4 R-FCN</h3><p><strong>标题：《R-FCN: Object Detection via Region-based Fully Convolutional Networks》</strong></p><p><strong>时间：2016</strong></p><p><strong>出版源：NIPS 2016</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1605.06409" target="_blank" rel="noopener">https://arxiv.org/abs/1605.06409</a></li><li>github(Official)：<a href="https://github.com/daijifeng001/r-fcn" target="_blank" rel="noopener">https://github.com/daijifeng001/r-fcn</a></li></ul><p><strong>R-FCN 创新点</strong></p><p>R-FCN 仍属于two-stage 目标检测算法：RPN+R-FCN</p><ul><li>Fully convolutional</li><li>位置敏感得分图（position-sentive score maps）</li></ul><blockquote><p>our region-based detector is <strong>fully convolutional</strong> with almost all computation shared on the entire image. To achieve this goal, we propose <strong>position-sensitive score maps</strong> to address a dilemma between translation-invariance in image classification and translation-variance in object detection.</p></blockquote><p>R-FCN backbone：ResNet</p><p>ResNet-101+R-FCN：83.6% in PASCAL VOC 2007 test datasets</p><p>既提高了mAP，又加快了检测速度</p><pre><code>假设我们只有一个特征图用来检测右眼。那么我们可以使用它定位人脸吗？应该可以。因为右眼应该在人脸图像的左上角，所以我们可以利用这一点定位整个人脸。如果我们还有其他用来检测左眼、鼻子或嘴巴的特征图，那么我们可以将检测结果结合起来，更好地定位人脸。现在我们回顾一下所有问题。在Faster R-CNN中，检测器使用了多个全连接层进行预测。如果有2000个ROI，那么成本非常高。R-FCN通过减少每个ROI所需的工作量实现加速。上面基于区域的特征图与ROI是独立的，可以在每个ROI之外单独计算。剩下的工作就比较简单了，因此R-FCN的速度比Faster R-CNN快。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.1.png" alt=""></p><pre><code>图8.2.1 人脸检测现在我们来看一下5×5的特征图M，内部包含一个蓝色方块。我们将方块平均分成3×3个区域。现在，我们在M中创建了一个新的特征图，来检测方块的左上角（TL）。这个新的特征图如下图（右）所示。只有黄色的网格单元[2,2]处于激活状态。在左侧创建一个新的特征图，用于检测目标的左上角。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.2.png" alt=""> </p><pre><code>图8.2.2 检测示例我们将方块分成9个部分，由此创建了9个特征图，每个用来检测对应的目标区域。这些特征图叫做位置敏感得分图（position-sensitive score map），因为每个图检测目标的子区域（计算其得分）。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.3.png" alt=""></p><pre><code>图8.2.3生成9个得分图下图中红色虚线矩形是建议的ROI。我们将其分割成3×3个区域，并询问每个区域包含目标对应部分的概率是多少。例如，左上角ROI区域包含左眼的概率。我们将结果存储成3×3 vote数组，如下图（右）所示。例如，vote_array[0][0]包含左上角区域是否包含目标对应部分的得分。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.4.png" alt=""> </p><pre><code>图8.2.4将ROI应用到特征图上，输出一个3x3数组。将得分图和ROI映射到vote数组的过程叫做位置敏感ROI池化（position-sensitive ROI-pool）。该过程与前面讨论过的ROI池化非常接近。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.5.png" alt=""> </p><pre><code>图8.2.5将ROI的一部分叠加到对应的得分图上，计算V[i][j]。在计算出位置敏感ROI池化的所有值后，类别得分是其所有元素得分的平均值。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.6.png" alt=""></p><pre><code>图8.2.6 ROI池化假如我们有C个类别要检测。我们将其扩展为C+1个类别，这样就为背景（非目标）增加了一个新的类别。每个类别有3×3个得分图，因此一共有(C+1)×3×3个得分图。使用每个类别的得分图可以预测出该类别的类别得分。然后我们对这些得分应用 softmax 函数，计算出每个类别的概率。以下是数据流图，在本案例中，k=3。</code></pre><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.2.7.png" alt=""> </p><pre><code>图8.2.7</code></pre><h3 id="8-2-5-FPN"><a href="#8-2-5-FPN" class="headerlink" title="8.2.5 FPN"></a>8.2.5 FPN</h3><p><strong>标题：《Feature Pyramid Networks for Object Detection》</strong></p><p><strong>时间：2016</strong></p><p><strong>出版源：CVPR 2017</strong></p><p><strong>主要链接：</strong></p><ul><li><p>arXiv：<a href="https://arxiv.org/abs/1612.03144" target="_blank" rel="noopener">https://arxiv.org/abs/1612.03144</a></p></li><li><p>[ ] TODO</p></li></ul><h3 id="8-2-6-Mask-R-CNN"><a href="#8-2-6-Mask-R-CNN" class="headerlink" title="8.2.6 Mask R-CNN"></a>8.2.6 Mask R-CNN</h3><p><strong>标题：《Mask R-CNN》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：ICCV 2017</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">https://arxiv.org/abs/1703.06870</a></li></ul><ul><li>github(Official)：<a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">https://github.com/facebookresearch/Detectron</a></li></ul><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h3 id="8-2-7-RefineDet"><a href="#8-2-7-RefineDet" class="headerlink" title="8.2.7 RefineDet"></a>8.2.7 RefineDet</h3><p><strong>标题：《Single-Shot Refinement Neural Network for Object Detection》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：CVPR 2018</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1711.06897" target="_blank" rel="noopener">https://arxiv.org/abs/1711.06897</a></li><li>github(Official)：<a href="https://github.com/sfzhang15/RefineDet" target="_blank" rel="noopener">https://github.com/sfzhang15/RefineDet</a></li></ul><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h3 id="8-2-8-Cascade-R-CNN"><a href="#8-2-8-Cascade-R-CNN" class="headerlink" title="8.2.8 Cascade R-CNN"></a>8.2.8 Cascade R-CNN</h3><p><strong>标题：《Cascade R-CNN: Delving into High Quality Object Detection》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：CVPR 2018</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1712.00726" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00726</a></li><li>github(Official)：<a href="https://github.com/zhaoweicai/cascade-rcnn" target="_blank" rel="noopener">https://github.com/zhaoweicai/cascade-rcnn</a></li></ul><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h2 id="8-3-One-Stage目标检测算法"><a href="#8-3-One-Stage目标检测算法" class="headerlink" title="8.3 One Stage目标检测算法"></a>8.3 One Stage目标检测算法</h2><pre><code>我们将对单次目标检测器（包括SSD、YOLO、YOLOv2、YOLOv3）进行综述。我们将分析FPN以理解多尺度特征图如何提高准确率，特别是小目标的检测，其在单次检测器中的检测效果通常很差。然后我们将分析Focal loss和RetinaNet，看看它们是如何解决训练过程中的类别不平衡问题的。</code></pre><h3 id="8-3-1-SSD"><a href="#8-3-1-SSD" class="headerlink" title="8.3.1 SSD"></a>8.3.1 SSD</h3><p><strong>标题：《SSD: Single Shot MultiBox Detector》</strong></p><p><strong>时间：2015</strong></p><p><strong>出版源：ECCV 2016</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1512.02325" target="_blank" rel="noopener">https://arxiv.org/abs/1512.02325</a></li><li>github(Official)：<a href="https://github.com/weiliu89/caffe/tree/ssd" target="_blank" rel="noopener">https://github.com/weiliu89/caffe/tree/ssd</a></li></ul><p>不同于前面的RCNN系列，SSD属于one-stage方法。SSD使用 VGG16 网络作为特征提取器（和 Faster R-CNN 中使用的 CNN 一样）,将后面的全连接层替换成卷积层，并在之后添加自定义卷积层，并在最后直接采用卷积进行检测。在多个特征图上设置不同缩放比例和不同宽高比的default boxes（先验框）以融合多尺度特征图进行检测，靠前的大尺度特征图可以捕捉到小物体的信息，而靠后的小尺度特征图能捕捉到大物体的信息，从而提高检测的准确性和定位的准确性。如下图是SSD的网络结构图。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/SSD-01.png" alt=""></p><p><strong>1. 怎样设置default boxes？</strong><br>SSD中default box的概念有点类似于Faster R-CNN中的anchor。不同于Faster R-CNN只在最后一个特征层取anchor, SSD在多个特征层上取default box，可以得到不同尺度的default box。在特征图的每个单元上取不同宽高比的default box,一般宽高比在{1,2,3,1/2,1/3}中选取，有时还会额外增加一个宽高比为1但具有特殊尺度的box。如下图所示，在8x8的feature map和4x4的feature map上的每个单元取4个不同的default box。原文对于300x300的输入，分别在conv4_3, conv7,conv8_2,conv9_2,conv10_2,conv11_2的特征图上的每个单元取4,6,6,6,4,4个default box. 由于以上特征图的大小分别是38x38,19x19,10x10,5x5,3x3,1x1，所以一共得到38x38x4+19x19x6+10x10x6+5x5x6+<br>3x3x4+1x1x4=8732个default box.对一张300x300的图片输入网络将会针对这8732个default box预测8732个边界框。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/SSD-02.png" alt=""></p><p><strong>2. 怎样对先验框进行匹配？</strong><br>SSD在训练的时候只需要输入图像和图像中每个目标对应的ground truth. 先验框与ground truth 的匹配遵循两个原则：</p><p>（1）对图片中的每个ground truth, 在先验框中找到与其IOU最大的先验框，则该先验框对应的预测边界框与ground truth 匹配。</p><p>（2）对于（1）中每个剩下的没有与任何ground truth匹配到的先验框，找到与其IOU最大的ground truth，若其与该ground truth的IOU值大于某个阈值（一般设为0.5），则该先验框对应的预测边界框与该ground truth匹配。</p><p>按照这两个原则进行匹配，匹配到ground truth的先验框对应的预测边界框作为正样本，没有匹配到ground truth的先验框对应的预测边界框作为负样本。尽管一个ground truth可以与多个先验框匹配，但是ground truth的数量相对先验框还是很少，按照上面的原则进行匹配还是会造成负样本远多于正样本的情况。为了使正负样本尽量均衡（一般保证正负样本比例约为1：3），SSD采用hard negative mining, 即对负样本按照其预测背景类的置信度进行降序排列，选取置信度较小的top-k作为训练的负样本。</p><p><strong>3. 怎样得到预测的检测结果？</strong></p><p>最后分别在所选的特征层上使用3x3卷积核预测不同default boxes所属的类别分数及其预测的边界框location。由于对于每个box需要预测该box属于每个类别的置信度（假设有c类，包括背景）和该box对应的预测边界框的location(包含4个值，即该box的中心坐标和宽高)，则每个box需要预测c+4个值。所以对于某个所选的特征层，该层的卷积核个数为（c+4）x该层的default box个数.最后将每个层得到的卷积结果进行拼接。对于得到的每个预测框，取其类别置信度的最大值，若该最大值大于置信度阈值，则最大值所对应的类别即为该预测框的类别，否则过滤掉此框。对于保留的预测框根据它对应的先验框进行解码得到其真实的位置参数（这里还需注意要防止预测框位置超出图片），然后根据所属类别置信度进行降序排列，取top-k个预测框，最后进行NMS，过滤掉重叠度较大的预测框，最后得到检测结果。</p><p>SSD优势是速度比较快，整个过程只需要一步，首先在图片不同位置按照不同尺度和宽高比进行密集抽样，然后利用CNN提取特征后直接进行分类与回归，所以速度比较快，但均匀密集采样会造成正负样本不均衡的情况使得训练比较困难，导致模型准确度有所降低。另外，SSD对小目标的检测没有大目标好，因为随着网络的加深，在高层特征图中小目标的信息丢失掉了，适当增大输入图片的尺寸可以提升小目标的检测效果。</p><h3 id="8-3-2-DSSD"><a href="#8-3-2-DSSD" class="headerlink" title="8.3.2 DSSD"></a>8.3.2 DSSD</h3><p><strong>标题：《DSSD : Deconvolutional Single Shot Detector》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：CVPR 2017</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1701.06659" target="_blank" rel="noopener">https://arxiv.org/abs/1701.06659</a></li><li>github(Official)：<a href="https://github.com/chengyangfu/caffe/tree/dssd" target="_blank" rel="noopener">https://github.com/chengyangfu/caffe/tree/dssd</a></li></ul><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h3 id="8-3-3-FSSD"><a href="#8-3-3-FSSD" class="headerlink" title="8.3.3 FSSD"></a>8.3.3 FSSD</h3><p><strong>标题：《FSSD: Feature Fusion Single Shot Multibox Detector》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：None</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1712.00960" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00960</a></li></ul><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h3 id="8-3-4-YOLOv1"><a href="#8-3-4-YOLOv1" class="headerlink" title="8.3.4 YOLOv1"></a>8.3.4 YOLOv1</h3><p><strong>标题：《You Only Look Once: Unified, Real-Time Object Detection》</strong></p><p><strong>时间：2015</strong></p><p><strong>出版源：CVPR 2016</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="http://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">http://arxiv.org/abs/1506.02640</a></li><li>github(Official)：<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li></ul><p><strong>YOLOv1介绍</strong></p><p>YOLO（You Only Look Once: Unified, Real-Time Object Detection）是one-stage detection的开山之作。之前的物体检测方法首先需要产生大量可能包含待检测物体的先验框, 然后用分类器判断每个先验框对应的边界框里是否包含待检测物体，以及物体所属类别的概率或者置信度，同时需要后处理修正边界框，最后基于一些准则过滤掉置信度不高和重叠度较高的边界框，进而得到检测结果。这种基于先产生候选区再检测的方法虽然有相对较高的检测准确率，但运行速度较慢。</p><p>YOLO创造性的将物体检测任务直接当作回归问题（regression problem）来处理，将候选区和检测两个阶段合二为一。只需一眼就能知道每张图像中有哪些物体以及物体的位置。下图展示了各物体检测系统的流程图。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv1-01.png" alt=""></p><p>事实上，YOLO也并没有真正的去掉候选区，而是直接将输入图片划分成7x7=49个网格，每个网格预测两个边界框，一共预测49x2=98个边界框。可以近似理解为在输入图片上粗略的选取98个候选区，这98个候选区覆盖了图片的整个区域，进而用回归预测这98个候选框对应的边界框。</p><p><strong>下面以问答的形式展示YOLO中的一些实现细节：</strong></p><p><strong>1. 网络结构是怎样的？</strong></p><p>YOLO网络借鉴了GoogleNet分类网络结构，不同的是YOLO使用1x1卷积层和3x3卷积层替代inception module。如下图所示，整个检测网络包括24个卷积层和2个全连接层。其中，卷积层用来提取图像特征，全连接层用来预测图像位置和类别概率值。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv1-02.png" alt=""></p><p><strong>2. YOLO的输入、输出、损失函数分别是什么？</strong></p><p>前面说到YOLO将输入图像分成7x7的网格，最后输出是7x7xk的张量。YOLO网络最后接了两个全连接层，全连接层要求输入是固定大小的，所以YOLO要求输入图像有固定大小，论文中作者设计的输入尺寸是448x448。</p><p>YOLO将输入图像分成7x7的网格，每个网格预测2个边界框。若某物体的ground truth的中心落在该网格，则该网格中与这个ground truth IOU最大的边界框负责预测该物体。对每个边界框会预测5个值，分别是边界框的中心x,y（相对于所属网格的边界），边界框的宽高w,h（相对于原始输入图像的宽高的比例），以及这些边界框的confidencescores（边界框与ground truth box的IOU值）。同时每个网格还需要预测c个类条件概率 （是一个c维向量，表示某个物体object在这个网格中，且该object分别属于各个类别的概率，这里的c类物体不包含背景）。论文中的c=20，则每个网格需要预测2x5+20=30个值，这些值被映射到一个30维的向量。<br>为了让边界框坐标损失、分类损失达到很好的平衡，损失函数设计如下图所示。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv1-03.png" alt=""></p><p>如上图所示，损失函数分为坐标预测（蓝色框）、含有物体的边界框的confidence预测（红色框）、不含有物体的边界框的confidence预测（黄色框）、分类预测（紫色框）四个部分。</p><p>由于不同大小的边界框对预测偏差的敏感度不同，小的边界框对预测偏差的敏感度更大。为了均衡不同尺寸边界框对预测偏差的敏感度的差异。作者巧妙的对边界框的w,h取均值再求L2 loss. YOLO中更重视坐标预测，赋予坐标损失更大的权重，记为 coord，在pascal voc训练中coodd=5 ，classification error部分的权重取1。</p><p>某边界框的置信度定义为：某边界框的confidence = 该边界框存在某类对象的概率pr(object)*该边界框与该对象的ground truth的IOU值 ，若该边界框存在某个对象pr(object)=1 ，否则pr(object)=0 。由于一幅图中大部分网格中是没有物体的，这些网格中的边界框的confidence置为0，相比于有物体的网格，这些不包含物体的网格更多，对梯度更新的贡献更大，会导致网络不稳定。为了平衡上述问题，YOLO损失函数中对没有物体的边界框的confidence error赋予较小的权重，记为 noobj，对有物体的边界框的confidence error赋予较大的权重。在pascal VOC训练中noobj=0.5 ，有物体的边界框的confidence error的权重设为1.</p><p><strong>3. YOLO怎样预测？</strong></p><p>YOLO最后采用非极大值抑制（NMS）算法从输出结果中提取最有可能的对象和其对应的边界框。</p><p>输入一张图片到YOLO网络将输出一个7<em>7</em>30的张量表示图片中每个网格对应的可能的两个边界框以及每个边界框的置信度和包含的对象属于各个类别的概率。由此可以计算某对象i属于类别 同时在第j个边界框中的得分：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv1-04.png" alt=""></p><p>每个网格有20个类条件概率，2个边界框置信度，相当于每个网格有40个得分，7x7个网格有1960个得分，每类对象有1960/20=98个得分，即98个候选框。</p><p><strong>NMS步骤如下：</strong></p><p>1.设置一个Score的阈值，一个IOU的阈值；</p><p>2.对于每类对象，遍历属于该类的所有候选框，</p><p>①过滤掉Score低于Score阈值的候选框；</p><p>②找到剩下的候选框中最大Score对应的候选框，添加到输出列表；</p><p>③进一步计算剩下的候选框与②中输出列表中每个候选框的IOU，若该IOU大于设置的IOU阈值，将该候选框过滤掉，否则加入输出列表中；</p><p>④最后输出列表中的候选框即为图片中该类对象预测的所有边界框</p><p>3.返回步骤2继续处理下一类对象。</p><p>YOLO将识别与定位合二为一，结构简便，检测速度快，更快的Fast YOLO可以达到155FPS。相对于RNN系列, YOLO的整个流程中都能看到整张图像的信息，因此它在检测物体时能很好的利用上下文信息，从而不容易在背景上预测出错误的物体信息。同时YOLO可以学习到高度泛化的特征，能将一个域上学到的特征迁移到不同但相关的域上，如在自然图像上做训练的YOLO，在艺术图片上可以得到较好的测试结果。</p><p>由于YOLO网格设置比较稀疏，且每个网格只预测2个边界框，其总体预测精度不高，略低于Fast RCNN。其对小物体的检测效果较差，尤其是对密集的小物体表现比较差。</p><h3 id="8-3-5-YOLOv2"><a href="#8-3-5-YOLOv2" class="headerlink" title="8.3.5 YOLOv2"></a>8.3.5 YOLOv2</h3><p><strong>标题：《YOLO9000: Better, Faster, Stronger》</strong></p><p><strong>时间：2016</strong></p><p><strong>出版源：None</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">https://arxiv.org/abs/1612.08242</a></li><li>github(Official)：<a href="https://pjreddie.com/darknet/yolov2/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov2/</a></li></ul><p>YOLOv1虽然检测速度快，但在定位方面不够准确，并且召回率较低。为了提升定位准确度，改善召回率，YOLOv2在YOLOv1的基础上提出了几种改进策略，如下图所示，可以看到，一些改进方法能有效提高模型的mAP.</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv2-01.png" alt=""></p><p><strong>YOLOv2 介绍</strong></p><p><strong>（1）Batch Normalization</strong></p><p>YOLOv2中在每个卷积层后加Batch Normalization(BN)层，去掉dropout. BN层可以起到一定的正则化效果，能提升模型收敛速度，防止模型过拟合。YOLOv2通过使用BN层使得mAP提高了2%。<br><strong>（2）High Resolution Classifier</strong></p><p>目前的大部分检测模型都会使用主流分类网络（如vgg、resnet）在ImageNet上的预训练模型作为特征提取器,<br>而这些分类网络大部分都是以小于256x256的图片作为输入进行训练的，低分辨率会影响模型检测能力。YOLOv2将输入图片的分辨率提升至448x448，为了使网络适应新的分辨率，YOLOv2先在ImageNet上以448x448的分辨率对网络进行10个epoch的微调，让网络适应高分辨率的输入。通过使用高分辨率的输入，YOLOv2的mAP提升了约4%。</p><p><strong>（3）Convolutional With Anchor Boxes</strong></p><p>YOLOv1利用全连接层直接对边界框进行预测，导致丢失较多空间信息，定位不准。YOLOv2去掉了YOLOv1中的全连接层，使用Anchor Boxes预测边界框，同时为了得到更高分辨率的特征图，YOLOv2还去掉了一个池化层。由于图片中的物体都倾向于出现在图片的中心位置，若特征图恰好有一个中心位置，利用这个中心位置预测中心点落入该位置的物体，对这些物体的检测会更容易。所以总希望得到的特征图的宽高都为奇数。YOLOv2通过缩减网络，使用416x416的输入，模型下采样的总步长为32，最后得到13x13的特征图，然后对13x13的特征图的每个cell预测5个anchor boxes，对每个anchor box预测边界框的位置信息、置信度和一套分类概率值。使用anchor<br>boxes之后，YOLOv2可以预测13x13x5=845个边界框，模型的召回率由原来的81%提升到88%，mAP由原来的69.5%降低到69.2%.召回率提升了7%，准确率下降了0.3%。</p><p><strong>（4）Dimension Clusters</strong></p><p>在Faster R-CNN和SSD中，先验框都是手动设定的，带有一定的主观性。YOLOv2采用k-means聚类算法对训练集中的边界框做了聚类分析，选用boxes之间的IOU值作为聚类指标。综合考虑模型复杂度和召回率，最终选择5个聚类中心，得到5个先验框，发现其中中扁长的框较少，而瘦高的框更多，更符合行人特征。通过对比实验，发现用聚类分析得到的先验框比手动选择的先验框有更高的平均IOU值，这使得模型更容易训练学习。</p><p><strong>（5）New Network：Darknet-19</strong></p><p>YOLOv2采用Darknet-19，其网络结构如下图所示，包括19个卷积层和5个max pooling层，主要采用3x3卷积和1x1卷积，这里1x1卷积可以压缩特征图通道数以降低模型计算量和参数，每个卷积层后使用BN层以加快模型收敛同时防止过拟合。最终采用global avg pool 做预测。采用YOLOv2，模型的mAP值没有显著提升，但计算量减少了。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv2-02.png" alt=""></p><p><strong>（6）Direct location prediction</strong></p><p>Faster R-CNN使用anchor boxes预测边界框相对先验框的偏移量，由于没有对偏移量进行约束，每个位置预测的边界框可以落在图片任何位置，会导致模型不稳定，加长训练时间。YOLOv2沿用YOLOv1的方法，根据所在网格单元的位置来预测坐标,则Ground Truth的值介于0到1之间。网络中将得到的网络预测结果再输入sigmoid函数中，让输出结果介于0到1之间。设一个网格相对于图片左上角的偏移量是cx，cy。先验框的宽度和高度分别是pw和ph，则预测的边界框相对于特征图的中心坐标(bx，by)和宽高bw、bh的计算公式如下图所示。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv2-03.png" alt=""></p><p>YOLOv2结合Dimention Clusters, 通过对边界框的位置预测进行约束，使模型更容易稳定训练，这种方式使得模型的mAP值提升了约5%。</p><p><strong>（7）Fine-Grained Features</strong></p><p>YOLOv2借鉴SSD使用多尺度的特征图做检测，提出pass through层将高分辨率的特征图与低分辨率的特征图联系在一起，从而实现多尺度检测。YOLOv2提取Darknet-19最后一个max pool层的输入，得到26x26x512的特征图。经过1x1x64的卷积以降低特征图的维度，得到26x26x64的特征图，然后经过pass through层的处理变成13x13x256的特征图（抽取原特征图每个2x2的局部区域组成新的channel，即原特征图大小降低4倍，channel增加4倍），再与13x13x1024大小的特征图连接，变成13x13x1280的特征图，最后在这些特征图上做预测。使用Fine-Grained Features，YOLOv2的性能提升了1%.</p><p><strong>（8）Multi-Scale Training</strong></p><p>YOLOv2中使用的Darknet-19网络结构中只有卷积层和池化层，所以其对输入图片的大小没有限制。YOLOv2采用多尺度输入的方式训练，在训练过程中每隔10个batches,重新随机选择输入图片的尺寸，由于Darknet-19下采样总步长为32，输入图片的尺寸一般选择32的倍数{320,352,…,608}。采用Multi-Scale Training, 可以适应不同大小的图片输入，当采用低分辨率的图片输入时，mAP值略有下降，但速度更快，当采用高分辨率的图片输入时，能得到较高mAP值，但速度有所下降。</p><p>YOLOv2借鉴了很多其它目标检测方法的一些技巧，如Faster R-CNN的anchor boxes, SSD中的多尺度检测。除此之外，YOLOv2在网络设计上做了很多tricks,使它能在保证速度的同时提高检测准确率，Multi-Scale Training更使得同一个模型适应不同大小的输入，从而可以在速度和精度上进行自由权衡。</p><p><strong>YOLOv2的训练</strong></p><p>YOLOv2的训练主要包括三个阶段。<br>第一阶段：先在ImageNet分类数据集上预训练Darknet-19，此时模型输入为224<em>224,共训练160个epochs。<br>第二阶段：将网络的输入调整为448</em>448,继续在ImageNet数据集上finetune分类模型，训练10个epochs，此时分类模型的top-1准确度为76.5%，而top-5准确度为93.3%。<br>第三个阶段：修改Darknet-19分类模型为检测模型，并在检测数据集上继续finetune网络。<br>网络修改包括（网路结构可视化）：移除最后一个卷积层、global avgpooling层以及softmax层，并且新增了三个3<em>3</em>2014卷积层，同时增加了一个passthrough层，最后使用1*1卷积层输出预测结果。</p><h3 id="8-3-6-YOLO9000"><a href="#8-3-6-YOLO9000" class="headerlink" title="8.3.6 YOLO9000"></a>8.3.6 YOLO9000</h3><p>github：<a href="http://pjreddie.com/yolo9000/" target="_blank" rel="noopener">http://pjreddie.com/yolo9000/</a></p><p>YOLO9000是在YOLOv2的基础上提出的一种联合训练方法，可以检测超过9000个类别的模型。YOLOv2混合目标检测数据集和分类数据集，用目标检测数据集及其类别标记信息和位置标注信息训练模型学习预测目标定位和分类，用分类数据集及其类别标记信息进一步扩充模型所能识别的物体类别同时能增强模型鲁棒性。</p><p><strong>1. YOLO9000是怎么组织数据的？</strong></p><p>YOLO9000根据各个类别之间的从属关系建立一种树结WordTree, 将COCO数据集和ImageNet数据集组织起来。</p><p>WordTree的生成方式如下：</p><p>①首先遍历ImageNet中的类别名词。</p><p>②对每个名词，在WordNet(一种结构化概念及概念之间关系的语言数据库)上找到从它所在位置到根节点（设根节点为实体对象physical object）的最短路径，由于在WordNet中大多数同义词只有一个路径，所以先把将该路径上的词全都加到树中。</p><p>③迭代地检查剩下的名词，取它到根节点的最短路径，将该最短路径上的还没出现在层次树中的词加入到树中。<br>混合后的数据集形成一个有9418类的WordTree.生成的WordTree模型如下图所示。另外考虑到COCO数据集相对于ImageNet数据集数据量太少了，为了平衡两个数据集，作者进一步对COCO数据集过采样，使COCO数据集与ImageNet数据集的数据量比例接近1：4。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv2-04.png" alt=""></p><p>对于物体的标签，采用one-hot编码的形式，数据集中的每个物体的类别标签被组织成1个长度为9418的向量，向量中除在WordTree中从该物体对应的名词到根节点的路径上出现的词对应的类别标号处为1，其余位置为0。</p><p><strong>2. YOLO9000是怎么进行联合训练的？</strong></p><p>YOLO9000采用YOLOv2的结构，anchorbox由原来的5调整到3，对每个anchorbox预测其对应的边界框的位置信息x,y,w,h和置信度以及所包含的物体分别属于9418类的概率，所以每个anchorbox需要预测4+1+9418=9423个值。每个网格需要预测3x9423=28269个值。在训练的过程中，当网络遇到来自检测数据集的图片时，用完整的YOLOv2loss进行反向传播计算，当网络遇到来自分类数据集的图片时，只用分类部分的loss进行反向传播。</p><p><strong>3. YOLO9000是怎么预测的？</strong></p><p>WordTree中每个节点的子节点都属于同一个子类，分层次的对每个子类中的节点进行一次softmax处理，以得到同义词集合中的每个词的下义词的概率。当需要预测属于某个类别的概率时，需要预测该类别节点的条件概率。即在WordTree上找到该类别名词到根节点的路径，计算路径上每个节点的概率之积。预测时，YOLOv2得到置信度，同时会给出边界框位置以及一个树状概率图，沿着根节点向下，沿着置信度最高的分支向下，直到达到某个阈值，最后到达的节点类别即为预测物体的类别。</p><p>YOLO9000使用WordTree混合目标检测数据集和分类数据集，并在其上进行联合训练，使之能实时检测出超过9000个类别的物体，其强大令人赞叹不已。YOLO9000尤其对动物的识别效果很好，但是对衣服或者设备等类别的识别效果不是很好，可能的原因是与目标检测数据集中的数据偏向有关。</p><h3 id="8-3-7-YOLOv3"><a href="#8-3-7-YOLOv3" class="headerlink" title="8.3.7 YOLOv3"></a>8.3.7 YOLOv3</h3><p><strong>标题：《YOLOv3: An Incremental Improvement》</strong></p><p><strong>时间：2018</strong></p><p><strong>出版源：None</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener">https://arxiv.org/abs/1804.02767</a></li><li>github(Official)：<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li></ul><p>YOLOv3总结了自己在YOLOv2的基础上做的一些尝试性改进，有的尝试取得了成功，而有的尝试并没有提升模型性能。其中有两个值得一提的亮点，一个是使用残差模型，进一步加深了网络结构；另一个是使用FPN架构实现多尺度检测。</p><p><strong>1. YOLOv3对网络结构做了哪些改进？</strong></p><p>YOLOv3在之前Darknet-19的基础上引入了残差块，并进一步加深了网络，改进后的网络有53个卷积层，取名为Darknet-53，网络结构如下图所示（以256*256的输入为例）。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv3-01.png" alt=""></p><p>为了比较Darknet-53与其它网络结构的性能，作者在TitanX上，采用相同的实验设置，将256x256的图片分别输入以Darknet-19，ResNet-101，ResNet-152和Darknet-53为基础网络的分类模型中，实验得到的结果如下图所示。可以看到Darknet-53比ResNet-101的性能更好，而且速度是其1.5倍，Darknet-53与ResNet-152性能相似但速度几乎是其2倍。注意到，Darknet-53相比于其它网络结构实现了每秒最高的浮点计算量，说明其网络结构能更好的利用GPU。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv3-02.png" alt=""></p><p><strong>2.YOLOv3中怎样实现多尺度检测？</strong></p><p>YOLOv3借鉴了FPN的思想，从不同尺度提取特征。相比YOLOv2，YOLOv3提取最后3层特征图，不仅在每个特征图上分别独立做预测，同时通过将小特征图上采样到与大的特征图相同大小，然后与大的特征图拼接做进一步预测。用维度聚类的思想聚类出9种尺度的anchor box，将9种尺度的anchor box均匀的分配给3种尺度的特征图.如下图是在网络结构图的基础上加上多尺度特征提取部分的示意图（以在COCO数据集(80类)上256x256的输入为例）：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/YOLOv3-03.png" alt=""></p><p>从YOLOv1到YOLOv2再到YOLO9000、YOLOv3, YOLO经历三代变革，在保持速度优势的同时，不断改进网络结构，同时汲取其它优秀的目标检测算法的各种trick，先后引入anchor box机制、引入FPN实现多尺度检测等。</p><h3 id="8-3-8-RetinaNet"><a href="#8-3-8-RetinaNet" class="headerlink" title="8.3.8 RetinaNet"></a>8.3.8 RetinaNet</h3><p><strong>标题：《Focal Loss for Dense Object Detection》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：ICCV 2017（Best Student Paper Award）</strong></p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1708.02002" target="_blank" rel="noopener">https://arxiv.org/abs/1708.02002</a></li><li>github(Official)：<a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">https://github.com/facebookresearch/Detectron</a></li></ul><p><strong>研究背景</strong></p><ul><li>Two-Stage检测器（如Faster R-CNN、FPN）效果好，但速度相对慢</li><li>One-Stage检测器（如YOLO、SSD）速度快，但效果一般</li></ul><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-01.png" alt=""></p><p>作者对one-stage检测器准确率不高的问题进行探究，发现主要问题在于正负类别不均衡（简单-难分类别不均衡）。</p><blockquote><p>We discover that the extreme foreground-background class imbalance encountered during training of dense detectors is the central cause.</p></blockquote><p>作者建议通过重新设计标准的交叉熵损失（cross entropy loss）来解决这种类别不平衡（class inbalance）问题，即提出Focal Loss。</p><blockquote><p>We propose to address this class imbalance by reshaping the standard cross entropy loss such that it down-weights the loss assigned to well-classified examples. Our novel Focal Loss focuses training on a sparse set of hard examples and prevents the vast number of easy negatives from overwhelming the detector during training.</p></blockquote><p>结合Focal Loss的one-stage检测器称为RetinaNet，该检测器在COCO上mAP可以和特征金字塔网络（feature pyramid network，FPN）或者Mask R-CNN接近，</p><p><strong>问：什么是类别不均衡（class imbalance）？</strong></p><p>答：负样本的数量极大于正样本的数量，比如包含物体的区域（正样本）很少，而不包含物体的区域（负样本）很多。比如检测算法在早期会生成一大波的bbox。而一幅常规的图片中，顶多就那么几个object。这意味着，绝大多数的bbox属于background。</p><p><strong>问：样本的类别不均衡会带来什么问题？</strong></p><p>答：由于大多数都是简单易分的负样本（属于背景的样本），使得训练过程不能充分学习到属于那些有类别样本的信息；其次简单易分的负样本太多，可能掩盖了其他有类别样本的作用（这些简单易分的负样本仍产生一定幅度的loss，见下图蓝色曲线，数量多会对loss起主要贡献作用，因此就主导了梯度的更新方向，掩盖了重要的信息）</p><blockquote><p>This imbalance causes two problems: (1) training is inefficient as most locations are easy negatives that contribute no useful learning signal; (2) en masse, the easy negatives can overwhelm training and lead to degenerate models.</p></blockquote><p>简单来说，因为bbox数量爆炸。 正是因为bbox中属于background的bbox太多了，所以如果分类器无脑地把所有bbox统一归类为background，accuracy也可以刷得很高。于是乎，分类器的训练就失败了。分类器训练失败，检测精度自然就低了。</p><p><strong>问：为什么在two-stage检测器中，没有出现类别不均衡（class imbalamce）问题呢？</strong></p><p>答：因为通过RPN阶段可以减少候选目标区域，而在分类阶段，可以固定前景与背景比值（foreground-to-background ratio）为1:3，或者使用OHEM（online hard example mining）使得前景和背景的数量达到均衡。</p><p><strong>RetinaNet 创新点</strong></p><p><strong>概述：</strong></p><ul><li>New loss：提出Focal Loss函数解决class imbalance</li></ul><p>$$<br>FL(p_t) = -(1-p_t)^\gamma \log(p_t)FL(pt)=−(1−pt)γlog(pt)<br>$$</p><ul><li>New detector：RetinaNet = ResNet + FPN + Two sub-networks + Focal Loss</li></ul><p>Focal Loss更加聚焦在困难样本（hard examples）上的训练。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-02.png" alt=""></p><p>将Focal Loss与ResNet-101-FPN backbone结合提出RetinaNet（one-stage检测器），RetinaNet在COCO test-dev上达到39.1mAP，速度为5FPS。</p><p>RetinaNet检测器与当时最佳的其它检测器进行比较，无论是速度上还是准确率上都是最佳：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-03.png" alt=""></p><p><strong>详解：</strong></p><p>作者提出一种新的损失函数，思路是希望那些hard examples对损失的贡献变大，使网络更倾向于从这些样本上学习。</p><p>作者以二分类为例进行说明：</p><p><strong>交叉熵函数CE</strong></p><p>首先是我们常使用的交叉熵损失函数：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-04.png" alt=""></p><p>上式中，y=+1或者y=-1。p∈[0,1]是y=+1的估计概率。作者定义pt为：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-05.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-06.png" alt=""></p><p>注：对交叉熵函数不了解的，可以参考<a href="https://blog.csdn.net/chaipp0607/article/details/73392175" target="_blank" rel="noopener">理解交叉熵作为损失函数在神经网络中的作用</a></p><p><strong>均衡交叉熵函数</strong></p><p>要对类别不均衡问题对loss的贡献进行一个控制，即加上一个控制权重即可，最初作者的想法即如下这样，对于属于少数类别的样本，增大α即可</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-07.png" alt=""></p><p>但这样有一个问题，它仅仅解决了正负样本之间的平衡问题，并没有区分易分/难分样本，按作者的话说：</p><blockquote><p>While α balances the importance of positive/negative examples, it does not differentiate between easy/hard examples. Instead, we propose to reshape the loss function to down-weight easy examples and thus focus training on hard negatives.</p></blockquote><p>问：为什么公式(3)只解决正负样本不均衡问题？</p><p>答：增加了一个系数αt，跟pt的定义类似，当label=1的时候，αt=a；当label=-1的时候，αt=1-a，a的范围也是0到1。因此可以通过设定a的值（一般而言假如1这个类的样本数比-1这个类的样本数多很多，那么a会取0到0.5来增加-1这个类的样本的权重）来控制正负样本对总的loss的共享权重。</p><p><strong>Focal Loss</strong></p><p>作者一开始给交叉熵损失函数添加modulating factor：<br>$$<br>(1-pt)^γ(1−pt)γ<br>$$<br><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-08.png" alt=""></p><p>显然，样本越易分，pt就越大（pt—&gt;1），modulating factor趋近于0，则贡献的loss就越小，同样地，样本越难分，其pt就越小，modulating factor接近于1，则贡献的loss不受影响。</p><p>问：为什么pt越大，FL值越小？</p><p>答：根据公式（4）可知，FL与log(pt)中的pt成反比，与1-pt成正比，因此FL与pt的关系成反比。这是交叉熵函数的基本性质。当pt很大时（接近于1），FL值很小；而当pt很小时（接近于0），FL值会很大。</p><p>注：这里有个超参数—focusing parameter γ。</p><p>γ 放大了modulating factor的作用。</p><p>举原文中的一个例子，当pt=0.9时，带有modulating factor的focal loss是CE loss的100分之一，即进一步减小了正确分类的损失。</p><blockquote><p>For instance, with γ = 2, an example classified with pt = 0.9 would have 100× lower loss compared with CE and with pt ≈ 0.968 it would have 1000× lower loss. This in turn increases the importance of correcting misclassified examples (whose loss is scaled down by at most 4× for pt ≤ .5 and γ = 2).</p></blockquote><p>在实际中，作者采用如下公式，即综合了公式(3)和公式(4)的形式，这样机能调整正负样本的权重，又能控制难易分类样本的权重：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-09.png" alt=""></p><p>这里的两个参数 α和γ 来控制，在实验中a的选择范围也很广，一般而言当γ增加的时候，a需要减小一点，本文作者采用α=0.25，γ=2效果最好。</p><p><strong>RetinaNet Detector</strong></p><p>RetinaNet是由backbone网络和两个特殊任务的子网络（subnet）组成（属于one-stage检测器）。Backbone用来计算feature map；第一个子网络用来object classification，第二个子网络用来bounding box regression。</p><p><strong>Feature Pyramid Network Backbone</strong></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-10.png" alt=""></p><p><strong>Anchor</strong></p><p><strong>Classification Subnet</strong></p><p><strong>Box Regression Subnet</strong></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-11.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-12.png" alt=""></p><p>RetinaNet结构注意内容：</p><ol><li>训练时FPN每一级的所有example都被用于计算Focal Loss，loss值加到一起用来训练；</li><li>测试时FPN每一级只选取score最大的1000个example来做nms；</li><li>整个结构不同层的head部分(上图中的c和d部分)共享参数，但分类和回归分支间的参数不共享；</li><li>分类分支的最后一级卷积的bias初始化成前面提到的-log((1-π)/π);</li></ol><p>作者：张磊_0503 链接：<a href="https://www.jianshu.com/p/204d9ad9507f" target="_blank" rel="noopener">https://www.jianshu.com/p/204d9ad9507f</a> 來源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p><p><strong>实验结果</strong></p><p>Table1是关于RetinaNet和Focal Loss的一些实验结果。（a）是在交叉熵的基础上加上参数a，a=0.5就表示传统的交叉熵，可以看出当a=0.75的时候效果最好，AP值提升了0.9。（b）是对比不同的参数γ和a的实验结果，可以看出随着γ的增加，AP提升比较明显。（d）通过和OHEM的对比可以看出最好的Focal Loss比最好的OHEM提高了3.2AP。这里OHEM1:3表示在通过OHEM得到的minibatch上强制positive和negative样本的比例为1:3，通过对比可以看出这种强制的操作并没有提升AP。（e）加入了运算时间的对比，可以和前面的Figure2结合起来看，速度方面也有优势！注意这里RetinaNet-101-800的AP是37.8，当把训练时间扩大1.5倍同时采用scale jitter，AP可以提高到39.1，这就是全文和table2中的最高的39.1AP的由来。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-13.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/RetinaNet-14.png" alt=""></p><h3 id="8-3-9-RFBNet"><a href="#8-3-9-RFBNet" class="headerlink" title="8.3.9 RFBNet"></a>8.3.9 RFBNet</h3><p><strong>标题：《Receptive Field Block Net for Accurate and Fast Object Detection》</strong></p><p><strong>时间：2017</strong></p><p><strong>出版源：ECCV 2018</strong></p><p><strong>主要链接：</strong></p><p>arXiv：<a href="https://arxiv.org/pdf/1711.07767.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1711.07767.pdf</a></p><p>github(Official)：<a href="https://github.com/ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com/ruinmessi/RFBNet</a></p><ul><li style="list-style: none"><input type="checkbox"> TODO</li></ul><h3 id="8-3-10-M2Det"><a href="#8-3-10-M2Det" class="headerlink" title="8.3.10 M2Det"></a>8.3.10 M2Det</h3><p><strong>标题：《M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network》</strong></p><p><strong>时间：</strong>2018</p><p><strong>出版源：</strong>AAAI 2019</p><p><strong>主要链接：</strong></p><ul><li>arXiv：<a href="https://arxiv.org/abs/1811.04533" target="_blank" rel="noopener">https://arxiv.org/abs/1811.04533</a></li><li>github(Official)：<a href="https://github.com/qijiezhao/M2Det" target="_blank" rel="noopener">https://github.com/qijiezhao/M2Det</a></li></ul><h2 id="8-4-人脸检测"><a href="#8-4-人脸检测" class="headerlink" title="8.4 人脸检测"></a>8.4 人脸检测</h2><p>在目标检测领域可以划分为了人脸检测与通用目标检测，往往人脸这方面会有专门的算法（包括人脸检测、人脸识别、人脸其他属性的识别等等），并且和通用目标检测（识别）会有一定的差别，着主要来源于人脸的特殊性（有时候目标比较小、人脸之间特征不明显、遮挡问题等），下面将从人脸检测和通用目标检测两个方面来讲解目标检测。</p><h3 id="8-4-1-目前主要有人脸检测方法分类？"><a href="#8-4-1-目前主要有人脸检测方法分类？" class="headerlink" title="8.4.1 目前主要有人脸检测方法分类？"></a>8.4.1 目前主要有人脸检测方法分类？</h3><p>目前人脸检测方法主要包含两个区域：传统人脸检测算法和基于深度学习的人脸检测算法。传统人脸检测算法主要可以分为4类：</p><p>（1）基于知识的人脸检测方法；</p><p>（2）基于模型的人脸检测方法；</p><p>（3）基于特征的人脸检测方法；</p><p>（4）基于外观的人脸检测方法。</p><p>由于本书着重关注深度学习，下面会着重介绍基于深度学习的人脸检测方法。</p><p>2006年Hinton首次提出深度学习（Deep Learning）的概念，它是通过组合低层的特征形成更高层的抽象特征。随后研究者将深度学习应用在人脸检测领域，主要集中在基于卷积神经网络（CNN）的人脸检测研究，如基于级联卷积神经网络的人脸检测（cascade cnn）、 基于多任务卷积神经网络的人脸检测（MTCNN）、Facebox等，很大程度上提高了人脸检测的鲁棒性。当然通用目标检测算法像Faster-rcnn、yolo、ssd等也有用在人脸检测领域，也可以实现比较不错的结果，但是和专门人脸检测算法比还是有差别。下面部分主要介绍基于深度学习的的人脸检测算法，基于深度学习的通用目标检测算法将在第二大节介绍。</p><h3 id="8-4-2-如何检测图片中不同大小的人脸？"><a href="#8-4-2-如何检测图片中不同大小的人脸？" class="headerlink" title="8.4.2 如何检测图片中不同大小的人脸？"></a>8.4.2 如何检测图片中不同大小的人脸？</h3><p>传统人脸检测算法中针对不同大小人脸主要有两个策略：</p><p>（1）缩放图片的大小（图像金字塔如图8.4.1所示）；</p><p>（2）缩放滑动窗的大小（如图8.4.2所示）。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.1.png" alt=""></p><p>图 8.1 图像金字塔           </p><p>​      <img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.2.png" alt=""></p><p> 图 8.2 缩放滑动窗口</p><p>​    基于深度学习的人脸检测算法中针对不同大小人脸主要也有两个策略，但和传统人脸检测算法有点区别，主要包括:</p><p>（1）缩放图片大小。（不过也可以通过缩放滑动窗的方式，基于深度学习的滑动窗人脸检测方式效率会很慢存在多次重复卷积，所以要采用全卷积神经网络（FCN），用FCN将不能用滑动窗的方法。）</p><p>（2）通过anchor box的方法（如图8.3所示，不要和图8.2混淆，这里是通过特征图预测原图的anchorbox区域，具体在facebox中有描述）。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.3.png" alt=""></p><p>图 8.3 anchor box</p><h3 id="8-4-3-如何设定算法检测最小人脸尺寸"><a href="#8-4-3-如何设定算法检测最小人脸尺寸" class="headerlink" title="8.4.3 如何设定算法检测最小人脸尺寸?"></a>8.4.3 如何设定算法检测最小人脸尺寸?</h3><p>主要是看滑动窗的最小窗口和anchorbox的最小窗口。</p><p>（1）滑动窗的方法 </p><p>假设通过12×12的滑动窗，不对原图做缩放的话，就可以检测原图中12×12的最小人脸。但是往往通常给定最小人脸a=40、或者a=80，以这么大的输入训练CNN进行人脸检测不太现实，速度会很慢，并且下一次需求最小人脸a=30*30又要去重新训练，通常还会是12×12的输入，为满足最小人脸框a，只需要在检测的时候对原图进行缩放即可：w=w×12/a。</p><p>（2）anchorbox的方法</p><p>原理类似，这里主要看anchorbox的最小box，通过可以通过缩放输入图片实现最小人脸的设定。</p><h3 id="8-4-4-如何定位人脸的位置"><a href="#8-4-4-如何定位人脸的位置" class="headerlink" title="8.4.4 如何定位人脸的位置"></a>8.4.4 如何定位人脸的位置</h3><p>（1）滑动窗的方式：</p><p>滑动窗的方式是基于分类器识别为人脸的框的位置确定最终的人脸，</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.4.png" alt=""></p><p>图 8.4 滑动窗</p><p>（2）FCN的方式：</p><p>​    FCN的方式通过特征图映射到原图的方式确定最终识别为人脸的位置，特征图映射到原图人脸框是要看特征图相比较于原图有多少次缩放（缩放主要查看卷积的步长和池化层），假设特征图上(2,3)的点，可粗略计算缩放比例为8倍，原图中的点应该是(16,24)；如果训练的FCN为12*12的输入，对于原图框位置应该是(16,24,12,12),当然这只是估计位置，具体的再构建网络时要加入回归框的预测，主要是相对于原图框的一个平移与缩放。</p><p>（3）通过anchor box的方式：</p><p>​    通过特征图映射到图的窗口，通过特征图映射到原图到多个框的方式确定最终识别为人脸的位置。</p><h3 id="8-1-5-如何通过一个人脸的多个框确定最终人脸框位置？"><a href="#8-1-5-如何通过一个人脸的多个框确定最终人脸框位置？" class="headerlink" title="8.1.5 如何通过一个人脸的多个框确定最终人脸框位置？"></a>8.1.5 如何通过一个人脸的多个框确定最终人脸框位置？</h3><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.5.png" alt=""></p><p>图 8.5 通过NMS得到最终的人脸位置</p><p>NMS改进版本有很多，最原始的NMS就是判断两个框的交集，如果交集大于设定的阈值，将删除其中一个框，那么两个框应该怎么选择删除哪一个呢？ 因为模型输出有概率值，一般会优选选择概率小的框删除。</p><h3 id="8-1-6-基于级联卷积神经网络的人脸检测（Cascade-CNN）"><a href="#8-1-6-基于级联卷积神经网络的人脸检测（Cascade-CNN）" class="headerlink" title="8.1.6 基于级联卷积神经网络的人脸检测（Cascade CNN）"></a>8.1.6 基于级联卷积神经网络的人脸检测（Cascade CNN）</h3><ol><li><p>cascade cnn的框架结构是什么？</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.6.png" alt=""></p></li></ol><p>级联结构中有6个CNN，3个CNN用于人脸非人脸二分类，另外3个CNN用于人脸区域的边框校正。给定一幅图像，12-net密集扫描整幅图片，拒绝90%以上的窗口。剩余的窗口输入到12-calibration-net中调整大小和位置，以接近真实目标。接着输入到NMS中，消除高度重叠窗口。下面网络与上面类似。</p><ol start="2"><li>cascade cnn人脸校验模块原理是什么？ </li></ol><p>该网络用于窗口校正，使用三个偏移变量：Xn:水平平移量，Yn:垂直平移量，Sn:宽高比缩放。候选框口(x,y,w,h)中，(x,y)表示左上点坐标，(w,h)表示宽和高。</p><p>我们要将窗口的控制坐标调整为：<br>$$<br>（x-{x_nw}/{s_n},y-{y_nh}/{s_n},{w}/{s_n},{h}/{s_n}）<br>$$<br>这项工作中，我们有$N=5×3×3=45$种模式。偏移向量三个参数包括以下值：<br>$$<br>Sn：(0.83,0.91,1.0,1.10,1.21)<br>$$</p><p>$$<br>Xn：(-0.17,0,0.17)<br>$$</p><p>$$<br>Yn：(-0.17,0,0.17)<br>$$</p><p>同时对偏移向量三个参数进行校正。</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.8.png" alt=""></p><p>3、训练样本应该如何准备？</p><p>人脸样本：</p><p>非人脸样本：</p><ol start="4"><li>级联的好处</li></ol><p>级联的工作原理和好处：</p><ul><li>最初阶段的网络可以比较简单，判别阈值可以设得宽松一点，这样就可以在保持较高召回率的同时排除掉大量的非人脸窗口；</li><li>最后阶段网络为了保证足够的性能，因此一般设计的比较复杂，但由于只需要处理前面剩下的窗口，因此可以保证足够的效率；</li><li>级联的思想可以帮助我们去组合利用性能较差的分类器，同时又可以获得一定的效率保证。</li></ul><h3 id="8-4-7-基于多任务卷积神经网络的人脸检测（MTCNN）"><a href="#8-4-7-基于多任务卷积神经网络的人脸检测（MTCNN）" class="headerlink" title="8.4.7 基于多任务卷积神经网络的人脸检测（MTCNN）"></a>8.4.7 基于多任务卷积神经网络的人脸检测（MTCNN）</h3><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.9.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.10.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.11.png" alt=""></p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.12.png" alt=""></p><p>1.MTCNN模型有三个子网络。分别是P-Net,R-Net,O-Net.我想问一下，1.模型中的三个input size是指的是同一张图resize到不同尺度下喂给不同模型，还是同一张图，依次经过三个模型，然后是不同的输入尺寸？（这部分能给我讲一下吗）2.每个模型它都有对应三个结果（face classification;bounding box;facial landmark）这三个在网络上是如何对应的呢？</p><p>为了检测不同大小的人脸，开始需要构建图像金字塔，先经过pNet模型，输出人脸类别和边界框（边界框的预测为了对特征图映射到原图的框平移和缩放得到更准确的框），将识别为人脸的框映射到原图框位置可以获取patch，之后每一个patch通过resize的方式输入到rNet，识别为人脸的框并且预测更准确的人脸框，最后rNet识别为人脸的的每一个patch通过resize的方式输入到oNet，跟rNet类似，关键点是为了在训练集有限情况下使模型更鲁棒。</p><p>还要注意一点构建图像金字塔的的缩放比例要保留，为了将边界框映射到最开始原图上的</p><p>还要注意一点：如何从featureMap映射回原图</p><h3 id="8-4-8-Facebox"><a href="#8-4-8-Facebox" class="headerlink" title="8.4.8 Facebox"></a>8.4.8 Facebox</h3><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.13.png" alt=""></p><p><strong>（1）Rapidly Digested Convolutional Layers(RDCL)</strong></p><p>在网络前期，使用RDCL快速的缩小feature map的大小。 主要设计原则如下：</p><ul><li>Conv1, Pool1, Conv2 和 Pool2 的stride分别是4, 2, 2 和 2。这样整个RDCL的stride就是32，可以很快把feature map的尺寸变小。</li><li>卷积(或pooling)核太大速度就慢，太小覆盖信息又不足。文章权衡之后，将Conv1, Pool1, Conv2 和 Pool2 的核大小分别设为7x7,3x3,5x5,3x3</li><li>使用CReLU来保证输出维度不变的情况下，减少卷积核数量。</li></ul><p><strong>（2）Multiple Scale Convolutional Layers(MSCL)</strong></p><p>在网络后期，使用MSCL更好地检测不同尺度的人脸。 主要设计原则有：</p><ul><li>类似于SSD，在网络的不同层进行检测；</li><li>采用Inception模块。由于Inception包含多个不同的卷积分支，因此可以进一步使得感受野多样化。</li></ul><p><strong>（3）Anchor densification strategy</strong></p><p>为了anchor密度均衡，可以对密度不足的anchor以中心进行偏移加倍，如下图所示：</p><p><img src="/2016/12/20/第八章_目标检测/img/ch8/8.4.14.png" alt=""></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/amusi/awesome-object-detection" target="_blank" rel="noopener">https://github.com/amusi/awesome-object-detection</a></p><p><a href="https://github.com/hoya012/deep_learning_object_detection" target="_blank" rel="noopener">https://github.com/hoya012/deep_learning_object_detection</a></p><p><a href="https://handong1587.github.io/deep_learning/2015/10/09/object-detection.html" target="_blank" rel="noopener">https://handong1587.github.io/deep_learning/2015/10/09/object-detection.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>最大似然估计（MLE）、最大后验概率估计（MAP），以及贝叶斯公式</title>
    <link href="https://leesen998.github.io/2016/12/20/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%EF%BC%88MLE%EF%BC%89%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E4%BC%B0%E8%AE%A1%EF%BC%88MAP%EF%BC%89%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F/"/>
    <id>https://leesen998.github.io/2016/12/20/最大似然估计（MLE）、最大后验概率估计（MAP），以及贝叶斯公式/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T09:15:59.289Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1544254144/samples/java%20files/photo-1542312455-e31bb150371c.jpg" alt="" style="width:100%"></p><p>最大似然估计（MLE）、最大后验概率估计（MAP），以及贝叶斯公式</p><a id="more"></a><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="Likelihood-amp-Maximum-likelihood"><a href="#Likelihood-amp-Maximum-likelihood" class="headerlink" title="Likelihood &amp; Maximum likelihood"></a>Likelihood &amp; Maximum likelihood</h3><p>似然与概率<br>在统计学中，似然函数（likelihood function，通常简写为likelihood，似然）是一个非常重要的内容，在非正式场合似然和概率（Probability）几乎是一对同义词，但是在统计学中似然和概率却是两个不同的概念。概率是在特定环境下某件事情发生的可能性，也就是结果没有产生之前依据环境所对应的参数来预测某件事情发生的可能性，比如抛硬币，抛之前我们不知道最后是哪一面朝上，但是根据硬币的性质我们可以推测任何一面朝上的可能性均为50%，这个概率只有在抛硬币之前才是有意义的，抛完硬币后的结果便是确定的；而似然刚好相反，是在确定的结果下去推测产生这个结果的可能环境（参数），还是抛硬币的例子，假设我们随机抛掷一枚硬币1,000次，结果500次人头朝上，500次数字朝上（实际情况一般不会这么理想，这里只是举个例子），我们很容易判断这是一枚标准的硬币，两面朝上的概率均为50%，这个过程就是我们运用出现的结果来判断这个事情本身的性质（参数），也就是似然。</p><p>结果和参数相互对应的时候，似然和概率在数值上是相等的，如果用 θ 表示环境对应的参数，x 表示结果，那么概率可以表示为：P(x|θ)</p><p>p(x|θ) 是条件概率的表示方法，θ 是前置条件，理解为在 θ 的前提下，事件 x 发生的概率，相对应的似然可以表示为：L(θ|x)</p><p>可以理解为已知结果为 x ，参数为 θ (似然函数里 θ 是变量，这里说的参数和变量是相对与概率而言的)对应的概率，即：L(θ|x)=P(x|θ)<br>需要说明的是两者在数值上相等，但是意义并不相同，L 是关于 θ 的函数，而 P 则是关于 x 的函数，两者从不同的角度描述一件事情。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>最大似然估计（Maximum likelihood estimation, 简称MLE）和最大后验概率估计（Maximum a posteriori estimation, 简称MAP）是很常用的两种参数估计方法，如果不理解这两种方法的思路，很容易弄混它们。下文将详细说明MLE和MAP的思路与区别。</p><p>但别急，我们先从概率和统计的区别讲起。</p><h3 id="概率和统计是一个东西吗？"><a href="#概率和统计是一个东西吗？" class="headerlink" title="概率和统计是一个东西吗？"></a>概率和统计是一个东西吗？</h3><p>概率（probabilty）和统计（statistics）看似两个相近的概念，其实研究的问题刚好相反。</p><p>概率研究的问题是，已知一个模型和参数，怎么去预测这个模型产生的结果的特性（例如均值，方差，协方差等等）。 举个例子，我想研究怎么养猪（模型是猪），我选好了想养的品种、喂养方式、猪棚的设计等等（选择参数），我想知道我养出来的猪大概能有多肥，肉质怎么样（预测结果）。</p><p>统计研究的问题则相反。统计是，有一堆数据，要利用这堆数据去预测模型和参数。仍以猪为例。现在我买到了一堆肉，通过观察和判断，我确定这是猪肉（这就确定了模型。在实际研究中，也是通过观察数据推测模型是／像高斯分布的、指数分布的、拉普拉斯分布的等等），然后，可以进一步研究，判定这猪的品种、这是圈养猪还是跑山猪还是网易猪，等等（推测模型参数）。</p><p>一句话总结：概率是已知模型和参数，推数据。统计是已知数据，推模型和参数。</p><p>显然，本文解释的MLE和MAP都是统计领域的问题。它们都是用来推测参数的方法。为什么会存在着两种不同方法呢？ 这需要理解贝叶斯思想。我们来看看贝叶斯公式。</p><h3 id="贝叶斯公式到底在说什么？"><a href="#贝叶斯公式到底在说什么？" class="headerlink" title="贝叶斯公式到底在说什么？"></a>贝叶斯公式到底在说什么？</h3><p>学习机器学习和模式识别的人一定都听过贝叶斯公式(Bayes’ Theorem)：</p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1551412124/samples/java%20files/kjghk.jpg" alt=""></p><p>【式1】贝叶斯公式看起来很简单，无非是倒了倒条件概率和联合概率的公式。</p><p>把B展开，可以写成：</p><p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1551412124/samples/java%20files/hjk.jpg" alt=""><br>【式2】（∼A∼A表示”非A”）</p><p>这个式子就很有意思了。</p><p>想想这个情况。一辆汽车（或者电瓶车）的警报响了，你通常是什么反应？有小偷？撞车了？ 不。。 你通常什么反应都没有。因为汽车警报响一响实在是太正常了！每天都要发生好多次。本来，汽车警报设置的功能是，出现了异常情况，需要人关注。然而，由于虚警实在是太多，人们渐渐不相信警报的功能了。</p><p>贝叶斯公式就是在描述，你有多大把握能相信一件证据？（how much you can trust the evidence）</p><p>我们假设响警报的目的就是想说汽车被砸了。把A计作“汽车被砸了”，B计作“警报响了”，带进贝叶斯公式里看。我们想求等式左边发生A|B的概率，这是在说警报响了，汽车也确实被砸了。汽车被砸引起（trigger）警报响，即B|A。但是，也有可能是汽车被小孩子皮球踢了一下、被行人碰了一下等其他原因（统统计作∼A），其他原因引起汽车警报响了，即B|∼A。那么，现在突然听见警报响了，这时汽车已经被砸了的概率是多少呢（这即是说，警报响这个证据有了，多大把握能相信它确实是在报警说汽车被砸了）？想一想，应当这样来计算。用警报响起、汽车也被砸了这事件的数量，除以响警报事件的数量（这即【式1】）。进一步展开，即警报响起、汽车也被砸了的事件的数量，除以警报响起、汽车被砸了的事件数量加上警报响起、汽车没被砸的事件数量（这即【式2】）。</p><p>可能有点绕，请稍稍想一想。</p><p>再思考【式2】。想让P(A|B)=1，即警报响了，汽车一定被砸了，该怎么做呢？让P(B|∼A)P(∼A)=0即可。很容易想清楚，假若让P(∼A)=0，即杜绝了汽车被球踢、被行人碰到等等其他所有情况，那自然，警报响了，只剩下一种可能——汽车被砸了。这即是提高了响警报这个证据的说服力。</p><p>从这个角度总结贝叶斯公式：做判断的时候，要考虑所有的因素。 老板骂你，不一定是你把什么工作搞砸了，可能只是他今天出门前和太太吵了一架。</p><p>再思考【式2】。观察【式2】右边的分子，P(B|A)为汽车被砸后响警报的概率。姑且仍为这是1吧。但是，若P(A)很小，即汽车被砸的概率本身就很小，则P(B|A)P(A)仍然很小，即【式2】右边分子仍然很小，P(A|B) 还是大不起来。 这里，​P(A)即是常说的先验概率，如果A的先验概率很小，就算P(B|A)较大，可能A的后验概率P(A|B)还是不会大（假设P(B|∼A)P(∼A)不变的情况下）。</p><p>从这个角度思考贝叶斯公式：一个本来就难以发生的事情，就算出现某个证据和他强烈相关，也要谨慎。证据很可能来自别的虽然不是很相关，但发生概率较高的事情。 发现刚才写的代码编译报错，可是我今天状态特别好，这语言我也很熟悉，犯错的概率很低。因此觉得是编译器出错了。 ————别，还是先再检查下自己的代码吧。</p><p>好了好了，说了这么多，下面言归正传，说一说MLE。</p><p>——————不行，还得先说似然函数（likelihood function）</p><h3 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h3><p>似然（likelihood）这个词其实和概率（probability）是差不多的意思，Colins字典这么解释：The likelihood of something happening is how likely it is to happen. 你把likelihood换成probability，这解释也读得通。但是在统计里面，似然函数和概率函数却是两个不同的概念（其实也很相近就是了）。</p><p>对于这个函数：</p><p>**P(x|θ)<br>输入有两个：x表示某一个具体的数据；θ表示模型的参数。</p><p>如果θ是已知确定的，xx是变量，这个函数叫做概率函数(probability function)，它描述对于不同的样本点x，其出现概率是多少。</p><p>如果x是已知确定的，θ是变量，这个函数叫做似然函数(likelihood function), 它描述对于不同的模型参数，出现x这个样本点的概率是多少。**</p><p>这有点像“一菜两吃”的意思。其实这样的形式我们以前也不是没遇到过。例如，f(x,y)=x^y, 即x的y次方。如果xx是已知确定的(例如x=2)，这就是f(y)=2^y, 这是指数函数。 如果yy是已知确定的(例如y=2)，这就是f(x)=x^2，这是二次函数。同一个数学形式，从不同的变量角度观察，可以有不同的名字。</p><p>这么说应该清楚了吧？ 如果还没讲清楚，别急，下文会有具体例子。</p><p>现在真要先讲讲MLE了。。</p><h3 id="最大似然估计（MLE）"><a href="#最大似然估计（MLE）" class="headerlink" title="最大似然估计（MLE）"></a>最大似然估计（MLE）</h3><p>假设有一个造币厂生产某种硬币，现在我们拿到了一枚这种硬币，想试试这硬币是不是均匀的。即想知道抛这枚硬币，正反面出现的概率（记为θ）各是多少？</p><p>这是一个统计问题，回想一下，解决统计问题需要什么？ 数据！</p><p>于是我们拿这枚硬币抛了10次，得到的数据（x0）是：反正正正正反正正正反。我们想求的正面概率θθ是模型参数，而抛硬币模型我们可以假设是 二项分布。</p><p>那么，出现实验结果x0（即反正正正正反正正正反）的似然函数是多少呢？</p><p>f(x0,θ)=(1−θ)×θ×θ×θ×θ×(1−θ)×θ×θ×θ×(1−θ)=θ^7(1−θ)^3=f(θ)<br>注意，这是个只关于θ的函数。而最大似然估计，顾名思义，就是要最大化这个函数。我们可以画出f(θ)的图像：</p><p><img src="https://img-blog.csdn.net/20170531003926799?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTUwODY0MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>可以看出，在θ=0.7时，似然函数取得最大值。</p><p>这样，我们已经完成了对θ的最大似然估计。即，抛10次硬币，发现7次硬币正面向上，最大似然估计认为正面向上的概率是0.7。（ummm..这非常直观合理，对吧？）</p><p>且慢，一些人可能会说，硬币一般都是均匀的啊！ 就算你做实验发现结果是“反正正正正反正正正反”，我也不信θ=0.7。</p><p>这里就包含了贝叶斯学派的思想了——要考虑先验概率。 为此，引入了最大后验概率估计。</p><h3 id="最大后验概率估计"><a href="#最大后验概率估计" class="headerlink" title="最大后验概率估计"></a>最大后验概率估计</h3><p>最大似然估计是求参数θθ, 使似然函数P(x0|θ)最大。最大后验概率估计则是想求θθ使P(x0|θ)P(θ)最大。求得的θ不单单让似然函数大，θ自己出现的先验概率也得大。 （这有点像正则化里加惩罚项的思想，不过正则化里是利用加法，而MAP里是利用乘法）</p><p>MAP其实是在最大化P(θ|x0)=P(x0|θ)P(θ)P(x0)，不过因为x0是确定的（即投出的“反正正正正反正正正反”），P(x0)是一个已知值，所以去掉了分母P(x0)（假设“投10次硬币”是一次实验，实验做了1000次，“反正正正正反正正正反”出现了n次，则P(x0)=n/1000。总之，这是一个可以由数据集得到的值）。最大化P(θ|x0)的意义也很明确，x0已经出现了，要求θ取什么值使P(θ|x0)最大。顺带一提，P(θ|x0)即后验概率，这就是“最大后验概率估计”名字的由来。</p><p>对于投硬币的例子来看，我们认为（”先验地知道“）θ取0.5的概率很大，取其他值的概率小一些。我们用一个高斯分布来具体描述我们掌握的这个先验知识，例如假设P(θ)为均值0.5，方差0.1的高斯函数，如下图：<br><img src="https://img-blog.csdn.net/20170531004009269?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTUwODY0MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>则P(x0|θ)P(θ)的函数图像为：<br><img src="https://img-blog.csdn.net/20170531003829147?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTUwODY0MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>注意，此时函数取最大值时，θ取值已向左偏移，不再是0.7。实际上，在θ=0.558时函数取得了最大值。即，用最大后验概率估计，得到θ=0.558<br>最后，那要怎样才能说服一个贝叶斯派相信θ=0.7呢？你得多做点实验。。</p><p>如果做了1000次实验，其中700次都是正面向上，这时似然函数为:<br><img src="https://img-blog.csdn.net/20170530235524800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTUwODY0MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>如果仍然假设P(θ)为均值0.5，方差0.1的高斯函数，P(x0|θ)P(θ)的函数图像为：<br><img src="https://img-blog.csdn.net/20170531003953909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTUwODY0MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>在θ=0.696处，P(x0|θ)P(θ)取得最大值。</p><p>这样，就算一个考虑了先验概率的贝叶斯派，也不得不承认得把θ估计在0.7附近了。</p><p>PS. <strong>要是遇上了顽固的贝叶斯派，认为P(θ=0.5)=1 ，那就没得玩了。。 无论怎么做实验，使用MAP估计出来都是θ=0.5。这也说明，一个合理的先验概率假设是很重要的。（通常，先验概率能从数据中直接分析得到）</strong></p><p>最大似然估计和最大后验概率估计的区别<br>相信读完上文，MLE和MAP的区别应该是很清楚的了。MAP就是多个作为因子的先验概率P(θ)。或者，也可以反过来，认为MLE是把先验概率P(θ)认为等于1，即认为θ是均匀分布。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1544254144/samples/java%20files/photo-1542312455-e31bb150371c.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;最大似然估计（MLE）、最大后验概率估计（MAP），以及贝叶斯公式&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 超参数调整</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0_%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/"/>
    <id>https://leesen998.github.io/2016/12/20/第十四章_超参数调整/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:48:18.180Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><blockquote><p>Markdown Revision 1;<br>Editor: 乔成磊-同济大学，王超锋<br>Contact: <a href="mailto:qchl0318@163.com" target="_blank" rel="noopener">qchl0318@163.com</a>，<a href="mailto:syusuke0516@163.com" target="_blank" rel="noopener">syusuke0516@163.com</a><br>Updater: <a href="https://github.com/sjsdfg" target="_blank" rel="noopener">sjsdfg</a>，王超锋</p></blockquote><h2 id="14-1-写在前面"><a href="#14-1-写在前面" class="headerlink" title="14.1 写在前面"></a>14.1 写在前面</h2><p>　　关于训练深度学习模型最难的事情之一是你要处理的参数的数量。无论是从网络本身的层宽（宽度）、层数（深度）、连接方式，还是损失函数的超参数设计和调试，亦或者是学习率、批样本数量、优化器参数等等。这些大量的参数都会有网络模型最终的有效容限直接或者间接的影响。面对如此众多的参数，如果我们要一一对其优化调整，所需的无论是时间、资源都是不切实际。结果证实一些超参数比其它的更为重要，因此认识各个超参数的作用和其可能会造成的影响是深度学习训练中必不可少的一项重要技能。</p><p>​    目前，超参数调整一般分为手动调整和自动优化超参数两种。本章节不会过多阐述所有超参数的详细原理，如果需要了解这部分，您可以翻阅前面的基础章节或者查阅相关文献资料。当然，下面会讲到的一些超参数优化的建议是根据笔者们的实践以及部分文献资料得到认知建议，并不是非常严格且一定有效的，很多研究者可能会很不同意某些的观点或有着不同的直觉，这都是可保留讨论的，因为这很依赖于数据本身情况。</p><h2 id="14-2-超参数概述"><a href="#14-2-超参数概述" class="headerlink" title="14.2 超参数概述"></a>14.2 超参数概述</h2><h3 id="14-2-1-什么是超参数，参数和超参数的区别"><a href="#14-2-1-什么是超参数，参数和超参数的区别" class="headerlink" title="14.2.1 什么是超参数，参数和超参数的区别"></a>14.2.1 什么是超参数，参数和超参数的区别</h3><p>​    区分两者最大的一点就是是否通过数据来进行调整，模型参数通常是有数据来驱动调整，超参数则不需要数据来驱动，而是在训练前或者训练中人为的进行调整的参数。例如卷积核的具体核参数就是指模型参数，这是有数据驱动的。而学习率则是人为来进行调整的超参数。这里需要注意的是，通常情况下卷积核数量、卷积核尺寸这些也是超参数，注意与卷积核的核参数区分。</p><h3 id="14-2-2-神经网络中包含哪些超参数"><a href="#14-2-2-神经网络中包含哪些超参数" class="headerlink" title="14.2.2 神经网络中包含哪些超参数"></a>14.2.2 神经网络中包含哪些超参数</h3><p>　　 通常可以将超参数分为三类：网络参数、优化参数、正则化参数。</p><p>​    网络参数：可指网络层与层之间的交互方式（相加、相乘或者串接等）、卷积核数量和卷积核尺寸、网络层数（也称深度）和激活函数等。</p><p>​    优化参数：一般指学习率（learning rate）、批样本数量（batch size）、不同优化器的参数以及部分损失函数的可调参数。</p><p>​    正则化：权重衰减系数，丢弃法比率（dropout）</p><h3 id="14-2-3-模型优化寻找最优解和正则项之间的关系"><a href="#14-2-3-模型优化寻找最优解和正则项之间的关系" class="headerlink" title="14.2.3 模型优化寻找最优解和正则项之间的关系"></a>14.2.3 模型优化寻找最优解和正则项之间的关系</h3><p>​    网络模型优化调整的目的是为了寻找到全局最优解（或者相比更好的局部最优解），而正则项又希望模型尽量拟合到最优。两者通常情况下，存在一定的对立，但两者的目标是一致的，即最小化期望风险。模型优化希望最小化经验风险，而容易陷入过拟合，正则项用来约束模型复杂度。所以如何平衡两者之间的关系，得到最优或者较优的解就是超参数调整优化的目的。</p><h3 id="14-2-4-超参数的重要性顺序"><a href="#14-2-4-超参数的重要性顺序" class="headerlink" title="14.2.4 超参数的重要性顺序"></a>14.2.4 超参数的重要性顺序</h3><ul><li><p>首先， <strong>学习率，损失函数上的可调参数</strong>。在网络参数、优化参数、正则化参数中最重要的超参数可能就是学习率了。学习率直接控制着训练中网络梯度更新的量级，直接影响着模型的<strong>有效容限能力</strong>；损失函数上的可调参数，这些参数通常情况下需要结合实际的损失函数来调整，大部分情况下这些参数也能很直接的影响到模型的的有效容限能力。这些损失一般可分成三类，第一类辅助损失结合常见的损失函数，起到辅助优化特征表达的作用。例如度量学习中的Center loss，通常结合交叉熵损失伴随一个权重完成一些特定的任务。这种情况下一般建议辅助损失值不高于或者不低于交叉熵损失值的两个数量级；第二类，多任务模型的多个损失函数，每个损失函数之间或独立或相关，用于各自任务，这种情况取决于任务之间本身的相关性，目前笔者并没有一个普适的经验由于提供参考；第三类，独立损失函数，这类损失通常会在特定的任务有显著性的效果。例如RetinaNet中的focal loss，其中的参数γ，α，对最终的效果会产生较大的影响。这类损失通常论文中会给出特定的建议值。</p></li><li><p>其次，<strong>批样本数量，动量优化器（Gradient Descent with Momentum）的动量参数<em>β</em></strong>。批样本决定了数量梯度下降的方向。过小的批数量，极端情况下，例如batch size为1，即每个样本都去修正一次梯度方向，样本之间的差异越大越难以收敛。若网络中存在批归一化（batchnorm），batch size过小则更难以收敛，甚至垮掉。这是因为数据样本越少，统计量越不具有代表性，噪声也相应的增加。而过大的batch size，会使得梯度方向基本稳定，容易陷入局部最优解，降低精度。一般参考范围会取在[1:1024]之间，当然这个不是绝对的，需要结合具体场景和样本情况；动量衰减参数<em>β</em>是计算梯度的指数加权平均数，并利用该值来更新参数，设置为 0.9 是一个常见且效果不错的选择；</p></li></ul><ul><li>最后，<strong>Adam优化器的超参数、权重衰减系数、丢弃法比率（dropout）和网络参数</strong>。在这里说明下，这些参数重要性放在最后<strong>并不等价于这些参数不重要</strong>。而是表示这些参数在大部分实践中<strong>不建议过多尝试</strong>，例如Adam优化器中的<em>β1，β2，ϵ</em>，常设为 0.9、0.999、10−8就会有不错的表现。权重衰减系数通常会有个建议值，例如0.0005 ，使用建议值即可，不必过多尝试。dropout通常会在全连接层之间使用防止过拟合，建议比率控制在[0.2,0.5]之间。使用dropout时需要特别注意两点：一、在RNN中，如果直接放在memory cell中,循环会放大噪声，扰乱学习。一般会建议放在输入和输出层；二、不建议dropout后直接跟上batchnorm，dropout很可能影响batchnorm计算统计量，导致方差偏移，这种情况下会使得推理阶段出现模型完全垮掉的极端情况；网络参数通常也属于超参数的范围内，通常情况下增加网络层数能增加模型的容限能力，但模型真正有效的容限能力还和样本数量和质量、层之间的关系等有关，所以一般情况下会选择先固定网络层数，调优到一定阶段或者有大量的硬件资源支持可以在网络深度上进行进一步调整。</li></ul><h3 id="14-2-5-部分超参数如何影响模型性能"><a href="#14-2-5-部分超参数如何影响模型性能" class="headerlink" title="14.2.5 部分超参数如何影响模型性能"></a>14.2.5 部分超参数如何影响模型性能</h3><table><thead><tr><th style="text-align:center">超参数</th><th style="text-align:center">如何影响模型容量</th><th style="text-align:center">原因</th><th style="text-align:center">注意事项</th></tr></thead><tbody><tr><td style="text-align:center">学习率</td><td style="text-align:center">调至最优，提升有效容量</td><td style="text-align:center">过高或者过低的学习率，都会由于优化失败而导致降低模型有效容限</td><td style="text-align:center">学习率最优点，在训练的不同时间点都可能变化，所以需要一套有效的学习率衰减策略</td></tr><tr><td style="text-align:center">损失函数部分超参数</td><td style="text-align:center">调至最优，提升有效容量</td><td style="text-align:center">损失函数超参数大部分情况都会可能影响优化，不合适的超参数会使即便是对目标优化非常合适的损失函数同样难以优化模型，降低模型有效容限。</td><td style="text-align:center">对于部分损失函数超参数其变化会对结果十分敏感，而有些则并不会太影响。在调整时，建议参考论文的推荐值，并在该推荐值数量级上进行最大最小值调试该参数对结果的影响。</td></tr><tr><td style="text-align:center">批样本数量</td><td style="text-align:center">过大过小，容易降低有效容量</td><td style="text-align:center">大部分情况下，选择适合自身硬件容量的批样本数量，并不会对模型容限造成。</td><td style="text-align:center">在一些特殊的目标函数的设计中，如何选择样本是很可能影响到模型的有效容限的，例如度量学习（metric learning）中的N-pair loss。这类损失因为需要样本的多样性，可能会依赖于批样本数量。</td></tr><tr><td style="text-align:center">丢弃法</td><td style="text-align:center">比率降低会提升模型的容量</td><td style="text-align:center">较少的丢弃参数意味着模型参数量的提升，参数间适应性提升，模型容量提升，但不一定能提升模型有效容限</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">权重衰减系数</td><td style="text-align:center">调至最优，提升有效容量</td><td style="text-align:center">权重衰减可以有效的起到限制参数变化的幅度，起到一定的正则作用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">优化器动量</td><td style="text-align:center">调至最优，可能提升有效容量</td><td style="text-align:center">动量参数通常用来加快训练，同时更容易跳出极值点，避免陷入局部最优解。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">模型深度</td><td style="text-align:center">同条件下，深度增加，模型容量提升</td><td style="text-align:center">同条件，下增加深度意味着模型具有更多的参数，更强的拟合能力。</td><td style="text-align:center">同条件下，深度越深意味着参数越多，需要的时间和硬件资源也越高。</td></tr><tr><td style="text-align:center">卷积核尺寸</td><td style="text-align:center">尺寸增加，模型容量提升</td><td style="text-align:center">增加卷积核尺寸意味着参数量的增加，同条件下，模型参数也相应的增加。</td></tr></tbody></table><h3 id="14-2-6-部分超参数合适的范围"><a href="#14-2-6-部分超参数合适的范围" class="headerlink" title="14.2.6 部分超参数合适的范围"></a>14.2.6 部分超参数合适的范围</h3><table><thead><tr><th style="text-align:center">超参数</th><th style="text-align:center">建议范围</th><th style="text-align:center">注意事项</th></tr></thead><tbody><tr><td style="text-align:center">初始学习率</td><td style="text-align:center">SGD: [1e-2, 1e-1]<br>momentum: [1e-3, 1e-2]<br>Adagrad: [1e-3, 1e-2]<br>Adadelta: [1e-2, 1e-1]<br>RMSprop: [1e-3, 1e-2]<br>Adam: [1e-3, 1e-2]<br>Adamax: [1e-3, 1e-2]<br>Nadam: [1e-3, 1e-2]</td><td style="text-align:center">这些范围通常是指从头开始训练的情况。若是微调，初始学习率可在降低一到两个数量级。</td></tr><tr><td style="text-align:center">损失函数部分超参数</td><td style="text-align:center">多个损失函数之间，损失值之间尽量相近，不建议超过或者低于两个数量级</td><td style="text-align:center">这是指多个损失组合的情况，不一定完全正确。单个损失超参数需结合实际情况。</td></tr><tr><td style="text-align:center">批样本数量</td><td style="text-align:center">[1:1024]</td><td style="text-align:center">当批样本数量过大(大于6000)或者等于1时，需要注意学习策略或者BN的替代品。</td></tr><tr><td style="text-align:center">丢弃法比率</td><td style="text-align:center">[0, 0.5]</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">权重衰减系数</td><td style="text-align:center">[0, 1e-4]</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">卷积核尺寸</td><td style="text-align:center">[7x7],[5x5],[3x3],[1x1], [7x1,1x7]</td></tr></tbody></table><h2 id="14-3-网络训练中的超参调整策略"><a href="#14-3-网络训练中的超参调整策略" class="headerlink" title="14.3 网络训练中的超参调整策略"></a>14.3 网络训练中的超参调整策略</h2><h3 id="14-3-1-如何调试模型？"><a href="#14-3-1-如何调试模型？" class="headerlink" title="14.3.1 如何调试模型？"></a>14.3.1 如何调试模型？</h3><p>在讨论如何调试模型之前，我们先来纠正一个误区。通常理解如何调试模型的时候，我们想到一系列优秀的神经网络模型以及调试技巧。但这里需要指出的是数据才是模型的根本，如果有一批质量优秀的数据，或者说你能将数据质量处理的很好的时候，往往比挑选或者设计模型的收益来的更大。那在这之后才是模型的设计和挑选以及训练技巧上的事情。</p><p>1、探索和清洗数据。探索数据集是设计算法之前最为重要的一步，以图像分类为例，我们需要重点知道给定的数据集样本类别和各类别样本数量是否平衡，图像之间是否存在跨域问题（例如网上爬取的图像通常质量各异，存在噪声）。若是类别数远远超过类别样本数（比如类别10000，每个类别却只有10张图像），那通常的方法可能效果并不显著，这时候few-shot learning或者对数据集做进一步增强可能是你比较不错的选择。再如目标检测，待检测目标在数据集中的尺度范围是对检测器的性能有很大影响的部分。因此重点是检测大目标还是小目标、目标是否密集完全取决于数据集本身。所以，探索和进一步清洗数据集一直都是深度学习中最重要的一步。这是很多新手通常会忽略的一点。</p><p>2、探索模型结果。探索模型的结果，通常是需要对模型在验证集上的性能进行进一步的分析，这是如何进一步提升模型性能很重要的步骤。将模型在训练集和验证集都进行结果的验证和可视化，可直观的分析出模型是否存在较大偏差以及结果的正确性。以图像分类为例，若类别间样本数量很不平衡时，我们需要重点关注少样本类别在验证集的结果是否和训练集的出入较大，对出错类别可进一步进行模型数值分析以及可视化结果分析，进一步确认模型的行为。</p><p>3、监控训练和验证误差。首先很多情况下，我们忽略代码的规范性和算法撰写正确性验证，这点上容易产生致命的影响。在训练和验证都存在问题时，首先请确认自己的代码是否正确。其次，根据训练和验证误差进一步追踪模型的拟合状态。若训练数据集很小，此时监控误差则显得格外重要。确定了模型的拟合状态对进一步调整学习率的策略的选择或者其他有效超参数的选择则会更得心应手。</p><p>4、反向传播数值的计算，这种情况通常适合自己设计一个新操作的情况。目前大部分流行框架都已包含自动求导部分，但并不一定是完全符合你的要求的。验证求导是否正确的方式是比较自动求导的结果和有限差分计算结果是否一致。所谓有限差分即导数的定义，使用一个极小的值近似导数。</p><p><img src="/2016/12/20/第十四章_超参数调整/img/ch14/%E5%AF%BC%E6%95%B0.png" alt=""></p><h3 id="14-3-2-为什么要做学习率调整"><a href="#14-3-2-为什么要做学习率调整" class="headerlink" title="14.3.2 为什么要做学习率调整?"></a>14.3.2 为什么要做学习率调整?</h3><p>​    学习率可以说是模型训练最为重要的超参数。通常情况下，一个或者一组优秀的学习率既能加速模型的训练，又能得到一个较优甚至最优的精度。过大或者过小的学习率会直接影响到模型的收敛。我们知道，当模型训练到一定程度的时候，损失将不再减少，这时候模型的一阶梯度接近零，对应Hessian 矩阵通常是两种情况，一、正定，即所有特征值均为正，此时通常可以得到一个局部极小值，若这个局部极小值接近全局最小则模型已经能得到不错的性能了，但若差距很大，则模型性能还有待于提升，通常情况下后者在训练初最常见。二，特征值有正有负，此时模型很可能陷入了鞍点，若陷入鞍点，模型性能表现就很差。以上两种情况在训练初期以及中期，此时若仍然以固定的学习率，会使模型陷入左右来回的震荡或者鞍点，无法继续优化。所以，学习率衰减或者增大能帮助模型有效的减少震荡或者逃离鞍点。</p><h3 id="14-3-3-学习率调整策略有哪些？"><a href="#14-3-3-学习率调整策略有哪些？" class="headerlink" title="14.3.3 学习率调整策略有哪些？"></a>14.3.3 学习率调整策略有哪些？</h3><p>通常情况下，大部分学习率调整策略都是衰减学习率，当然也有部分增大学习率的策略。这里结合TensorFlow的内置方法来举例。</p><p>1、<strong>exponential_decay</strong>和<strong>natural_exp_decay</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exponential_decay(learning_rate, global_step, decay_steps, decay_rate,</span><br><span class="line">                   staircase=<span class="keyword">False</span>, name=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">natural_exp_decay(learning_rate, global_step, decay_steps, decay_rate,</span><br><span class="line">                   staircase=<span class="keyword">False</span>, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>指数衰减是最常用的衰减方式，这种方式简单直接，在训练初期衰减较大利于收敛，在后期衰减较小利于精调。以上两种均为指数衰减，区别在于后者使用以自然指数下降。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\指数衰减.jpeg" alt="./"></p><p>2、<strong>piecewise_constant</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">piecewise_constant(x, boundaries, values, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>分段设置学习率法，跟指数型类似，区别在于每个阶段的衰减并不是按指数调整。可在不同阶段设置手动不同的学习率。这种学习率重点在有利于精调。</p><p>3、<strong>polynomial_decay</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">polynomial_decay(learning_rate, global_step, decay_steps,</span><br><span class="line">                  end_learning_rate=<span class="number">0.0001</span>, power=<span class="number">1.0</span>,</span><br><span class="line">                  cycle=<span class="keyword">False</span>, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>多项式衰减，计算如下：</p><p>global_step = min(global_step,decay_steps)</p><p>decayed_learning_rate = (learning_rate-end_learning_rate)*(1-global_step/decay_steps)^ (power)+end_learning_rate</p><p>有别去上述两种，多项式衰减则是在每一步迭代上都会调整学习率。主要看Power参数，若Power为1，则是下图中的红色直线；若power小于1，则是开1/power次方，为蓝色线；绿色线为指数，power大于1。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\多项式衰减.jpeg" alt=""></p><p>此外，需要注意的是参数cycle，cycle对应的是一种周期循环调整的方式，主要的目的在后期防止在一个局部极小值震荡，若跳出该区域或许能得到更有的结果。这里说明cycle的方式不止可以在多项式中应用，可配合类似的周期函数进行衰减，如下图。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\cycle衰减.jpeg" alt=""></p><p>4、<strong>inverse_time_decay</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inverse_time_decay(learning_rate, global_step, decay_steps, decay_rate,</span><br><span class="line">                   staircase=<span class="keyword">False</span>, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>逆时衰减，这种方式和指数型类似。如图，<img src="/2016/12/20/第十四章_超参数调整/img\ch14\逆时衰减.jpeg" alt=""></p><p>5、<strong>cosine_decay</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cosine_decay(learning_rate, global_step, decay_steps, alpha=<span class="number">0.0</span>,</span><br><span class="line">                 name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>余弦衰减，即按余弦函数的方式衰减学习率，如图</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\余弦衰减.jpeg" alt=""></p><p>6、<strong>cosine_decay_restarts</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cosine_decay_restarts(learning_rate, global_step, first_decay_steps,</span><br><span class="line">                           t_mul=<span class="number">2.0</span>, m_mul=<span class="number">1.0</span>, alpha=<span class="number">0.0</span>, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>余弦重启衰减，即余弦版本的cycle策略，作用与多项式衰减中的cycle相同。区别在于余弦重启衰减会重新回到初始学习率，拉长周期，而多项式版本则会逐周期衰减。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\余弦cycle衰减.jpeg" alt=""></p><p>7、<strong>linear_cosine_decay</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linear_cosine_decay(learning_rate, global_step, decay_steps,</span><br><span class="line">                        num_periods=<span class="number">0.5</span>, alpha=<span class="number">0.0</span>, beta=<span class="number">0.001</span>,</span><br><span class="line">                        name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>线性余弦衰减，主要应用于增强学习领域。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\线性余弦衰减.jpeg" alt=""></p><p>8、<strong>noisy_linear_cosine_decay</strong></p><p>噪声线性余弦衰减，即在线性余弦衰减中加入随机噪声，增大寻优的随机性。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\噪声线性余弦衰减.jpeg" alt=""></p><h3 id="14-3-4-极端批样本数量下，如何训练网络？"><a href="#14-3-4-极端批样本数量下，如何训练网络？" class="headerlink" title="14.3.4 极端批样本数量下，如何训练网络？"></a>14.3.4 极端批样本数量下，如何训练网络？</h3><h3 id="14-3-5-为什么卷积核设计尺寸都是奇数"><a href="#14-3-5-为什么卷积核设计尺寸都是奇数" class="headerlink" title="14.3.5 为什么卷积核设计尺寸都是奇数"></a>14.3.5 为什么卷积核设计尺寸都是奇数</h3><p>主要原因有两点：</p><ul><li>保证像素点中心位置，避免位置信息偏移</li><li>填充边缘时能保证两边都能填充，原矩阵依然对称</li></ul><h3 id="14-3-6-权重共享的形式有哪些，为什么要权重共享"><a href="#14-3-6-权重共享的形式有哪些，为什么要权重共享" class="headerlink" title="14.3.6 权重共享的形式有哪些，为什么要权重共享"></a>14.3.6 权重共享的形式有哪些，为什么要权重共享</h3><p>权重共享的形式：</p><ul><li>深度学习中，权重共享最具代表性的就是卷积网络的卷积操作。卷积相比于全连接神经网络参数大大减少；</li><li>多任务网络中，通常为了降低每个任务的计算量，会共享一个骨干网络。</li><li>一些相同尺度下的结构化递归网络</li></ul><p>权重共享的好处：</p><p>​    权重共享一定程度上能增强参数之间的联系，获得更好的共性特征。同时很大程度上降低了网络的参数，节省计算量和计算所需内存（当然，结构化递归并不节省计算量）。此外权重共享能起到很好正则的作用。正则化的目的是为了降低模型复杂度，防止过拟合，而权重共享则正好降低了模型的参数和复杂度。</p><p>​    因此一个设计优秀的权重共享方式，在降低计算量的同时，通常会较独享网络有更好的效果。</p><h2 id="14-4-合理使用预训练网络"><a href="#14-4-合理使用预训练网络" class="headerlink" title="14.4 合理使用预训练网络"></a>14.4 合理使用预训练网络</h2><h3 id="14-4-1-什么是微调（fine-tune）"><a href="#14-4-1-什么是微调（fine-tune）" class="headerlink" title="14.4.1 什么是微调（fine-tune）"></a>14.4.1 什么是微调（fine-tune）</h3><p>​    微调（fine-tune），顾名思义指稍微调整参数即可得到优秀的性能，是迁移学习的一种实现方式。微调和从头训练（train from scratch）的本质区别在于模型参数的初始化，train from scratch通常指对网络各类参数进行随机初始化（当然随机初始化也存在一定技巧），随机初始化模型通常不具有任何预测能力，通常需要大量的数据或者特定域的数据进行从零开始的训练，这样需要训练到优秀的模型通常是稍困难的。而微调的网络，网络各类参数已经在其他数据集（例如ImageNet数据集）完成较好调整的，具备了较优秀的表达能力。因此，我们只需要以较小的学习速率在自己所需的数据集领域进行学习即可得到较为优秀的模型。微调通常情况下，无须再重新设计网络结构，预训练模型提供了优秀的结构，只需稍微修改部分层即可。在小数据集上，通常微调的效果比从头训练要好很多，原因在于数据量较小的前提下，训练更多参数容易导致过度拟合。</p><h3 id="14-4-2-微调有哪些不同方法？"><a href="#14-4-2-微调有哪些不同方法？" class="headerlink" title="14.4.2 微调有哪些不同方法？"></a>14.4.2 微调有哪些不同方法？</h3><p>​    以图像分类为例，通常情况下由于不同数据集需要的类别数不同，我们需要修改网络的输出顶层。这种情况下有两种微调方式：</p><ul><li><p>不冻结网络模型的任何层，对最后的改动层使用较大的学习率，对未改动层以较小的学习率进行训练全模型训练，进行多轮训练即可。即一步完成训练。</p></li><li><p>冻结除了顶部改动层以外的所有层参数，即不对冻结部分的层进行参数训练更新，进行若干轮的微调训练后，放开顶部层以下的若干层或者全部放开所有层的参数，再次进行若干轮训练即可。即分多步训练。</p><p>以上两种都属于微调。目前由于存在大量优秀的预训练模型，如何确定哪个模型适合自己的任务并能得到最佳性能需要花大量的时间探索。此时，上述的前者是种不错训练方式，你无须进行过多分步的操作。而当探索到一个比较适合的模型时，你不妨可以再次重新尝试下以第二种方式进行训练，或许能得到相比于前者稍高些的性能，因为小数据集上调整过多的参数过拟合的机率也会增大，当然这并不是绝对的。</p></li></ul><h3 id="14-4-3-微调先冻结底层，训练顶层的原因？"><a href="#14-4-3-微调先冻结底层，训练顶层的原因？" class="headerlink" title="14.4.3 微调先冻结底层，训练顶层的原因？"></a>14.4.3 微调先冻结底层，训练顶层的原因？</h3><p>​    14.12中第二种冻结多步训练的方式。首先冻结除了顶部改动层以外的所有层参数，对顶层进行训练，这个过程可以理解为顶层的域适应训练，主要用来训练适应模型的现有特征空间，防止顶层糟糕的初始化，对已经具备一定表达能力的层的干扰和破坏，影响最终的性能。之后，在很多深度学习框架教程中会使用放开顶层往下一半的层数，继续进行微调。这样的好处在于越底层的特征通常是越通用的特征，越往上其整体的高层次语义越完备，这通过感受野很容易理解。所以，若预训练模型的数据和微调训练的数据语义差异越大（例如ImageNet的预模型用于医学图像的训练），那越往顶层的特征语义差异就越大，因此通常也需要进行相应的调整。</p><h3 id="14-4-4-不同的数据集特性下如何微调？"><a href="#14-4-4-不同的数据集特性下如何微调？" class="headerlink" title="14.4.4 不同的数据集特性下如何微调？"></a>14.4.4 不同的数据集特性下如何微调？</h3><ul><li>数据集数据量少，数据和原数据集类似。这是通常做法只需修改最后的输出层，训练即可，训练过多参数容易过拟合。</li><li>数据集数据量少，数据和原数据集差异较大。由于数据差异较大，可以在完成输出顶层的微调后，微调顶层往下一半的层数，进行微调。</li><li>数据集数据量大，数据与原数据集差异较大。这种情况下，通常已经不需要用预训练模型进行微调，通常直接重新训练即可。</li><li>数据集数据量大，数据与原数据类似。这时预训练模型的参数是个很好的初始化，可利用预训练模型放开所有层以较小的学习率微调即可。</li></ul><h3 id="14-4-4-目标检测中使用预训练模型的优劣？"><a href="#14-4-4-目标检测中使用预训练模型的优劣？" class="headerlink" title="14.4.4 目标检测中使用预训练模型的优劣？"></a>14.4.4 目标检测中使用预训练模型的优劣？</h3><p>​    目标检测中无论是一阶段的YOLO、SSD或者RetinaNet 还是二阶段的Faster R-CNN、R-FCN 和 FPN都是基于ImageNet上预训练好的分类模型。</p><p>​    优势在于：</p><p>​    1、正如大部分微调的情况一样，使用预训练网络已拥有优秀的语义特征，能有效的加快训练速度；</p><p>​    2、其次，对于大部分二阶段的模型来说，并未实现严格意义上的完全端对端的训练，所以使用预训练模型能直接提取到语义特征，能使两个阶段的网络更容易实现模型的优化。</p><p>​    劣势在于，分类模型和检测模型之间仍然存在一定任务上的差异：</p><p>​    1、检测模型能在多尺度上获取更高的收益；</p><p>​    2、分类模型大部分训练于单目标数据，对同时进行多目标的捕捉能力稍弱；</p><p>​    3、分类模型并不关注目标的位置，在一定程度上让模型损失部分空间信息，这对检测模型通常是不利的。</p><h3 id="14-4-5-目标检测中如何从零开始训练？"><a href="#14-4-5-目标检测中如何从零开始训练？" class="headerlink" title="14.4.5 目标检测中如何从零开始训练？"></a>14.4.5 目标检测中如何从零开始训练？</h3><p>​    参考14.15提到的使用预训练模型训练检测模型的优劣势，有两个方案在实际实现中可能会更有效。</p><p>​    方案一、通常二阶段检测模型并未实现真正完全端对端的训练，因此二阶段模型会更难以训练。所以一阶段检测模型相较起来更适合从零训练，参考DSOD，使用DenseNet使用更多层次的特征将更适应训练。</p><p>​    方案二、二阶段模型从零训练很难，而分类模型对于多目标、尺度并不敏感。因此仍然需要预训练模型的参数，这时借鉴DetNet训练一个专属于目标检测的模型网络，而参考分类模型的劣势，该专属网络应对多目标、尺度和位置拥有更强的适应性。</p><h2 id="14-5-如何改善-GAN-的性能"><a href="#14-5-如何改善-GAN-的性能" class="headerlink" title="14.5 如何改善 GAN 的性能"></a>14.5 如何改善 GAN 的性能</h2><p>优化GAN性能通常需要在如下几个方面进行</p><ul><li>设计或选择更适合目的代价函数。</li><li>添加额外的惩罚。</li><li>避免判别器过度自信和生成器过度拟合。</li><li>更好的优化模型的方法。</li><li>添加标签明确优化目标。</li></ul><p>GAN常用训练技巧</p><ul><li><p>输入规范化到（-1，1）之间，最后一层的激活函数使用tanh（BEGAN除外）</p></li><li><p>使用wassertein GAN的损失函数，</p></li><li><p>如果有标签数据的话，尽量使用标签，也有人提出使用反转标签效果很好，另外使用标签平滑，单边标签平滑或者双边标签平滑</p></li><li><p>使用mini-batch norm， 如果不用batch norm 可以使用instance norm 或者weight norm</p></li><li><p>避免使用RELU和pooling层，减少稀疏梯度的可能性，可以使用leakrelu激活函数</p></li><li><p>优化器尽量选择ADAM，学习率不要设置太大，初始1e-4可以参考，另外可以随着训练进行不断缩小学习率，</p></li><li><p>给D的网络层增加高斯噪声，相当于是一种正则</p><h2 id="14-6-AutoML"><a href="#14-6-AutoML" class="headerlink" title="14.6 AutoML"></a>14.6 AutoML</h2></li></ul><h3 id="14-6-1-什么是AutoML？"><a href="#14-6-1-什么是AutoML？" class="headerlink" title="14.6.1 什么是AutoML？"></a>14.6.1 什么是AutoML？</h3><p>​    目前一个优秀的机器学习和深度学习模型，离不开这几个方面：</p><p>​    一、优秀的数据预处理；</p><p>​    二、合适的模型结构和功能；</p><p>​    三、优秀的训练策略和超参数；</p><p>​    四、合适的后处理操作；</p><p>​    五、严格的结果分析。</p><p>​    这几方面都对最终的结果有着举足轻重的影响，这也是目前的数据工程师和学者们的主要工作。但由于这每一方面都十分繁琐，尤其是在构建模型和训练模型上。而大部分情况下，这些工作有无须过深专业知识就能使用起来。所以AutoML主要的作用就是来帮助实现高效的模型构建和超参数调整。例如深度学习网络的架构搜索、超参数的重要性分析等等。当然AutoML并不简单的进行暴力或者随机的搜索，其仍然需要机器学习方面的知识，例如贝叶斯优化、强化学习、元学习以及迁移学习等等。目前也有些不错的AutoML工具包，例如Alex Honchar的Hyperopt、微软的NNI、Autokeras等。</p><h3 id="14-6-2-自动化超参数搜索方法有哪些？"><a href="#14-6-2-自动化超参数搜索方法有哪些？" class="headerlink" title="14.6.2 自动化超参数搜索方法有哪些？"></a>14.6.2 自动化超参数搜索方法有哪些？</h3><p>​    目前自动化搜索主要包含网格搜索，随机搜索，基于模型的超参优化</p><p>​    网格搜索：</p><p>​        通常当超参数量较少的时候，可以使用网格搜索法。即列出每个超参数的大致候选集合。利用这些集合        进行逐项组合优化。在条件允许的情况下，重复进行网格搜索会当优秀，当然每次重复需要根据上一步得到的最优参数组合，进行进一步的细粒度的调整。网格搜索最大的问题就在于计算时间会随着超参数的数量指数级的增长。</p><p>​    随机搜索：</p><p>​        随机搜索，是一种用来替代网格搜索的搜索方式。随机搜索有别于网格搜索的一点在于，我们不需要设定一个离散的超参数集合，而是对每个超参数定义一个分布函数来生成随机超参数。随机搜索相比于网格搜索在一些不敏感超参上拥有明显优势。例如网格搜索对于批样本数量（batch size），在[16,32,64]这些范围内进行逐项调试，这样的调试显然收益更低下。当然随机搜索也可以进行细粒度范围内的重复的搜索优化。</p><p><img src="/2016/12/20/第十四章_超参数调整/img\ch14\14.14.png" alt=""></p><p>​    基于模型的超参优化：</p><p>​        有别于上述两种的搜索策略，基于模型的超参调优问题转化为了优化问题。直觉上会考虑是否进行一个可导建模，然后利用梯度下降进行优化。但不幸的是我们的超参数通常情况下是离散的，而且其计算代价依旧很高。</p><p>​        基于模型的搜索算法，最常见的就是贝叶斯超参优化。有别于的网格搜索和随机搜索独立于前几次搜索结果的搜索，贝叶斯则是利用历史的搜索结果进行优化搜索。其主要有四部分组成，1.目标函数，大部分情况下就是模型验证集上的损失。2、搜索空间，即各类待搜索的超参数。3、优化策略，建立的概率模型和选择超参数的方式。4、历史的搜索结果。首先对搜索空间进行一个先验性的假设猜想，即假设一种选择超参的方式，然后不断的优化更新概率模型，最终的目标是找到验证集上误差最小的一组超参数。</p><h3 id="14-6-3-什么是神经网络架构搜索（NAS）"><a href="#14-6-3-什么是神经网络架构搜索（NAS）" class="headerlink" title="14.6.3 什么是神经网络架构搜索（NAS）"></a>14.6.3 什么是神经网络架构搜索（NAS）</h3><p>2015至2017年间，是CNN网络设计最兴盛的阶段，大多都是由学者人工设计的网络结构。这个过程通常会很繁琐。其主要原因在于对不同模块组件的组成通常是个黑盒优化的问题，此外，在不同结构超参数以及训练超参数的选择优化上非凸优化问题，或者是个混合优化问题，既有离散空间又有连续空间。NAS（Neural Architecture Search）的出现就是为了解决如何通过机器策略和自动化的方式设计出优秀高效的网络。而这种策略通常不是统一的标准，不同的网络结合实际的需求通常会有不同的设计，比如移动端的模型会在效率和精度之间做平衡。目前的网络架构搜索通常会分为三个方面，搜索空间，搜索策略以及评价预估。链接 | <a href="https://www.paperweekly.site/papers/2249" target="_blank" rel="noopener">https://www.paperweekly.site/papers/2249</a></p><ul><li><p>搜索空间，定义了优化问题的变量，网络结构和超参数的变量定义有所不同，不同的变量规模对于算法的难度来说也不尽相同。早期很多工作都是用以遗传算法为代表的进化算法对神经网络的超参数和权重进行优化，因为当时的神经网络只有几层，每层十几个神经元，也不存在复杂的网络架构，参数很有限，可直接进行优化。而深度学习模型一方面有着复杂的网络结构，另一方面权重参数通常都以百万到亿来计，进化算法根本无法优化。但换个思路，假如我们找到了一组网络架构参数和对应的超参数，深度学习模型的性能其实是由这组参数来控制和决定的，所以只需要对复杂模型的架构参数和对应的超参数进行优化即可。</p></li><li><p>搜索策略， 搜索策略定义了使用怎样的算法可以快速、准确找到最优的网络结构参数配置。常见的搜索方法包括：随机搜索、贝叶斯优化、进化算法、强化学习、基于梯度的算法。其中，2017 年谷歌大脑的那篇强化学习搜索方法将这一研究带成了研究热点，后来 Uber、Sentient、OpenAI、Deepmind 等公司和研究机构用进化算法对这一问题进行了研究，这个 task 算是进化算法一大热点应用。</p></li><li><p>评价预估，类似于工程优化中的代理模型（surrogate model），因为深度学习模型的效果非常依赖于训练数据的规模，大规模数据上的模型训练会非常耗时，对优化结果的评价将会非常耗时，所以需要一些手段去做近似的评估。 </p><p>一种思路是用一些低保真的训练集来训练模型，低保真在实际应用可以有多种表达，比如训练更少的次数，用原始训练数据的一部分，低分辨率的图片，每一层用更少的滤波器等。用这种低保真的训练集来测试优化算法会大大降低计算时间，但也存在一定的 bias，不过选择最优的架构并不需要绝对数值，只需要有相对值就可以进行排序选优了； </p><p>另一种主流思路是借鉴于工程优化中的代理模型，在很多工程优化问题中，每一次优化得到的结果需要经过实验或者高保真仿真（有限元分析）进行评价，实验和仿真的时间非常久，不可能无限制地进行评价尝试，学者们提出了一种叫做代理模型的回归模型，用观测到的点进行插值预测，这类方法中最重要的是在大搜索空间中如何选择尽量少的点预测出最优结果的位置；</p><p>第三种主流思路是参数级别的迁移，用之前已经训练好的模型权重参数对target问题进行赋值，从一个高起点的初值开始寻优将会大大地提高效率。在这类问题中，积累了大量的历史寻优数据，对新问题的寻优将会起到很大的帮助，用迁移学习进行求解，是一个很不错的思路；另一种比较有意思的思路叫做单次（One-Shot）架构搜索，这种方法将所有架构视作一个 one-shot 模型（超图）的子图，子图之间通过超图的边来共享权重。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>模型压缩及移动端部署</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0_%E6%A8%A1%E5%9E%8B%E5%8E%8B%E7%BC%A9%E3%80%81%E5%8A%A0%E9%80%9F%E5%8F%8A%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    <id>https://leesen998.github.io/2016/12/20/第十七章_模型压缩、加速及移动端部署/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:49:38.754Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><pre><code>Markdown Revision 1;Editor: 谈继勇Contact: scutjy2015@163.comupdata:张达峰</code></pre><h2 id="17-1-为什么需要模型压缩和加速？"><a href="#17-1-为什么需要模型压缩和加速？" class="headerlink" title="17.1 为什么需要模型压缩和加速？"></a>17.1 为什么需要模型压缩和加速？</h2><p>（1）随着AI技术的飞速发展，越来越多的公司希望在自己的移动端产品中注入AI能力</p><p>（2）对于在线学习和增量学习等实时应用而言，如何减少含有大量层级及结点的大型神经网络所需要的内存和计算量显得极为重要。<br>（3）智能设备的流行提供了内存、CPU、能耗和宽带等资源，使得深度学习模型部署在智能移动设备上变得可行。<br>（4）高效的深度学习方法可以有效的帮助嵌入式设备、分布式系统完成复杂工作，在移动端部署深度学习有很重要的意义。   </p><h2 id="17-2-目前有哪些深度学习模型压缩方法？"><a href="#17-2-目前有哪些深度学习模型压缩方法？" class="headerlink" title="17.2 目前有哪些深度学习模型压缩方法？"></a>17.2 目前有哪些深度学习模型压缩方法？</h2><p><a href="https://blog.csdn.net/wspba/article/details/75671573" target="_blank" rel="noopener">https://blog.csdn.net/wspba/article/details/75671573</a><br><a href="https://blog.csdn.net/Touch_Dream/article/details/78441332" target="_blank" rel="noopener">https://blog.csdn.net/Touch_Dream/article/details/78441332</a></p><h3 id="17-2-1-前端压缩"><a href="#17-2-1-前端压缩" class="headerlink" title="17.2.1 前端压缩"></a>17.2.1 前端压缩</h3><p>（1）知识蒸馏（简单介绍）<br>一个复杂的模型可以认为是由多个简单模型或者强约束条件训练而来，具有很好的性能，但是参数量很大，计算效率低，而小模型计算效率高，但是其性能较差。知识蒸馏是让复杂模型学习到的知识迁移到小模型当中,使其保持其快速的计算速度前提下，同时拥有复杂模型的性能，达到模型压缩的目的。但与剪枝、量化等方法想比，效果较差。(<a href="https://blog.csdn.net/Lucifer_zzq/article/details/79489248" target="_blank" rel="noopener">https://blog.csdn.net/Lucifer_zzq/article/details/79489248</a>)<br>（2）紧凑的模型结构设计（简单介绍）<br>紧凑的模型结构设计主要是对神经网络卷积的方式进行改进，比如使用两个3x3的卷积替换一个5x5的卷积、使用深度可分离卷积等等方式降低计算参数量。<br>（3）滤波器层面的剪枝（简单介绍）<br>参考链接  <a href="https://blog.csdn.net/JNingWei/article/details/79218745" target="_blank" rel="noopener">https://blog.csdn.net/JNingWei/article/details/79218745</a> 补充优缺点<br>滤波器层面的剪枝属于非结构花剪枝，主要是对较小的权重矩阵整个剔除，然后对整个神经网络进行微调。此方式由于剪枝过于粗放，容易导致精度损失较大，而且部分权重矩阵中会存留一些较小的权重造成冗余，剪枝不彻底。  </p><h3 id="17-2-2-后端压缩"><a href="#17-2-2-后端压缩" class="headerlink" title="17.2.2 后端压缩"></a>17.2.2 后端压缩</h3><p>（1）低秩近似   （简单介绍，参考链接补充优缺点）<br>在卷积神经网络中，卷积运算都是以矩阵相乘的方式进行。对于复杂网络，权重矩阵往往非常大，非常消耗存储和计算资源。低秩近似就是用若干个低秩矩阵组合重构大的权重矩阵，以此降低存储和计算资源消耗。<br>优点：  </p><ul><li><p>可以降低存储和计算消耗；</p></li><li><p>一般可以压缩2-3倍；精度几乎没有损失；  </p></li></ul><p>缺点：  </p><ul><li>模型越复杂，权重矩阵越大，利用低秩近似重构参数矩阵不能保证模型的性能      </li></ul><p>（2）未加限制的剪枝   （简单介绍，参考链接补充优缺点）<br>剪枝操作包括：非结构化剪枝和结构化剪枝。非结构化剪枝是对神经网络中权重较小的权重或者权重矩阵进剔除，然后对整个神经网络进行微调；结构化剪枝是在网络优化目标中加入权重稀疏正则项，使部分权重在训练时趋于0。  </p><p>优点： </p><ul><li><p>保持模型性能不损失的情况下，减少参数量9-11倍；</p></li><li><p>剔除不重要的权重，可以加快计算速度，同时也可以提高模型的泛化能力；</p></li></ul><p>缺点：  </p><ul><li><p>非结构化剪枝会增加内存访问成本；</p></li><li><p>极度依赖专门的运行库和特殊的运行平台，不具有通用性；</p></li><li><p>压缩率过大时，破坏性能；     </p></li></ul><p>（3）参数量化   （简单介绍，参考链接补充优缺点）<br>神经网络的参数类型一般是32位浮点型，使用较小的精度代替32位所表示的精度。或者是将多个权重映射到同一数值，权重共享<br>优点：</p><ul><li>模型性能损失很小，大小减少8-16倍；</li></ul><p>缺点：</p><ul><li><p>压缩率大时，性能显著下降；</p></li><li><p>依赖专门的运行库，通用性较差；    </p></li></ul><p>（4）二值网络  （简单介绍，参考链接补充优缺点）<br>对于32bit浮点型数用1bit二进制数-1或者1表示。<br>优点：</p><ul><li>网络体积小，运算速度快     </li></ul><p>目前深度学习模型压缩方法的研究主要可以分为以下几个方向：<br>（1）更精细模型的设计。目前很多网络基于模块化设计思想，在深度和宽度两个维度上都很大，导致参数冗余。因此有很多关于模型设计的研究，如SqueezeNet、MobileNet等，使用更加细致、高效的模型设计，能够很大程度的减少模型尺寸，并且也具有不错的性能。<br>（2）模型裁剪。结构复杂的网络具有非常好的性能，其参数也存在冗余，因此对于已训练好的模型网络，可以寻找一种有效的评判手段，将不重要的connection或者filter进行裁剪来减少模型的冗余。<br>（3）核的稀疏化。在训练过程中，对权重的更新进行诱导，使其更加稀疏，对于稀疏矩阵，可以使用更加紧致的存储方式，如CSC，但是使用稀疏矩阵操作在硬件平台上运算效率不高，容易受到带宽的影响，因此加速并不明显。<br>（4）量化<br>（5）Low-rank分解<br>（6）迁移学习   </p><h2 id="17-3-目前有哪些深度学习模型优化加速方法？"><a href="#17-3-目前有哪些深度学习模型优化加速方法？" class="headerlink" title="17.3 目前有哪些深度学习模型优化加速方法？"></a>17.3 目前有哪些深度学习模型优化加速方法？</h2><p><a href="https://blog.csdn.net/nature553863/article/details/81083955" target="_blank" rel="noopener">https://blog.csdn.net/nature553863/article/details/81083955</a><br>模型优化加速能够提升网络的计算效率，具体包括：<br>（1）Op-level的快速算法：FFT Conv2d (7x7, 9x9), Winograd Conv2d (3x3, 5x5) 等；<br>（2）Layer-level的快速算法：Sparse-block net [1] 等；<br>（3）优化工具与库：TensorRT (Nvidia), Tensor Comprehension (Facebook) 和 Distiller (Intel) 等；   </p><p>原文：<a href="https://blog.csdn.net/nature553863/article/details/81083955" target="_blank" rel="noopener">https://blog.csdn.net/nature553863/article/details/81083955</a>   </p><h2 id="17-4-影响神经网络速度的4个因素（再稍微详细一点）"><a href="#17-4-影响神经网络速度的4个因素（再稍微详细一点）" class="headerlink" title="17.4 影响神经网络速度的4个因素（再稍微详细一点）"></a>17.4 影响神经网络速度的4个因素（再稍微详细一点）</h2><ol><li>FLOPs(FLOPs就是网络执行了多少multiply-adds操作)；  </li><li>MAC(内存访问成本)；   </li><li>并行度(如果网络并行度高，速度明显提升)；   </li><li>计算平台(GPU，ARM)   </li></ol><h2 id="17-5-改变网络结构设计为什么会实现模型压缩、加速？"><a href="#17-5-改变网络结构设计为什么会实现模型压缩、加速？" class="headerlink" title="17.5 改变网络结构设计为什么会实现模型压缩、加速？"></a>17.5 改变网络结构设计为什么会实现模型压缩、加速？</h2><h3 id="1-Group-convolution"><a href="#1-Group-convolution" class="headerlink" title="1. Group convolution"></a>1. Group convolution</h3><p>Group convolution最早出现在AlexNet中，是为了解决单卡显存不够，将网络部署到多卡上进行训练。Group convolution可以减少单个卷积1/g的参数量。<br>假设输入特征的的维度为H * W * c1；卷积核的维度为h1 * w1 * c1，共c2个；输出特征的维度为 H1 * W1 * c2。<br>传统卷积计算方式如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/1.png" alt="image"><br>传统卷积运算量为：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = H * W * h1 * w1 * c1 * c2</span><br></pre></td></tr></table></figure><p>Group convolution是将输入特征的维度c1分成g份，每个group对应的channel数为c1/g，特征维度H * W * c1/g；，每个group对应的卷积核的维度也相应发生改变为h1 * w1 * c1/9，共c2/g个；每个group相互独立运算，最后将结果叠加在一起。<br>Group convolution计算方式如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/2.png" alt="image"><br>Group convolution运算量为：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B = H * W * h1 * w1 * c1/g * c2/g * g</span><br></pre></td></tr></table></figure><p>Group卷积相对于传统卷积的运算量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\dfrac&#123;B&#125;&#123;A&#125; = \dfrac&#123; H * W * h1 * w1 * c1/g * c2/g * g&#125;&#123;H * W * h1 * w1 * c1 * c2&#125; = \dfrac&#123;1&#125;&#123;g&#125;</span><br></pre></td></tr></table></figure></p><p>由此可知：group卷积相对于传统卷积减少了1/g的参数量。</p><h3 id="2-Depthwise-separable-convolution"><a href="#2-Depthwise-separable-convolution" class="headerlink" title="2. Depthwise separable convolution"></a>2. Depthwise separable convolution</h3><p>Depthwise separable convolution是由depthwise conv和pointwise conv构成。<br>depthwise conv(DW)有效减少参数数量并提升运算速度。但是由于每个feature map只被一个卷积核卷积，因此经过DW输出的feature map不能只包含输入特征图的全部信息，而且特征之间的信息不能进行交流，导致“信息流通不畅”。<br>pointwise conv(PW)实现通道特征信息交流，解决DW卷积导致“信息流通不畅”的问题。<br>假设输入特征的的维度为H * W * c1；卷积核的维度为h1 * w1 * c1，共c2个；输出特征的维度为 H1 * W1 * c2。<br>传统卷积计算方式如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/3.png" alt="image"><br>传统卷积运算量为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = H * W * h1 * w1 * c1 * c2</span><br></pre></td></tr></table></figure></p><p>DW卷积的计算方式如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/4.png" alt="image"><br>DW卷积运算量为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B_DW = H * W * h1 * w1 * 1 * c1</span><br></pre></td></tr></table></figure></p><p>PW卷积的计算方式如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/5.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B_PW = H_m * W_m * 1 * 1 * c1 * c2</span><br></pre></td></tr></table></figure></p><p>Depthwise separable convolution运算量为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B = B_DW + B_PW</span><br></pre></td></tr></table></figure></p><p>Depthwise separable convolution相对于传统卷积的运算量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\dfrac&#123;B&#125;&#123;A&#125; = \dfrac&#123; H * W * h1 * w1 * 1 * c1 + H_m * W_m * 1 * 1 * c1 * c2&#125;&#123;H * W * h1 * w1 * c1 * c2&#125;  </span><br><span class="line"></span><br><span class="line">= \dfrac&#123;1&#125;&#123;c2&#125; + \dfrac&#123;1&#125;&#123;h1 * w1&#125;</span><br></pre></td></tr></table></figure></p><p>由此可知，随着卷积通道数的增加，Depthwise separable convolution的运算量相对于传统卷积更少。</p><h3 id="3-输入输出的channel相同时，MAC最小"><a href="#3-输入输出的channel相同时，MAC最小" class="headerlink" title="3. 输入输出的channel相同时，MAC最小"></a>3. 输入输出的channel相同时，MAC最小</h3><p><strong>卷积层的输入和输出特征通道数相等时MAC最小，此时模型速度最快。</strong><br>假设feature map的大小为h*w，输入通道c1，输出通道c2。<br>已知：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FLOPs = B = h * w * c1 * c2</span><br><span class="line"></span><br><span class="line">=&gt; c1 * c2 = \dfrac&#123;B&#125;&#123;h * w&#125;</span><br><span class="line"></span><br><span class="line">MAC = h * w * (c1 + c2) + c1 * c2</span><br><span class="line"></span><br><span class="line">c1 + c2 \geq 2 * \sqrt&#123;c1 * c2&#125;</span><br><span class="line"></span><br><span class="line">=&gt; MAC \geq 2 * h * w \sqrt&#123;\dfrac&#123;B&#125;&#123;h * w&#125;&#125; + \dfrac&#123;B&#125;&#123;h * w&#125;</span><br></pre></td></tr></table></figure></p><p>根据均值不等式得到(c1-c2)^2&gt;=0，等式成立的条件是c1=c2，也就是输入特征通道数和输出特征通道数相等时，在给定FLOPs前提下，MAC达到取值的下界。</p><h3 id="4-减少组卷积的数量"><a href="#4-减少组卷积的数量" class="headerlink" title="4. 减少组卷积的数量"></a>4. 减少组卷积的数量</h3><p><strong>过多的group操作会增大MAC，从而使模型速度变慢</strong><br>由以上公式可知，group卷积想比与传统的卷积可以降低计算量，提高模型的效率；如果在相同的FLOPs时，group卷积为了满足FLOPs会是使用更多channels，可以提高模型的精度。但是随着channel数量的增加，也会增加MAC。<br>FLOPs：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B = \dfrac&#123;h * w * c1 * c2&#125;&#123;g&#125;</span><br></pre></td></tr></table></figure></p><p>MAC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAC = h * w * (c1 + c2) + \dfrac&#123;c1 * c2&#125;&#123;g&#125;</span><br></pre></td></tr></table></figure></p><p>由MAC，FLOPs可知：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAC = h * w * c1 + \dfrac&#123;B*g&#125;&#123;c1&#125; + \dfrac&#123;B&#125;&#123;h * w&#125;</span><br></pre></td></tr></table></figure></p><p>当FLOPs固定(B不变)时，g越大，MAC越大。</p><h3 id="5-减少网络碎片化程度-分支数量"><a href="#5-减少网络碎片化程度-分支数量" class="headerlink" title="5. 减少网络碎片化程度(分支数量)"></a>5. 减少网络碎片化程度(分支数量)</h3><p><strong>模型中分支数量越少，模型速度越快</strong><br>此结论主要是由实验结果所得。<br>以下为网络分支数和各分支包含的卷积数目对神经网络速度的影响。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/6.png" alt="image"><br>实验中使用的基本网络结构，分别将它们重复10次，然后进行实验。实验结果如下：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/7.png" alt="image"><br>由实验结果可知，随着网络分支数量的增加，神经网络的速度在降低。网络碎片化程度对GPU的影响效果明显，对CPU不明显，但是网络速度同样在降低。</p><h3 id="6-减少元素级操作"><a href="#6-减少元素级操作" class="headerlink" title="6. 减少元素级操作"></a>6. 减少元素级操作</h3><p><strong>元素级操作所带来的时间消耗也不能忽视</strong><br>ReLU ，Tensor 相加，Bias相加的操作，分离卷积（depthwise convolution）都定义为元素级操作。<br>FLOPs大多数是对于卷积计算而言的，因为元素级操作的FLOPs相对要低很多。但是过的元素级操作也会带来时间成本。ShuffleNet作者对ShuffleNet v1和MobileNet v2的几种层操作的时间消耗做了分析，发现元素级操作对于网络速度的影响也很大。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/8.png" alt="image"></p><h2 id="17-6-常用的轻量级网络有哪些？（再琢磨下语言和排版）"><a href="#17-6-常用的轻量级网络有哪些？（再琢磨下语言和排版）" class="headerlink" title="17.6 常用的轻量级网络有哪些？（再琢磨下语言和排版）"></a>17.6 常用的轻量级网络有哪些？（再琢磨下语言和排版）</h2><ul><li><strong>SqueezeNet</strong></li><li><strong>MobileNet</strong></li><li><strong>ShuffleNet</strong></li><li><strong>Xception</strong></li></ul><h3 id="1-SequeezeNet"><a href="#1-SequeezeNet" class="headerlink" title="1. SequeezeNet"></a>1. SequeezeNet</h3><p>SqueenzeNet出自F. N. Iandola, S.Han等人发表的论文《SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and &lt; 0.5MB model size》，作者在保证精度不损失的同时，将原始AlexNet压缩至原来的510倍。  </p><h4 id="1-1-设计思想"><a href="#1-1-设计思想" class="headerlink" title="1.1 设计思想"></a>1.1 设计思想</h4><p>在网络结构设计方面主要采取以下三种方式：</p><ul><li>用1*1卷积核替换3*3卷积<ul><li>理论上一个1*1卷积核的参数是一个3*3卷积核的1/9，可以将模型尺寸压缩9倍。</li></ul></li><li>减小3*3卷积的输入通道数<ul><li>根据上述公式，减少输入通道数不仅可以减少卷积的运算量，而且输入通道数与输出通道数相同时还可以减少MAC。</li></ul></li><li>延迟降采样<ul><li>分辨率越大的输入能够提供更多特征的信息，有利于网络的训练判断，延迟降采样可以提高网络精度。<h4 id="1-2-网络架构"><a href="#1-2-网络架构" class="headerlink" title="1.2 网络架构"></a>1.2 网络架构</h4>SqueezeNet提出一种多分支结构——fire model，其中是由Squeeze层和expand层构成。Squeeze层是由s1个1*1卷积组成，主要是通过1*1的卷积降低expand层的输入维度；expand层利用e1个1*1和e3个3*3卷积构成多分支结构提取输入特征，以此提高网络的精度(其中e1=e3=4*s1)。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/9.png" alt="image"><br>SqueezeNet整体网络结构如下图所示：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/10.png" alt="image"><h4 id="1-3实验结果"><a href="#1-3实验结果" class="headerlink" title="1.3实验结果"></a>1.3实验结果</h4>不同压缩方法在ImageNet上的对比实验结果<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/11.png" alt="image"><br>由实验结果可知，SqueezeNet不仅保证了精度，而且将原始AlexNet从240M压缩至4.8M，压缩50倍，说明此轻量级网络设计是可行。</li></ul></li></ul><h3 id="2-MobileNet"><a href="#2-MobileNet" class="headerlink" title="2. MobileNet"></a>2. MobileNet</h3><p>MobileNet 是Google团队于CVPR-2017的论文《MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications》中针对手机等嵌入式设备提出的一种轻量级的深层神经网络，该网络结构在VGG的基础上使用DW+PW的组合，在保证不损失太大精度的同时，降低模型参数量。</p><h4 id="2-1-设计思想"><a href="#2-1-设计思想" class="headerlink" title="2.1 设计思想"></a>2.1 设计思想</h4><ul><li>采用深度可分离卷积代替传统卷积<ul><li>采用DW卷积在减少参数数量的同时提升运算速度。但是由于每个feature map只被一个卷积核卷积，因此经过DW输出的feature map不能只包含输入特征图的全部信息，而且特征之间的信息不能进行交流，导致“信息流通不畅”。</li><li>采用PW卷积实现通道特征信息交流，解决DW卷积导致“信息流通不畅”的问题。</li></ul></li><li>使用stride=2的卷积替换pooling<ul><li>直接在卷积时利用stride=2完成了下采样，从而节省了需要再去用pooling再去进行一次下采样的时间，可以提升运算速度。同时，因为pooling之前需要一个stride=1的 conv，而与stride=2 conv的计算量想比要高近4倍(<strong>个人理解</strong>)。<h4 id="2-2-网络架构"><a href="#2-2-网络架构" class="headerlink" title="2.2 网络架构"></a>2.2 网络架构</h4></li></ul></li><li><p>DW conv和PW conv<br>MobileNet的网络架构主要是由DW conv和PW conv组成，相比于传统卷积可以降低<code>$\dfrac{1}{N} + \dfrac{1}{Dk}$</code>倍的计算量。<br>标准卷积与DW conv和PW conv如图所示:<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/12.png" alt="image"><br>深度可分离卷积与传统卷积运算量对比：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/13.png" alt="image"><br>网络结构：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/14.png" alt="image"></p></li><li><p>MobileNets的架构<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/15.png" alt="image"></p></li></ul><h4 id="2-3-实验结果"><a href="#2-3-实验结果" class="headerlink" title="2.3 实验结果"></a>2.3 实验结果</h4><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/16.png" alt="image"><br>由上表可知，使用相同的结构，深度可分离卷积虽然准确率降低1%，但是参数量减少了6/7。</p><h3 id="3-MobileNet-v2"><a href="#3-MobileNet-v2" class="headerlink" title="3. MobileNet-v2"></a>3. MobileNet-v2</h3><p>MobileNet-V2是2018年1月公开在arXiv上论文《Inverted Residuals and Linear Bottlenecks: Mobile Networks for Classification, Detection and Segmentation》，是对MobileNet-V1的改进，同样是一个轻量化卷积神经网络。</p><h4 id="3-1-设计思想"><a href="#3-1-设计思想" class="headerlink" title="3.1 设计思想"></a>3.1 设计思想</h4><ul><li>采用Inverted residuals<ul><li>为了保证网络可以提取更多的特征，在residual block中第一个1*1 Conv和3*3 DW Conv之前进行通道扩充</li></ul></li><li>Linear bottlenecks<ul><li>为了避免Relu对特征的破坏，在residual block的Eltwise sum之前的那个 1*1 Conv 不再采用Relu</li></ul></li><li>stride=2的conv不使用shot-cot，stride=1的conv使用shot-cut</li></ul><h4 id="3-2-网络架构"><a href="#3-2-网络架构" class="headerlink" title="3.2 网络架构"></a>3.2 网络架构</h4><ul><li>Inverted residuals<br>ResNet中Residuals block先经过1*1的Conv layer，把feature map的通道数降下来，再经过3*3 Conv layer，最后经过一个1*1 的Conv layer，将feature map 通道数再“扩张”回去。即采用先压缩，后扩张的方式。而 inverted residuals采用先扩张，后压缩的方式。<br>MobileNet采用DW conv提取特征，由于DW conv本身提取的特征数就少，再经过传统residuals block进行“压缩”，此时提取的特征数会更少，因此inverted residuals对其进行“扩张”，保证网络可以提取更多的特征。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/17.png" alt="image"></li><li>Linear bottlenecks<br>ReLu激活函数会破坏特征。ReLu对于负的输入，输出全为0，而本来DW conv特征通道已经被“压缩”，再经过ReLu的话，又会损失一部分特征。采用Linear，目的是防止Relu破坏特征。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/18.png" alt="image"></li><li>shortcut<br>stride=2的conv不使用shot-cot，stride=1的conv使用shot-cut<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/19.png" alt="image"></li><li>网络架构<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/20.png" alt="image"></li></ul><h3 id="4-Xception"><a href="#4-Xception" class="headerlink" title="4. Xception"></a>4. Xception</h3><p>Xception是Google提出的，arXiv 的V1 于2016年10月公开《Xception: Deep Learning with Depthwise Separable Convolutions 》，Xception是对Inception v3的另一种改进，主要是采用depthwise separable convolution来替换原来Inception v3中的卷积操作。</p><h4 id="4-1设计思想"><a href="#4-1设计思想" class="headerlink" title="4.1设计思想"></a>4.1设计思想</h4><ul><li>采用depthwise separable convolution来替换原来Inception v3中的卷积操作<br>  与原版的Depth-wise convolution有两个不同之处：<ul><li>第一个：原版Depth-wise convolution，先逐通道卷积，再1<em>1卷积; 而Xception是反过来，先1\</em>1卷积，再逐通道卷积；</li><li>第二个：原版Depth-wise convolution的两个卷积之间是不带激活函数的，而Xception在经过1*1卷积之后会带上一个Relu的非线性激活函数；</li></ul></li></ul><h4 id="4-2网络架构"><a href="#4-2网络架构" class="headerlink" title="4.2网络架构"></a>4.2网络架构</h4><p>feature map在空间和通道上具有一定的相关性，通过Inception模块和非线性激活函数实现通道之间的解耦。增多3*3的卷积的分支的数量，使它与1*1的卷积的输出通道数相等，此时每个3*3的卷积只作用与一个通道的特征图上，作者称之为“极致的Inception（Extream Inception）”模块，这就是Xception的基本模块。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/21.png" alt="image"></p><h3 id="5-ShuffleNet-v1"><a href="#5-ShuffleNet-v1" class="headerlink" title="5. ShuffleNet-v1"></a>5. ShuffleNet-v1</h3><p>ShuffleNet 是Face++团队提出的，晚于MobileNet两个月在arXiv上公开《ShuffleNet： An Extremely Efficient Convolutional Neural Network for Mobile Devices 》用于移动端前向部署的网络架构。ShuffleNet基于MobileNet的group思想，将卷积操作限制到特定的输入通道。而与之不同的是，ShuffleNet将输入的group进行打散，从而保证每个卷积核的感受野能够分散到不同group的输入中，增加了模型的学习能力。</p><h4 id="5-1-设计思想"><a href="#5-1-设计思想" class="headerlink" title="5.1 设计思想"></a>5.1 设计思想</h4><ul><li>采用group conv减少大量参数<ul><li>roup conv与DW conv存在相同的“信息流通不畅”问题 </li></ul></li><li>采用channel shuffle解决上述问题<ul><li>MobileNet中采用PW conv解决上述问题，SheffleNet中采用channel shuffle</li></ul></li><li>采用concat替换add操作<ul><li>avg pooling和DW conv(s=2)会减小feature map的分辨率，采用concat增加通道数从而弥补分辨率减小而带来信息的损失</li></ul></li></ul><h4 id="5-2-网络架构"><a href="#5-2-网络架构" class="headerlink" title="5.2 网络架构"></a>5.2 网络架构</h4><p>MobileNet中1*1卷积的操作占据了约95%的计算量，所以作者将1*1也更改为group卷积，使得相比MobileNet的计算量大大减少。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/22.png" alt="image"><br>group卷积与DW存在同样使“通道信息交流不畅”的问题，MobileNet中采用PW conv解决上述问题，SheffleNet中采用channel shuffle。<br>ShuffleNet的shuffle操作如图所示<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/24.png" alt="image"><br>avg pooling和DW conv(s=2)会减小feature map的分辨率，采用concat增加通道数从而弥补分辨率减小而带来信息的损失；实验表明：多多使用通道(提升通道的使用率)，有助于提高小模型的准确率。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/23.png" alt="image"><br>网络结构：<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/25.png" alt="image"></p><h3 id="6-ShuffleNet-v2"><a href="#6-ShuffleNet-v2" class="headerlink" title="6. ShuffleNet-v2"></a>6. ShuffleNet-v2</h3><p>huffleNet-v2 是Face++团队提出的《ShuffleNet V2: Practical Guidelines for Ecient CNN Architecture Design》，旨在设计一个轻量级但是保证精度、速度的深度网络。</p><h4 id="6-1-设计思想"><a href="#6-1-设计思想" class="headerlink" title="6.1 设计思想"></a>6.1 设计思想</h4><ul><li>文中提出影响神经网络速度的4个因素：<ul><li>a. FLOPs(FLOPs就是网络执行了多少multiply-adds操作)</li><li>b. MAC(内存访问成本)</li><li>c. 并行度(如果网络并行度高，速度明显提升)</li><li>d. 计算平台(GPU，ARM)</li></ul></li><li>ShuffleNet-v2 提出了4点网络结构设计策略：<ul><li>G1.输入输出的channel相同时，MAC最小</li><li>G2.过度的组卷积会增加MAC</li><li>G3.网络碎片化会降低并行度</li><li>G4.元素级运算不可忽视  </li></ul></li></ul><h4 id="6-2-网络结构"><a href="#6-2-网络结构" class="headerlink" title="6.2 网络结构"></a>6.2 网络结构</h4><p>depthwise convolution 和 瓶颈结构增加了 MAC，用了太多的 group，跨层连接中的 element-wise Add 操作也是可以优化的点。所以在 shuffleNet V2 中增加了几种新特性。<br>所谓的 channel split 其实就是将通道数一分为2，化成两分支来代替原先的分组卷积结构（G2），并且每个分支中的卷积层都是保持输入输出通道数相同（G1），其中一个分支不采取任何操作减少基本单元数（G3），最后使用了 concat 代替原来的 elementy-wise add，并且后面不加 ReLU 直接（G4），再加入channle shuffle 来增加通道之间的信息交流。 对于下采样层，在这一层中对通道数进行翻倍。 在网络结构的最后，即平均值池化层前加入一层 1x1 的卷积层来进一步的混合特征。<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/26.png" alt="image"><br>网络结构<br><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/27.png" alt="image"></p><h4 id="6-4-ShuffleNet-v2具有高精度的原因"><a href="#6-4-ShuffleNet-v2具有高精度的原因" class="headerlink" title="6.4  ShuffleNet-v2具有高精度的原因"></a>6.4  ShuffleNet-v2具有高精度的原因</h4><ul><li>由于高效，可以增加更多的channel，增加网络容量</li><li>采用split使得一部分特征直接与下面的block相连，特征复用(DenseNet)</li></ul><h2 id="17-7-现有移动端开源框架及其特点"><a href="#17-7-现有移动端开源框架及其特点" class="headerlink" title="17.7 现有移动端开源框架及其特点"></a>17.7 现有移动端开源框架及其特点</h2><h3 id="17-7-1-NCNN"><a href="#17-7-1-NCNN" class="headerlink" title="17.7.1 NCNN"></a>17.7.1 NCNN</h3><p>１、开源时间：2017年7月　　　</p><p>２、开源用户：腾讯优图　　　　</p><p>３、GitHub地址：<a href="https://github.com/Tencent/ncnn" target="_blank" rel="noopener">https://github.com/Tencent/ncnn</a> 　　</p><p>4、特点：</p><ul><li>1）NCNN考虑了手机端的硬件和系统差异以及调用方式，架构设计以手机端运行为主要原则。</li><li>2）无第三方依赖，跨平台，手机端 CPU 的速度快于目前所有已知的开源框架（以开源时间为参照对象）。</li><li>3）基于 ncnn，开发者能够将深度学习算法轻松移植到手机端高效执行，开发出人工智能 APP。   </li></ul><p>5、功能：    </p><ul><li>1、NCNN支持卷积神经网络、多分支多输入的复杂网络结构，如vgg、googlenet、resnet、squeezenet 等。</li><li>2、NCNN无需依赖任何第三方库。    </li><li>3、NCNN全部使用C/C++实现，以及跨平台的cmake编译系统，可轻松移植到其他系统和设备上。    </li><li>4、汇编级优化，计算速度极快。使用ARM NEON指令集实现卷积层，全连接层，池化层等大部分 CNN 关键层。 </li><li>5、精细的数据结构设计，没有采用需消耗大量内存的通常框架——im2col + 矩阵乘法，使得内存占用极低。   </li><li>6、支持多核并行计算，优化CPU调度。   </li><li>7、整体库体积小于500K，可精简到小于300K。   </li><li>8、可扩展的模型设计，支持8bit 量化和半精度浮点存储。   </li><li>9、支持直接内存引用加载网络模型。   </li><li>10、可注册自定义层实现并扩展。   </li></ul><p>6、NCNN在Android端部署示例</p><ul><li>1）选择合适的Android Studio版本并安装。</li><li>2）根据需求选择NDK版本并安装。</li><li>3）在Android Studio上配置NDK的环境变量。</li><li>4）根据自己需要编译NCNN sdk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build-android cd build-android cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \ -DANDROID_ABI=&quot;armeabi-v7a&quot; -DANDROID_ARM_NEON=ON \ -DANDROID_PLATFORM=android-14 .. make make install</span><br></pre></td></tr></table></figure><p>​    安装完成之后，install下有include和lib两个文件夹。</p><p>​    备注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_ABI 是架构名字，&quot;armeabi-v7a&quot; 支持绝大部分手机硬件 </span><br><span class="line">ANDROID_ARM_NEON 是否使用 NEON 指令集，设为 ON 支持绝大部分手机硬件 </span><br><span class="line">ANDROID_PLATFORM 指定最低系统版本，&quot;android-14&quot; 就是 android-4.0</span><br></pre></td></tr></table></figure><ul><li>5）进行NDK开发。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）assets文件夹下放置你的bin和param文件。</span><br><span class="line">2）jni文件夹下放置你的cpp和mk文件。</span><br><span class="line">3）修改你的app gradle文件。</span><br><span class="line">4）配置Android.mk和Application.mk文件。</span><br><span class="line">5）进行java接口的编写。</span><br><span class="line">6）读取拷贝bin和param文件（有些则是pb文件，根据实际情况）。</span><br><span class="line">7）进行模型的初始化和执行预测等操作。</span><br><span class="line">8）build。</span><br><span class="line">9）cd到src/main/jni目录下，执行ndk-build，生成.so文件。</span><br><span class="line">10）接着就可写自己的操作处理需求。</span><br></pre></td></tr></table></figure><h3 id="17-7-2-QNNPACK"><a href="#17-7-2-QNNPACK" class="headerlink" title="17.7.2 QNNPACK"></a>17.7.2 QNNPACK</h3><p>全称：Quantized Neural Network PACKage（量化神经网络包）　　　</p><p>１、开源时间：2018年10月　　　</p><p>２、开源用户：Facebook　　　　</p><p>３、GitHub地址：<a href="https://github.com/pytorch/QNNPACK" target="_blank" rel="noopener">https://github.com/pytorch/QNNPACK</a>　　　　</p><p>４、特点：　　　</p><p>​    １）低密度卷积优化函数库；　　　</p><p>　    ２）可在手机上实时运行Mask R-CNN 和 DensePose;</p><p>​    ３） 能在性能受限的移动设备中用 100ms 以内的时间实施图像分类；　　　</p><p>5、QNNPACK 如何提高效率？</p><p>1)<strong>QNNPACK 使用与安卓神经网络 API 兼容的线性量化方案</strong></p><p>QNNPACK 的输入矩阵来自低精度、移动专用的计算机视觉模型。其它库在计算A和B矩阵相乘时，重新打包 A 和 B 矩阵以更好地利用缓存层次结构，希望在大量计算中分摊打包开销，QNNPACK 删除所有计算非必需的内存转换，针对 A和B矩阵相乘适用于一级缓存的情况进行了优化。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/QNNPACK1.jpeg" alt=""></p><p>​    在量化矩阵-矩阵乘法中，8  位整数的乘积通常会被累加至 32 位的中间结果中，随后重新量化以产生 8 位的输出。常规的实现会对大矩阵尺寸进行优化——有时 K 太大无法将 A  和 B 的面板转入缓存中。为了有效利用缓存层次结构，传统的 GEMM 实现将 A 和 B 的面板沿 K  维分割成固定大小的子面板，从而每个面板都适应 L1 缓存，随后为每个子面板调用微内核。这一缓存优化需要 PDOT 为内核输出 32  位中间结果，最终将它们相加并重新量化为 8 位整数。</p><p>​    由于  ONNPACK 对于面板 A 和 B 总是适应 L1 缓存的移动神经网络进行了优化，因此它在调用微内核时处理整个 A 和 B  的面板。而由于无需在微内核之外积累 32 位的中间结果，QNNPACK 会将 32 位的中间结果整合进微内核中并写出 8  位值，这节省了内存带宽和缓存占用。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/QNNPACK2.jpeg" alt=""></p><p>使整个 A、B  面板适配缓存帮助实现了 QNNPACK 中的另一个优化：取消了矩阵 A 的重新打包。矩阵 B 包含静态权重，可以一次性转换成任何内存布局，但矩阵  A 包含卷积输入，每次推理运行都会改变。因此，重新打包矩阵 A 在每次运行时都会产生开销。尽管存在开销，传统的 GEMM  实现还是出于以下两个原因对矩阵 A 进行重新打包：缓存关联性及微内核效率受限。如果不重新打包，微内核将不得不读取被潜在的大跨距隔开的几行  A。如果这个跨距恰好是 2 的许多次幂的倍数，面板中不同行 A  的元素可能会落入同一缓存集中。如果冲突的行数超过了缓存关联性，它们就会相互驱逐，性能也会大幅下降。幸运的是，当面板适配一级缓存时，这种情况不会发生，就像  QNNPACK 优化的模型一样。</p><p>打包对微内核效率的影响与当前所有移动处理器支持的  SIMD  向量指令的使用密切相关。这些指令加载、存储或者计算小型的固定大小元素向量，而不是单个标量（scalar）。在矩阵相乘中，充分利用向量指令达到高性能很重要。在传统的  GEMM 实现中，微内核把 MR 元素重新打包到向量暂存器里的 MR 线路中。在 QNNPACK 实现中，MR  元素在存储中不是连续的，微内核需要把它们加载到不同的向量暂存器中。越来越大的暂存器压力迫使 QNNPACK 使用较小的 MRxNR  拼贴，但实际上这种差异很小，而且可以通过消除打包开销来补偿。例如，在 32 位 ARM 架构上，QNNPACK 使用 4×8 微内核，其中  57% 的向量指令是乘-加；另一方面，gemmlowp 库使用效率稍高的 4×12 微内核，其中 60% 的向量指令是乘-加。</p><p>微内核加载 A  的多个行，乘以 B 的满列，结果相加，然后完成再量化并记下量化和。A 和 B 的元素被量化为 8 位整数，但乘积结果相加到 32 位。大部分  ARM 和 ARM64 处理器没有直接完成这一运算的指令，所以它必须分解为多个支持运算。QNNPACK  提供微内核的两个版本，其不同之处在于用于乘以 8 位值并将它们累加到 32 位的指令序列。</p><p>2)<strong>从矩阵相乘到卷积</strong></p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/QNNPACK3.jpeg" alt=""></p><p>简单的 1×1  卷积可直接映射到矩阵相乘，但对于具备较大卷积核、padding 或子采样（步幅）的卷积而言则并非如此。但是，这些较复杂的卷积能够通过记忆变换  im2col 映射到矩阵相乘。对于每个输出像素，im2col 复制输入图像的图像块并将其计算为 2D 矩阵。由于每个输出像素都受 KHxKWxC  输入像素值的影响（KH 和 KW 分别指卷积核的高度和宽度，C 指输入图像中的通道数），因此该矩阵的大小是输入图像的 KHxKW  倍，im2col 给内存占用和性能都带来了一定的开销。和 Caffe 一样，大部分深度学习框架转而使用基于 im2col  的实现，利用现有的高度优化矩阵相乘库来执行卷积操作。</p><p>Facebook  研究者在 QNNPACK 中实现了一种更高效的算法。他们没有变换卷积输入使其适应矩阵相乘的实现，而是调整 PDOT 微内核的实现，在运行中执行  im2col 变换。这样就无需将输入张量的实际输入复制到 im2col 缓存，而是使用输入像素行的指针设置 indirection  buffer，输入像素与每个输出像素的计算有关。研究者还修改了矩阵相乘微内核，以便从 indirection buffer  加载虚构矩阵（imaginary matrix）A 的行指针，indirection buffer 通常比 im2col buffer  小得多。此外，如果两次推断运行的输入张量存储位置不变，则 indirection buffer  还可使用输入张量行的指针进行初始化，然后在多次推断运行中重新使用。研究者观察到具备 indirection buffer 的微内核不仅消除了  im2col 变换的开销，其性能也比矩阵相乘微内核略好（可能由于输入行在计算不同输出像素时被重用）。</p><p>3)<strong>深度卷积</strong></p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/QNNPACK4.jpeg" alt=""></p><p>分组卷积（grouped   convolution）将输入和输出通道分割成多组，然后对每个组进行分别处理。在有限条件下，当组数等于通道数时，该卷积就是深度卷积，常用于当前的神经网络架构中。深度卷积对每个通道分别执行空间滤波，展示了与正常卷积非常不同的计算模式。因此，通常要向深度卷积提供单独实现，QNNPACK  包括一个高度优化版本 3×3 深度卷积。</p><p>深度卷积的传统实现是每次都在卷积核元素上迭代，然后将一个卷积核行和一个输入行的结果累加到输出行。对于一个  3×3 的深度卷积，此类实现将把每个输出行更新 9 次。在 QNNPACK 中，研究者计算所有 3×3 卷积核行和 3×3  输入行的结果，一次性累加到输出行，然后再处理下个输出行。</p><p>QNNPACK  实现高性能的关键因素在于完美利用通用暂存器（GPR）来展开卷积核元素上的循环，同时避免在 hot loop 中重新加载地址寄存器。32-bit  ARM 架构将实现限制在 14 个 GPR。在 3×3 深度卷积中，需要读取 9 个输入行和 9 个卷积核行。这意味着如果想完全展开循环必须存储  18 个地址。然而，实践中推断时卷积核不会发生变化。因此 Facebook 研究者使用之前在 CxKHxKW 中的滤波器，将它们封装进  [C/8]xKWxKHx8，这样就可以仅使用具备地址增量（address increment）的一个 GPR 访问所有滤波器。（研究者使用数字 8  的原因在于，在一个命令中加载 8 个元素然后减去零，在 128-bit NEON 暂存器中生成 8 个 16-bit 值。）然后使用 9  个输入行指针，指针将滤波器重新装进 10 个 GPR，完全展开滤波器元素上的循环。64-bit ARM 架构相比 32-bit 架构，GPR  的数量翻了一倍。QNNPACK 利用额外的 ARM64 GPR，一次性存储 3×5 输入行的指针，并计算 3 个输出行。</p><p>7、性能优势：</p><p>​    测试结果显示出 QNNPACK 在端到端基准上的性能优势。在量化当前最优 MobileNetV2 架构上，基于QNNPACK 的 Caffe2 算子的速度大约是 TensorFlow Lite 速度的 2 倍，在多种手机上都是如此。除了 QNNPACK 之外，Facebook 还开源了 Caffe2 quantized MobileNet v2 模型，其 top-1 准确率比相应的 TensorFlow 模型高出 1.3%。    </p><p><strong>MobileNetV1</strong></p><p>MobileNetV1  架构在使用深度卷积（depthwise convolution）使模型更适合移动设备方面具备开创性。MobileNetV1 包括几乎整个  1×1 卷积和 3×3 卷积。Facebook 研究者将量化 MobileNetV1 模型从 TensorFlow Lite 转换而来，并在  TensorFlow Lite 和 QNNPACK 的 32-bit ARM 设备上对 MobileNetV1 进行基准测试。二者运行时均使用 4  线程，研究者观察到 QNNPACK 的运行速度几何平均值是 TensorFlow Lite 的 1.8 倍。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/mv1.jpg" alt=""></p><p><strong>MobileNetV2</strong></p><p>作为移动视觉任务的当前最优架构之一，MobileNetV2  引入了瓶颈构造块和瓶颈之间的捷径连接。研究者在 MobileNetV2 分类模型的量化版上对比基于 QNNPACK 的 Caffe2 算子和  TensorFlow Lite 实现。使用的量化 Caffe2 MobileNetV2 模型已开源，量化 TensorFlow Lite  模型来自官方库：<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/g3doc/models.md。下表展示了二者在常用测试集上的" target="_blank" rel="noopener">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/g3doc/models.md。下表展示了二者在常用测试集上的</a>  top1 准确率：</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/mv2.jpg" alt=""></p><p>​    Facebook 研究者利用这些模型建立了 Facebook AI 性能评估平台（<a href="https://github.com/facebook/FAI-PEP）的基准，该基准基于" target="_blank" rel="noopener">https://github.com/facebook/FAI-PEP）的基准，该基准基于</a> 32-bit ARM 环境的大量手机设备。对于 TensorFlow Lite 线程设置，研究者尝试了一到四个线程，并报告了最快速的结果。结果显示 TensorFlow Lite 使用四线程的性能最优，因此后续研究中使用四线程来对比 TensorFlow Lite 和 QNNPACK。下表展示了结果，以及在典型智能手机和高端机上，基于 QNNPACK 的算子速度比 TensorFlow Lite 快得多。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/mv3.jpg" alt=""></p><p>Facebook开源高性能内核库QNNPACK<br><a href="https://baijiahao.baidu.com/s?id=1615725346726413945&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1615725346726413945&amp;wfr=spider&amp;for=pc</a><br><a href="http://www.sohu.com/a/272158070_610300" target="_blank" rel="noopener">http://www.sohu.com/a/272158070_610300</a></p><p>支持移动端深度学习的几种开源框架<br><a href="https://blog.csdn.net/zchang81/article/details/74280019" target="_blank" rel="noopener">https://blog.csdn.net/zchang81/article/details/74280019</a></p><h3 id="17-7-3-Prestissimo"><a href="#17-7-3-Prestissimo" class="headerlink" title="17.7.3 Prestissimo"></a>17.7.3 Prestissimo</h3><p>１、开源时间：2017年11月　　　</p><p>２、开源用户：九言科技　　　　</p><p>３、GitHub地址：<a href="https://github.com/in66-dev/In-Prestissimo" target="_blank" rel="noopener">https://github.com/in66-dev/In-Prestissimo</a>　　</p><p>４、功能特点：　</p><p><strong>基础功能</strong></p><ul><li>支持卷积神经网络，支持多输入和多分支结构</li><li>精炼简洁的API设计，使用方便</li><li>提供调试接口，支持打印各个层的数据以及耗时</li><li>不依赖任何第三方计算框架，整体库体积 500K 左右（32位 约400k，64位 约600k）</li><li>纯 C++ 实现，跨平台，支持 android 和 ios</li><li>模型为纯二进制文件，不暴露开发者设计的网络结构</li></ul><p><strong>极快的速度</strong></p><ul><li>大到框架设计，小到汇编书写上全方位的优化，iphone7 上跑 SqueezeNet 仅需 26ms（单线程）</li><li>支持浮点(float)和整型(int)两种运算模式，float模式精度与caffe相同，int模式运算速度快，大部分网络用int的精度便已经足够</li><li>以巧妙的内存布局提升cpu的cache命中率，在中低端机型上性能依然强劲</li><li>针对 float-arm32, float-arm64, int-arm32, int-arm64 四个分支均做了细致的优化，保证arm32位和arm64位版本都有非常好的性能</li></ul><p><strong>SqueezeNet-v1.1 测试结果</strong></p><p><strong>Note</strong>: 手机测试性能存在一定的抖动，连续多次运算取平均时间</p><p><strong>Note</strong>: 像华为mate8, mate9，Google nexus 6 虽然是64位的CPU，但测试用的是 32位的库，因此cpu架构依然写 arm-v7a</p><table><thead><tr><th style="text-align:center">CPU架构</th><th style="text-align:center">机型</th><th style="text-align:center">CPU</th><th style="text-align:center">ncnn（4线程）</th><th style="text-align:center">mdl</th><th style="text-align:center">Prestissimo_float(单线程)</th><th style="text-align:center">Prestissimo_int(单线程)</th></tr></thead><tbody><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">小米2</td><td style="text-align:center">高通APQ8064 1.5GHz</td><td style="text-align:center">185 ms</td><td style="text-align:center">370 ms</td><td style="text-align:center">184 ms</td><td style="text-align:center">115 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">小米2s</td><td style="text-align:center">四核 骁龙APQ8064 Pro 1.7GHz</td><td style="text-align:center">166 ms</td><td style="text-align:center">-</td><td style="text-align:center">136 ms</td><td style="text-align:center">96 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">红米Note 4x</td><td style="text-align:center">骁龙625 四核2.0GHz</td><td style="text-align:center">124 ms</td><td style="text-align:center">306 ms</td><td style="text-align:center">202 ms</td><td style="text-align:center">110 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">Google Nexus 6</td><td style="text-align:center">骁龙805 四核 2.7GHz</td><td style="text-align:center">84 ms</td><td style="text-align:center">245 ms</td><td style="text-align:center">103 ms</td><td style="text-align:center">63 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">Vivo x6d</td><td style="text-align:center">联发科 MT6752 1.7GHz</td><td style="text-align:center">245 ms</td><td style="text-align:center">502 ms</td><td style="text-align:center">370 ms</td><td style="text-align:center">186 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">华为 Mate 8</td><td style="text-align:center">海思麒麟950 4大4小 2.3GHz 1.8GHz</td><td style="text-align:center">75 ms</td><td style="text-align:center">180 ms</td><td style="text-align:center">95 ms</td><td style="text-align:center">57 ms</td></tr><tr><td style="text-align:center">arm-v7a</td><td style="text-align:center">华为 Mate 9</td><td style="text-align:center">海思麒麟960 4大4小 2.4GHz 1.8GHz</td><td style="text-align:center">61 ms</td><td style="text-align:center">170 ms</td><td style="text-align:center">94 ms</td><td style="text-align:center">48 ms</td></tr><tr><td style="text-align:center">arm-v8</td><td style="text-align:center">iphone7</td><td style="text-align:center">Apple A10 Fusion 2.34GHz</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">27 ms</td><td style="text-align:center">26 ms</td></tr></tbody></table><p><strong>未开放特性</strong></p><ul><li>多核并行加速（多核机器可以再提升30%-100% 的速度）</li><li>depthwise卷积运算（支持mobilenet）</li><li>模型压缩功能，压缩后的模型体积可缩小到20%以下</li><li>GPU 运算模式（Android 基于opengl es 3.1，ios 基于metal）</li></ul><p><strong>同类框架对比</strong></p><table><thead><tr><th style="text-align:center">框架</th><th style="text-align:center">caffe</th><th style="text-align:center">tensorflow</th><th style="text-align:center">mdl-android</th><th style="text-align:center">mdl-ios</th><th style="text-align:center">ncnn</th><th style="text-align:center">CoreML</th><th style="text-align:center">Prestissimo</th></tr></thead><tbody><tr><td style="text-align:center">计算硬件</td><td style="text-align:center">cpu</td><td style="text-align:center">cpu</td><td style="text-align:center">cpu</td><td style="text-align:center">gpu</td><td style="text-align:center">cpu</td><td style="text-align:center">gpu</td><td style="text-align:center">cpu （gpu版本未开放）</td></tr><tr><td style="text-align:center">计算速度</td><td style="text-align:center">慢</td><td style="text-align:center">慢</td><td style="text-align:center">慢</td><td style="text-align:center">很快</td><td style="text-align:center">很快</td><td style="text-align:center">极快</td><td style="text-align:center">极快</td></tr><tr><td style="text-align:center">库大小</td><td style="text-align:center">大</td><td style="text-align:center">较大</td><td style="text-align:center">中等</td><td style="text-align:center">小</td><td style="text-align:center">小</td><td style="text-align:center">小</td><td style="text-align:center">小</td></tr><tr><td style="text-align:center">兼容性</td><td style="text-align:center">好</td><td style="text-align:center">好</td><td style="text-align:center">好</td><td style="text-align:center">限ios8以上</td><td style="text-align:center">很好</td><td style="text-align:center">仅支持 ios11</td><td style="text-align:center">很好</td></tr><tr><td style="text-align:center">模型支持度</td><td style="text-align:center">很好</td><td style="text-align:center">好</td><td style="text-align:center">-</td><td style="text-align:center">差（仅限指定模型）</td><td style="text-align:center">较好</td><td style="text-align:center">-</td><td style="text-align:center">中等（当前版本不支持mobilenet）</td></tr></tbody></table><p><strong>使用方法-模型转换</strong></p><p>绝影支持的是私有的模型文件格式，需要把 caffe 训练出来的模型转换为 .prestissimo 格式，模型转换工具为 caffe2Prestissimo.out。caffe2Prestissimo.out 依赖 protobuf 3.30。将 XXX.prototxt 和 YYY.caffemodel 转化为 Prestissimo 模型 ZZZ.prestissimo：（得到）./caffe2Prestissimo.out XXX.prototxt YYY.caffemodel ZZZ.prestissimo</p><h3 id="17-7-4-MDL（mobile-deep-learning）"><a href="#17-7-4-MDL（mobile-deep-learning）" class="headerlink" title="17.7.4 MDL（mobile-deep-learning）"></a>17.7.4 MDL（mobile-deep-learning）</h3><p>１、开源时间：2017年9月（已暂停更新）　　　</p><p>２、开源用户：百度　　　　</p><p>３、GitHub地址：<a href="https://github.com/allonli/mobile-deep-learning" target="_blank" rel="noopener">https://github.com/allonli/mobile-deep-learning</a></p><p>４、功能特点：</p><ul><li>一键部署，脚本参数就可以切换ios或者android</li><li>支持iOS  gpu运行MobileNet、squeezenet模型</li><li>已经测试过可以稳定运行MobileNet、GoogLeNet v1、squeezenet、ResNet-50模型</li><li>体积极小，无任何第三方依赖。纯手工打造。</li><li>提供量化函数，对32位float转8位uint直接支持，模型体积量化后4M上下</li><li>与ARM相关算法团队线上线下多次沟通，针对ARM平台会持续优化</li><li>NEON使用涵盖了卷积、归一化、池化所有方面的操作</li><li>汇编优化，针对寄存器汇编操作具体优化</li><li>loop unrolling 循环展开，为提升性能减少不必要的CPU消耗，全部展开判断操作</li><li>将大量繁重的计算任务前置到overhead过程</li></ul><p>5、框架结构</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/MDL1.png" alt=""></p><p>MDL 框架主要包括：<strong>模型转换模块（MDL Converter）、模型加载模块（Loader）、网络管理模块（Net）、矩阵运算模块（Gemmers）及供 Android 端调用的 JNI 接口层（JNI Interfaces）。</strong></p><p>​    其中，模型转换模块主要负责将Caffe 模型转为 MDL 模型，同时支持将 32bit 浮点型参数量化为 8bit 参数，从而极大地压缩模型体积；模型加载模块主要完成模型的反量化及加载校验、网络注册等过程，网络管理模块主要负责网络中各层 Layer 的初始化及管理工作；MDL 提供了供 Android 端调用的 JNI 接口层，开发者可以通过调用 JNI 接口轻松完成加载及预测过程。</p><p>6、MDL 的性能及兼容性</p><ul><li>体积 armv7 300k+</li><li>速度 iOS GPU mobilenet 可以达到 40ms、squeezenet 可以达到 30ms</li></ul><p>​        MDL  从立项到开源，已经迭代了一年多。移动端比较关注的多个指标都表现良好，如体积、功耗、速度。百度内部产品线在应用前也进行过多次对比，和已开源的相关项目对比，MDL  能够在保证速度和能耗的同时支持多种深度学习模型，如 mobilenet、googlenet v1、squeezenet 等，且具有 iOS  GPU 版本，squeezenet 一次运行最快可以达到 3-40ms。</p><p><strong>同类框架对比</strong></p><p>​     框架Caffe2TensorFlowncnnMDL(CPU)MDL(GPU)硬件CPUCPUCPUCPUGPU速度慢慢快快极快体积大大小小小兼容Android&amp;iOSAndroid&amp;iOSAndroid&amp;iOSAndroid&amp;iOSiOS</p><p>​     与支持 CNN 的移动端框架对比，MDL 速度快、性能稳定、兼容性好、demo 完备。</p><p><strong>兼容性</strong></p><p>​     MDL 在 iOS 和 Android 平台均可以稳定运行，其中 iOS10 及以上平台有基于 GPU 运算的 API，性能表现非常出色，在 Android 平台则是纯 CPU 运行。高中低端机型运行状态和手机百度及其他 App 上的覆盖都有绝对优势。</p><p>​     MDL 同时也支持 Caffe 模型直接转换为 MDL 模型。</p><h3 id="17-7-5-Paddle-Mobile"><a href="#17-7-5-Paddle-Mobile" class="headerlink" title="17.7.5 Paddle-Mobile"></a>17.7.5 Paddle-Mobile</h3><p>１、开源时间：持续更新，已到3.0版本　　　</p><p>２、开源用户：百度　　　　</p><p>３、GitHub地址：<a href="https://github.com/PaddlePaddle/paddle-mobile" target="_blank" rel="noopener">https://github.com/PaddlePaddle/paddle-mobile</a>　</p><p>４、功能特点：</p><p><strong>功能特点</strong></p><ul><li><p>高性能支持ARM CPU </p></li><li><p>支持Mali GPU</p></li><li><p>支持Andreno GPU</p></li><li><p>支持苹果设备的GPU Metal实现</p></li><li><p>支持ZU5、ZU9等FPGA开发板</p></li><li><p>支持树莓派等arm-linux开发板</p></li></ul><h3 id="17-7-6-MACE（-Mobile-AI-Compute-Engine）"><a href="#17-7-6-MACE（-Mobile-AI-Compute-Engine）" class="headerlink" title="17.7.6 MACE（ Mobile AI Compute Engine）"></a>17.7.6 MACE（ Mobile AI Compute Engine）</h3><p>１、开源时间：2018年4月(持续更新，v0.9.0 (2018-07-20))　　　</p><p>２、开源用户：小米　　　　</p><p>３、GitHub地址：<a href="https://github.com/XiaoMi/mace" target="_blank" rel="noopener">https://github.com/XiaoMi/mace</a>    </p><p>４、简介：Mobile AI Compute Engine (MACE) 是一个专为移动端异构计算设备优化的深度学习前向预测框架。<br>MACE覆盖了常见的移动端计算设备（CPU，GPU和DSP），并且提供了完整的工具链和文档，用户借助MACE能够很方便地在移动端部署深度学习模型。MACE已经在小米内部广泛使用并且被充分验证具有业界领先的性能和稳定性。</p><p>5、MACE的基本框架：</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/mace-arch.png" alt=""></p><p><strong>MACE Model</strong></p><p>MACE定义了自有的模型格式（类似于Caffe2），通过MACE提供的工具可以将Caffe和TensorFlow的模型 转为MACE模型。</p><p><strong>MACE Interpreter</strong></p><p>MACE Interpreter主要负责解析运行神经网络图（DAG）并管理网络中的Tensors。</p><p><strong>Runtime</strong></p><p>CPU/GPU/DSP Runtime对应于各个计算设备的算子实现。</p><p>6、MACE使用的基本流程</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/mace-work-flow-zh.png" alt=""></p><p><strong>1. 配置模型部署文件(.yml)</strong></p><p>模型部署文件详细描述了需要部署的模型以及生成库的信息，MACE根据该文件最终生成对应的库文件。</p><p><strong>2.编译MACE库</strong></p><p>编译MACE的静态库或者动态库。</p><p><strong>3.转换模型</strong></p><p>将TensorFlow 或者 Caffe的模型转为MACE的模型。</p><p><strong>4.1. 部署</strong></p><p>根据不同使用目的集成Build阶段生成的库文件，然后调用MACE相应的接口执行模型。</p><p><strong>4.2. 命令行运行</strong></p><p>MACE提供了命令行工具，可以在命令行运行模型，可以用来测试模型运行时间，内存占用和正确性。</p><p><strong>4.3. Benchmark</strong></p><p>MACE提供了命令行benchmark工具，可以细粒度的查看模型中所涉及的所有算子的运行时间。</p><p>7、MACE在哪些角度进行了优化?</p><p><strong>MACE</strong> 专为移动端异构计算平台优化的神经网络计算框架。主要从以下的角度做了专门的优化：</p><ul><li>性能<ul><li>代码经过NEON指令，OpenCL以及Hexagon HVX专门优化，并且采用<br><a href="https://arxiv.org/abs/1509.09308" target="_blank" rel="noopener">Winograd算法</a>来进行卷积操作的加速。<br>此外，还对启动速度进行了专门的优化。</li></ul></li><li><p>功耗</p><ul><li>支持芯片的功耗管理，例如ARM的big.LITTLE调度，以及高通Adreno GPU功耗选项。</li></ul></li><li>系统响应<ul><li>支持自动拆解长时间的OpenCL计算任务，来保证UI渲染任务能够做到较好的抢占调度，<br>从而保证系统UI的相应和用户体验。</li></ul></li><li>内存占用<ul><li>通过运用内存依赖分析技术，以及内存复用，减少内存的占用。另外，保持尽量少的外部<br>依赖，保证代码尺寸精简。</li></ul></li><li><p>模型加密与保护</p><ul><li>模型保护是重要设计目标之一。支持将模型转换成C++代码，以及关键常量字符混淆，增加逆向的难度。</li></ul></li><li>硬件支持范围<ul><li>支持高通，联发科，以及松果等系列芯片的CPU，GPU与DSP(目前仅支持Hexagon)计算加速。</li><li>同时支持在具有POSIX接口的系统的CPU上运行。</li></ul></li></ul><p>8、性能对比：</p><p>MACE 支持 TensorFlow 和 Caffe 模型，提供转换工具，可以将训练好的模型转换成专有的模型数据文件，同时还可以选择将模型转换成C++代码，支持生成动态库或者静态库，提高模型保密性。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/maca_com.jpg" alt=""></p><h3 id="17-7-7-FeatherCNN"><a href="#17-7-7-FeatherCNN" class="headerlink" title="17.7.7 FeatherCNN"></a>17.7.7 FeatherCNN</h3><p>１、开源时间：持续更新，已到3.0版本　　　</p><p>２、开源用户：腾讯AI　　　　</p><p>３、GitHub地址：<a href="https://github.com/Tencent/FeatherCNN" target="_blank" rel="noopener">https://github.com/Tencent/FeatherCNN</a></p><p>４、功能特点：</p><p><strong>FeatherCNN 是由腾讯 AI 平台部研发的基于 ARM 架构的高效 CNN 推理库，该项目支持 Caffe 模型，且具有高性能、易部署、轻量级三大特性。</strong></p><p><strong>该项目具体特性如下：</strong></p><ul><li><p>高性能：无论是在移动设备（iOS / Android），嵌入式设备（Linux）还是基于 ARM 的服务器（Linux）上，FeatherCNN 均能发挥最先进的推理计算性能；</p></li><li><p>易部署：FeatherCNN 的所有内容都包含在一个代码库中，以消除第三方依赖关系。因此，它便于在移动平台上部署。FeatherCNN 自身的模型格式与 Caffe 模型完全兼容。</p></li><li><p>轻量级：编译后的 FeatherCNN 库的体积仅为数百 KB。</p></li></ul><h3 id="17-7-8-TensorFlow-Lite"><a href="#17-7-8-TensorFlow-Lite" class="headerlink" title="17.7.8 TensorFlow Lite"></a>17.7.8 TensorFlow Lite</h3><p>１、开源时间：2017年11月　　　</p><p>２、开源用户：谷歌　　　</p><p>３、GitHub地址：<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite" target="_blank" rel="noopener">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite</a></p><p>４、简介：</p><p>Google 表示 Lite 版本 TensorFlow 是 TensorFlow Mobile 的一个延伸版本。此前，通过TensorFlow Mobile API，TensorFlow已经支持手机上的模型嵌入式部署。TensorFlow Lite应该被视为TensorFlow Mobile的升级版。</p><p>TensorFlow Lite可以与Android 8.1中发布的神经网络API完美配合，即便在没有硬件加速时也能调用CPU处理，确保模型在不同设备上的运行。 而Android端版本演进的控制权是掌握在谷歌手中的，从长期看，TensorFlow Lite会得到Android系统层面上的支持。</p><p>5、架构：</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/tflite_artc.JPEG" alt=""></p><p>其组件包括：</p><ul><li>TensorFlow 模型（TensorFlow Model）：保存在磁盘中的训练模型。</li><li>TensorFlow Lite 转化器（TensorFlow Lite Converter）：将模型转换成 TensorFlow Lite 文件格式的项目。</li><li>TensorFlow Lite 模型文件（TensorFlow Lite Model File）：基于 FlatBuffers，适配最大速度和最小规模的模型。</li></ul><p>6、移动端开发步骤：</p><p>Android Studio 3.0, SDK Version API26, NDK Version 14</p><p>步骤：</p><ol><li><p>将此项目导入到Android Studio：<br><a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite/java/demo" target="_blank" rel="noopener">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite/java/demo</a></p></li><li><p>下载移动端的模型（model）和标签数据（lables）：<br><a href="https://storage.googleapis.com/download.tensorflow.org/models/tflite/mobilenet_v1_224_android_quant_2017_11_08.zip" target="_blank" rel="noopener">https://storage.googleapis.com/download.tensorflow.org/models/tflite/mobilenet_v1_224_android_quant_2017_11_08.zip</a></p></li><li><p>下载完成解压mobilenet_v1_224_android_quant_2017_11_08.zip文件得到一个xxx.tflite和labes.txt文件，分别是模型和标签文件，并且把这两个文件复制到assets文件夹下。</p></li><li><p>构建app，run……</p></li></ol><p>17.7.9 TensorFlow Lite和TensorFlow Mobile的区别？</p><ul><li>TensorFlow Lite是TensorFlow Mobile的进化版。</li><li>在大多数情况下，TensorFlow Lite拥有跟小的二进制大小，更少的依赖以及更好的性能。</li><li>相比TensorFlow Mobile是对完整TensorFlow的裁减，TensorFlow Lite基本就是重新实现了。从内部实现来说，在TensorFlow内核最基本的OP，Context等数据结构，都是新的。从外在表现来说，模型文件从PB格式改成了FlatBuffers格式，TensorFlow的size有大幅度优化，降至300K，然后提供一个converter将普通TensorFlow模型转化成TensorFlow Lite需要的格式。因此，无论从哪方面看，TensorFlow Lite都是一个新的实现方案。</li></ul><h3 id="17-7-9-PocketFlow"><a href="#17-7-9-PocketFlow" class="headerlink" title="17.7.9 PocketFlow"></a>17.7.9 PocketFlow</h3><p>１、开源时间：2018年9月　　　</p><p>２、开源用户：腾讯　　　</p><p>３、GitHub地址：<a href="https://github.com/Tencent/PocketFlow" target="_blank" rel="noopener">https://github.com/Tencent/PocketFlow</a></p><p>４、简介：</p><p>全球首个自动模型压缩框架</p><p>一款面向移动端AI开发者的自动模型压缩框架，集成了当前主流的模型压缩与训练算法，结合自研超参数优化组件实现了全程自动化托管式的模型压缩与加速。开发者无需了解具体算法细节，即可快速地将AI技术部署到移动端产品上，实现了自动托管式模型压缩与加速，实现用户数据的本地高效处理。</p><p>5、框架介绍</p><p>PocketFlow 框架主要由两部分组件构成，分别是模型压缩/加速算法组件和超参数优化组件，具体结构如下图所示。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/framework_design.png" alt=""></p><p>​    开发者将未压缩的原始模型作为 PocketFlow 框架的输入，同时指定期望的性能指标，例如模型的压缩和/或加速倍数；在每一轮迭代过程中，超参数优化组件选取一组超参数取值组合，之后模型压缩/加速算法组件基于该超参数取值组合，对原始模型进行压缩，得到一个压缩后的候选模型；基于对候选模型进行性能评估的结果，超参数优化组件调整自身的模型参数，并选取一组新的超参数取值组合，以开始下一轮迭代过程；当迭代终止时，PocketFlow 选取最优的超参数取值组合以及对应的候选模型，作为最终输出，返回给开发者用作移动端的模型部署。</p><p>6、PocketFlow如何实现模型压缩与加速？</p><p>​    具体地，PocketFlow 通过下列各个算法组件的有效结合，实现了精度损失更小、自动化程度更高的深度学习模型的压缩与加速：</p><ul><li><p>a) 通道剪枝（channel pruning）组件：在CNN网络中，通过对特征图中的通道维度进行剪枝，可以同时降低模型大小和计算复杂度，并且压缩后的模型可以直接基于现有的深度学习框架进行部署。在CIFAR-10图像分类任务中，通过对  ResNet-56 模型进行通道剪枝，可以实现2.5倍加速下分类精度损失0.4%，3.3倍加速下精度损失0.7%。</p></li><li><p>b) 权重稀疏化（weight sparsification）组件：通过对网络权重引入稀疏性约束，可以大幅度降低网络权重中的非零元素个数；压缩后模型的网络权重可以以稀疏矩阵的形式进行存储和传输，从而实现模型压缩。对于  MobileNet 图像分类模型，在删去50%网络权重后，在 ImageNet 数据集上的 Top-1 分类精度损失仅为0.6%。</p></li><li><p>c) 权重量化（weight quantization）组件：通过对网络权重引入量化约束，可以降低用于表示每个网络权重所需的比特数；团队同时提供了对于均匀和非均匀两大类量化算法的支持，可以充分利用  ARM 和 FPGA 等设备的硬件优化，以提升移动端的计算效率，并为未来的神经网络芯片设计提供软件支持。以用于 ImageNet  图像分类任务的 ResNet-18 模型为例，在8比特定点量化下可以实现精度无损的4倍压缩。</p></li><li><p>d)网络蒸馏（network distillation）组件：对于上述各种模型压缩组件，通过将未压缩的原始模型的输出作为额外的监督信息，指导压缩后模型的训练，在压缩/加速倍数不变的前提下均可以获得0.5%-2.0%不等的精度提升。</p></li><li><p>e) 多GPU训练（multi-GPU training）组件：深度学习模型训练过程对计算资源要求较高，单个GPU难以在短时间内完成模型训练，因此团队提供了对于多机多卡分布式训练的全面支持，以加快使用者的开发流程。无论是基于  ImageNet 数据的Resnet-50图像分类模型还是基于 WMT14 数据的 Transformer  机器翻译模型，均可以在一个小时内训练完毕。[1] </p></li><li><p>f) 超参数优化（hyper-parameter optimization）组件：多数开发者对模型压缩算法往往不甚了解，但超参数取值对最终结果往往有着巨大的影响，因此团队引入了超参数优化组件，采用了包括强化学习等算法以及  AI Lab 自研的 AutoML  自动超参数优化框架来根据具体性能需求，确定最优超参数取值组合。例如，对于通道剪枝算法，超参数优化组件可以自动地根据原始模型中各层的冗余程度，对各层采用不同的剪枝比例，在保证满足模型整体压缩倍数的前提下，实现压缩后模型识别精度的最大化。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/packflow1.jpg" alt=""></p></li></ul><p>7、PocketFlow 性能</p><p>​    通过引入超参数优化组件，不仅避免了高门槛、繁琐的人工调参工作，同时也使得  PocketFlow 在各个压缩算法上全面超过了人工调参的效果。以图像分类任务为例，在 CIFAR-10 和 ImageNet  等数据集上，PocketFlow 对 ResNet 和 MobileNet 等多种 CNN 网络结构进行有效的模型压缩与加速。</p><p>​    在  CIFAR-10 数据集上，PocketFlow 以 ResNet-56  作为基准模型进行通道剪枝，并加入了超参数优化和网络蒸馏等训练策略，实现了 2.5 倍加速下分类精度损失 0.4%，3.3 倍加速下精度损失  0.7%，且显著优于未压缩的 ResNet-44 模型； 在 ImageNet 数据集上，PocketFlow 可以对原本已经十分精简的  MobileNet 模型继续进行权重稀疏化，以更小的模型尺寸取得相似的分类精度；与 Inception-V1、ResNet-18  等模型相比，模型大小仅为后者的约 20~40%，但分类精度基本一致（甚至更高）。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/packflow2.jpg" alt=""></p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/packflow3.jpg" alt=""></p><p>相比于费时费力的人工调参，PocketFlow 框架中的 AutoML 自动超参数优化组件仅需 10<br>余次迭代就能达到与人工调参类似的性能，在经过 100 次迭代后搜索得到的超参数组合可以降低约 0.6%<br>的精度损失；通过使用超参数优化组件自动地确定网络中各层权重的量化比特数，PocketFlow 在对用于 ImageNet 图像分类任务的<br>ResNet-18 模型进行压缩时，取得了一致性的性能提升；当平均量化比特数为 4 比特时，超参数优化组件的引入可以将分类精度从 63.6%<br>提升至 68.1%（原始模型的分类精度为 70.3%）。</p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/packflow4.jpg" alt=""></p><p><img src="/2016/12/20/第十七章_模型压缩、加速及移动端部署/img/ch17/packflow5.jpg" alt=""></p><p><strong>参考文献</strong></p><p>[1]  Zhuangwei Zhuang, Mingkui Tan, Bohan Zhuang, Jing Liu, Jiezhang Cao,  Qingyao Wu, Junzhou Huang, Jinhui Zhu,「Discrimination-aware Channel  Pruning for Deep Neural Networks”, In Proc. of the 32nd Annual  Conference on Neural Information Processing Systems, NIPS ‘18, Montreal,  Canada, December 2018.</p><p>[2] Jiaxiang  Wu, Weidong Huang, Junzhou Huang, Tong Zhang,「Error Compensated  Quantized SGD and its Applications to Large-scale Distributed  Optimization」, In Proc. of the 35th International Conference on Machine  Learning, ICML’18, Stockholm, Sweden, July 2018.</p><h3 id="17-7-10-其他几款支持移动端深度学习的开源框架"><a href="#17-7-10-其他几款支持移动端深度学习的开源框架" class="headerlink" title="17.7.10 其他几款支持移动端深度学习的开源框架"></a>17.7.10 其他几款支持移动端深度学习的开源框架</h3><p><a href="https://blog.csdn.net/zchang81/article/details/74280019" target="_blank" rel="noopener">https://blog.csdn.net/zchang81/article/details/74280019</a></p><h3 id="17-7-11-MDL、NCNN和-TFLite比较"><a href="#17-7-11-MDL、NCNN和-TFLite比较" class="headerlink" title="17.7.11 MDL、NCNN和 TFLite比较"></a>17.7.11 MDL、NCNN和 TFLite比较</h3><p>百度-MDL框架、腾讯-NCNN框架和谷歌TFLite框架比较。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">MDL</th><th style="text-align:center">NCNN</th><th style="text-align:center">TFLite</th></tr></thead><tbody><tr><td style="text-align:center">代码质量</td><td style="text-align:center">中</td><td style="text-align:center">高</td><td style="text-align:center">很高</td></tr><tr><td style="text-align:center">跨平台</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">支持caffe模型</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">支持TensorFlow模型</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">CPU NEON指令优化</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">GPU加速</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p>相同点：</p><ul><li>只含推理（inference）功能，使用的模型文件需要通过离线的方式训练得到。</li><li>最终生成的库尺寸较小，均小于500kB。</li><li>为了提升执行速度，都使用了ARM NEON指令进行加速。</li><li>跨平台，iOS和Android系统都支持。</li></ul><p>不同点：</p><ul><li>MDL和NCNN均是只支持Caffe框架生成的模型文件，而TfLite则毫无意外的只支持自家大哥TensorFlow框架生成的模型文件。</li><li>MDL支持利用iOS系统的Matal框架进行GPU加速，能够显著提升在iPhone上的运行速度，达到准实时的效果。而NCNN和TFLite还没有这个功能。</li></ul><h2 id="17-8-移动端开源框架部署"><a href="#17-8-移动端开源框架部署" class="headerlink" title="17.8 移动端开源框架部署"></a>17.8 移动端开源框架部署</h2><h3 id="17-8-1-以NCNN为例"><a href="#17-8-1-以NCNN为例" class="headerlink" title="17.8.1 以NCNN为例"></a>17.8.1 以NCNN为例</h3><p>部署步骤   </p><h3 id="17-8-2-以QNNPACK为例"><a href="#17-8-2-以QNNPACK为例" class="headerlink" title="17.8.2 以QNNPACK为例"></a>17.8.2 以QNNPACK为例</h3><p>部署步骤     </p><h3 id="17-8-4-在Android手机上使用MACE实现图像分类"><a href="#17-8-4-在Android手机上使用MACE实现图像分类" class="headerlink" title="17.8.4 在Android手机上使用MACE实现图像分类"></a>17.8.4 在Android手机上使用MACE实现图像分类</h3><h3 id="17-8-3-在Android手机上使用PaddleMobile实现图像分类"><a href="#17-8-3-在Android手机上使用PaddleMobile实现图像分类" class="headerlink" title="17.8.3 在Android手机上使用PaddleMobile实现图像分类"></a>17.8.3 在Android手机上使用PaddleMobile实现图像分类</h3><p><strong>编译paddle-mobile库</strong></p><p>1）编译Android能够使用的CPP库：编译Android的paddle-mobile库，可选择使用Docker编译和Ubuntu交叉编译，这里介绍使用Ubuntu交叉编译paddle-mobile库。</p><p><em>注</em>：在Android项目，Java代码调用CPP代码，CPP的函数需要遵循一定的命名规范，比如Java_包名_类名_对应的Java的方法名。</p><p>​    目前官方提供了5个可以给Java调用的函数，该代码在：paddle-mobile/src/jni/paddle_mobile_jni.cpp，如果想要让这些函数能够在自己的包名下的类调用，就要修改CPP的函数名称修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jboolean JNICALL <span class="title">Java_com_baidu_paddle_PML_load</span><span class="params">(JNIEnv *env, </span></span></span><br><span class="line"><span class="function"><span class="params">jclass thiz,</span></span></span><br><span class="line"><span class="function"><span class="params">jstring modelPath)</span> </span>&#123; </span><br><span class="line">ANDROIDLOGI(<span class="string">"load invoked"</span>); </span><br><span class="line">bool optimize = <span class="keyword">true</span>; </span><br><span class="line"><span class="keyword">return</span> getPaddleMobileInstance()-&gt;Load(jstring2cppstring(env, modelPath), optimize); &#125;</span><br></pre></td></tr></table></figure><p>​    笔者项目的包名为<code>com.example.paddlemobile1</code>，在这个包下有一个<code>ImageRecognition.java</code>的程序来对应这个CPP程序，那么修改<code>load</code>函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jboolean JNICALL <span class="title">Java_com_example_paddlemobile1_ImageRecognition_load</span><span class="params">(JNIEnv *env,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                          jclass thiz,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                          jstring modelPath)</span> </span>&#123;</span><br><span class="line">  ANDROIDLOGI(<span class="string">"load invoked"</span>);</span><br><span class="line">  bool optimize = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">return</span> getPaddleMobileInstance()-&gt;Load(jstring2cppstring(env, modelPath),</span><br><span class="line">                                         optimize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Ubuntu交叉编译paddle-mobile库</strong></p><p>1、下载和解压NDK。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/android/repository/android-ndk-r17b-linux-x86_64.zip</span><br><span class="line">unzip android-ndk-r17b-linux-x86_64.zip</span><br></pre></td></tr></table></figure><p>2、设置NDK环境变量，目录是NDK的解压目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NDK_ROOT=&quot;/home/test/paddlepaddle/android-ndk-r17b&quot;</span><br></pre></td></tr></table></figure><p>设置好之后，可以使用以下的命令查看配置情况。</p><pre><code>root@test:/home/test/paddlepaddle# echo $NDK_ROOT/home/test/paddlepaddle/android-ndk-r17b</code></pre><p>3、安装cmake，需要安装较高版本的，笔者的cmake版本是3.11.2。</p><p>下载cmake源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.11/cmake-3.11.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压cmake源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf cmake-3.11.2.tar.gz</span><br></pre></td></tr></table></figure><p>进入到cmake源码根目录，并执行bootstrap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cmake-3.11.2</span><br><span class="line">./bootstrap</span><br></pre></td></tr></table></figure><p>最后执行以下两条命令开始安装cmake。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完成之后，可以使用cmake –version是否安装成功.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@test:/home/test/paddlepaddle# cmake --version</span><br><span class="line">cmake version 3.11.2</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><p>4、克隆paddle-mobile源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/PaddlePaddle/paddle-mobile.git</span><br></pre></td></tr></table></figure><p>5、进入到paddle-mobile的tools目录下，执行编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd paddle-mobile/tools/</span><br><span class="line">sh build.sh android</span><br></pre></td></tr></table></figure><p>（可选）如果想编译针对某一个网络编译更小的库时，可以在命令后面加上相应的参数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh build.sh android googlenet</span><br></pre></td></tr></table></figure><p>6、最后会在paddle-mobile/build/release/arm-v7a/build目录下生产paddle-mobile库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@test:/home/test/paddlepaddle/paddle-mobile/build/release/arm-v7a/build# ls</span><br><span class="line">libpaddle-mobile.so</span><br></pre></td></tr></table></figure><p>libpaddle-mobile.so就是我们在开发Android项目的时候使用到的paddle-mobile库。</p><p><strong>创建Android项目</strong></p><p>1、首先使用Android Studio创建一个普通的Android项目，包名为<code>com.example.paddlemobile1</code></p><p>2、在main目录下创建l两个assets/paddle_models文件夹，这个文件夹存放PaddleFluid训练好的预测模型。PaddleMobile支持量化模型，使用模型量化可以把模型缩小至原来的四分之一，如果使用量化模型，那加载模型的接口也有修改一下，使用以下的接口加载模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">loadQualified</span><span class="params">(String modelDir)</span></span>;</span><br></pre></td></tr></table></figure><p>3、在<code>main</code>目录下创建一个<code>jniLibs</code>文件夹，这个文件夹是存放CPP编译库的，在本项目中就存放上一部分编译的<code>libpaddle-mobile.so</code></p><p>4、在Android项目的配置文件夹中加上权限声明，因为我们要使用到读取相册和使用相机，所以加上以下的权限声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.CAMERA"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span><br></pre></td></tr></table></figure><p>5、修改<code>activity_main.xml</code>界面，修改成如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:id=<span class="string">"@+id/btn_ll"</span></span><br><span class="line">    android:layout_alignParentBottom=<span class="string">"true"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">"@+id/use_photo"</span></span><br><span class="line">        android:layout_weight=<span class="string">"1"</span></span><br><span class="line">        android:layout_width=<span class="string">"0dp"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:text=<span class="string">"相册"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">"@+id/start_camera"</span></span><br><span class="line">        android:layout_weight=<span class="string">"1"</span></span><br><span class="line">        android:layout_width=<span class="string">"0dp"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:text=<span class="string">"拍照"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_above=<span class="string">"@id/btn_ll"</span></span><br><span class="line">    android:id=<span class="string">"@+id/result_text"</span></span><br><span class="line">    android:textSize=<span class="string">"16sp"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:hint=<span class="string">"预测结果会在这里显示"</span></span><br><span class="line">    android:layout_height=<span class="string">"100dp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">    android:layout_alignParentTop=<span class="string">"true"</span></span><br><span class="line">    android:layout_above=<span class="string">"@id/result_text"</span></span><br><span class="line">    android:id=<span class="string">"@+id/show_image"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>6、创建一个<code>ImageRecognition.java</code>的Java程序，这个程序的作用就是调用<code>paddle-mobile/src/jni/paddle_mobile_jni.cpp</code>的函数，对应的是里面的函数。目前支持一下几个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.paddlemobile1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageRecognition</span> </span>&#123;</span><br><span class="line">    <span class="comment">// set thread num</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setThread</span><span class="params">(<span class="keyword">int</span> threadCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Load seperated parameters</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">load</span><span class="params">(String modelDir)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load qualified model</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">loadQualified</span><span class="params">(String modelDir)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load combined parameters</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">loadCombined</span><span class="params">(String modelPath, String paramPath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load qualified model</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">loadCombinedQualified</span><span class="params">(String modelPath, String paramPath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object detection</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">float</span>[] predictImage(<span class="keyword">float</span>[] buf, <span class="keyword">int</span>[]ddims);</span><br><span class="line"></span><br><span class="line"><span class="comment">// predict yuv image</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">float</span>[] predictYuv(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> imgWidth, <span class="keyword">int</span> imgHeight, <span class="keyword">int</span>[] ddims, <span class="keyword">float</span>[]meanValues);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear model</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、然后编写一个<code>PhotoUtil.java</code>的工具类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.paddlemobile1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.provider.MediaStore;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.FileProvider;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">// start camera</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Uri <span class="title">start_camera</span><span class="params">(Activity activity, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    Uri imageUri;</span><br><span class="line">    <span class="comment">// save image in cache path</span></span><br><span class="line">    File outputImage = <span class="keyword">new</span> File(activity.getExternalCacheDir(), <span class="string">"out_image.jpg"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputImage.exists()) &#123;</span><br><span class="line">            outputImage.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        outputImage.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="comment">// compatible with Android 7.0 or over</span></span><br><span class="line">        imageUri = FileProvider.getUriForFile(activity,</span><br><span class="line">                <span class="string">"com.example.paddlemobile1"</span>, outputImage);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        imageUri = Uri.fromFile(outputImage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set system camera Action</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">// set save photo path</span></span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class="line">    <span class="comment">// set photo quality, min is 0, max is 1</span></span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, <span class="number">0</span>);</span><br><span class="line">    activity.startActivityForResult(intent, requestCode);</span><br><span class="line">    <span class="keyword">return</span> imageUri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get picture in photo</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">use_photo</span><span class="params">(Activity activity, <span class="keyword">int</span> requestCode)</span></span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK);</span><br><span class="line">    intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    activity.startActivityForResult(intent, requestCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get photo from Uri</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get_path_from_URI</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">    String result;</span><br><span class="line">    Cursor cursor = context.getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (cursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        result = uri.getPath();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cursor.moveToFirst();</span><br><span class="line">        <span class="keyword">int</span> idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);</span><br><span class="line">        result = cursor.getString(idx);</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compress the image to the size of the training image，and change RGB</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span>[] getScaledMatrix(Bitmap bitmap, <span class="keyword">int</span> desWidth,</span><br><span class="line">                               <span class="keyword">int</span> desHeight) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] dataBuf = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span> * desWidth * desHeight];</span><br><span class="line">    <span class="keyword">int</span> rIndex;</span><br><span class="line">    <span class="keyword">int</span> gIndex;</span><br><span class="line">    <span class="keyword">int</span> bIndex;</span><br><span class="line">    <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[desWidth * desHeight];</span><br><span class="line">    Bitmap bm = Bitmap.createScaledBitmap(bitmap, desWidth, desHeight, <span class="keyword">false</span>);</span><br><span class="line">    bm.getPixels(pixels, <span class="number">0</span>, desWidth, <span class="number">0</span>, <span class="number">0</span>, desWidth, desHeight);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pixels.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> clr = pixels[i];</span><br><span class="line">        j = i / desHeight;</span><br><span class="line">        k = i % desWidth;</span><br><span class="line">        rIndex = j * desWidth + k;</span><br><span class="line">        gIndex = rIndex + desHeight * desWidth;</span><br><span class="line">        bIndex = gIndex + desHeight * desWidth;</span><br><span class="line">        dataBuf[rIndex] = (<span class="keyword">float</span>) ((clr &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>) - <span class="number">148</span>;</span><br><span class="line">        dataBuf[gIndex] = (<span class="keyword">float</span>) ((clr &amp; <span class="number">0x0000ff00</span>) &gt;&gt; <span class="number">8</span>) - <span class="number">148</span>;</span><br><span class="line">        dataBuf[bIndex] = (<span class="keyword">float</span>) ((clr &amp; <span class="number">0x000000ff</span>)) - <span class="number">148</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bm.isRecycled()) &#123;</span><br><span class="line">        bm.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataBuf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compress picture</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getScaleBitmap</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    BitmapFactory.Options opt = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    opt.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeFile(filePath, opt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bmpWidth = opt.outWidth;</span><br><span class="line">    <span class="keyword">int</span> bmpHeight = opt.outHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxSize = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compress picture with inSampleSize</span></span><br><span class="line">    opt.inSampleSize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bmpWidth / opt.inSampleSize &lt; maxSize || bmpHeight / opt.inSampleSize &lt; maxSize) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        opt.inSampleSize *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    opt.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeFile(filePath, opt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>start_camera()方法是启动相机并返回图片的URI。</li><li>use_photo()方法是打开相册，获取到的图片URI在回到函数中获取。</li><li>get_path_from_URI()方法是把图片的URI转换成绝对路径。</li><li>getScaledMatrix()方法是把图片压缩成跟训练时的大小，并转换成预测需要用的数据格式浮点数组。</li><li>getScaleBitmap()方法是对图片进行等比例压缩，减少内存的支出。</li></ul><p>8、最后修改<code>MainActivity.java</code>，修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.paddlemobile1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.load.engine.DiskCacheStrategy;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.request.RequestOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USE_PHOTO = <span class="number">1001</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_CAMERA = <span class="number">1002</span>;</span><br><span class="line">    <span class="keyword">private</span> Uri image_uri;</span><br><span class="line">    <span class="keyword">private</span> ImageView show_image;</span><br><span class="line">    <span class="keyword">private</span> TextView result_text;</span><br><span class="line">    <span class="keyword">private</span> String assets_path = <span class="string">"paddle_models"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> load_result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ddims = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] PADDLE_MODEL = &#123;</span><br><span class="line">        <span class="string">"lenet"</span>,</span><br><span class="line">        <span class="string">"alexnet"</span>,</span><br><span class="line">        <span class="string">"vgg16"</span>,</span><br><span class="line">        <span class="string">"resnet"</span>,</span><br><span class="line">        <span class="string">"googlenet"</span>,</span><br><span class="line">        <span class="string">"mobilenet_v1"</span>,</span><br><span class="line">        <span class="string">"mobilenet_v2"</span>,</span><br><span class="line">        <span class="string">"inception_v1"</span>,</span><br><span class="line">        <span class="string">"inception_v2"</span>,</span><br><span class="line">        <span class="string">"squeezenet"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load paddle-mobile api</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"paddle-mobile"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsatisfiedLinkError e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize view</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    request_permissions();</span><br><span class="line">    show_image = (ImageView) findViewById(R.id.show_image);</span><br><span class="line">    result_text = (TextView) findViewById(R.id.result_text);</span><br><span class="line">    Button use_photo = (Button) findViewById(R.id.use_photo);</span><br><span class="line">    Button start_photo = (Button) findViewById(R.id.start_camera);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use photo click</span></span><br><span class="line">    use_photo.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            PhotoUtil.use_photo(MainActivity.<span class="keyword">this</span>, USE_PHOTO);</span><br><span class="line">            <span class="comment">//                load_model();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// start camera click</span></span><br><span class="line">    start_photo.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            image_uri = PhotoUtil.start_camera(MainActivity.<span class="keyword">this</span>, START_CAMERA);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy file from assets to sdcard</span></span><br><span class="line">    String sdcard_path = Environment.getExternalStorageDirectory()</span><br><span class="line">            + File.separator + assets_path;</span><br><span class="line">    copy_file_from_asset(<span class="keyword">this</span>, assets_path, sdcard_path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load model</span></span><br><span class="line">    load_model();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load infer model</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load_model</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String model_path = Environment.getExternalStorageDirectory()</span><br><span class="line">            + File.separator + assets_path + File.separator + PADDLE_MODEL[<span class="number">4</span>];</span><br><span class="line">    Log.d(TAG, model_path);</span><br><span class="line">    load_result = ImageRecognition.load(model_path);</span><br><span class="line">    <span class="keyword">if</span> (load_result) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"model load success"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"model load fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear infer model</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clear_model</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ImageRecognition.clear();</span><br><span class="line">    Log.d(TAG, <span class="string">"model is clear"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy file from asset to sdcard</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy_file_from_asset</span><span class="params">(Context context, String oldPath, String newPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String[] fileNames = context.getAssets().list(oldPath);</span><br><span class="line">        <span class="keyword">if</span> (fileNames.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// directory</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(newPath);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// copy recursivelyC</span></span><br><span class="line">            <span class="keyword">for</span> (String fileName : fileNames) &#123;</span><br><span class="line">                copy_file_from_asset(context, oldPath + <span class="string">"/"</span> + fileName, newPath + <span class="string">"/"</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(TAG, <span class="string">"copy files finish"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// file</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(newPath);</span><br><span class="line">            <span class="comment">// if file exists will never copy</span></span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// copy file to new path</span></span><br><span class="line">            InputStream is = context.getAssets().open(oldPath);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> byteCount;</span><br><span class="line">            <span class="keyword">while</span> ((byteCount = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, byteCount);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.flush();</span><br><span class="line">            is.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, @Nullable Intent data)</span> </span>&#123;</span><br><span class="line">    String image_path;</span><br><span class="line">    RequestOptions options = <span class="keyword">new</span> RequestOptions().skipMemoryCache(<span class="keyword">true</span>).diskCacheStrategy(DiskCacheStrategy.NONE);</span><br><span class="line">    <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> USE_PHOTO:</span><br><span class="line">                <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"user photo data is null"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                image_uri = data.getData();</span><br><span class="line">                Glide.with(MainActivity.<span class="keyword">this</span>).load(image_uri).apply(options).into(show_image);</span><br><span class="line">                <span class="comment">// get image path from uri</span></span><br><span class="line">                image_path = PhotoUtil.get_path_from_URI(MainActivity.<span class="keyword">this</span>, image_uri);</span><br><span class="line">                <span class="comment">// show result</span></span><br><span class="line">                result_text.setText(image_path);</span><br><span class="line">                <span class="comment">// predict image</span></span><br><span class="line">                predict_image(PhotoUtil.get_path_from_URI(MainActivity.<span class="keyword">this</span>, image_uri));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> START_CAMERA:</span><br><span class="line">                <span class="comment">// show photo</span></span><br><span class="line">                Glide.with(MainActivity.<span class="keyword">this</span>).load(image_uri).apply(options).into(show_image);</span><br><span class="line">                <span class="comment">// get image path from uri</span></span><br><span class="line">                image_path = PhotoUtil.get_path_from_URI(MainActivity.<span class="keyword">this</span>, image_uri);</span><br><span class="line">                <span class="comment">// show result</span></span><br><span class="line">                result_text.setText(image_path);</span><br><span class="line">                <span class="comment">// predict image</span></span><br><span class="line">                predict_image(PhotoUtil.get_path_from_URI(MainActivity.<span class="keyword">this</span>, image_uri));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"SetTextI18n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">predict_image</span><span class="params">(String image_path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// picture to float array</span></span><br><span class="line">    Bitmap bmp = PhotoUtil.getScaleBitmap(image_path);</span><br><span class="line">    <span class="keyword">float</span>[] inputData = PhotoUtil.getScaledMatrix(bmp, ddims[<span class="number">2</span>], ddims[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// get predict result</span></span><br><span class="line">        <span class="keyword">float</span>[] result = ImageRecognition.predictImage(inputData, ddims);</span><br><span class="line">        Log.d(TAG, <span class="string">"origin predict result:"</span> + Arrays.toString(result));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = end - start;</span><br><span class="line">        Log.d(<span class="string">"result length"</span>, String.valueOf(result.length));</span><br><span class="line">        <span class="comment">// show predict result and time</span></span><br><span class="line">        <span class="keyword">int</span> r = get_max_result(result);</span><br><span class="line">        String show_text = <span class="string">"result："</span> + r + <span class="string">"\nprobability："</span> + result[r] + <span class="string">"\ntime："</span> + time + <span class="string">"ms"</span>;</span><br><span class="line">        result_text.setText(show_text);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get_max_result</span><span class="params">(<span class="keyword">float</span>[] result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> probability = result[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (probability &lt; result[i]) &#123;</span><br><span class="line">            probability = result[i];</span><br><span class="line">            r = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request permissions</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">request_permissions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; permissionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        permissionList.add(Manifest.permission.CAMERA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        permissionList.add(Manifest.permission.READ_EXTERNAL_STORAGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if list is not empty will request permissions</span></span><br><span class="line">    <span class="keyword">if</span> (!permissionList.isEmpty()) &#123;</span><br><span class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissionList.toArray(<span class="keyword">new</span> String[permissionList.size()]), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grantResults.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> grantResult = grantResults[i];</span><br><span class="line">                    <span class="keyword">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">                        String s = permissions[i];</span><br><span class="line">                        Toast.makeText(<span class="keyword">this</span>, s + <span class="string">" permission was denied"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// clear model before destroy app</span></span><br><span class="line">    clear_model();</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>load_model()方法是加载预测模型的。</li><li>clear_model()方法是清空预测模型的。</li><li>copy_file_from_asset()方法是把预测模型复制到内存卡上。</li><li>predict_image()方法是预测图片的。</li><li>get_max_result()方法是获取概率最大的预测结果。</li><li>request_permissions()方法是动态请求权限的。</li></ul><p>因为使用到图像加载框架Glide，所以要在<code>build.gradle</code>加入以下的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.github.bumptech.glide:glide:4.3.1&apos;</span><br></pre></td></tr></table></figure><p>8、最后运行项目，选择图片预测就会得到结果。</p><h2 id="17-9-移动端开源框架部署疑难"><a href="#17-9-移动端开源框架部署疑难" class="headerlink" title="17.9 移动端开源框架部署疑难"></a>17.9 移动端开源框架部署疑难</h2><p>增加常见的几个问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络（CNN）</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN/"/>
    <id>https://leesen998.github.io/2016/12/20/第五章 卷积神经网络CNN/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T14:26:46.184Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><p>﻿</p><h2 id="5-1-卷积神经网络的组成层"><a href="#5-1-卷积神经网络的组成层" class="headerlink" title="5.1 卷积神经网络的组成层"></a>5.1 卷积神经网络的组成层</h2><p>在卷积神经网络中，一般包含5种类型的层：</p><blockquote><ul><li>输入层</li><li>卷积运算层</li><li>激活函数层</li><li>池化层</li><li>全连接层</li></ul></blockquote><p><strong>输入层</strong>主要包含对原始图像进行预处理，包括白化、归一化、去均值等等。</p><p><strong>卷积运算层</strong>主要使用滤波器，通过设定步长、深度等参数，对输入进行不同层次的特征提取。滤波器中的参数可以通过反向传播算法进行学习。</p><p><strong>激活函数层</strong>主要是将卷积层的输出做一个非线性映射。常见的激活函数包括sigmoid,tanh,Relu等。</p><p><strong>池化层</strong>主要是用于参数量压缩。可以减轻过拟合情况。常见的有平均池化和最大值池化，不包含需要学习的参数。</p><p><strong>全连接层</strong>主要是指两层网络，所有神经元之间都有权重连接。常见用于网络的最后一层，用于计算类别得分。</p><h2 id="5-2-卷积如何检测边缘信息？"><a href="#5-2-卷积如何检测边缘信息？" class="headerlink" title="5.2 卷积如何检测边缘信息？"></a>5.2 卷积如何检测边缘信息？</h2><p>卷积运算是卷积神经网络最基本的组成部分。在神经网络中，以物体识别为例，特征的检测情况可大致做一下划分。前几层检测到的是一些边缘特征，中间几层检测到的是物体的局部区域，靠后的几层检测到的是完整物体。每个阶段特征的形成都是由多组滤波器来完成的。而其中的边缘检测部分是由滤波器来完成的。在传统的图像处理方法里面，有许多边缘检测算子，如canny算子。使用固定的模板来进行边缘检测。</p><p>先介绍一个概念，过滤器：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img2.png" alt="image"></p><p>这是一个3*3的过滤器，是一个矩阵，数值如上所示。</p><p>假设我们有一个6*6的灰度图像：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img3.png" alt="image"></p><p>把这个图像与过滤器进行卷积运算，卷积运算在此处用“*”表示。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img4.png" alt="image"></p><p>如图深蓝色区域所示，过滤器在图像左上方3*3的范围内，逐一加权相加，得到-5。</p><p>同理，将过滤器右移进行相同操作，再下移，直到过滤器对准图像右下角最后一格。依次运算得到一个4*4的矩阵。</p><p>在了解了过滤器以及卷积运算后，让我们看看为何过滤器能检测物体边缘：</p><p>举一个最简单的例子：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img5.png" alt="image"></p><p>这张图片如上所示，左半边全是白的，右半边全是灰的，我们仍然使用之前的过滤器，对该图片进行卷积处理：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img6.png" alt="image"></p><p>可以看到，最终得到的结果中间是一段白色，两边为灰色，于是垂直边缘被找到了。为什么呢？因为在6*6图像中红框标出来的部分，也就是图像中的分界线所在部分，与过滤器进行卷积，结果是30。而在不是分界线的所有部分进行卷积，结果都为0.</p><p>在这个图中，白色的分界线很粗，那是因为6*6的图像尺寸过小，对于1000*1000的图像，我们会发现在最终结果中，分界线较细但很明显。</p><p>这就是检测物体垂直边缘的例子，水平边缘的话只需将过滤器旋转90度。</p><h2 id="5-3-卷积层中的几个基本参数？"><a href="#5-3-卷积层中的几个基本参数？" class="headerlink" title="5.3 卷积层中的几个基本参数？"></a>5.3 卷积层中的几个基本参数？</h2><p>在卷积层中，有一些我们常用的参数，定义如下</p><h3 id="5-3-1-卷积核大小"><a href="#5-3-1-卷积核大小" class="headerlink" title="5.3.1 卷积核大小"></a>5.3.1 卷积核大小</h3><p>英文名是Kernel Size:卷积核的大小定义了卷积的感受野。二维卷积的核大小选择通常是3，即3×3。</p><h3 id="5-3-2-卷积核的步长"><a href="#5-3-2-卷积核的步长" class="headerlink" title="5.3.2 卷积核的步长"></a>5.3.2 卷积核的步长</h3><p>英文名是Stride: Stride定义了卷积核在卷积过程中的步长。虽然它的默认值通常为1，但我们可以将步长设置为2，可以实现类似于pooling的下采样功能。</p><h3 id="5-3-3-边缘填充"><a href="#5-3-3-边缘填充" class="headerlink" title="5.3.3 边缘填充"></a>5.3.3 边缘填充</h3><p>英文名是Padding: Padding用于填充输入图像的边界。一个(半)填充的卷积将使空间输出维度与输入相等，而如果卷积核大于1，则对于未被填充的图像，卷积后将会使图像一些边界消失。</p><h3 id="5-3-4-输入和输出通道"><a href="#5-3-4-输入和输出通道" class="headerlink" title="5.3.4 输入和输出通道"></a>5.3.4 输入和输出通道</h3><p>英文名是 Input/Output Channels 一个卷积层接受一定数量的输入通道I，并计算一个特定数量的输出通道O，这一层所需的参数可以由I<em>O</em>K计算，K等于卷积核中参数的数量。</p><h2 id="5-4-卷积的网络类型分类？"><a href="#5-4-卷积的网络类型分类？" class="headerlink" title="5.4 卷积的网络类型分类？"></a>5.4 卷积的网络类型分类？</h2><h3 id="5-4-1-普通卷积"><a href="#5-4-1-普通卷积" class="headerlink" title="5.4.1 普通卷积"></a>5.4.1 普通卷积</h3><p>普通卷积即如下图所示，使用一个固定大小的滤波器，对图像进行加权提特征。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img7.png" alt="image"></p><h3 id="5-4-2-扩张卷积"><a href="#5-4-2-扩张卷积" class="headerlink" title="5.4.2 扩张卷积"></a>5.4.2 扩张卷积</h3><p>扩张卷积，又称为带孔（atrous）卷积或者空洞（dilated）卷积。在使用扩张卷积时，会引入一个称作扩张率（dilation rate）的参数。该参数定义了卷积核内参数间的行（列）间隔数。例如下图所示，一个3×3的卷积核，扩张率为2，它的感受野与5×5卷积核相同，而仅使用9个参数。这样做的好处是，在参数量不变的情况下，可以获得更大的感受野。扩张卷积在实时分割领域应用非常广泛。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img8.png" alt="image"></p><h3 id="5-4-3-转置卷积"><a href="#5-4-3-转置卷积" class="headerlink" title="5.4.3 转置卷积"></a>5.4.3 转置卷积</h3><p>转置卷积也就是反卷积（deconvolution）。虽然有些人经常直接叫它反卷积，但严格意义上讲是不合适的，因为它不符合一个反卷积的概念。反卷积确实存在，但它们在深度学习领域并不常见。一个实际的反卷积会恢复卷积的过程。想象一下，将一个图像放入一个卷积层中。现在把输出传递到一个黑盒子里，然后你的原始图像会再次出来。这个黑盒子就完成了一个反卷积。这是一个卷积层的数学逆过程。</p><p>一个转置的卷积在某种程度上是相似的，因为它产生的空间分辨率是跟反卷积后产生的分辨率相同。不同之处是在卷积核值上执行的实际数学操作。转置卷积层使用的是常规的卷积，但是它能够恢复其空间变换。</p><p>在这一点上，让我们来看一个具体的例子：<br>将5×5的图像送到一个卷积层。步长设置为2，无边界填充，而卷积核是3×3。结果得到了2×2的图像。如果我们想要逆向该过程，则需要数学上的逆运算，以便从输入的每个像素值中生成9个值。然后，我们将步长设置为2来遍历输出图像。这就是一个反卷积过程。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img9.png" alt="image"><br>转置卷积的实现过程则不同。为了保证输出将是一个5×5的图像，在使用卷积运算时，我们需要在输入上执行一些特别的填充。而这一过程并不是逆转了卷积运算，它仅仅是重新构造了之前的空间分辨率并进行了卷积运算。这样的做法并不是数学上的逆过程，但是很适用于编码-解码器（Encoder-Decoder）架构。我们就可以把图像的上采样（upscaling）和卷积操作结合起来，而不是做两个分离的过程。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img10.png" alt="image"></p><h3 id="5-4-4-可分离卷积"><a href="#5-4-4-可分离卷积" class="headerlink" title="5.4.4 可分离卷积"></a>5.4.4 可分离卷积</h3><p>在一个可分离卷积中，我们可以将内核操作拆分成多个步骤。我们用y = conv（x，k）表示卷积，其中y是输出图像，x是输入图像，k是核大小。这一步很简单。接下来，我们假设k可以由下面这个等式计算得出：k = k1.dot（k2）。这将使它成为一个可分离的卷积，因为我们可以通过对k1和k2做2个一维卷积来取得相同的结果，而不是用k做二维卷积。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img11.png" alt="image"></p><p>以图像处理中的Sobel算子为例。你可以通过乘以向量[1，0，-1]和[1,2,1] .T获得相同的核大小。在执行相同的操作时，你只需要6个参数，而不是9个。上面的示例显示了所谓的空间可分离卷积。即将一个二维的卷积分离成两个一维卷积的操作。在神经网络中，为了减少网络参数，加速网络运算速度。我们通常使用的是一种叫深度可分离卷积的神经网络。</p><h2 id="5-5-图解12种不同类型的2D卷积？"><a href="#5-5-图解12种不同类型的2D卷积？" class="headerlink" title="5.5 图解12种不同类型的2D卷积？"></a>5.5 图解12种不同类型的2D卷积？</h2><p><a href="http://www.sohu.com/a/159591827_390227" target="_blank" rel="noopener">http://www.sohu.com/a/159591827_390227</a></p><h2 id="5-6-2D卷积与3D卷积有什么区别？"><a href="#5-6-2D卷积与3D卷积有什么区别？" class="headerlink" title="5.6 2D卷积与3D卷积有什么区别？"></a>5.6 2D卷积与3D卷积有什么区别？</h2><h3 id="5-6-1-2D卷积"><a href="#5-6-1-2D卷积" class="headerlink" title="5.6.1 2D卷积"></a>5.6.1 2D卷积</h3><p>二维卷积操作如图所示，为了更直观的说明，分别展示了单通道和多通道的操作。假定只使用了1个滤波器，即输出图像只有一个channel。其中，针对单通道，输入图像的channel为1，卷积核尺寸为 (k_h, k_w, 1)，卷积核在输入图像的空间维度上进行滑窗操作，每次滑窗和 (k_h, k_w)窗口内的值进行卷积操作，得到输出图像中的一个值。针对多通道，假定输入图像的channel为3，卷积核尺寸则为 (k_h, k_w, 3)，则每次滑窗与3个channels上的 (k_h, k_w)窗口内的所有值进行卷积操作，得到输出图像中的一个值。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img12.png" alt="image"></p><h3 id="5-6-2-3D卷积"><a href="#5-6-2-3D卷积" class="headerlink" title="5.6.2 3D卷积"></a>5.6.2 3D卷积</h3><p>3D卷积操作如图所示，同样分为单通道和多通道，且假定只使用1个滤波器，即输出图像仅有一个channel。其中，针对单通道，与2D卷积不同之处在于，输入图像多了一个length维度，卷积核也多了一个k_l维度，因此3D卷积核的尺寸为（k_h, k_w, k_l)，每次滑窗与 (k_h, k_w, k_l)窗口内的值进行相关操作，得到输出3D图像中的一个值.针对多通道，则与2D卷积的操作一样，每次滑窗与3个channels上的 (k_h, k_w, k_l) 窗口内的所有值进行相关操作，得到输出3D图像中的一个值。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img13.png" alt="image"></p><h2 id="5-7-有哪些池化方法？"><a href="#5-7-有哪些池化方法？" class="headerlink" title="5.7 有哪些池化方法？"></a>5.7 有哪些池化方法？</h2><p>在构建卷积神经网络时，经常会使用池化操作，而池化层往往在卷积层后面，通过池化操作来降低卷积层输出的特征维度，同时可以防止过拟合现象。池化操作可以降低图像维度的原因，本质上是因为图像具有一种“静态性”的属性，这个意思是说在一个图像区域有用的特征极有可能在另一个区域同样有用。因此，为了描述一个大的图像，很直观的想法就是对不同位置的特征进行聚合统计。例如，可以计算图像在固定区域上特征的平均值 (或最大值)来代表这个区域的特征。[1]</p><h3 id="5-7-1-一般池化（General-Pooling）"><a href="#5-7-1-一般池化（General-Pooling）" class="headerlink" title="5.7.1 一般池化（General Pooling）"></a>5.7.1 一般池化（General Pooling）</h3><p>池化操作与卷积操作不同，过程如下图。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img14.png" alt="image"><br>池化操作过程如图所示，对固定区域的特征，使用某一个值来表示。最常见的池化操作有两种，分为平均池化mean pooling和最大池化max pooling</p><p>1、平均池化：计算图像区域的平均值作为该区域池化后的值。</p><p>2、最大池化：选图像区域的最大值作为该区域池化后的值。</p><p>上述的池化过程，相邻的池化窗口间没有重叠部分。</p><h3 id="5-7-2-重叠池化（General-Pooling）"><a href="#5-7-2-重叠池化（General-Pooling）" class="headerlink" title="5.7.2 重叠池化（General Pooling）"></a>5.7.2 重叠池化（General Pooling）</h3><p>重叠池化即是一种相邻池化窗口之间会有重叠区域的池化技术。论文中[2]中，作者使用了重叠池化，其他的设置都不变的情况下，top-1和top-5 的错误率分别减少了0.4% 和0.3%。</p><h3 id="5-7-3-空金字塔池化（Spatial-Pyramid-Pooling）"><a href="#5-7-3-空金字塔池化（Spatial-Pyramid-Pooling）" class="headerlink" title="5.7.3 空金字塔池化（Spatial Pyramid Pooling）"></a>5.7.3 空金字塔池化（Spatial Pyramid Pooling）</h3><p>空间金字塔池化可以将任意尺度的图像卷积特征转化为相同维度，这不仅可以让CNN处理任意尺度的图像，还能避免cropping和warping操作，导致一些信息的丢失。一般的卷积神经网络都需要固定输入图像大小，这是因为全连接层的输入需要固定输入维度，但在卷积操作时并没有对图像大小有限制，所以作者提出了空间金字塔池化方法，先让图像进行卷积操作，然后使用SPP方法转化成维度相同的特征，最后输入到全连接层。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img17.png" alt="image"></p><p>根据论文作者所述，空间金字塔池化的思想来自于Spatial Pyramid Model,它是将一个pooling过程变成了多个尺度的pooling。用不同大小的池化窗口作用于卷积特征，这样就可以得到1X1,2X2,4X4的池化结果，由于conv5中共有256个滤波器，所以得到1个256维的特征，4个256个特征，以及16个256维的特征，然后把这21个256维特征链接起来输入全连接层，通过这种方式把不同大小的图像转化成相同维度的特征。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img18.png" alt="image"></p><p>对于不同的图像，如果想要得到相同大小的pooling结果，就需要根据图像大小动态的计算池化窗口大小和步长。假设conv5输出的大小为a<em>a，需要得到n</em>n大小的池化结果，可以让窗口大小sizeX为[a/n]，步长为[a/n]。下图展示了以conv5输出大小是13*13为例，spp算法的各层参数。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img19.png" alt="image"></p><p>总结来说，SPP方法其实就是一种使用多个尺度的池化方法，可以获取图像中的多尺度信息。在卷积神经网络中加入SPP后，可以让CNN处理任意大小的输入，这让模型变得更加的灵活。</p><h2 id="5-8-1x1卷积作用？"><a href="#5-8-1x1卷积作用？" class="headerlink" title="5.8 1x1卷积作用？"></a>5.8 1x1卷积作用？</h2><p>1×1的卷积主要有以下两个方面的作用：</p><ol><li><p>实现信息的跨通道交互和整合。</p></li><li><p>对卷积核通道数进行降维和升维，减小参数量。</p></li></ol><p>下面详细解释一下：<br><strong>第一点 实现信息的跨通道交互和整合</strong><br>对1×1卷积层的探讨最初是出现在NIN的结构，论文作者的动机是利用MLP代替传统的线性卷积核，从而提高网络的表达能力。文中从跨通道池化的角度进行解释，认为文中提出的MLP其实等价于在传统卷积核后面接cccp层，从而实现多个feature map的线性组合，实现跨通道的信息整合。而查看代码实现，cccp层即等价于1×1卷积层。<br><strong>第二点 对卷积核通道数进行降维和升维，减小参数量</strong><br>1x1卷积层能带来降维和升维的效果，在一系列的GoogLeNet中体现的最明显。对于每一个Inception模块（如下图），左图是原始模块，右图是加入1×1卷积进行降维的模块。虽然左图的卷积核都比较小，但是当输入和输出的通道数很大时，卷积核的参数量也会变的很大，而右图加入1×1卷积后可以降低输入的通道数，因此卷积核参数、运算复杂度也就大幅度下降。以GoogLeNet的3a模块为例，输入的feature map是28×28×192，3a模块中1×1卷积通道为64，3×3卷积通道为128,5×5卷积通道为32，如果是左图结构，那么卷积核参数为1×1×192×64+3×3×192×128+5×5×192×32，而右图对3×3和5×5卷积层前分别加入了通道数为96和16的1×1卷积层，这样卷积核参数就变成了1×1×192×64+（1×1×192×96+3×3×96×128）+（1×1×192×16+5×5×16×32），参数大约减少到原来的三分之一。同时在并行pooling层后面加入1×1卷积层后也可以降低输出的feature map数量，左图pooling后feature map是不变的，再加卷积层得到的feature map，会使输出的feature map扩大到416，如果每个模块都这样，网络的输出会越来越大。而右图在pooling后面加了通道数为32的1×1卷积，使得输出的feature map数降到了256。GoogLeNet利用1×1的卷积降维后，得到了更为紧凑的网络结构，虽然总共有22层，但是参数数量却只是8层AlexNet的十二分之一，当然其中也有丢掉全连接层的原因。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img20.png" alt="image"><br>而非常经典的ResNet结构，同样也使用了1×1卷积，并且是在3×3卷积层的前后都使用了，不仅进行了降维，还进行了升维，使得卷积层的输入和输出的通道数都减小，参数数量进一步减少，如下图结构所示。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img21.png" alt="image"></p><h2 id="5-9-卷积层和池化层有什么区别？"><a href="#5-9-卷积层和池化层有什么区别？" class="headerlink" title="5.9 卷积层和池化层有什么区别？"></a>5.9 卷积层和池化层有什么区别？</h2><p>首先可以从结构上可以看出，卷积之后输出层的维度减小，深度变深。但池化层深度不变。同时池化可以把很多数据用最大值或者平均值代替。目的是降低数据量。降低训练的参数。对于输入层，当其中像素在邻域发生微小位移时，池化层的输出是不变的，从而能提升鲁棒性。而卷积则是把数据通过一个卷积核变化成特征，便于后面的分离。</p><p>1:卷积</p><p>当从一个大尺寸图像中随机选取一小块，比如说 8x8 作为样本，并且从这个小块样本中学习到了一些特征，这时我们可以把从这个 8x8 样本中学习到的特征作为探测器，应用到这个图像的任意地方中去。特别是，我们可以用从 8x8 样本中所学习到的特征跟原本的大尺寸图像作卷积，从而对这个大尺寸图像上的任一位置获得一个不同特征的激活值。</p><p>下面给出一个具体的例子：假设你已经从一个 96x96 的图像中学习到了它的一个 8x8 的样本所具有的特征，假设这是由有 100 个隐含单元的自编码完成的。为了得到卷积特征，需要对 96x96 的图像的每个 8x8 的小块图像区域都进行卷积运算。也就是说，抽取 8x8 的小块区域，并且从起始坐标开始依次标记为（1，1），（1，2），…，一直到（89，89），然后对抽取的区域逐个运行训练过的稀疏自编码来得到特征的激活值。在这个例子里，显然可以得到 100 个集合，每个集合含有 89x89 个卷积特征。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img22.png" alt="image"></p><p>2：说下池化，其实池化很容易理解，先看图：</p><p>转自：  <a href="http://blog.csdn.net/silence1214/article/details/11809947" target="_blank" rel="noopener">http://blog.csdn.net/silence1214/article/details/11809947</a></p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img23.png" alt="image"></p><p>比如上方左侧矩阵A是20<em>20的矩阵要进行大小为10</em>10的池化，那么左侧图中的红色就是10*10的大小，对应到右侧的矩阵，右侧每个元素的值，是左侧红色矩阵每个元素的值得和再处于红色矩阵的元素个数，也就是平均值形式的池化。</p><p>3：上面说了下卷积和池化，再说下计算中需要注意到的。在代码中使用的是彩色图，彩色图有3个通道，那么对于每一个通道来说要单独进行卷积和池化，有一个地方尤其是进行卷积的时候要注意到，隐藏层的每一个值是对应到一幅图的3个通道穿起来的，所以分3个通道进行卷积之后要加起来，正好才能对应到一个隐藏层的神经元上，也就是一个feature上去。</p><h2 id="5-10-卷积核是否一定越大越好？"><a href="#5-10-卷积核是否一定越大越好？" class="headerlink" title="5.10 卷积核是否一定越大越好？"></a>5.10 卷积核是否一定越大越好？</h2><p>首先，给出答案。不是。<br>在AlexNet网络结构中，用到了一些非常大的卷积核，比如11×11、5×5卷积核。之前研究者的想法是，卷积核越大，receptive field（感受野）越大，因此获得的特征越好。虽说如此，但是大的卷积核会导致计算量大幅增加，不利于训练更深层的模型，而相应的计算性能也会降低。于是在VGG、Inception网络中，实验发现利用2个3×3卷积核的组合比1个5×5卷积核的效果更佳，同时参数量（3×3×2+1 VS 5×5×1+1）会更少，因此后来3×3卷积核被广泛应用在各种模型中。</p><p>多个小卷积核的叠加使用远比一个大卷积核单独使用效果要好的多，在连通性不变的情况下，大大降低了参数量和计算复杂度。当然，卷积核也不是越小越好，对于特别稀疏的数据，当使用比较小的卷积核的时候可能无法表示其特征，如果采用较大的卷积核则会导致复杂度极大的增加。</p><p>总而言之，我们多倾向于选择多个相对小的卷积核来进行卷积。</p><h2 id="5-11-每层卷积是否只能用一种尺寸的卷积核？"><a href="#5-11-每层卷积是否只能用一种尺寸的卷积核？" class="headerlink" title="5.11 每层卷积是否只能用一种尺寸的卷积核？"></a>5.11 每层卷积是否只能用一种尺寸的卷积核？</h2><p>经典的神经网络，都属于层叠式网络，并且每层仅用一个尺寸的卷积核，例如VGG结构中使用了大量的3×3卷积层。事实上，同一层feature map可以分别使用多个不同尺寸的卷积核，以获得不同尺度的特征，再把这些特征结合起来，得到的特征往往比使用单一卷积核的要好，例如GoogLeNet、Inception系列的网络，均是每层使用了多个卷积核结构。如下图所示，输入的feature map在同一层，分别经过1×1、3×3、5×5三种不同尺寸的卷积核，再将分别得到的特征进行组合。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img24.png" alt="image"></p><h2 id="5-12-怎样才能减少卷积层参数量？"><a href="#5-12-怎样才能减少卷积层参数量？" class="headerlink" title="5.12 怎样才能减少卷积层参数量？"></a>5.12 怎样才能减少卷积层参数量？</h2><p>发明GoogleNet的团队发现，如果仅仅引入多个尺寸的卷积核，会带来大量的额外的参数，受到Network In Network中1×1卷积核的启发，为了解决这个问题，他们往Inception结构中加入了一些1×1的卷积核，如图所示：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img25.png" alt="image"></p><p>加入1×1卷积核的Inception结构</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img26.png" alt="image"></p><p>根据上图，我们来做个对比计算，假设输入feature map的维度为256维，要求输出维度也是256维。有以下两种操作：  </p><ul><li>（1）256维的输入直接经过一个3×3×256的卷积层，输出一个256维的feature map，那么参数量为：256×3×3×256 = 589,824  </li><li>（2）256维的输入先经过一个1×1×64的卷积层，再经过一个3×3×64的卷积层，最后经过一个1×1×256的卷积层，输出256维，参数量为：256×1×1×64 + 64×3×3×64 + 64×1×1×256 = 69,632。足足把第一种操作的参数量降低到九分之一！</li></ul><p>1×1卷积核也被认为是影响深远的操作，往后大型的网络为了降低参数量都会应用上1×1卷积核。</p><h2 id="5-13-在进行卷积操作时，必须同时考虑通道和区域吗？"><a href="#5-13-在进行卷积操作时，必须同时考虑通道和区域吗？" class="headerlink" title="5.13 在进行卷积操作时，必须同时考虑通道和区域吗？"></a>5.13 在进行卷积操作时，必须同时考虑通道和区域吗？</h2><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img27.png" alt="image"><br>标准的卷积过程可以看上图，一个2×2的卷积核在卷积时，对应图像区域中的所有通道均被同时考虑，那么问题来了，为什么一定要同时考虑图像区域和通道呢？能不能将通道和空间区域分开考虑？<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img28.png" alt="image"><br>Xception网络由此诞生。我们首先对每一个通道进行各自的卷积操作，有多少个通道就有多少个过滤器。得到新的通道feature maps之后，这时再对这批新的通道feature maps进行标准的1×1跨通道卷积操作。这种操作被称为 “DepthWise convolution”，称为深度可分离卷积。在imagenet 1000类分类任务中取得了非常鲁棒的效果，同时也减少了大量的参数。我们可以通过一个例子来算一算，使用深度可分离卷积，能d假设输入通道数为3，要求输出通道数为256。 </p><ol><li>使用标准的卷积操作，使用3×3×256的卷积核，参数量为：3×3×3×256 = 6,912  </li><li>使用深度可分离的结构，分两步完成。参数量为：3×3×3 + 3×1×1×256 = 795。<br>参数量仅为标准卷积的九分之一！ 因此，使用depthwise操作比标准的卷积操作，在降低不少参数量的同时，得到了更好的分类效果。</li></ol><h2 id="5-14-采用宽卷积的好处有什么？"><a href="#5-14-采用宽卷积的好处有什么？" class="headerlink" title="5.14 采用宽卷积的好处有什么？"></a>5.14 采用宽卷积的好处有什么？</h2><h3 id="5-14-1-窄卷积和宽卷积"><a href="#5-14-1-窄卷积和宽卷积" class="headerlink" title="5.14.1 窄卷积和宽卷积"></a>5.14.1 窄卷积和宽卷积</h3><p>对于窄卷积来说，是从第一个点开始做卷积，每次窗口滑动固定步幅。比如下图左部分为窄卷积。那么注意到越在边缘的位置被卷积的次数越少。于是有了宽卷积的方法，可以看作在卷积之前在边缘用0补充，常见有两种情况，一个是全补充，入下图右部分，这样输出大于输入的维度。另一种常用的方法是补充一部0值，使得输出和输入的维度一致。这里文中给了一个公式 。这里npadding在全补充里是filter-1，在输入输出相等时，就要主要奇偶性了，注意到卷积核常为奇数。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img29.png" alt="image"></p><h3 id="5-14-2-为什么采用宽卷积？"><a href="#5-14-2-为什么采用宽卷积？" class="headerlink" title="5.14.2 为什么采用宽卷积？"></a>5.14.2 为什么采用宽卷积？</h3><p> 通过将输入边角的值纳入到滑窗中心进行计算，以便损失更少的信息。</p><h2 id="5-15-在卷积操作后，输出特征图（图像）大小如何计算？"><a href="#5-15-在卷积操作后，输出特征图（图像）大小如何计算？" class="headerlink" title="5.15 在卷积操作后，输出特征图（图像）大小如何计算？"></a>5.15 在卷积操作后，输出特征图（图像）大小如何计算？</h2><p>在进行卷积操作时，往往根据需要，我们需设定一些参数。常见的参数有卷积核大小k, 窗口滑动的步长s, 进行填充的像素p, 假设输入特征图大小为Iw*Iw。则由以下公式可计算出输出特征图的大小Ow。</p><p>O_w = \frac{(I_w - k + 2p))}{s} + 1</p><h2 id="5-16-如何得到卷积层输出的深度？"><a href="#5-16-如何得到卷积层输出的深度？" class="headerlink" title="5.16 如何得到卷积层输出的深度？"></a>5.16 如何得到卷积层输出的深度？</h2><p>参数共享：在卷积层中使用参数共享是用来控制参数的数量。假设在第一个卷积层就有55x55x96=290,400个神经元，每个有11x11x3=364个参数和1个偏差。将这些合起来就是290400x364=105,705,600个参数。单单第一层就有这么多参数，显然这个数目是非常大的。</p><p>作一个合理的假设：如果一个特征在计算某个空间位置(x,y)的时候有用，那么它在计算另一个不同位置(x2,y2)的时候也有用。基于这个假设，可以显著地减少参数数量。换言之，就是将深度维度上一个单独的2维切片看做深度切片（depth slice），比如一个数据体尺寸为[55x55x96]的就有96个深度切片，每个尺寸为[55x55]。在每个深度切片上的神经元都使用同样的权重和偏差。在这样的参数共享下，例子中的第一个卷积层就只有96个不同的权重集了，一个权重集对应一个深度切片，共有96x11x11x3=34,848个不同的权重，或34,944个参数（+96个偏差）。</p><p>w_conv1=weight_variable([5,5,1,32])</p><p>可以看出，上面的32表示的是卷积层输出的深度，因为大家都明白width和height都可以通过公式计算得到，但是很多文献都没有告诉深度是如何得到的，下面是我的认识： </p><ol><li>因为这个深度是没有公式可以计算出来的，因为深度是一个经验值，如上面代码的32 ，其实是一个经验值，是通过调整参数发现32是一个最合适的值，可以得到最好的准确率，但是不同的图像的深度是不一样的。</li><li>这个深度表示用了多少个卷积核，下面这个图可以说明一下：</li></ol><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img30.png" alt="image"></p><p>上图就可以很有效的说明 ：卷积层输出的深度==卷积核的个数。</p><h2 id="5-17-激活函数通常放在卷积神经网络的哪个操作之后？"><a href="#5-17-激活函数通常放在卷积神经网络的哪个操作之后？" class="headerlink" title="5.17 激活函数通常放在卷积神经网络的哪个操作之后？"></a>5.17 激活函数通常放在卷积神经网络的哪个操作之后？</h2><p> 通常放在卷积层之后。</p><h2 id="5-18-如何理解最大池化层有几分缩小？"><a href="#5-18-如何理解最大池化层有几分缩小？" class="headerlink" title="5.18 如何理解最大池化层有几分缩小？"></a>5.18 如何理解最大池化层有几分缩小？</h2><p>池化层：对输入的特征图进行压缩，一方面使特征图变小，简化网络计算复杂度；一方面进行特征压缩，提取主要特征。</p><p>池化操作一般有两种，一种是Avy Pooling,一种是max Pooling。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img31.png" alt="image"></p><p>同样地采用一个2*2的filter,max pooling是在每一个区域中寻找最大值，这里的stride=2,最终在原特征图中提取主要特征得到右图。  </p><blockquote><p>注1：（Avy pooling现在不怎么用了，方法是对每一个2<em>2的区域元素求和，再除以4，得到主要特征），而一般的filter取2</em>2,最大取3*3,stride取2，压缩为原来的1/4.<br>注2：这里的pooling操作是特征图缩小，有可能影响网络的准确度，因此可以通过增加特征图的深度来弥补。</p></blockquote><h2 id="5-19-理解图像卷积与反卷积"><a href="#5-19-理解图像卷积与反卷积" class="headerlink" title="5.19 理解图像卷积与反卷积"></a>5.19 理解图像卷积与反卷积</h2><h3 id="5-19-1-图像卷积"><a href="#5-19-1-图像卷积" class="headerlink" title="5.19.1 图像卷积"></a>5.19.1 图像卷积</h3><p>首先给出一个输入输出结果</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img32.png" alt="image"></p><p>那他是怎样计算的呢？</p><p>卷积的时候需要对卷积核进行180的旋转，同时卷积核中心与需计算的图像像素对齐，输出结构为中心对齐像素的一个新的像素值，计算例子如下：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img33.png" alt="image"></p><p>这样计算出左上角(即第一行第一列)像素的卷积后像素值。</p><p>给出一个更直观的例子，从左到右看，原像素经过卷积由1变成-8。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img34.png" alt="image"></p><p>通过滑动卷积核，就可以得到整张图片的卷积结果</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img35.png" alt="image"></p><h3 id="5-19-2-图像反卷积"><a href="#5-19-2-图像反卷积" class="headerlink" title="5.19.2 图像反卷积"></a>5.19.2 图像反卷积</h3><p>这里提到的反卷积跟1维信号处理的反卷积计算是很不一样的，FCN作者称为backwards convolution，有人称Deconvolution layer is a very unfortunate name and should rather be called a transposed convolutional layer. 我们可以知道，在CNN中有con layer与pool layer，con layer进行对图像卷积提取特征，pool layer 对图像缩小一半筛选重要特征，对于经典的图像识别CNN网络，如IMAGENET，最后输出结果是1X1X1000，1000是类别种类，1x1得到的是。FCN作者，或者后来对end to end研究的人员，就是对最终1x1的结果使用反卷积（事实上FCN作者最后的输出不是1X1，是图片大小的32分之一，但不影响反卷积的使用）。</p><p>这里图像的反卷积与full卷积原理是一样的，使用了这一种反卷积手段使得图像可以变大，FCN作者使用的方法是这里所说反卷积的一种变体，这样就可以获得相应的像素值，图像可以实现end to end。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img36.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img37.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img38.png" alt="image"></p><p>这里说另外一种反卷积做法，假设原图是3<em>3，首先使用上采样让图像变成7</em>7，可以看到图像多了很多空白的像素点。使用一个3<em>3的卷积核对图像进行滑动步长为1的valid卷积，得到一个5</em>5的图像，我们知道的是使用上采样扩大图片，使用反卷积填充图像内容，使得图像内容变得丰富，这也是CNN输出end to end结果的一种方法。韩国作者Hyeonwoo Noh使用VGG16层CNN网络后面加上对称的16层反卷积与上采样网络实现end to end 输出，其不同层上采样与反卷积变化效果如下：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img39.png" alt="image"></p><p>经过上面的解释与推导，对卷积有基本的了解，但是在图像上的deconvolution究竟是怎么一回事，可能还是不能够很好的理解，因此这里再对这个过程解释一下。 目前使用得最多的deconvolution有2种，上文都已经介绍。  </p><ul><li>方法1：full卷积， 完整的卷积可以使得原来的定义域变大。</li><li>方法2：记录pooling index，然后扩大空间，再用卷积填充。</li></ul><p>图像的deconvolution过程如下：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img40.png" alt="image"></p><p>输入：2x2， 卷积核：4x4， 滑动步长：3， 输出：7x7 </p><p>即输入为2x2的图片经过4x4的卷积核进行步长为3的反卷积的过程 </p><ol><li>输入图片每个像素进行一次full卷积，根据full卷积大小计算可以知道每个像素的卷积后大小为 1+4-1=4， 即4x4大小的特征图，输入有4个像素所以4个4x4的特征图 </li><li>将4个特征图进行步长为3的fusion（即相加）； 例如红色的特征图仍然是在原来输入位置（左上角），绿色还是在原来的位置（右上角），步长为3是指每隔3个像素进行fusion，重叠部分进行相加，即输出的第1行第4列是由红色特阵图的第一行第四列与绿色特征图的第一行第一列相加得到，其他如此类推。  </li></ol><p>可以看出翻卷积的大小是由卷积核大小与滑动步长决定， in是输入大小， k是卷积核大小， s是滑动步长， out是输出大小 得到 out = (in - 1) <em> s + k 上图过程就是， (2 - 1) </em> 3 + 4 = 7</p><h2 id="5-20-不同卷积后图像大小计算？"><a href="#5-20-不同卷积后图像大小计算？" class="headerlink" title="5.20 不同卷积后图像大小计算？"></a>5.20 不同卷积后图像大小计算？</h2><h3 id="5-20-1-类型划分"><a href="#5-20-1-类型划分" class="headerlink" title="5.20.1 类型划分"></a>5.20.1 类型划分</h3><p>2维卷积的计算分为了3类：1.full   2.same   3. valid</p><p>1、<strong>full</strong></p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img41.png" alt="image"></p><p>蓝色为原图像，白色为对应卷积所增加的padding，通常全部为0，绿色是卷积后图片。图6的卷积的滑动是从卷积核右下角与图片左上角重叠开始进行卷积，滑动步长为1，卷积核的中心元素对应卷积后图像的像素点。可以看到卷积后的图像是4X4，比原图2X2大了，我们还记1维卷积大小是n1+n2-1，这里原图是2X2，卷积核3X3，卷积后结果是4X4，与一维完全对应起来了。其实这才是完整的卷积计算，其他比它小的卷积结果都是省去了部分像素的卷积</p><p>2、<strong>same</strong></p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img42.png" alt="image"></p><p>3、<strong>valid</strong></p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img43.png" alt="image"></p><h3 id="5-20-2-计算公式"><a href="#5-20-2-计算公式" class="headerlink" title="5.20.2 计算公式"></a>5.20.2 计算公式</h3><p>这里，我们可以总结出full，same，valid三种卷积后图像大小的计算公式：</p><ol><li>full: 滑动步长为1，图片大小为N1xN1，卷积核大小为N2xN2，卷积后图像大小：N1+N2-1 x N1+N2-1。</li><li>same: 滑动步长为1，图片大小为N1xN1，卷积核大小为N2xN2，卷积后图像大小：N1xN1。</li><li>valid:滑动步长为S，图片大小为N1xN1，卷积核大小为N2xN2，卷积后图像大小：(N1-N2)/S+1 x (N1-N2)/S+1。</li></ol><h2 id="5-21-步长、填充大小与输入输出关系总结？"><a href="#5-21-步长、填充大小与输入输出关系总结？" class="headerlink" title="5.21 步长、填充大小与输入输出关系总结？"></a>5.21 步长、填充大小与输入输出关系总结？</h2><p>在设计深度学习网络的时候，需要计算输入尺寸和输出尺寸，那么就要设计卷积层的的各种参数。这里有一些设计时候的计算公式，方便得到各层的参数。</p><p>这里简化下，约定：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img44.png" alt="image"></p><h3 id="5-21-1-没有0填充，单位步长"><a href="#5-21-1-没有0填充，单位步长" class="headerlink" title="5.21.1 没有0填充，单位步长"></a>5.21.1 没有0填充，单位步长</h3><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img45.png" alt="image"></p><h3 id="5-21-2-零填充，单位步长"><a href="#5-21-2-零填充，单位步长" class="headerlink" title="5.21.2 零填充，单位步长"></a>5.21.2 零填充，单位步长</h3><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img46.png" alt="image"></p><p><1>半填充<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img47.png" alt="image"></1></p><p><2>全填充<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img48.png" alt="image"></2></p><p>参考图如下图所示</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img49.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img50.png" alt="image"></p><h3 id="5-21-3-不填充，非单位步长"><a href="#5-21-3-不填充，非单位步长" class="headerlink" title="5.21.3 不填充，非单位步长"></a>5.21.3 不填充，非单位步长</h3><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img51.png" alt="image"></p><h3 id="5-21-4-零填充，非单位步长"><a href="#5-21-4-零填充，非单位步长" class="headerlink" title="5.21.4 零填充，非单位步长"></a>5.21.4 零填充，非单位步长</h3><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img52.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img53.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img54.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img55.png" alt="image"></p><p><a href="http://blog.csdn.net/u011692048/article/details/77572024" target="_blank" rel="noopener">http://blog.csdn.net/u011692048/article/details/77572024</a><br><a href="https://arxiv.org/pdf/1603.07285.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1603.07285.pdf</a></p><h2 id="5-22-理解反卷积和棋盘效应"><a href="#5-22-理解反卷积和棋盘效应" class="headerlink" title="5.22 理解反卷积和棋盘效应"></a>5.22 理解反卷积和棋盘效应</h2><h3 id="5-22-1-为什么出现棋盘现象？"><a href="#5-22-1-为什么出现棋盘现象？" class="headerlink" title="5.22.1 为什么出现棋盘现象？"></a>5.22.1 为什么出现棋盘现象？</h3><p>图像生成网络的上采样部分通常用反卷积网络，不合理的卷积核大小和步长会使反卷积操作产生棋盘效应 (checkerboard artifacts)。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img56.png" alt="image"><br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img57.png" alt="image"></p><p>重叠图案也在二维中形成。两个轴上的不均匀重叠相乘，产生不同亮度的棋盘状图案。</p><p>事实上，不均匀重叠往往在二维上更极端！因为两个模式相乘，所以它的不均匀性是原来的平方。例如，在一个维度中，一个步长为2，大小为3的反卷积的输出是其输入的两倍，但在二维中，输出是输入的4倍。</p><p>现在，生成图像时，神经网络通常使用多层反卷积，从一系列较低分辨率的描述中迭代建立更大的图像。虽然这些堆栈的反卷积可以消除棋盘效应，但它们经常混合，在更多尺度上产生棋盘效应。</p><p>直观地看，假设生成的图像中包含1只黑猫。黑猫身体部分的像素颜色应平滑过渡，或极端地说，该部分应全为黑色。实际生成的图像中该部分却有深深浅浅的近黑方块组成，很像棋盘的网格，即棋盘效应。</p><p><a href="https://distill.pub/2016/deconv-checkerboard/" target="_blank" rel="noopener">https://distill.pub/2016/deconv-checkerboard/</a><br><a href="http://blog.csdn.net/shadow_guo/article/details/52862161" target="_blank" rel="noopener">http://blog.csdn.net/shadow_guo/article/details/52862161</a></p><h3 id="5-22-2-有哪些方法可以避免棋盘效应？"><a href="#5-22-2-有哪些方法可以避免棋盘效应？" class="headerlink" title="5.22.2 有哪些方法可以避免棋盘效应？"></a>5.22.2 有哪些方法可以避免棋盘效应？</h3><p>（1）第一种方法是用到的反卷积核的大小可被步长整除，从而避免重叠效应。与最近成功用于图像超分辨率的技术“子像素卷积”（sub-pixel convolution）等价。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img58.png" alt="image"></p><p>（2）另一种方法是从卷积操作中分离出对卷积后更高分辨率的特征图上采样来计算特征。例如，可以先缩放图像（最近邻插值或双线性插值），再卷积。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img59.png" alt="image"></p><p>反卷积与不同缩放卷积方法都是线性操作，并可用矩阵去解释。对于每个输出窗口，反卷积操作的输入唯一，缩放卷积会以阻碍高频棋盘效应的方式来隐式地集中权重（weight-tying）。</p><h4 id="缩放卷积"><a href="#缩放卷积" class="headerlink" title="缩放卷积"></a>缩放卷积</h4><p>缩放卷积为线性操作：假设原图像为A，经过插值后的图像为A+B；用卷积核C对插值缩放后的图像卷积，得到最终的图像 ，其中*为卷积操作。则可将缩放卷积分解为原图像卷积和插值增量图像卷积，或卷积的原图像和卷积的插值增量图像。</p><p>C为卷积操作的卷积核。此时为上采样，理解为反卷积操作中的卷积核。</p><p>（1）最近邻缩放卷积</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img60.png" alt="image"></p><p>发现，插值增量图像表示的矩阵为原图像表示的矩阵下移1行。可将原图像矩阵看成环形队列（队列最后1行的输出送入队列的第1行）。</p><p>（2）双线性缩放卷积</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img61.png" alt="image"></p><p>发现，插值增量图像可细分为原图像表示的矩阵下移1行后乘以1/2与原图像表示的矩阵上移1行后乘以1/2。</p><h2 id="5-23-CNN主要的计算瓶颈"><a href="#5-23-CNN主要的计算瓶颈" class="headerlink" title="5.23 CNN主要的计算瓶颈"></a>5.23 CNN主要的计算瓶颈</h2><p>CNN的训练主要是在卷积层和子采样层的交互上，其主要的计算瓶颈是：</p><ul><li>1）前向传播过程：下采样每个卷积层的maps；</li><li>2）反向传播过程：上采样高层子采样层的灵敏度map，以匹配底层的卷积层输出maps的大小；</li><li>3）sigmoid的运用和求导。</li></ul><p>举例： </p><p>对于第一和第二个问题，我们考虑的是如何用Matlab内置的图像处理函数去实现上采样和下采样的操作。对于上采样，imresize函数可以搞定，但需要很大的开销。一个比较快速的版本是使用Kronecker乘积函数kron。通过一个全一矩阵ones来和我们需要上采样的矩阵进行Kronecker乘积，就可以实现上采样的效果。对于前向传播过程中的下采样，imresize并没有提供在缩小图像的过程中还计算nxn块内像素的和的功能，所以没法用。一个比较好和快速的方法是用一个全一的卷积核来卷积图像，然后简单的通过标准的索引方法来采样最后卷积结果。例如，如果下采样的域是2x2的，那么我们可以用2x2的元素全是1的卷积核来卷积图像。然后再卷积后的图像中，我们每个2个点采集一次数据，y=x(1:2:end,1:2:end)，这样就可以得到了两倍下采样，同时执行求和的效果。</p><p>对于第三个问题，实际上有些人以为Matlab中对sigmoid函数进行inline的定义会更快，其实不然，Matlab与C/C++等等语言不一样，Matlab的inline反而比普通的函数定义更费时间。所以，我们可以直接在代码中使用计算sigmoid函数及其导数的真实代码。</p><h2 id="5-24-卷积神经网络的经验参数设置"><a href="#5-24-卷积神经网络的经验参数设置" class="headerlink" title="5.24 卷积神经网络的经验参数设置"></a>5.24 卷积神经网络的经验参数设置</h2><p>对于卷积神经网络的参数设置，没有很明确的指导原则，以下仅是一些经验集合。</p><p>1、learning-rate 学习率：学习率越小，模型收敛花费的时间就越长，但是可以逐步稳健的提高模型精确度。一般初始设置为0.1，然后每次除以0.2或者0.5来改进，得到最终值；</p><p>2、batch-size 样本批次容量：影响模型的优化程度和收敛速度，需要参考你的数据集大小来设置，具体问题具体分析，一般使用32或64，在计算资源允许的情况下，可以使用大batch进行训练。有论文提出，大batch可以加速训练速度，并取得更鲁棒的结果；</p><p>3、weight-decay 权重衰减：用来在反向传播中更新权重和偏置，一般设置为0.005或0.001；</p><p>4、epoch-number 训练次数：包括所有训练样本的一个正向传递和一个反向传递，训练至模型收敛即可；（注：和迭代次数iteration不一样）<br>总之，不是训练的次数越多，测试精度就会越高。会有各种原因导致过拟合，比如一种可能是预训练的模型太复杂，而使用的数据集样本数量太少，种类太单一。</p><h2 id="5-25-提高泛化能力的方法总结（代码示例）"><a href="#5-25-提高泛化能力的方法总结（代码示例）" class="headerlink" title="5.25 提高泛化能力的方法总结（代码示例）"></a>5.25 提高泛化能力的方法总结（代码示例）</h2><p>本节主要以代码示例来说明可以提高网络泛化能力的方法。<br>代码实验是基于mnist数据集，mnist是一个从0到9的手写数字集合，共有60000张训练图片，10000张测试图片。每张图片大小是28*28大小。目的就是通过各种手段，来构建一个高精度的分类神经网络。 </p><h3 id="5-25-1-手段"><a href="#5-25-1-手段" class="headerlink" title="5.25.1 手段"></a>5.25.1 手段</h3><p>一般来说，提高泛化能力的方法主要有以下几个：</p><blockquote><ul><li>使用正则化技术</li><li>增加神经网络层数</li><li>使用恰当的代价函数</li><li>使用权重初始化技术</li><li>人为增广训练集</li><li>使用dropout技术 </li></ul></blockquote><h3 id="5-25-2-主要方法"><a href="#5-25-2-主要方法" class="headerlink" title="5.25.2 主要方法"></a>5.25.2 主要方法</h3><p>下面我们通过实验结果来判断每种手段的效果。</p><p>（1）普通的全连接神经网络<br>网络结构使用一个隐藏层，其中包含100个隐藏神经元，输入层是784，输出层是one-hot编码的形式，最后一层是Softmax层。损失函数采用对数似然代价函数，60次迭代，学习速率η=0.1，随机梯度下降的小批量数据（mini-SGD）大小为10，没使用正则化。在测试集上得到的结果是97.8%，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> network3 </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> network3 <span class="keyword">import</span> Network </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> network3 <span class="keyword">import</span> ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>training_data, validation_data, test_data = network3.load_data_shared() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mini_batch_size = <span class="number">10</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([FullyConnectedLayer(n_in=<span class="number">784</span>, n_out=<span class="number">100</span>),</span><br><span class="line">         SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.1</span>, validation_data, test_data)</span><br></pre></td></tr></table></figure></p><p>（2）使用卷积神经网络 — 仅一个卷积层<br>输入层是卷积层，卷积核大小是5<em>5，一共20个特征映射。最大池化层的大小为2</em>2。后面接一层100个隐藏神经元的全连接层。结构如图所示<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img62.png" alt="image"><br>在这个结构中，我们把卷积层和池化层看做是训练图像的特征提取，而后的全连接层则是一个更抽象层次的特征提取，整合全局信息。同样设定是60次迭代，批量数据大小是10，学习率是0.1.代码如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">20</span>*<span class="number">12</span>*<span class="number">12</span>, n_out=<span class="number">100</span>),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.1</span>, </span><br><span class="line">            validation_data, test_data)</span><br></pre></td></tr></table></figure></p><p>经过三次运行取平均后，准确率是98.78%，提高得较多。错误率降低了1/3。</p><p>（3）使用卷积神经网络 — 两个卷积层<br>我们接着插入第二个卷积层，把它插入在之前结构的池化层和全连接层之间，同样是使用5<em>5的局部感受野，2</em>2的池化层。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>), </span><br><span class="line">                      filter_shape=(<span class="number">40</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span>, n_out=<span class="number">100</span>),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.1</span>, validation_data, test_data)</span><br></pre></td></tr></table></figure></p><p>这一次，准确率达到了99.06%。</p><p>（4）使用卷积神经网络 — 两个卷积层+线性修正单元(ReLU)+正则化<br>上面的网络结构，我们使用的是Sigmod激活函数，现在我们换成线性修正激活函数ReLU ，同样设定参数为60次迭代，学习速率η=0.03，使用L2正则化，正则化参数λ=0.1，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> network3 <span class="keyword">import</span> ReLU</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>), </span><br><span class="line">                      filter_shape=(<span class="number">40</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span>, n_out=<span class="number">100</span>, activation_fn=ReLU),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.03</span>, </span><br><span class="line">            validation_data, test_data, lmbda=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></p><p>这一次，准确率达到了99.23%，超过了使用sigmoid激活函数的99.06%. ReLU的优势是当取最大极限时，梯度不会饱和。</p><p>（5）卷积神经网络 —两个卷基层+线性修正单元(ReLU)+正则化+拓展数据集<br>拓展训练集数据的一个简单方法是将每个训练图像由一个像素来代替，无论是上一个像素，下一个像素，或者左右的像素。其他的方法也有改变亮度，改变分辨率，图片旋转，扭曲，位移等。我们把50000幅图像人为拓展到250000幅图像。使用与第四小节一样的网络，因为我们训练时使用了5倍的数据，所以减少了过拟合的风险。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>expanded_training_data, _, _ = network3.load_data_shared(</span><br><span class="line">        <span class="string">"../data/mnist_expanded.pkl.gz"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>), </span><br><span class="line">                      filter_shape=(<span class="number">40</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span>, n_out=<span class="number">100</span>, activation_fn=ReLU),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(expanded_training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.03</span>, </span><br><span class="line">            validation_data, test_data, lmbda=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></p><p>这次得到了99.37的训练正确率。</p><p>（6）卷积神经网络 — 两个卷基层+线性修正单元(ReLU)+正则化+拓展数据集+继续插入额外的全连接层<br>继续上面的网络，我们拓展全连接层的规模，使用300个隐藏神经元和1000个神经元的额精度分别是99.46%和99.43%.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>), </span><br><span class="line">                      filter_shape=(<span class="number">40</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span>, n_out=<span class="number">100</span>, activation_fn=ReLU),</span><br><span class="line">        FullyConnectedLayer(n_in=<span class="number">100</span>, n_out=<span class="number">100</span>, activation_fn=ReLU),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">100</span>, n_out=<span class="number">10</span>)], mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(expanded_training_data, <span class="number">60</span>, mini_batch_size, <span class="number">0.03</span>, </span><br><span class="line">            validation_data, test_data, lmbda=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></p><p>这次取得了99.43%的精度。拓展后的网络并没有帮助太多。</p><p>（7）卷积神经网络 — 两个卷基层+线性修正单元(ReLU)+拓展数据集+继续插入额外的全连接层+dropout技术<br>dropout的基本思想就是在训练网络时随机的移除单独的激活值，使得模型更稀疏，不太依赖于训练数据的特质。我们尝试应用dropout到最终的全连接层(而不是在卷积层)。由于训练时间，将迭代次数设置为40，全连接层使用1000个隐藏神经元，因为dropout会丢弃一些神经元。Dropout是一种非常有效且能提高泛化能力，降低过拟合的方法！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>net = Network([</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), </span><br><span class="line">                      filter_shape=(<span class="number">20</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        ConvPoolLayer(image_shape=(mini_batch_size, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>), </span><br><span class="line">                      filter_shape=(<span class="number">40</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>), </span><br><span class="line">                      poolsize=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">                      activation_fn=ReLU),</span><br><span class="line">        FullyConnectedLayer(</span><br><span class="line">            n_in=<span class="number">40</span>*<span class="number">4</span>*<span class="number">4</span>, n_out=<span class="number">1000</span>, activation_fn=ReLU, p_dropout=<span class="number">0.5</span>),</span><br><span class="line">        FullyConnectedLayer(</span><br><span class="line">            n_in=<span class="number">1000</span>, n_out=<span class="number">1000</span>, activation_fn=ReLU, p_dropout=<span class="number">0.5</span>),</span><br><span class="line">        SoftmaxLayer(n_in=<span class="number">1000</span>, n_out=<span class="number">10</span>, p_dropout=<span class="number">0.5</span>)], </span><br><span class="line">        mini_batch_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>net.SGD(expanded_training_data, <span class="number">40</span>, mini_batch_size, <span class="number">0.03</span>, </span><br><span class="line">            validation_data, test_data)</span><br></pre></td></tr></table></figure></p><p>使用dropout，得到了99.60%的准确率。</p><p>（8）卷积神经网络 — 两个卷基层+线性修正单元(ReLU)+正则化+拓展数据集+继续插入额外的全连接层+弃权技术+组合网络<br>组合网络类似于随机森林或者adaboost的集成方法，创建几个神经网络，让他们投票来决定最好的分类。我们训练了5个不同的神经网络，每个都大到了99.60%的准去率，用这5个网络来进行投票表决一个图像的分类。<br>采用这种集成方法，精度又得到了微小的提升，达到了99.67%。</p><h2 id="5-26-CNN在CV与NLP领域运用的联系与区别？"><a href="#5-26-CNN在CV与NLP领域运用的联系与区别？" class="headerlink" title="5.26 CNN在CV与NLP领域运用的联系与区别？"></a>5.26 CNN在CV与NLP领域运用的联系与区别？</h2><h3 id="5-26-1-联系"><a href="#5-26-1-联系" class="headerlink" title="5.26.1 联系"></a>5.26.1 联系</h3><p>自然语言处理是对一维信号（词序列）做操作。<br>计算机视觉是对二维（图像）或三维（视频流）信号做操作。</p><h3 id="5-26-2-区别"><a href="#5-26-2-区别" class="headerlink" title="5.26.2 区别"></a>5.26.2 区别</h3><p>自然语言处理的输入数据通常是离散取值（例如表示一个单词或字母通常表示为词典中的one hot向量），计算机视觉则是连续取值（比如归一化到0，1之间的灰度值）。CNN有两个主要特点，区域不变性(location invariance)和组合性(Compositionality)。</p><ol><li>区域不变性：滤波器在每层的输入向量(图像)上滑动，检测的是局部信息，然后通过pooling取最大值或均值。pooling这步综合了局部特征，失去了每个特征的位置信息。这很适合基于图像的任务，比如要判断一幅图里有没有猫这种生物，你可能不会去关心这只猫出现在图像的哪个区域。但是在NLP里，词语在句子或是段落里出现的位置，顺序，都是很重要的信息。</li><li>局部组合性：CNN中，每个滤波器都把较低层的局部特征组合生成较高层的更全局化的特征。这在CV里很好理解，像素组合成边缘，边缘生成形状，最后把各种形状组合起来得到复杂的物体表达。在语言里，当然也有类似的组合关系，但是远不如图像来的直接。而且在图像里，相邻像素必须是相关的，相邻的词语却未必相关。</li></ol><h2 id="5-27-卷积神经网络凸显共性的方法？"><a href="#5-27-卷积神经网络凸显共性的方法？" class="headerlink" title="5.27 卷积神经网络凸显共性的方法？"></a>5.27 卷积神经网络凸显共性的方法？</h2><h3 id="5-27-1-局部连接"><a href="#5-27-1-局部连接" class="headerlink" title="5.27.1 局部连接"></a>5.27.1 局部连接</h3><p>我们首先了解一个概念，感受野，即每个神经元仅与输入神经元相连接的一块区域。<br>在图像卷积操作中，神经元在空间维度上是局部连接，但在深度上是全连接。局部连接的思想，是受启发于生物学里的视觉系统结构，视觉皮层的神经元就是仅用局部接受信息。对于二维图像，局部像素关联性较强。这种局部连接保证了训练后的滤波器能够对局部特征有最强的响应，使神经网络可以提取数据的局部特征；<br>下图是一个很经典的图示，左边是全连接，右边是局部连接。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img63.png" alt="image"></p><p>对于一个1000 × 1000的输入图像而言，如果下一个隐藏层的神经元数目为10^6个，采用全连接则有1000 × 1000 × 10^6 = 10^12个权值参数，如此巨大的参数量几乎难以训练；而采用局部连接，隐藏层的每个神经元仅与图像中10 × 10的局部图像相连接，那么此时的权值参数数量为10 × 10 × 10^6 = 10^8，将直接减少4个数量级。</p><h3 id="5-27-2-权值共享"><a href="#5-27-2-权值共享" class="headerlink" title="5.27.2 权值共享"></a>5.27.2 权值共享</h3><p>权值共享，即计算同一深度的神经元时采用的卷积核参数是共享的。权值共享在一定程度上讲是有意义的，是由于在神经网络中，提取的底层边缘特征与其在图中的位置无关。但是在另一些场景中是无意的，如在人脸识别任务，我们期望在不同的位置学到不同的特征。<br>需要注意的是，权重只是对于同一深度切片的神经元是共享的。在卷积层中，通常采用多组卷积核提取不同的特征，即对应的是不同深度切片的特征，而不同深度切片的神经元权重是不共享。相反，偏置这一权值对于同一深度切片的所有神经元都是共享的。<br>权值共享带来的好处是大大降低了网络的训练难度。如下图，假设在局部连接中隐藏层的每一个神经元连接的是一个10 × 10的局部图像，因此有10 × 10个权值参数，将这10 × 10个权值参数共享给剩下的神经元，也就是说隐藏层中10^6个神经元的权值参数相同，那么此时不管隐藏层神经元的数目是多少，需要训练的参数就是这 10 × 10个权值参数（也就是卷积核的大小）。</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img64.png" alt="image"></p><p>这里就体现了卷积神经网络的奇妙之处，使用少量的参数，却依然能有非常出色的性能。上述仅仅是提取图像一种特征的过程。如果要多提取出一些特征，可以增加多个卷积核，不同的卷积核能够得到图像不同尺度下的特征，称之为特征图（feature map）。</p><h3 id="5-27-3-池化操作"><a href="#5-27-3-池化操作" class="headerlink" title="5.27.3 池化操作"></a>5.27.3 池化操作</h3><p>池化操作与多层次结构一起，实现了数据的降维，将低层次的局部特征组合成为较高层次的特征，从而对整个图片进行表示。如下图：</p><p><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img65.png" alt="image"></p><h2 id="5-28-全卷积与Local-Conv的异同点"><a href="#5-28-全卷积与Local-Conv的异同点" class="headerlink" title="5.28 全卷积与Local-Conv的异同点"></a>5.28 全卷积与Local-Conv的异同点</h2><p>如果每一个点的处理使用相同的Filter，则为全卷积，如果使用不同的Filter，则为Local-Conv。</p><h2 id="5-29-举例理解Local-Conv的作用"><a href="#5-29-举例理解Local-Conv的作用" class="headerlink" title="5.29 举例理解Local-Conv的作用"></a>5.29 举例理解Local-Conv的作用</h2><p>并不是所有的卷积都会进行权重共享，在某些特定任务中，会使用不权重共享的卷积。下面通过人脸这一任务来进行讲解。在读人脸方向的一些paper时，会发现很多都会在最后加入一个Local Connected Conv，也就是不进行权重共享的卷积层。总的来说，这一步的作用就是使用3D模型来将人脸对齐，从而使CNN发挥最大的效果。<br><img src="/2016/12/20/第五章 卷积神经网络CNN/img/ch5/img66.png" alt="image"></p><p>截取论文中的一部分图，经过3D对齐以后，形成的图像均是152×152，输入到上述的网络结构中。该结构的参数如下：</p><p>Conv：32个11×11×3的卷积核</p><p>max-pooling: 3×3，stride=2，</p><p>Conv: 16个9×9的卷积核，</p><p>Local-Conv: 16个9×9的卷积核，</p><p>Local-Conv: 16个7×7的卷积核，</p><p>Local-Conv: 16个5×5的卷积核，</p><p>Fully-connected: 4096维</p><p>Softmax: 4030维。</p><p>前三层的目的在于提取低层次的特征，比如简单的边和纹理。其中Max-pooling层使得卷积的输出对微小的偏移情况更加鲁棒。但不能使用更多的Max-pooling层，因为太多的Max-pooling层会使得网络损失图像信息。全连接层将上一层的每个单元和本层的所有单元相连，用来捕捉人脸图像不同位置特征之间的相关性。最后使用softmax层用于人脸分类。<br>中间三层都是使用参数不共享的卷积核，之所以使用参数不共享，有如下原因：</p><p>（1）对齐的人脸图片中，不同的区域会有不同的统计特征，因此并不存在特征的局部稳定性，所以使用相同的卷积核会导致信息的丢失。</p><p>（2）不共享的卷积核并不增加inference时特征的计算量，仅会增加训练时的计算量。<br>使用不共享的卷积核，由于需要训练的参数量大大增加，因此往往需要通过其他方法增加数据量。</p><h2 id="5-30-简述卷积神经网络进化史"><a href="#5-30-简述卷积神经网络进化史" class="headerlink" title="5.30 简述卷积神经网络进化史"></a>5.30 简述卷积神经网络进化史</h2><p>主要讨论CNN的发展，并且引用刘昕博士的思路，对CNN的发展作一个更加详细的介绍，将按下图的CNN发展史进行描述</p><p>![image](第五章 卷积神经网络CNN/img/ch5/img67）</p><ol><li>列表项<br><a href="http://mp.weixin.qq.com/s?__biz=MzI1NTE4NTUwOQ==&amp;mid=2650324619&amp;idx=1&amp;sn=ca1aed9e42d8f020d0971e62148e13be&amp;scene=1&amp;srcid=0503De6zpYN01gagUvn0Ht8D#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzI1NTE4NTUwOQ==&amp;mid=2650324619&amp;idx=1&amp;sn=ca1aed9e42d8f020d0971e62148e13be&amp;scene=1&amp;srcid=0503De6zpYN01gagUvn0Ht8D#wechat_redirect</a><br>CNN的演化路径可以总结为以下几个方向：<blockquote><ul><li>进化之路一：网络结构加深</li><li>进化之路二：加强卷积功能</li><li>进化之路三：从分类到检测</li><li>进化之路四：新增功能模块</li></ul></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>循环神经网络(RNN)</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E5%85%AD%E7%AB%A0_%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CRNN/"/>
    <id>https://leesen998.github.io/2016/12/20/第六章_循环神经网络RNN/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T14:25:31.643Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><p>新增 <a href="https://blog.csdn.net/zhaojc1995/article/details/80572098" target="_blank" rel="noopener">https://blog.csdn.net/zhaojc1995/article/details/80572098</a><br>RNN发展简述?<br>为什么需要RNN?<br>RNN的结构及变体<br>标准RNN的前向输出流程?<br>RNN的训练方法——BPTT?<br>什么是长期依赖（Long-Term Dependencies）问题?<br>LSTM 网络是什么?<br>LSTM 的核心思想?<br>如何逐步理解LSTM?<br>常见的RNNs扩展和改进模型<br>RNN种类?<br>讲解CNN+RNN的各种组合方式 <a href="http://www.elecfans.com/d/775895.html" target="_blank" rel="noopener">http://www.elecfans.com/d/775895.html</a><br>RNN学习和实践过程中常常碰到的疑问</p><h2 id="CNN和RNN的对比-http-www-elecfans-com-d-775895-html"><a href="#CNN和RNN的对比-http-www-elecfans-com-d-775895-html" class="headerlink" title="CNN和RNN的对比 http://www.elecfans.com/d/775895.html"></a>CNN和RNN的对比 <a href="http://www.elecfans.com/d/775895.html" target="_blank" rel="noopener">http://www.elecfans.com/d/775895.html</a></h2><p>1、CNN卷积神经网络与RNN递归神经网络直观图<br>2、相同点：<br>2.1. 传统神经网络的扩展。<br>2.2. 前向计算产生结果，反向计算模型更新。<br>2.3. 每层神经网络横向可以多个神经元共存,纵向可以有多层神经网络连接。<br>3、不同点<br>3.1. CNN空间扩展，神经元与特征卷积；RNN时间扩展，神经元与多个时间输出计算<br>3.2. RNN可以用于描述时间上连续状态的输出，有记忆功能，CNN用于静态输出<br>3.3. CNN高级100+深度，RNN深度有限</p><p><a href="http://blog.csdn.net/heyongluoyao8/article/details/48636251" target="_blank" rel="noopener">http://blog.csdn.net/heyongluoyao8/article/details/48636251</a></p><h2 id="6-1-为什么需要RNN？"><a href="#6-1-为什么需要RNN？" class="headerlink" title="6.1 为什么需要RNN？"></a>6.1 为什么需要RNN？</h2><p><a href="http://ai.51cto.com/art/201711/559441.htm" target="_blank" rel="noopener">http://ai.51cto.com/art/201711/559441.htm</a><br>神经网络可以当做是能够拟合任意函数的黑盒子，只要训练数据足够，给定特定的x，就能得到希望的y，结构图如下：<br>将神经网络模型训练好之后，在输入层给定一个x，通过网络之后就能够在输出层得到特定的y，那么既然有了这么强大的模型，为什么还需要RNN（循环神经网络）呢？<br>他们都只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后面的输入是有关系的。</p><p>比如，当我们在理解一句话意思时，孤立的理解这句话的每个词是不够的，我们需要处理这些词连接起来的整个序列； 当我们处理视频的时候，我们也不能只单独的去分析每一帧，而要分析这些帧连接起来的整个序列。</p><p>以nlp的一个最简单词性标注任务来说，将我 吃 苹果 三个单词标注词性为 我/nn 吃/v 苹果/nn。</p><p>那么这个任务的输入就是：</p><p>我 吃 苹果 （已经分词好的句子）</p><p>这个任务的输出是：</p><p>我/nn 吃/v 苹果/nn(词性标注好的句子)</p><p>对于这个任务来说，我们当然可以直接用普通的神经网络来做，给网络的训练数据格式了就是我-&gt; 我/nn 这样的多个单独的单词-&gt;词性标注好的单词。</p><p>但是很明显，一个句子中，前一个单词其实对于当前单词的词性预测是有很大影响的，比如预测苹果的时候，由于前面的吃是一个动词，那么很显然苹果作为名词的概率就会远大于动词的概率，因为动词后面接名词很常见，而动词后面接动词很少见。</p><p>所以为了解决一些这样类似的问题，能够更好的处理序列的信息，RNN就诞生了。</p><h2 id="6-1-RNN种类？"><a href="#6-1-RNN种类？" class="headerlink" title="6.1 RNN种类？"></a>6.1 RNN种类？</h2><p><a href="https://www.cnblogs.com/rucwxb/p/8047401.html" target="_blank" rel="noopener">https://www.cnblogs.com/rucwxb/p/8047401.html</a></p><ol><li><p>sequence-to-sequence：输入输出都是一个序列。例如股票预测中的RNN，输入是前N天价格，输出明天的股市价格。</p></li><li><p>sequence-to-vector：输入是一个序列，输出单一向量。</p></li><li><p>vector-to-sequence：输入单一向量，输出一个序列。</p></li></ol><p>4.Encoder-Decoder：输入sequence-to-vector，称作encoder，输出vector-to-sequence，称作decoder。</p><p>这是一个delay模型，经过一段延迟，即把所有输入都读取后，在decoder中获取输入并输出一个序列。这个模型在机器翻译中使用较广泛，源语言输在入放入encoder，浓缩在状态信息中，生成目标语言时，可以生成一个不长度的目标语言序列。</p><h2 id="RNN-train的时候，Loss波动很大"><a href="#RNN-train的时候，Loss波动很大" class="headerlink" title="RNN train的时候，Loss波动很大"></a>RNN train的时候，Loss波动很大</h2><p><a href="https://www.jianshu.com/p/30b253561337" target="_blank" rel="noopener">https://www.jianshu.com/p/30b253561337</a><br>由于RNN特有的memory会影响后期其他的RNN的特点，梯度时大时小，learning rate没法个性化的调整，导致RNN在train的过程中，Loss是震荡起伏的……<br>为了解决RNN的这个问题，在train的时候，可以有个clipping的方式，当梯度大于某个临界值，直接截断，用这个临界值作为梯度的大小，防止飞出去…（居然还能这么操作，66666）</p><h2 id="6-1-RNNs和FNNs有什么区别？"><a href="#6-1-RNNs和FNNs有什么区别？" class="headerlink" title="6.1 RNNs和FNNs有什么区别？"></a>6.1 RNNs和FNNs有什么区别？</h2><ol><li>不同于传统的前馈神经网络(FNNs)，RNNs引入了定向循环，能够处理输入之间前后关联问题。</li><li>RNNs可以记忆之前步骤的训练信息。<br><strong>定向循环结构如下图所示</strong>：</li></ol><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.1_1.jpg" alt=""></p><h2 id="6-2-RNNs典型特点？"><a href="#6-2-RNNs典型特点？" class="headerlink" title="6.2 RNNs典型特点？"></a>6.2 RNNs典型特点？</h2><ol><li>RNNs主要用于处理序列数据。对于传统神经网络模型，从输入层到隐含层再到输出层，层与层之间一般为全连接，每层之间神经元是无连接的。但是传统神经网络无法处理数据间的前后关联问题。例如，为了预测句子的下一个单词，一般需要该词之前的语义信息。这是因为一个句子中前后单词是存在语义联系的。</li><li>RNNs中当前单元的输出与之前步骤输出也有关，因此称之为循环神经网络。具体的表现形式为当前单元（cell）会对之前步骤信息进行储存并应用于当前输出的计算中。隐藏层之间的节点连接起来，隐藏层当前输出由当前时刻输入向量和之前时刻隐藏层状态共同决定。</li><li>理论上，RNNs能够对任何长度序列数据进行处理。但是在实践中，为了降低复杂度往往假设当前的状态只与之前某几个时刻状态相关，<strong>下图便是一个典型的RNNs</strong>：</li></ol><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.2_1.png" alt=""></p><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.2_2.jpg" alt=""></p><p>输入单元(Input units)：输入集$\bigr{x_0,x_1,…,x_t,x_{t+1},…\bigr}$，</p><p>输出单元(Output units)：输出集$\bigr{y_0,y_1,…,y_t,y_{y+1},…\bigr}$，</p><p>隐藏单元(Hidden units)：输出集$\bigr{s_0,s_1,…,s_t,s_{t+1},…\bigr}$。</p><p><strong>图中信息传递特点：</strong></p><ol><li>一条单向流动的信息流是从输入单元到隐藏单元。</li><li>一条单向流动的信息流从隐藏单元到输出单元。</li><li>在某些情况下，RNNs会打破后者的限制，引导信息从输出单元返回隐藏单元，这些被称为“Back Projections”。</li><li>在某些情况下，隐藏层的输入还包括上一时刻隐藏层的状态，即隐藏层内的节点可以自连也可以互连。 </li><li>当前单元（cell）输出是由当前时刻输入和上一时刻隐藏层状态共同决定。</li></ol><h2 id="6-3-RNNs能干什么？"><a href="#6-3-RNNs能干什么？" class="headerlink" title="6.3 RNNs能干什么？"></a>6.3 RNNs能干什么？</h2><p>RNNs在自然语言处理领域取得了巨大成功，如词向量表达、语句合法性检查、词性标注等。在RNNs及其变型中，目前使用最广泛最成功的模型是LSTMs(Long Short-Term Memory，长短时记忆模型)模型，该模型相比于RNNs，能够更好地对长短时依赖进行描述。</p><h2 id="6-4-RNNs在NLP中典型应用？"><a href="#6-4-RNNs在NLP中典型应用？" class="headerlink" title="6.4 RNNs在NLP中典型应用？"></a>6.4 RNNs在NLP中典型应用？</h2><p><strong>（1）语言模型与文本生成(Language Modeling and Generating Text)</strong></p><p>给定一组单词序列，需要根据前面单词预测每个单词出现的可能性。语言模型能够评估某个语句正确的可能性，可能性越大，语句越正确。另一种应用便是使用生成模型预测下一个单词的出现概率，从而利用输出概率的采样生成新的文本。</p><p><strong>（2）机器翻译(Machine Translation)</strong></p><p>机器翻译是将一种源语言语句变成意思相同的另一种源语言语句，如将英语语句变成同样意思的中文语句。与语言模型关键的区别在于，需要将源语言语句序列输入后，才进行输出，即输出第一个单词时，便需要从完整的输入序列中进行获取。</p><p><strong>（3）语音识别(Speech Recognition)</strong></p><p>语音识别是指给定一段声波的声音信号，预测该声波对应的某种指定源语言语句以及计算该语句的概率值。 </p><p><strong>（4）图像描述生成 (Generating Image Descriptions)</strong></p><p>同卷积神经网络(convolutional Neural Networks, CNNs)一样，RNNs已经在对无标图像描述自动生成中得到应用。CNNs与RNNs结合也被应用于图像描述自动生成。<br><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.4_1.png" alt=""></p><h2 id="6-5-RNNs训练和传统ANN训练异同点？"><a href="#6-5-RNNs训练和传统ANN训练异同点？" class="headerlink" title="6.5 RNNs训练和传统ANN训练异同点？"></a>6.5 RNNs训练和传统ANN训练异同点？</h2><p><strong>相同点</strong>：</p><ol><li>RNNs与传统ANN都使用BP（Back Propagation）误差反向传播算法。</li></ol><p><strong>不同点</strong>：</p><ol><li>RNNs网络参数W,U,V是共享的，而传统神经网络各层参数间没有直接联系。</li><li>对于RNNs，在使用梯度下降算法中，每一步的输出不仅依赖当前步的网络，还依赖于之前若干步的网络状态。</li></ol><h2 id="6-6-常见的RNNs扩展和改进模型"><a href="#6-6-常见的RNNs扩展和改进模型" class="headerlink" title="6.6 常见的RNNs扩展和改进模型"></a>6.6 常见的RNNs扩展和改进模型</h2><h3 id="6-6-1-Simple-RNNs-SRNs"><a href="#6-6-1-Simple-RNNs-SRNs" class="headerlink" title="6.6.1 Simple RNNs(SRNs)"></a>6.6.1 Simple RNNs(SRNs)</h3><ol><li>SRNs是RNNs的一种特例，它是一个三层网络，其在隐藏层增加了上下文单元。下图中的<strong>y</strong>是隐藏层，<strong>u</strong>是上下文单元。上下文单元节点与隐藏层中节点的连接是固定的，并且权值也是固定的。上下文节点与隐藏层节点一一对应，并且值是确定的。</li><li>在每一步中，使用标准的前向反馈进行传播，然后使用学习算法进行学习。上下文每一个节点保存其连接隐藏层节点上一步输出，即保存上文，并作用于当前步对应的隐藏层节点状态，即隐藏层的输入由输入层的输出与上一步的自身状态所决定。因此SRNs能够解决标准多层感知机(MLP)无法解决的对序列数据进行预测的问题。<br><strong>SRNs网络结构如下图所示</strong>：</li></ol><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.1_1.png" alt=""></p><h3 id="6-6-2-Bidirectional-RNNs"><a href="#6-6-2-Bidirectional-RNNs" class="headerlink" title="6.6.2 Bidirectional RNNs"></a>6.6.2 Bidirectional RNNs</h3><p>Bidirectional RNNs(双向网络)将两层RNNs叠加在一起，当前时刻输出(第t步的输出)不仅仅与之前序列有关，还与之后序列有关。例如：为了预测一个语句中的缺失词语，就需要该词汇的上下文信息。Bidirectional RNNs是一个相对较简单的RNNs，是由两个RNNs上下叠加在一起组成的。输出由前向RNNs和后向RNNs共同决定。<strong>如下图所示</strong>：</p><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.2_1.png" alt=""></p><h3 id="6-6-3-Deep-RNNs"><a href="#6-6-3-Deep-RNNs" class="headerlink" title="6.6.3 Deep RNNs"></a>6.6.3 Deep RNNs</h3><p>Deep RNNs与Bidirectional RNNs相似，其也是又多层RNNs叠加，因此每一步的输入有了多层网络。该网络具有更强大的表达与学习能力，但是复杂性也随之提高，同时需要更多的训练数据。<strong>Deep RNNs的结构如下图所示</strong>：<br><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.3_1.png" alt=""></p><h3 id="6-6-4-Echo-State-Networks（ESNs）"><a href="#6-6-4-Echo-State-Networks（ESNs）" class="headerlink" title="6.6.4 Echo State Networks（ESNs）"></a>6.6.4 Echo State Networks（ESNs）</h3><p>ESNs(回声状态网络)虽然也是一种RNNs，但它与传统的RNNs相差较大。</p><p><strong>ESNs具有三个特点</strong>：</p><ol><li><p>它的核心结构为一个随机生成、且保持不变的储备池(Reservoir)。储备池是大规模随机生成稀疏连接(SD通常保持1%～5%，SD表示储备池中互相连接的神经元占总神经元个数N的比例)的循环结构；</p></li><li><p>从储备池到输出层的权值矩阵是唯一需要调整的部分；</p></li><li><p>简单的线性回归便能够完成网络训练；</p></li></ol><p>从结构上讲，ESNs是一种特殊类型的循环神经网络，其基本思想是：使用大规模随机连接的循环网络取代经典神经网络中的中间层，从而简化网络的训练过程。因此ESNs的关键是储备池。<br>网络中的参数包括：<br>（1）W - 储备池中节点间连接权值矩阵；<br>（2）Win - 输入层到储备池之间连接权值矩阵，表明储备池中的神经元之间是相互连接；<br>（3）Wback - 输出层到储备池之间的反馈连接权值矩阵，表明储备池会有输出层来的反馈；<br>（4）Wout - 输入层、储备池、输出层到输出层的连接权值矩阵，表明输出层不仅与储备池连接，还与输入层和自己连接。<br>Woutbias - 输出层的偏置项。<br>对于ESNs，关键是储备池的四个参数，如储备池内部连接权谱半径SR(SR=λmax=max{|W的特征指|}，只有SR &lt;1时，ESNs才能具有回声状态属性)、储备池规模N(即储备池中神经元的个数)、储备池输入单元尺度IS(IS为储备池的输入信号连接到储备池内部神经元之前需要相乘的一个尺度因子)、储备池稀疏程度SD(即为储备池中互相连接的神经元个数占储备池神经元总个数的比例)。对于IS，待处理任务的非线性越强，输入单元尺度越大。该原则本质就是通过输入单元尺度IS，将输入变换到神经元激活函数相应的范围(神经元激活函数的不同输入范围，其非线性程度不同)。<br><strong>ESNs的结构如下图所示</strong>：</p><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.4_1.png" alt=""><br><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.4_2.png" alt=""><br><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.4_3.png" alt=""></p><h3 id="6-6-5-Gated-Recurrent-Unit-Recurrent-Neural-Networks"><a href="#6-6-5-Gated-Recurrent-Unit-Recurrent-Neural-Networks" class="headerlink" title="6.6.5 Gated Recurrent Unit Recurrent Neural Networks"></a>6.6.5 Gated Recurrent Unit Recurrent Neural Networks</h3><p>GRUs是一般的RNNs的变型版本，其主要是从以下<strong>两个方面</strong>进行改进。</p><ol><li><p>序列中不同单词处（以语句为例）的数据对当前隐藏层状态的影响不同，越前面的影响越小，即每个之前状态对当前的影响进行了距离加权，距离越远，权值越小。</p></li><li><p>在产生误差error时，其可能是由之前某一个或者几个单词共同造成，所以应当对对应的单词weight进行更新。GRUs的结构如下图所示。GRUs首先根据当前输入单词向量word vector以及前一个隐藏层状态hidden state计算出update gate和reset gate。再根据reset gate、当前word vector以及前一个hidden state计算新的记忆单元内容(new memory content)。当reset gate为1的时候，new memory content忽略之前所有memory content，最终的memory是由之前的hidden state与new memory content一起决定。</p></li></ol><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.5_1.png" alt=""></p><h3 id="6-6-6-LSTM-Netwoorks"><a href="#6-6-6-LSTM-Netwoorks" class="headerlink" title="6.6.6 LSTM Netwoorks"></a>6.6.6 LSTM Netwoorks</h3><ol><li>LSTMs是当前一种非常流行的深度学习模型。为了解决RNNs存在的长时记忆问题，LSTMs利用了之前更多步的训练信息。</li><li>LSTMs与一般的RNNs结构本质上并没有太大区别，只是使用了不同函数控制隐藏层的状态。</li><li>在LSTMs中，基本结构被称为cell，可以把cell看作是黑盒用以保存当前输入之前Xt的隐藏层状态ht−1。</li><li>LSTMs有三种类型的门：遗忘门（forget gate）, 输入门（input gate）以及输出门（output gate）。遗忘门（forget gate）是用来决定 哪个cells的状态将被丢弃掉。输入门（input gate）决定哪些cells会被更新. 输出门（output gate）控制了结果输出. 因此当前输出依赖于cells状态以及门的过滤条件。实践证明，LSTMs可以有效地解决长序列依赖问题。<strong>LSTMs的网络结构如下图所示</strong>。</li></ol><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.6_1.png" alt=""></p><p>LSTMs与GRUs的区别如图所示：</p><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.6_2.png" alt=""></p><p>从上图可以看出，二者结构十分相似，<strong>不同在于</strong>：</p><ol><li><p>new memory都是根据之前state及input进行计算，但是GRUs中有一个reset gate控制之前state的进入量，而在LSTMs里没有类似gate；</p></li><li><p>产生新的state的方式不同，LSTMs有两个不同的gate，分别是forget gate (f gate)和input gate(i gate)，而GRUs只有一种update gate(z gate)；</p></li><li><p>LSTMs对新产生的state可以通过output gate(o gate)进行调节，而GRUs对输出无任何调节。</p></li></ol><h3 id="6-6-7-Bidirectional-LSTMs"><a href="#6-6-7-Bidirectional-LSTMs" class="headerlink" title="6.6.7 Bidirectional LSTMs"></a>6.6.7 Bidirectional LSTMs</h3><ol><li>与bidirectional RNNs 类似，bidirectional LSTMs有两层LSTMs。一层处理过去的训练信息，另一层处理将来的训练信息。</li><li>在bidirectional LSTMs中，通过前向LSTMs获得前向隐藏状态，后向LSTMs获得后向隐藏状态，当前隐藏状态是前向隐藏状态与后向隐藏状态的组合。</li></ol><h3 id="6-6-8-Stacked-LSTMs"><a href="#6-6-8-Stacked-LSTMs" class="headerlink" title="6.6.8 Stacked LSTMs"></a>6.6.8 Stacked LSTMs</h3><ol><li>与deep rnns 类似，stacked LSTMs 通过将多层LSTMs叠加起来得到一个更加复杂的模型。</li><li>不同于bidirectional LSTMs，stacked LSTMs只利用之前步骤的训练信息。 </li></ol><h3 id="6-6-9-Clockwork-RNNs-CW-RNNs"><a href="#6-6-9-Clockwork-RNNs-CW-RNNs" class="headerlink" title="6.6.9 Clockwork RNNs(CW-RNNs)"></a>6.6.9 Clockwork RNNs(CW-RNNs)</h3><p>CW-RNNs是较新的一种RNNs模型，该模型首次发表于2014年Beijing ICML。<br>CW-RNNs是RNNs的改良版本，其使用时钟频率来驱动。它将隐藏层分为几个块(组，Group/Module)，每一组按照自己规定的时钟频率对输入进行处理。为了降低RNNs的复杂度，CW-RNNs减少了参数数量，并且提高了网络性能，加速网络训练。CW-RNNs通过不同隐藏层模块在不同时钟频率下工作来解决长时依赖问题。将时钟时间进行离散化，不同的隐藏层组将在不同时刻进行工作。因此，所有的隐藏层组在每一步不会全部同时工作，这样便会加快网络的训练。并且，时钟周期小组的神经元不会连接到时钟周期大组的神经元，只允许周期大的神经元连接到周期小的(组与组之间的连接以及信息传递是有向的)。周期大的速度慢，周期小的速度快，因此是速度慢的神经元连速度快的神经元，反之则不成立。</p><p>CW-RNNs与SRNs网络结构类似，也包括输入层(Input)、隐藏层(Hidden)、输出层(Output)，它们之间存在前向连接，输入层到隐藏层连接，隐藏层到输出层连接。但是与SRN不同的是，隐藏层中的神经元会被划分为若干个组，设为$g$，每一组中的神经元个数相同，设为$k$，并为每一个组分配一个时钟周期$T_i\epsilon{T_1,T_2,…,T_g}$，每一组中的所有神经元都是全连接，但是组$j$到组$i$的循环连接则需要满足$T_j$大于$T_i$。如下图所示，将这些组按照时钟周期递增从左到右进行排序，即$T_1&lt;T_2&lt;…&lt;T_g$，那么连接便是从右到左。例如：隐藏层共有256个节点，分为四组，周期分别是[1,2,4,8]，那么每个隐藏层组256/4=64个节点，第一组隐藏层与隐藏层的连接矩阵为64$\times$64的矩阵，第二层的矩阵则为64$\times$128矩阵，第三组为64$\times$(3$\times$64)=64$\times$192矩阵，第四组为64$\times$(4$\times$64)=64$\times$256矩阵。这就解释了上一段中速度慢的组连接到速度快的组，反之则不成立。</p><p><strong>CW-RNNs的网络结构如下图所示</strong>：</p><p><img src="/2016/12/20/第六章_循环神经网络RNN/img/ch6/figure_6.6.7_1.png" alt=""></p><h3 id="6-6-10-CNN-LSTMs"><a href="#6-6-10-CNN-LSTMs" class="headerlink" title="6.6.10 CNN-LSTMs"></a>6.6.10 CNN-LSTMs</h3><ol><li>为了同时利用CNN以及LSTMs的优点，CNN-LSTMs被提出。在该模型中，CNN用于提取对象特征，LSTMs用于预测。CNN由于卷积特性，其能够快速而且准确地捕捉对象特征。LSTMs的优点在于能够捕捉数据间的长时依赖性。</li></ol><h3 id="6-7-常见疑问"><a href="#6-7-常见疑问" class="headerlink" title="6.7 常见疑问"></a>6.7 常见疑问</h3><ol><li>从学习RNN伊始，常常说RNN结构可以解决不定长的数据，不像CNN中一般输入数据是图片，是一般是在建网络结构开始把图片resize到固定宽高，而RNN能解决不定长，这里指的是，time_steps可以不固定，而每次time，input的维度这是固定的。比如，语音特征数据或时间序列数据，一个完整的数据，时间帧数上可以不固定，但每帧的数据维度是固定的。</li><li>time_steps的不固定，在构建计算图中，就相当于是构建是动态神经网络图，因为每个数据的时间维度是不固定的，这在编程过程中，Tensorflow其实是以静态图著称，但TensorFlow中提供了<strong>tf.nn.dynamic_rnn()</strong>，达到动态图机制，，但是还是建议大家用PyTorch去搭建RNN模型，因为Pytorch原生就是动态图著称，理解上更容易。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习基础" scheme="https://leesen998.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>机器学习数学基础问题</title>
    <link href="https://leesen998.github.io/2016/12/20/%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <id>https://leesen998.github.io/2016/12/20/第一章_数学基础/</id>
    <published>2016-12-20T11:48:29.000Z</published>
    <updated>2019-03-21T12:41:32.775Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="1-1-标量、向量、矩阵、张量之间的联系"><a href="#1-1-标量、向量、矩阵、张量之间的联系" class="headerlink" title="1.1 标量、向量、矩阵、张量之间的联系"></a>1.1 标量、向量、矩阵、张量之间的联系</h2><p><strong>标量（scalar)</strong><br>​一个标量表示一个单独的数，它不同于线性代数中研究的其他大部分对象（通常是多个数的数组）。我们用斜体表示标量。标量通常被赋予小写的变量名称。 </p><p><strong>向量（vector）</strong><br>​一个向量表示一组有序排列的数。通过次序中的索引，我们可以确定每个单独的数。通常我们赋予向量粗体的小写变量名称，比如xx。向量中的元素可以通过带脚标的斜体表示。向量$X$的第一个元素是$X_1$，第二个元素是$X_2$，以此类推。我们也会注明存储在向量中的元素的类型（实数、虚数等）。</p><p><strong>矩阵（matrix）</strong><br>​矩阵是具有相同特征和纬度的对象的集合，表现为一张二维数据表。其意义是一个对象表示为矩阵中的一行，一个特征表示为矩阵中的一列，每个特征都有数值型的取值。通常会赋予矩阵粗体的大写变量名称，比如$A$。</p><p><strong>张量（tensor）</strong><br>​在某些情况下，我们会讨论坐标超过两维的数组。一般地，一个数组中的元素分布在若干维坐标的规则网格中，我们将其称之为张量。使用 $A$ 来表示张量“A”。张量$A$中坐标为$(i,j,k)$的元素记作$A_{(i,j,k)}$。 </p><p><strong>四者之间关系</strong>  </p><blockquote><p>标量是0阶张量，向量是一阶张量。举例：<br>​标量就是知道棍子的长度，但是你不会知道棍子指向哪儿。<br>​向量就是不但知道棍子的长度，还知道棍子指向前面还是后面。<br>​张量就是不但知道棍子的长度，也知道棍子指向前面还是后面，还能知道这棍子又向上/下和左/右偏转了多少。</p></blockquote><h2 id="1-2-张量与矩阵的区别？"><a href="#1-2-张量与矩阵的区别？" class="headerlink" title="1.2 张量与矩阵的区别？"></a>1.2 张量与矩阵的区别？</h2><ul><li>从代数角度讲， 矩阵它是向量的推广。向量可以看成一维的“表格”（即分量按照顺序排成一排）， 矩阵是二维的“表格”（分量按照纵横位置排列）， 那么$n$阶张量就是所谓的$n$维的“表格”。 张量的严格定义是利用线性映射来描述。</li><li>从几何角度讲， 矩阵是一个真正的几何量，也就是说，它是一个不随参照系的坐标变换而变化的东西。向量也具有这种特性。</li><li>张量可以用3×3矩阵形式来表达。 </li><li>表示标量的数和表示矢量的三维数组也可分别看作1×1，1×3的矩阵。 </li></ul><h2 id="1-3-矩阵和向量相乘结果"><a href="#1-3-矩阵和向量相乘结果" class="headerlink" title="1.3 矩阵和向量相乘结果"></a>1.3 矩阵和向量相乘结果</h2><p>​    一个$m$行$n$列的矩阵和$n$行向量相乘，最后得到就是一个$m$行的向量。运算法则就是矩阵中的每一行数据看成一个行向量与该向量作点乘。 </p><h2 id="1-4-向量和矩阵的范数归纳"><a href="#1-4-向量和矩阵的范数归纳" class="headerlink" title="1.4 向量和矩阵的范数归纳"></a>1.4 向量和矩阵的范数归纳</h2><p><strong>向量的范数</strong><br>​    定义一个向量为：$\vec{a}=[-5, 6, 8, -10]$。任意一组向量设为$\vec{x}=(x_1,x_2,…,x_N)$。其不同范数求解如下：</p><ul><li>向量的1范数：向量的各个元素的绝对值之和，上述向量$\vec{a}$的1范数结果就是：29。</li></ul><p>$$<br>\Vert\vec{x}\Vert_1=\sum_{i=1}^N\vert{x_i}\vert<br>$$</p><ul><li>向量的2范数：向量的每个元素的平方和再开平方根，上述$\vec{a}$的2范数结果就是：15。</li></ul><p>$$<br>\Vert\vec{x}\Vert_2=\sqrt{\sum_{i=1}^N{\vert{x_i}\vert}^2}<br>$$</p><ul><li>向量的负无穷范数：向量的所有元素的绝对值中最小的：上述向量$\vec{a}$的负无穷范数结果就是：5。  </li></ul><p>$$<br>\Vert\vec{x}\Vert_{-\infty}=\min{|{x_i}|}<br>$$</p><ul><li>向量的正无穷范数：向量的所有元素的绝对值中最大的：上述向量$\vec{a}$的负无穷范数结果就是：10。 </li></ul><p>$$<br>\Vert\vec{x}\Vert_{+\infty}=\max{|{x_i}|}<br>$$</p><ul><li>向量的p范数：向量元素绝对值的p次方和的1/p次幂。</li></ul><p>$$<br>L_p=\Vert\vec{x}\Vert_p=\sqrt[p]{\sum_{i=1}^{N}|{x_i}|^p}<br>$$</p><p><strong>矩阵的范数</strong>  </p><p>​定义一个矩阵$A=[-1, 2, -3; 4, -6, 6]$。 任意矩阵定义为：$A_{m\times n}$，其元素为 $a_{ij}$。</p><p>矩阵的范数定义为</p><p>$$<br>\Vert{A}\Vert_p :=\sup_{x\neq 0}\frac{\Vert{Ax}\Vert_p}{\Vert{x}\Vert_p}<br>$$</p><p>​当向量取不同范数时, 相应得到了不同的矩阵范数。</p><ul><li><strong>矩阵的1范数（列范数）</strong>：矩阵的每一列上的元素绝对值先求和，再从中取个最大的,（列和最大），上述矩阵$A$的1范数先得到$[5,8,9]$，再取最大的最终结果就是：9。</li></ul><p>$$<br>\Vert A\Vert_1=\max_{1\le j\le n}\sum_{i=1}^m|{a_{ij}}|<br>$$</p><ul><li><strong>矩阵的2范数</strong>：矩阵$A^TA$的最大特征值开平方根，上述矩阵$A$的2范数得到的最终结果是：10.0623。 </li></ul><p>$$<br>\Vert A\Vert_2=\sqrt{\lambda_{max}(A^T A)}<br>$$</p><p>其中， $\lambda_{max}(A^T A)$ 为 $A^T A$ 的特征值绝对值的最大值。</p><ul><li><strong>矩阵的无穷范数（行范数）</strong>：矩阵的每一行上的元素绝对值先求和，再从中取个最大的，（行和最大），上述矩阵$A$的1范数先得到$[6；16]$，再取最大的最终结果就是：16。 </li></ul><p>$$<br>\Vert A\Vert_{\infty}=\max_{1\le i \le n}\sum_{j=1}^n |{a_{ij}}|<br>$$</p><ul><li><p><strong>矩阵的核范数</strong>：矩阵的奇异值（将矩阵svd分解）之和，这个范数可以用来低秩表示（因为最小化核范数，相当于最小化矩阵的秩——低秩），上述矩阵A最终结果就是：10.9287。  </p></li><li><p><strong>矩阵的L0范数</strong>：矩阵的非0元素的个数，通常用它来表示稀疏，L0范数越小0元素越多，也就越稀疏，上述矩阵$A$最终结果就是：6。</p></li><li><strong>矩阵的L1范数</strong>：矩阵中的每个元素绝对值之和，它是L0范数的最优凸近似，因此它也可以表示稀疏，上述矩阵$A$最终结果就是：22。  </li><li><strong>矩阵的F范数</strong>：矩阵的各个元素平方之和再开平方根，它通常也叫做矩阵的L2范数，它的优点在它是一个凸函数，可以求导求解，易于计算，上述矩阵A最终结果就是：10.0995。  </li></ul><p>$$<br>\Vert A\Vert_F=\sqrt{(\sum_{i=1}^m\sum_{j=1}^n{| a_{ij}|}^2)}<br>$$</p><ul><li><strong>矩阵的L21范数</strong>：矩阵先以每一列为单位，求每一列的F范数（也可认为是向量的2范数），然后再将得到的结果求L1范数（也可认为是向量的1范数），很容易看出它是介于L1和L2之间的一种范数，上述矩阵$A$最终结果就是：17.1559。 </li><li><strong>矩阵的 p范数</strong> </li></ul><p>$$<br>\Vert A\Vert_p=\sqrt[p]{(\sum_{i=1}^m\sum_{j=1}^n{| a_{ij}|}^p)}<br>$$</p><h2 id="1-5-如何判断一个矩阵为正定？"><a href="#1-5-如何判断一个矩阵为正定？" class="headerlink" title="1.5 如何判断一个矩阵为正定？"></a>1.5 如何判断一个矩阵为正定？</h2><ul><li>顺序主子式全大于0；  </li><li>存在可逆矩阵$C$使$C^TC$等于该矩阵；</li><li>正惯性指数等于$n$；</li><li>合同于单位矩阵$E$（即：规范形为$E$）</li><li>标准形中主对角元素全为正；</li><li>特征值全为正；</li><li>是某基的度量矩阵。</li></ul><h2 id="1-6-导数偏导计算"><a href="#1-6-导数偏导计算" class="headerlink" title="1.6 导数偏导计算"></a>1.6 导数偏导计算</h2><p><strong>导数定义</strong>:</p><p>​导数代表了在自变量变化趋于无穷小的时候，函数值的变化与自变量的变化的比值。几何意义是这个点的切线。物理意义是该时刻的（瞬时）变化率。<br>​</p><p><em>注意</em>：在一元函数中，只有一个自变量变动，也就是说只存在一个方向的变化率，这也就是为什么一元函数没有偏导数的原因。在物理学中有平均速度和瞬时速度之说。平均速度有</p><p>$$<br>v=\frac{s}{t}<br>$$</p><p>​其中$v$表示平均速度，$s$表示路程，$t$表示时间。这个公式可以改写为</p><p>$$<br>\bar{v}=\frac{\Delta s}{\Delta t}=\frac{s(t_0+\Delta t)-s(t_0)}{\Delta t}<br>$$</p><p>​其中$\Delta s$表示两点之间的距离，而$\Delta t$表示走过这段距离需要花费的时间。当$\Delta t$趋向于0（$\Delta t \to 0$）时，也就是时间变得很短时，平均速度也就变成了在$t_0$时刻的瞬时速度，表示成如下形式：</p><p>$$<br>v(t_0)=\lim_{\Delta t \to 0}{\bar{v}}=\lim_{\Delta t \to 0}{\frac{\Delta s}{\Delta t}}=\lim_{\Delta t \to 0}{\frac{s(t_0+\Delta t)-s(t_0)}{\Delta t}}<br>$$</p><p>​实际上，上式表示的是路程$s$关于时间$t$的函数在$t=t_0$处的导数。一般的，这样定义导数：如果平均变化率的极限存在，即有</p><p>$$<br>\lim_{\Delta x \to 0}{\frac{\Delta y}{\Delta x}}=\lim_{\Delta x \to 0}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$</p><p>​则称此极限为函数 $y=f(x)$ 在点 $x_0$ 处的导数。记作 $f’(x_0)$ 或 $y’\vert_{x=x_0}$ 或 $\frac{dy}{dx}\vert_{x=x_0}$ 或 $\frac{df(x)}{dx}\vert_{x=x_0}$。</p><p>​通俗地说，导数就是曲线在某一点切线的斜率。</p><p><strong>偏导数</strong>:</p><p>​既然谈到偏导数，那就至少涉及到两个自变量。以两个自变量为例，z=f（x,y），从导数到偏导数，也就是从曲线来到了曲面。曲线上的一点，其切线只有一条。但是曲面上的一点，切线有无数条。而偏导数就是指多元函数沿着坐标轴的变化率。<br>​</p><p><em>注意</em>：直观地说，偏导数也就是函数在某一点上沿坐标轴正方向的的变化率。</p><p>​设函数$z=f(x,y)$在点$(x_0,y_0)$的领域内有定义，当$y=y_0$时，$z$可以看作关于$x$的一元函数$f(x,y_0)$，若该一元函数在$x=x_0$处可导，即有</p><p>$$<br>\lim_{\Delta x \to 0}{\frac{f(x_0+\Delta x,y_0)-f(x_0,y_0)}{\Delta x}}=A<br>$$</p><p>​函数的极限$A$存在。那么称$A$为函数$z=f(x,y)$在点$(x_0,y_0)$处关于自变量$x$的偏导数，记作$f_x(x_0,y_0)$或$\frac{\partial z}{\partial x}\vert_{y=y_0}^{x=x_0}$或$\frac{\partial f}{\partial x}\vert_{y=y_0}^{x=x_0}$或$z_x\vert_{y=y_0}^{x=x_0}$。</p><p>​偏导数在求解时可以将另外一个变量看做常数，利用普通的求导方式求解，比如$z=3x^2+xy$关于$x$的偏导数就为$z_x=6x+y$，这个时候$y$相当于$x$的系数。</p><p>​某点$(x_0,y_0)$处的偏导数的几何意义为曲面$z=f(x,y)$与面$x=x_0$或面$y=y_0$交线在$y=y_0$或$x=x_0$处切线的斜率。  </p><h2 id="1-7-导数和偏导数有什么区别？"><a href="#1-7-导数和偏导数有什么区别？" class="headerlink" title="1.7 导数和偏导数有什么区别？"></a>1.7 导数和偏导数有什么区别？</h2><p>​导数和偏导没有本质区别，如果极限存在，都是当自变量的变化量趋于0时，函数值的变化量与自变量变化量比值的极限。  </p><blockquote><ul><li>一元函数，一个$y$对应一个$x$，导数只有一个。  </li><li>二元函数，一个$z$对应一个$x$和一个$y$，有两个导数：一个是$z$对$x$的导数，一个是$z$对$y$的导数，称之为偏导。  </li><li>求偏导时要注意，对一个变量求导，则视另一个变量为常数，只对改变量求导，从而将偏导的求解转化成了一元函数的求导。</li></ul></blockquote><h2 id="1-8-特征值分解与特征向量"><a href="#1-8-特征值分解与特征向量" class="headerlink" title="1.8 特征值分解与特征向量"></a>1.8 特征值分解与特征向量</h2><ul><li><p>特征值分解可以得到特征值与特征向量；</p></li><li><p>特征值表示的是这个特征到底有多重要，而特征向量表示这个特征是什么。  </p><p>如果说一个向量$\vec{v}$是方阵$A$的特征向量，将一定可以表示成下面的形式：</p></li></ul><p>$$<br>A\nu = \lambda \nu<br>$$</p><p>$\lambda$为特征向量$\vec{v}$对应的特征值。特征值分解是将一个矩阵分解为如下形式：<br>​<br>$$<br>A=Q\sum Q^{-1}<br>$$</p><p>其中，$Q$是这个矩阵$A$的特征向量组成的矩阵，$\sum$是一个对角矩阵，每一个对角线元素就是一个特征值，里面的特征值是由大到小排列的，这些特征值所对应的特征向量就是描述这个矩阵变化方向（从主要的变化到次要的变化排列）。也就是说矩阵$A$的信息可以由其特征值和特征向量表示。</p><h2 id="1-9-奇异值与特征值有什么关系"><a href="#1-9-奇异值与特征值有什么关系" class="headerlink" title="1.9 奇异值与特征值有什么关系?"></a>1.9 奇异值与特征值有什么关系?</h2><p>​那么奇异值和特征值是怎么对应起来的呢？我们将一个矩阵$A$的转置乘以$A$，并对$AA^T$求特征值，则有下面的形式：</p><p>$$<br>(A^TA)V = \lambda V<br>$$</p><p>这里$V$就是上面的右奇异向量，另外还有：</p><p>$$<br>\sigma_i = \sqrt{\lambda_i}, u_i=\frac{1}{\sigma_i}A\mu_i<br>$$</p><p>这里的$\sigma$就是奇异值，$u$就是上面说的左奇异向量。【证明那个哥们也没给】<br>​奇异值$\sigma$跟特征值类似，在矩阵$\sum$中也是从大到小排列，而且$\sigma$的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前$r$（$r$远小于$m、n$）个的奇异值来近似描述矩阵，即部分奇异值分解：</p><p>$$<br>A_{m\times n}\approx U_{m \times r}\sum_{r\times r}V_{r \times n}^T<br>$$</p><p>右边的三个矩阵相乘的结果将会是一个接近于$A$的矩阵，在这儿，$r$越接近于$n$，则相乘的结果越接近于$A$。</p><h2 id="1-10-机器学习为什么要使用概率？"><a href="#1-10-机器学习为什么要使用概率？" class="headerlink" title="1.10 机器学习为什么要使用概率？"></a>1.10 机器学习为什么要使用概率？</h2><p>​事件的概率是衡量该事件发生的可能性的量度。虽然在一次随机试验中某个事件的发生是带有偶然性的，但那些可在相同条件下大量重复的随机试验却往往呈现出明显的数量规律。<br>​机器学习除了处理不确定量，也需处理随机量。不确定性和随机性可能来自多个方面，使用概率论来量化不确定性。<br>​概率论在机器学习中扮演着一个核心角色，因为机器学习算法的设计通常依赖于对数据的概率假设。  </p><blockquote><p>​    例如在机器学习（Andrew Ng）的课中，会有一个朴素贝叶斯假设就是条件独立的一个例子。该学习算法对内容做出假设，用来分辨电子邮件是否为垃圾邮件。假设无论邮件是否为垃圾邮件，单词x出现在邮件中的概率条件独立于单词y。很明显这个假设不是不失一般性的，因为某些单词几乎总是同时出现。然而，最终结果是，这个简单的假设对结果的影响并不大，且无论如何都可以让我们快速判别垃圾邮件。</p></blockquote><h2 id="1-11-变量与随机变量有什么区别？"><a href="#1-11-变量与随机变量有什么区别？" class="headerlink" title="1.11 变量与随机变量有什么区别？"></a>1.11 变量与随机变量有什么区别？</h2><p><strong>随机变量</strong>（random variable）</p><p>​表示随机现象（在一定条件下，并不总是出现相同结果的现象称为随机现象）中各种结果的实值函数（一切可能的样本点）。例如某一时间内公共汽车站等车乘客人数，电话交换台在一定时间内收到的呼叫次数等，都是随机变量的实例。<br>​随机变量与模糊变量的不确定性的本质差别在于，后者的测定结果仍具有不确定性，即模糊性。</p><p><strong>变量与随机变量的区别：</strong><br>​当变量的取值的概率不是1时,变量就变成了随机变量；当随机变量取值的概率为1时,随机变量就变成了变量。</p><blockquote><p>比如：<br>​    当变量$x$值为100的概率为1的话,那么$x=100$就是确定了的,不会再有变化,除非有进一步运算.<br>​    当变量$x$的值为100的概率不为1,比如为50的概率是0.5,为100的概率是0.5,那么这个变量就是会随不同条件而变化的,是随机变量,取到50或者100的概率都是0.5,即50%。  </p></blockquote><h2 id="1-12-常见概率分布"><a href="#1-12-常见概率分布" class="headerlink" title="1.12 常见概率分布"></a>1.12 常见概率分布</h2><p>(<a href="https://wenku.baidu.com/view/6418b0206d85ec3a87c24028915f804d2b168707" target="_blank" rel="noopener">https://wenku.baidu.com/view/6418b0206d85ec3a87c24028915f804d2b168707</a>)<br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_1.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_2.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_3.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_4.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_5.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_6.png" alt="常见概率分布"><br><img src="/2016/12/20/第一章_数学基础/img/ch1/prob_distribution_7.png" alt="常见概率分布">  </p><h2 id="1-13-举例理解条件概率"><a href="#1-13-举例理解条件概率" class="headerlink" title="1.13 举例理解条件概率"></a>1.13 举例理解条件概率</h2><p>​条件概率公式如下：</p><p>$$<br>P(A/B) = P(A\cap B) / P(B)<br>$$</p><p>​说明：在同一个样本空间$\Omega$中的事件或者子集$A$与$B$，如果随机从$\Omega$中选出的一个元素属于$B$，那么下一个随机选择的元素属于$A$ 的概率就定义为在$B$的前提下$A$的条件概率。<br><img src="/2016/12/20/第一章_数学基础/img/ch1/conditional_probability.jpg" alt="条件概率"></p><p>​根据文氏图，可以很清楚地看到在事件B发生的情况下，事件A发生的概率就是$P(A\bigcap B)$除以$P(B)$。<br>​举例：一对夫妻有两个小孩，已知其中一个是女孩，则另一个是女孩子的概率是多少？（面试、笔试都碰到过）<br>​<strong>穷举法</strong>：已知其中一个是女孩，那么样本空间为男女，女女，女男，则另外一个仍然是女生的概率就是1/3。<br>​<strong>条件概率法</strong>：$P(女|女)=P(女女)/P(女)$,夫妻有两个小孩，那么它的样本空间为女女，男女，女男，男男，则$P(女女)$为1/4，$P（女）= 1-P(男男)=3/4$,所以最后$1/3$。<br>这里大家可能会误解，男女和女男是同一种情况，但实际上类似姐弟和兄妹是不同情况。 </p><h2 id="1-14-联合概率与边缘概率联系区别？"><a href="#1-14-联合概率与边缘概率联系区别？" class="headerlink" title="1.14 联合概率与边缘概率联系区别？"></a>1.14 联合概率与边缘概率联系区别？</h2><p><strong>区别：</strong><br>​联合概率：联合概率指类似于$P(X=a,Y=b)$这样，包含多个条件，且所有条件同时成立的概率。联合概率是指在多元的概率分布中多个随机变量分别满足各自条件的概率。<br>​边缘概率：边缘概率是某个事件发生的概率，而与其它事件无关。边缘概率指类似于$P(X=a)$，$P(Y=b)$这样，仅与单个随机变量有关的概率。</p><p><strong>联系：</strong><br>​联合分布可求边缘分布，但若只知道边缘分布，无法求得联合分布。  </p><h2 id="1-15-条件概率的链式法则"><a href="#1-15-条件概率的链式法则" class="headerlink" title="1.15 条件概率的链式法则"></a>1.15 条件概率的链式法则</h2><p>​由条件概率的定义，可直接得出下面的乘法公式：<br>​乘法公式 设$A, B$是两个事件，并且$P(A) &gt; 0$, 则有 </p><p>$$<br>P(AB) = P(B|A)P(A)<br>$$</p><p>​推广 </p><p>$$<br>P(ABC)=P(C|AB)P(B|A)P(A)<br>$$</p><p>​一般地，用归纳法可证：若$P(A_1A_2…A_n)&gt;0$，则有</p><p>$$<br>P(A_1A_2…A_n)=P(A_n|A_1A_2…A_{n-1})P(A_{n-1}|A_1A_2…A_{n-2})…P(A_2|A_1)P(A_1)<br>=P(A_1)\prod_{i=2}^{n}P(A_i|A_1A_2…A_{i-1})<br>$$</p><p>​任何多维随机变量联合概率分布，都可以分解成只有一个变量的条件概率相乘形式。 </p><h2 id="1-16-独立性和条件独立性"><a href="#1-16-独立性和条件独立性" class="headerlink" title="1.16 独立性和条件独立性"></a>1.16 独立性和条件独立性</h2><p><strong>独立性</strong><br>​两个随机变量$x$和$y$，概率分布表示成两个因子乘积形式，一个因子只包含$x$，另一个因子只包含$y$，两个随机变量相互独立(independent)。<br>​条件有时为不独立的事件之间带来独立，有时也会把本来独立的事件，因为此条件的存在，而失去独立性。<br>​举例：$P(XY)=P(X)P(Y)$, 事件$X$和事件$Y$独立。此时给定$Z$，</p><p>$$<br>P(X,Y|Z) \not = P(X|Z)P(Y|Z)<br>$$</p><p>​事件独立时，联合概率等于概率的乘积。这是一个非常好的数学性质，然而不幸的是，无条件的独立是十分稀少的，因为大部分情况下，事件之间都是互相影响的。 </p><p><strong>条件独立性</strong><br>​给定$Z$的情况下,$X$和$Y$条件独立，当且仅当</p><p>$$<br>X\bot Y|Z \iff P(X,Y|Z) = P(X|Z)P(Y|Z)<br>$$</p><p>​$X$和$Y$的关系依赖于$Z$，而不是直接产生。  </p><blockquote><p><strong>举例</strong>定义如下事件：<br>$X$：明天下雨；<br>$Y$：今天的地面是湿的；<br>$Z$：今天是否下雨；<br>$Z$事件的成立，对$X$和$Y$均有影响，然而，在$Z$事件成立的前提下，今天的地面情况对明天是否下雨没有影响。 </p></blockquote><h2 id="1-17-期望、方差、协方差、相关系数总结"><a href="#1-17-期望、方差、协方差、相关系数总结" class="headerlink" title="1.17 期望、方差、协方差、相关系数总结"></a>1.17 期望、方差、协方差、相关系数总结</h2><p><strong>期望</strong><br>​在概率论和统计学中，数学期望（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和。它反映随机变量平均取值的大小。</p><ul><li>线性运算： $E(ax+by+c) = aE(x)+bE(y)+c$  </li><li>​推广形式： $E(\sum_{k=1}^{n}{a_kx_k+c}) = \sum_{k=1}^{n}{a_kE(x_k)+c}$ </li><li>函数期望：设$f(x)$为$x$的函数，则$f(x)$的期望为<ul><li>离散函数： $E(f(x))=\sum_{k=1}^{n}{f(x_k)P(x_k)}$</li><li>连续函数： $E(f(x))=\int_{-\infty}^{+\infty}{f(x)p(x)dx}$</li></ul></li></ul><blockquote><p>注意：</p><ul><li>函数的期望不等于期望的函数，即$E(f(x))=f(E(x))$  </li><li>一般情况下，乘积的期望不等于期望的乘积。  </li><li>如果$X$和$Y$相互独立，则$E(xy)=E(x)E(y)​$。  </li></ul></blockquote><p><strong>方差</strong>  </p><p>​概率论中方差用来度量随机变量和其数学期望（即均值）之间的偏离程度。方差是一种特殊的期望。定义为：</p><p>$$<br>Var(x) = E((x-E(x))^2)<br>$$</p><blockquote><p>方差性质：  </p><p>1）$Var(x) = E(x^2) -E(x)^2$<br>2）常数的方差为0;<br>3）方差不满足线性性质;<br>4）如果$X$和$Y$相互独立, $Var(ax+by)=a^2Var(x)+b^2Var(y)$   </p></blockquote><p><strong>协方差</strong><br>​协方差是衡量两个变量线性相关性强度及变量尺度。  两个随机变量的协方差定义为：</p><p>$$<br>Cov(x,y)=E((x-E(x))(y-E(y)))<br>$$</p><p>​方差是一种特殊的协方差。当$X=Y$时，$Cov(x,y)=Var(x)=Var(y)$。</p><blockquote><p>协方差性质：  </p><p>1）独立变量的协方差为0。<br>2）协方差计算公式：</p></blockquote><p>$$<br>Cov(\sum_{i=1}^{m}{a_ix_i}, \sum_{j=1}^{m}{b_jy_j}) = \sum_{i=1}^{m} \sum_{j=1}^{m}{a_ib_jCov(x_iy_i)}<br>$$</p><blockquote><p>3）特殊情况：</p></blockquote><p>$$<br>Cov(a+bx, c+dy) = bdCov(x, y)<br>$$</p><p><strong>相关系数</strong><br>​相关系数是研究变量之间线性相关程度的量。两个随机变量的相关系数定义为：</p><p>$$<br>Corr(x,y) = \frac{Cov(x,y)}{\sqrt{Var(x)Var(y)}}<br>$$</p><blockquote><p>相关系数的性质：<br>1）有界性。相关系数的取值范围是 ，可以看成无量纲的协方差。<br>2）值越接近1，说明两个变量正相关性（线性）越强。越接近-1，说明负相关性越强，当为0时，表示两个变量没有相关性。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dpvywdzxv/image/upload/v1547297948/samples/java%20files/photo-1544728344-7efa025e5603.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://leesen998.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基础" scheme="https://leesen998.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第九讲 背包问题问法的变化</title>
    <link href="https://leesen998.github.io/2016/12/19/%E7%AC%AC%E4%B9%9D%E8%AE%B2%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E9%97%AE%E6%B3%95%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>https://leesen998.github.io/2016/12/19/第九讲 背包问题问法的变化/</id>
    <published>2016-12-19T11:48:29.000Z</published>
    <updated>2019-03-15T10:00:47.062Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g2/M00/0B/0F/ChMlWlyAyIiIQH8pABv6qMmlUWEAAIp0AAv7LcAG_rA821.jpg" alt="" style="width:100%"></p><p>第九讲 背包问题问法的变化</p><a id="more"></a><p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p><p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p><p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p><p>下面说一些变化更大的问法。</p><h3 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h3><p>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p><p>还是以01背包为例，方程为f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}。再用一个数组g[i][v]，设g[i][v]=0表示推出f[i][v]的值时是采用了方程的前一项（也即f[i][v]=f[i-1][v]），g[i][v]表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为f[N][V]）：</p><pre><code>i=Nv=Vwhile(i&gt;0)    if(g[i][v]==0)        print &quot;未选第i项物品&quot;    else if(g[i][v]==1)        print &quot;选了第i项物品&quot;        v=v-c[i]</code></pre><p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的g[i][v]==0改成f[i][v]==f[i-1][v]，g[i][v]==1改成f[i][v]==f[i-1][v-c[i]]+w[i]也可。</p><h3 id="输出字典序最小的最优方案"><a href="#输出字典序最小的最优方案" class="headerlink" title="输出字典序最小的最优方案"></a>输出字典序最小的最优方案</h3><p>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p><p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p><p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果f[i][v]==f[i-1][i-v]及f[i][v]==f[i-1][f-c[i]]+w[i]同时成立，应该按照后者（即选择了物品i）来输出方案。</p><h3 id="求方案总数"><a href="#求方案总数" class="headerlink" title="求方案总数"></a>求方案总数</h3><p>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p><p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是完全背包中的物品，转移方程即为</p><pre><code>f[i][v]=sum{f[i-1][v],f[i][v-c[i]]}</code></pre><p>初始条件f[0][0]=1。</p><p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p><h3 id="最优方案的总数"><a href="#最优方案的总数" class="headerlink" title="最优方案的总数"></a>最优方案的总数</h3><p>这里的最优方案是指物品总价值最大的方案。以01背包为例。</p><p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p><pre><code>for i=1..N   for v=0..V        f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}        g[i][v]=0        if(f[i][v]==f[i-1][v])            inc(g[i][v],g[i-1][v])        if(f[i][v]==f[i-1][v-c[i]]+w[i])            inc(g[i][v],g[i-1][v-c[i]])</code></pre><p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p><h3 id="求次优解、第K优解"><a href="#求次优解、第K优解" class="headerlink" title="求次优解、第K优解"></a>求次优解、第K优解</h3><p>对于求次优解、第K优解类的问题，如果相应的最优解问题能写出状态转移方程、用动态规划解决，那么求次优解往往可以相同的复杂度解决，第K优解则比求最优解的复杂度上多一个系数K。</p><p>其基本思想是将每个状态都表示成有序队列，将状态转移方程中的max/min转化成有序队列的合并。这里仍然以01背包为例讲解一下。</p><p>首先看01背包求最优解的状态转移方程：f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}。如果要求第K优解，那么状态f[i][v]就应该是一个大小为K的数组f[i][v][1..K]。其中f[i][v][k]表示前i个物品、背包大小为v时，第k优解的值。“f[i][v]是一个大小为K的数组”这一句，熟悉C语言的同学可能比较好理解，或者也可以简单地理解为在原来的方程中加了一维。显然f[i][v][1..K]这K个数是由大到小排列的，所以我们把它认为是一个有序队列。</p><p>然后原方程就可以解释为：f[i][v]这个有序队列是由f[i-1][v]和f[i-1][v-c[i]]+w[i]这两个有序队列合并得到的。有序队列f[i-1][v]即f[i-1][v][1..K]，f[i-1][v-c[i]]+w[i]则理解为在f[i-1][v-c[i]][1..K]的每个数上加上w[i]后得到的有序队列。合并这两个有序队列并将结果的前K项储存到f[i][v][1..K]中的复杂度是O(K)。最后的答案是f[N][V][K]。总的复杂度是O(VNK)。</p><p>为什么这个方法正确呢？实际上，一个正确的状态转移方程的求解过程遍历了所有可用的策略，也就覆盖了问题的所有方案。只不过由于是求最优解，所以其它在任何一个策略上达不到最优的方案都被忽略了。如果把每个状态表示成一个大小为K的数组，并在这个数组中有序的保存该状态可取到的前K个最优值。那么，对于任两个状态的max运算等价于两个由大到小的有序队列的合并。</p><p>另外还要注意题目对于“第K优解”的定义，将策略不同但权值相同的两个方案是看作同一个解还是不同的解。如果是前者，则维护有序队列时要保证队列里的数没有重复的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p><p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://desk-fd.zol-img.com.cn/t_s1920x1080c5/g2/M00/0B/0F/ChMlWlyAyIiIQH8pABv6qMmlUWEAAIp0AAv7LcAG_rA821.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;第九讲 背包问题问法的变化&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://leesen998.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法:背包问题" scheme="https://leesen998.github.io/tags/%E7%AE%97%E6%B3%95-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
